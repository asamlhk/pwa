String.prototype.repeat = function(num) {
   return new Array(num + 1).join(this);
}

String.prototype.equalsIgnoreCase = function(s) {
   return (this.toLowerCase() == s.toLowerCase());
}

String.prototype.date = function() {
   // date string format in yyyyMMddHHmmss
   var year = parseInt(this.substring(0, 4));
   var mth = parseInt(this.substring(4, 6));
   var date = parseInt(this.substring(6, 8));
   var hour = parseInt(this.substring(8, 10));
   var minutes = parseInt(this.substring(10, 12));
   var seconds = parseInt(this.substring(12, 14));

   //return new Date(year, mth - 1, date, hour, minutes, seconds);
   return Utils.createDate(year, mth, date, hour, minutes, seconds);
}

Date.prototype.formatString = function() {
   var yyyy = "" + this.getFullYear();
   var MM = "" + (this.getMonth() + 1);
   var dd = "" + this.getDate();
   var HH = "" + this.getHours();
   var mm = "" + this.getMinutes();
   var ss = "" + this.getSeconds();

   var MM2 = Utils.right("0" + MM, 2);
   var dd2 = Utils.right("0" + dd, 2);
   var HH2 = Utils.right("0" + HH, 2);
   var mm2 = Utils.right("0" + mm, 2);
   var ss2 = Utils.right("0" + ss, 2);

   return yyyy + MM2 + dd2 + HH2 + mm2 + ss2;
}

// var sleep = function(ms) {
//    return new Promise(resolve => setTimeout(resolve, ms));
// }

/* common rounding methods */
var _R = function(v, d) {
    //return Number(Number(v).toFixed(d));
    //return Number( Number( Math.round( v * Math.pow(10, d) ) / Math.pow(10, d) ).toFixed(d) );
    //return Math.round(parseFloat((v * Math.pow(10, d)).toFixed(11))) / Math.pow(10, d);
    if (d < 0) {
        return _R(v / Math.pow(10, Math.abs(d)), 0) * Math.pow(10, Math.abs(d));
    }

    // var debug = false;
    // if (debug) console.log(v);
    var vd = Number( Math.pow(10, d + 1) );
    var ve = Number( Math.pow(10, d) );
    // if (debug) console.log("vd = " + vd);
    // if (debug) console.log("ve = " + ve);

    var vs = "" + v;
    var di = vs.indexOf(".");
    if (di < 0) {
      vs = vs + ".0000000000000000000000000000000";
    } else {
      vs = vs + "0000000000000000000000000000000";
    }
    di = vs.indexOf(".");
    var vvs = vs.substring(0, di + d + 2);
    var ovs = vvs.substring(0, vvs.length-1);
    var fvs = ovs + "0";
    var lvs = vvs.substring(vvs.length-1, vvs.length);
    // if (debug) console.log("vs = " + vs);
    // if (debug) console.log("vvs = " + vvs);
    // if (debug) console.log("ovs = " + ovs);
    // if (debug) console.log("fvs = " + fvs);
    // if (debug) console.log("lvs = " + lvs);

    // Fix issue rounding for negative number
    var isNegative = (v < 0);
    if (isNegative){
        ovs = ovs.substring(1, ovs.length);
    }
    //

    var vz = Number( ovs );
    if (lvs >= "5" && lvs <= "9") {
      var a = ['0','1','2','3','4','5','6','7','8','9'];
      var svz = "";
      var roundup = true;
      var i;
      for(i=ovs.length-1; i>=0; i--) {
        var di = a.indexOf(ovs[i]);
        if (ovs[i] == '.') {
          svz = ovs[i] + svz;
        } else {
           if (roundup) {
            if (di + 1 >= a.length) {
              roundup = true;
              svz = a[0] + svz;
            } else {
              roundup = false;
              svz = a[di + 1] + svz;
              break;
            }
          }
        }
      }
      if (roundup) svz = '1' + svz;
      // if (debug) console.log("svz = " + svz);
      // if (debug) console.log("i = " + i);
      if (i > 0) svz = ovs.substring(0, i) + svz;
      // if (debug) console.log("svz (final) = " + svz);
      vz = Number(svz);
    }

    // Fix issue rounding for negative number
    if (isNegative){
      vz = -vz;
    }
    //

    return vz;
}

var _R1 = function(v) {
    return _R(v, 1);
}

var _R2 = function(v) {
    return _R(v, 2);
}

var _R3 = function(v) {
    return _R(v, 3);
}

var _R4 = function(v) {
    return _R(v, 4);
}

var _R5 = function(v) {
    return _R(v, 5);
}

var _R6 = function(v) {
    return _R(v, 6);
}

var _R7 = function(v) {
    return _R(v, 7);
}

var _R8 = function(v) {
    return _R(v, 8);
}

var _R9 = function(v) {
    return _R(v, 9);
}

var _R10 = function(v) {
    return _R(v, 10);
}

var _R11 = function(v) {
    return _R(v, 11);
}

var _R12 = function(v) {
    return _R(v, 12);
}

var _R13 = function(v) {
    return _R(v, 13);
}

var _R14 = function(v) {
    return _R(v, 14);
}

var _R15 = function(v) {
    return _R(v, 15);
}

var _R16 = function(v) {
    return _R(v, 16);
}

var _P = function (wp, obj) {
    _D(wp, obj, "*****");
}

var _D = function (wp, obj, px) {
    // Note: cache should not be re-used by repeated calls to JSON.stringify.
    var pxp = "";
    if (px) {
        pxp = px + " ";
    }
    try {
        var result = Utils.stringify(obj);
        /*
        var cache = [];
        var result = JSON.stringify(obj, function(key, value) {
            if (typeof value === 'object' && value !== null) {
                if (cache.indexOf(value) !== -1) {
                    // Circular reference found, discard key
                    return;
                }
                // Store value in our collection
                cache.push(value);
            }
            if (_isF(value)) {
                return value.toString();
            } else {
                return value;
            }
        });
        cache = null; // Enable garbage collection
        */
        if (Utils.isNothing(px) && Utils.isNothing(wp) && Utils.isNothing(obj)) {
            console.log("");
        } else
        if (px=="" && wp=="" && obj=="") {
            console.log("");
        } else
        if (px=="" && wp=="") {
            console.log(obj);
        } else {
            console.log(pxp + wp + ": " + result);
        }
    } catch (e) {
        console.log(pxp + "Error in reading " + wp + ": " + e );
    }
}

var _DB = function(fn, msg, prefix) {
    var show = true;
    var proposal = engine.context().proposal;
    if (proposal != null) {
        show = proposal.enableDebug;
    }
    if (show) {
        _D(fn, msg, prefix);
    }
}

var _DBR = function(fn, msg, prefix, months) {
    var show = true;
    var fromYear = 0;
    var toYear = 10;
    var annualOnly = false;
    var proposal = engine.context().proposal;
    var year = Math.floor(months / 12);
    var month = (months % 12);
    if (proposal != null) {
        show = proposal.enableDebug;
        if (proposal.startDebugYear) fromYear = proposal.startDebugYear;
        if (proposal.stopDebugYear) toYear = proposal.stopDebugYear;
        if (proposal.displayEOYOnly) annualOnly = proposal.displayEOYOnly;
    }
    if (show && year >= fromYear && year <= toYear) {
        if (!annualOnly || (annualOnly && month == 11)) {
            _D(fn, msg, prefix);
        }
    }
}

var _isF = function(functionToCheck) {
    var getType = {};
    return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
}

var _SS = function(obj, level) {
    var obj2;
    if (obj != undefined) {
       var objt = obj;
       if (!(typeof objt == 'object' || typeof objt == 'array')) {
          var objn = typeof objt;
          objt = {};
          objt[objn] = obj;
       }
       var sobj = Utils.stringify(objt);
       obj2 = JSON.parse(sobj);
    } else {
       obj2 = "undefined";
    }

    var _structure = _S(obj2, level);
    var maxKeyLen = 0;
    for(idx in _structure) {
        var rec = _structure[idx];
        maxKeyLen = Math.max(maxKeyLen, rec.key.length);
    }

    if (maxKeyLen ==0) return;
    maxKeyLen = Math.max(maxKeyLen, 3);

    var border = '+' + '-'.repeat(maxKeyLen + 2) + '+' + '-'.repeat(37) + '+'
    console.log(border);
    __SS_line('key', 'value', maxKeyLen, 35);
    console.log(border);
    for(idx in _structure) {
        var rec = _structure[idx];
        __SS_line(rec.key, rec.value, maxKeyLen, 35);
    }
    console.log(border);
}

var __SS_line = function(k, v, mkl, mvl) {
    var kl = k.length;
    var vl = v.length;
    //console.log(kl);
    //console.log(vl);
    //console.log(mkl);
    //console.log(mvl);
    var pl = '| ' + k + ' '.repeat(mkl - kl + 1) + '| ' + v + ' '.repeat(mvl - vl + 1) + '|';
    console.log(pl);
}

var _S = function(obj, level, currLevel) {
    if (!currLevel) currLevel=0;

    var objKey;
    var objStructure = [];

    var cache = [];
    for(var objKey in obj) {
        var value = obj[objKey];
        if (typeof value === 'object' && value !== null) {
            // second level objects
            if (cache.indexOf(value) !== -1) {
                // circular reference found discard key
            } else {
                if (currLevel+1 < level) {
                    var _subs = _S(value, level, currLevel + 1);
                    var objKey2;
                    for(objKey2 in _subs) {
                        var rec = _subs[objKey2];
                        var row = {};
                        row["key"] = objKey + "." + rec.key;
                        row["value"] = rec.value;
                        objStructure.push(row);
                    }
                } else {
                    var row = {};
                    row["key"] = objKey;
                    row["value"] = '... more ...';
                    objStructure.push(row);
                }
            }
        } else {
            if (!_isF(value)) {
                var row = {};
                row["key"] = objKey;
                row["value"] = '' + value;
                var vo = row.value.replace('\r', '').replace('\n','').replace('\t','').trim();
                if (row.value.length > 36) vo = vo.substring(0, 36);
                //if (vo.length > 32) {
                //    var v1 = vo.substring(0, 15);
                //    var v2 = vo.substring(vo.length-15);
                //    var vv = v1 + ".." + v2;
                //    vo = vv;
                //}
                row.value = vo;
                objStructure.push(row);
            }
        }
    }
    cache = null;

    return objStructure;
}

// value by text
var _V = function( v, d ) {
    var out = v;
    if (!Utils.isNothing(v) && !Utils.isNothing(v.text)) {
        out = v.text;
    }
    // default value
    if (!Utils.isNothing(d)) {
       if (Utils.isNothing(out)) out = d;
    }
    return out;
}

// value by path
var _PV = function( v, p ) {
    if (Utils.isNothing(v)) return v;

    var pp;
    if (p instanceof Array) {
       pp = p;
    } else
    if (typeof p === 'string' || p instanceof String) {
       pp = p.split('.');
    } else {
       throw "Syntax error: _PV( obj, [String|Array] )";
    }

    var vv = v;
    for(pi in pp) {
       var ppp = pp[pi];
       if (ppp === parseInt(ppp, 10)) {
          var i = parseInt(ppp);
          vv = vv[ i ];
       } else {
          vv = vv[ ppp ];
       }
       if (Utils.isNothing( vv )) break;
    }
    return _V( vv );
}

var Utils = {

   expand: function(a, b) {
        // e.g. a = [a, b] and b = [c, d]
        var rs = [];
        if (a.length == 0) {
            for(bi in b) {
                rs.push( [ b[bi] ] );
            }
        } else {
            for(bi in b) {

                var rs2 = []

                // [ [a], [b] ]
                // [ [a], [b] ]
                for(ai in a) {
                    var ac = [];
                    for(aii in a[ai]){
                        ac.push( a[ai][aii] );
                    }
                    rs2.push( ac );
                }

                // [ [a, c], [b, c] ]
                for(ri in rs2) {
                    rs2[ri].push( b[bi] );
                    rs.push( rs2[ri] );
                }

                rs2 = null;

            }
        }
        return rs;
   },

   stringify: function(obj) {
        var cache = [];
        var result = JSON.stringify(obj, function(key, value) {
            if (typeof value === 'object' && value !== null) {
                if (cache.indexOf(value) !== -1) {
                    // Circular reference found, discard key
                    return;
                }
                // Store value in our collection
                cache.push(value);
            }
            if (_isF(value)) {
                return value.toString();
            } else {
                return value;
            }
        });
        cache = null; // Enable garbage collection
        return result;
   },

   isEmptyObject: function(o) {
      var isEmpty = true;
      for(k in o) {
         isEmpty = false;
         break;
      }
      return isEmpty;
   },

   createDate: function(y, M, d, h, m, s, S) {
      if (S) {
         return new Date(y, M-1, d, h, m, s, S);
      } else {
         return new Date(y, M-1, d, h, m, s);
      }
   },

   now: function() {
      return new Date();
   },

   isNothing: function(v) {
      return (v == undefined || v == null);
   },

   isArray: function(v) {
      return (v.constructor === Array);
   },

   extend: function() {
      for (var i = 1; i < arguments.length; i++) {
         for (var key in arguments[i]) {
            if (arguments[i].hasOwnProperty(key)) {
               arguments[0][key] = arguments[i][key];
            }
         }
      }
      return arguments[0];
   },

   mergeToInstance: function(a, b) {
      var c = {};
      for (var p in a)
         c[p] = (b[p] == null) ? a[p] : b[p];
      for (var p in b)
         if (this.isNothing(a[p]))
            c[p] = b[p];
      return c;
   },

   contains: function(obj, list) {
      var x;
      for (x in list) {
         if (list.hasOwnProperty(x) && list[x] === obj) {
            return true;
         }
      }
      return false;
   },

   leftPad: function(string, padding, length) {
      var ol = string.length;
      var ns = string;
      if (ol < length) {
         var p = padding.repeat(length);
         var ss = (p + string);
         ns = ss.substring(ss.length - length, ss.length)
      }
      return ns;
   },

   compareBits: function(source, bitvalue) {
      return ((source & bitvalue) == bitvalue);
   },

   iterator: function(v) {
      if (v instanceof Array) {
         return v;
      } else {
         return [v];
      }
   },

   matchRange: function(v, minV, maxV, undefine) {
      if (v) {
         return (minV <= v && v <= maxV);
      } else {
         return undefine;
      }
   },

   matchInList: function(v, list, undefine) {
      if (v) {
         var iter = Utils.iterator(list);
         var match = false;
         for (k in iter) {
            var kv = iter[k];
            if (kv == v || kv.text == v) {
               match = true;
               break;
            }
         }
         return match;
      } else {
         return undefine;
      }
   },

   isMemberOf: function(v, target) {
      var matched = false;
      for (k in target) {
         var vv = target[k];
         if (v == vv || vv.text == v) {
            matched = true;
            break;
         }
      }
      return matched;
   },

   right: function(s, l) {
      var L = Math.min(l, s.length);
      var begin = s.length - L;
      var end = s.length;
      return s.substring(begin, end);
   },

   left: function(s, l) {
      var L = Math.min(l, s.length);
      return s.substring(0, L);
   },

   uuid: function() {
      var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
         var r = Math.random() * 16 | 0,
            v = c == 'x' ? r : (r & 0x3 | 0x8);
         return v.toString(16);
      });
      return uuid;
   },

}

var Interface = {
   define: function(objInterface) {
      return {
         interfaceSpecification: objInterface,
         implementation: null,
         appliedTo: function(objImplementation) {
            // apply interface and return the static instance
            this.implementation = objImplementation;
            return this;
         },
         implementBy: function(objImplementation) {
            // apply interface and return new instance
            var newInstance = Interface.define(this.interfaceSpecification);
            return newInstance.appliedTo(objImplementation);
            //this.implementation = objImplementation;
            //return Utils.extend(true, {}, this);
         },
         signature: function(args) {
            var methodName = args[0];
            var funcDef = this.interfaceSpecification[methodName];
            if (funcDef == undefined) {
               throw "Pattern Error: method (" + methodName + ") cannot be found in interface.";
               //return null;
            }
            var params = args.length - 1;
            var _args = null;
            if (params > 1) {
               // it is assumed non-json object parameters inputted.
               _args = Utils.extend({}, funcDef.parameters);
               var i = 1;
               for (fi in _args) {
                  _args[fi] = args[i];
                  i++;
               }
            } else {
               _args = args[1];
            }
            return {
               methodName: methodName,
               arguments: _args
            };
         },
         call: function() {
            var signature = this.signature(arguments);
            if (signature == null) {
               //console.log("Pattern Error: signature is expected.");
               throw "Pattern Error: signature is expected.";
               //return null;
            }
            if (this.implementation[signature.methodName] == undefined) {
               // console.log("Pattern Error: " + signature.methodName + " is not defined.");
               throw "Pattern Error: " + signature.methodName + " is not defined.";
               //return null;
            } else {
               return this.implementation[signature.methodName](signature.arguments);
            }
         }
      }
   },
   METHOD: function(args) {
      return {
         parameters: args,
         body: function() {
            return null;
         }
      };
   }
}

/*
var Class = {
   define: function(objClass) {
      var objClassExt = Utils.extend({
         init: function(args) {}
      }, objClass);
      //console.log(objClassExt);
      return {
         classUUID: Utils.uuid(),
         classSpecification: objClassExt,
         create: function(args) {
            var instance = Utils.extend({}, this.classSpecification);

            instance['self'] = instance;

            var _parent = instance.parent;
            while (_parent != undefined) {
               _parent['self'] = instance;
               if (args) {
                  _parent.init(args);
               } else {
                  _parent.init({});
               }
               _parent = _parent.parent;
            }

            if (args) {
               instance.init(args);
            } else {
               instance.init({});
            }
            return instance;
         },
         extend: function(objChildClass) {
            var superPrototype = Utils.extend({}, this.classSpecification);
            var prototype = Utils.extend({}, this.classSpecification);
            Utils.extend(prototype, objChildClass);

            prototype['parent'] = superPrototype;
            return Class.define(prototype);
         }
      }
   }
}
*/

// BL 20180615 start
var Class = {
   define: function(objClass) {
      var objClassExt = Utils.extend({
         init: function(args) {}
      }, objClass);
      //console.log(objClassExt);
      return {
         classUUID: Utils.uuid(),
         classSpecification: objClassExt,
         create: function(args) {
            var instance = Utils.extend({}, this.classSpecification);

            var _lastInstance;
            var _instance = instance;
            while (_instance != undefined) {
                _lastInstance = _instance;

                _instance['self'] = instance;
                _instance['init2'] = _instance.init;
                _instance['init'] = function(args) {
                    if (Utils.isNothing(this.counter)) {
                        this['counter'] = 0;
                    }
                    if (this.counter == 0) {
                        this.counter ++;
                        this.init2(args);
                        this.counter --;
                    }
                }

                //_instance = _instance.parent;
                if (_instance.parent) {
                    var _parent = Utils.extend({}, _instance.parent);
                    _instance['parent'] = _parent;
                    _parent['child'] = _instance;
                    _instance = _instance.parent;
                } else {
                    _instance = undefined;
                }
            }

            var _childPointer = _lastInstance;
            while (_childPointer != undefined) {
                if (args) {
                    _childPointer.init(args);
                } else {
                    _childPointer.init({});
                }
                _childPointer = _childPointer.child;
            }

            return instance;
         },
         extend: function(objChildClass) {
            var superPrototype = Utils.extend({}, this.classSpecification);
            var prototype = Utils.extend({}, this.classSpecification);
            Utils.extend(prototype, objChildClass);

            prototype['parent'] = superPrototype;
            superPrototype['child'] = prototype;

            return Class.define(prototype);
         }
      }
   }
}
// BL 20180615 end

var BuilderPattern = {
   define: function(objInterface, buildProcess) {
      return {
         builderInterface: objInterface,
         builderBody: buildProcess,
         build: function(objBuilder) {
            var builder = this.builderInterface.implementBy(objBuilder);
            for (p in this.builderBody) {
               builder.call(this.builderBody[p], {});
            };
            return builder.implementation;
         }
      };
   }
}

var ServiceLocatorPattern = {
   define: function(objInterface, locatorFunction) {
      return {
         serviceInterface: objInterface,
         serviceLocator: locatorFunction,
         services: [],
         register: function(serviceId, serviceImpl) {
            this.services.push({
               serviceId: serviceId,
               serviceImpl: serviceImpl
            });
         },
         locateService: function() {
            var locatedService = null;
            if (this.serviceLocator) {
               var serviceId = this.serviceLocator();
               for (s in this.services) {
                  var sp = this.services[s];
                  if (serviceId == sp.serviceId) {
                     locatedService = sp.serviceImpl;
                  }
               }
            }
            if (locatedService && locatedService != null) {
               return this.serviceInterface.implementBy(locatedService);
            } else {
               return null;
            }
         }
      };
   }
}

var Factory = {
   define: function(interfaceClass, implementorClass) {
      return {
         interfaceClass: interfaceClass,
         implementorClass: implementorClass,
         implementation: function(args) {
            // default - generate a new instance using implementor defined
            // complicated case should be override this logic
            return implementorClass.create(args);
         },
         implementor: function(implementation) {
            this.implementation = implementation;
            return this;
         },
         create: function(args) {
            return interfaceClass.implementBy(this.implementation(args));
         }
      };
   }
}
var SystemComponents = {

   MANAGER: {
      PRODUCT_ENGINE_INSTANCE: "PRODUCT_ENGINE_INSTANCE",
      CATALOG_HELPER: "CATALOG_HELPER",
      CATALOG_FACTORY: "CATALOG_FACTORY",
      SCHEMA_HELPER: "SCHEMA_HELPER",
      SCHEMA_FACTORY: "SCHEMA_FACTORY",
      PREMIUM_CALCULATOR: "PREMIUM_CALCULATOR",
      VALIDATOR: "VALIDATOR",
      POLICY_VALUE_PROJECTOR: "POLICY_VALUE_PROJECTOR",
      MESSAGE_MANAGER: "MESSAGE_MANAGER",
      DATA_SERVICE: "DATA_SERVICE",
      RATE_MANAGER: "RATE_MANAGER",
      INPUT_TRANSFORMER: "INPUT_TRANSFORMER",
      EVENTS_MANAGER: "EVENTS_MANAGER",
      FUNCTION_MANAGER: "FUNCTION_MANAGER"
   },
   DATA_SERVICE: {
      CUSTOM_DATA_SERVICE: "CUSTOM"
   }
}

// TAX_RATE must be over 1. For example, if tax rate is 5%, the value
// in constants file, is 1.05.
var PublicConstants = {
   PERIOD: {
      MAX_BENEFIT_PERIOD: 150,
      MAX_PREMIUM_PAYING_PERIOD: 150
   },
   ROUNDING: {
      DEFAULT: 2,
      REGULAR_SAVING_UVLIFE: 8,
      RATE: 4
   },
   COUNTRY: {
      TAX_RATE: 1
   },
   VALIDATION_CATALOG: {
      PRE_CALCULATION_VALIDATION: 1,
      POST_CALCULATION_VALIDATION: 2,
      POST_PROJECTION_VALIDATION: 4
   },
   TARGET_SCOPE: {
      PROPOSAL: 1,
      BASE_COVERAGE: 2,
      RIDER_COVERAGE: 4
   },
   MESSAGE_FIELD: {
      INSURED_AGE: "%INSURED_AGE%",
      MAXIMUM_ISSUE_AGE: "%MAXIMUM_ISSUE_AGE%",
      MINIMUM_ISSUE_AGE: "%MINIMUM_ISSUE_AGE%",
      COVERAGE_FACE_AMOUNT: "%COVERAGE_FACE_AMOUNT%",
      MAXIMUM_FACE_AMOUNT: "%MAXIMUM_FACE_AMOUNT%",
      MINIMUM_FACE_AMOUNT: "%MINIMUM_FACE_AMOUNT%",
      CURRENCY: "%CURRENCY%",
      PAYMENT_MODE: "%PAYMENT_MODE%",
      SMOKING_STATUS: "%SMOKING_STATUS%",
      BENEFIT_PERIOD: "%BENEFIT_PERIOD%",
      WAITING_PERIOD: "%WAITING_PERIOD%",
      MAXIMUM_BASIC_IPO_ISSUE_AGE: "%MAXIMUM_BASIC_IPO_ISSUE_AGE%",
      MINIMUM_BASIC_IPO_ISSUE_AGE: "%MINIMUM_BASIC_IPO_ISSUE_AGE%",
      PRODUCT_ID: "%PRODUCT_ID%",
      MAXIMUM_INITIAL_TOP_UP: "%MAXIMUM_INITIAL_TOP_UP%",
      MINIMUM_INITIAL_TOP_UP: "%MINIMUM_INITIAL_TOP_UP%",
      MAXIMUM_PLANNEDPREMIUM: "%MAXIMUM_PLANNEDPREMIUM%",
      MINIMUM_PLANNEDPREMIUM: "%MINIMUM_PLANNEDPREMIUM%",
      OCCUPATION: "%OCCUPATION%",
      PREMIUM_DISCOUNT: "%PREMIUM_DISCOUNT%",
      DB_LEVEL_AGE: "%DB_LEVEL_AGE%",
      IFL_AGE: "%IFL_AGE%",
      FUND_CODE: "%FUND_CODE%",
      RETURN_RATE: "%RETURN_RATE%",
      MAX_RETURN_RATE: "%MAX_RETURN_RATE%",
      MIN_RETURN_RATE: "%MIN_RETURN_RATE%",
      LOCATION: "%LOCATION%",
      YEAR: "%YEAR%",
      BILLING_METHOD: "%BILLING_METHOD%",
      MAX_SUBSCRIPTION: "%MAX_SUBSCRIPTION%",
      AMOUNT: "%AMOUNT%",
      TOTAL_AMOUNT: "%TOTAL_AMOUNT%",
      AGE: "%AGE%",
      COUNT: "%COUNT%",
      BENEFIT_OPTION_NAME:"%BENEFIT_OPTION_NAME%",
      RIDER:"%RIDER%",
      PLAN_CODE: "%PLAN_CODE%"
   },
   VALIDATION_RULES_MAPPING: {
      GLOBAL_RULES: "_ALL_"
   },
   PREMIUM_RESULT: {
      PREMIUM_RESULT_FIELD_NAME: "_premiums"
   },
   LANGUAGE: {
      en: "ENG",
      zh: "CHI"
   },
   DEBUG: true,
   AGE: {
      JUVENILE_AGE: 14,
      SINGLEPLAN_AGE: 17
   },
   FUND_RETURN: {
      LOW: "LOW",
      MEDIUM: "MEDIUM",
      HIGH: "HIGH"
   },
   FUND_CODE: {
      TARGET_INCOME: "TARGET_INCOME",
      SECURE: "SECURE",
      APAC_SECURE: "APAC_SECURE",
      ASEAN_GROWTH: "ASEAN_GROWTH"
   }
}

var WILDCARD = "--";

var RateConstants = {
   RATETYPE: {
      BASICPREMIUM: 1,
      COI: 2,
      MINIMUMPREMIUM: 3,
      POLICYFEE: 4,
      MODALFACTOR: 5,
      OCCUPATIONFACTOR: 6,
      CASHVALUE: 7,
      DIVIDEND: 8,
      PAIDUPADDITION: 9,
      NSP: 10,
      COUPON: 11,
      RETURNPREMIUM: 12,
      TAXCHARGE: 13,
      DUMPIN: 14,

      DIVIDENDSCALE: 15,                     // SG

      PROTECTION: 16,
      LOW_DIVIDEND: 17,
      HIGH_DIVIDEND: 18,
      TOTALDISABILITY: 19,
      SEVEREDISABILITY: 20,
      TDO: 21,
      REDUCED_PAID_UP: 22,
      ROLLING: 23,
      BOS: 24,
      FUND_GROWTH: 25,
      INITIAL_CHARGE: 26,
      SPECIAL_BONUS: 27,
      LOYALTY_BONUS: 28,
      IRR: 29,
      COMMISSION: 30,
      EXPENSE_FACTOR: 31,
      PREMIUM_ALLOCATION: 32,
      SUPPLEMENTARY: 33,
      SURRENDER: 34,
      MONTHLY_FACTOR: 35,
      DPM: 36,
      DCV: 37,
      PAYOR_BENEFIT: 38,
      CURRENT_FUND: 39,
      LOAN: 40,
      MODE_FEE: 41,
      REVERSIONARY_BONUS: 42,
      DISCOUNT_FACTOR: 43,
      MATURITY_BONUS: 44,
      TERMINAL_BONUS_DEATH: 45,
      TERMINAL_BONUS_SURRENDER: 46,
      AX_FACTOR: 47,
      MODAL_COMMISSION: 48,
      PROJECTED_IRR: 49,
      HIGH_IRR: 50,
      LOW_IRR: 51,
      AUTOMATIC_PREMIUM_LOAN: 52,
      REVERSIONARY_INTEREST: 53,
      GUARANTEED_MINIMUM_DB: 54,
      GUARANTEED_SURRENDER_VALUE: 55,
      TRAILER_FEE: 56,
      REVERSIONARY_BONUS_CV: 57,
      TOPUP_PREMIUM_ALLOCATION: 58,
      LOW_REVERSIONARY_BONUS: 59,
      PRODUCTION_CREDIT: 60,
      DEPOSIT_INTEREST: 61,
      LOW_DEPOSIT_INTEREST: 62,
      LOW_TERMINAL_BONUS_SURRENDER: 63,
      ADMINISTRATION_FEE: 64,

      // Rates overlapped for PH and SG
      LOW_COUPON: 65,                         // PH
      ADMINISTRATION_FEE_REFUND: 65,          // SG
      // ---

      COI_LOADING: 66,
      ADVANCE_TOPUP_BONUS: 67,

      // Rates for SG only
      EXTENDED_TERM: 68,                      // SG
      EXTENDED_TERM_ENDOWMENT: 69,            // SG
      // ---

      TOPUP_COMMISSION: 70,

      // Rates overlapped for PH and SG
      RETURNTAXCHARGE: 71,                    // PH
      MEDICAL_RESERVE: 71,                    // SG
      // ---

      // Rates for SG only
      RETIRE_MEDICAL_RESERVE: 72,             // SG
      PROTECTION_AX_FACTOR: 73,               // SG
      // ---

      LOW_REVERSIONARY_INTEREST: 74,

      // Rates for SG only
      LOW_COUPON: 75,                         // SG
      CORRIDOR_FACTOR: 76,                    // SG
      TCP_ADJUSTMENT_FACTOR: 77,              // SG
      TCP_THRESHOLD_FACTOR: 78,               // SG
      DBP_INTEREST: 79,                       // SG
      LOAN_SPREAD: 80,                        // SG
      EXCESS_PREMIUM_CHARGE: 81,              // SG
      // ---

      // Rates overlapped PH and SG
      GUARANTEED_TUITION_FUND: 82,            // PH
      TCP_COI: 82,                            // SG
      GUARANTEED_EDUCATION_ALLOWANCE: 83,     // PH
      GUARANTEED_COI: 83,                     // SG
      GUARANTEED_GRADUATION_GIFT: 84,         // PH
      LOAN_INTEREST: 84,                      // SG
      MIN_PLANNED_PREMIUM: 85,                // PH
      CONTRACT_DEBT_INTEREST:85,              // SG
      MANAGEMENT_FEE: 86,                     // PH
      TCP_INTEREST: 86,                       // SG
      INITIAL_PREMIUM_CHARGE: 87,             // PH
      LOW_TERMINAL_BONUS_DEATH: 87,           // SG
      MODAL_IRR: 88,                          // PH
      HIGH_TERMINAL_BONUS_DEATH: 88,          // SG
      TOPUP_MODE_FEE: 89,                     // PH
      HIGH_TERMINAL_BONUS_SURRENDER: 89,      // SG
      PREMIUM_HOLIDAY_CHARGE: 90,             // PH
      LOW_MATURITY_BONUS: 90,                 // SG
      // ---

      // Rates for SG only
      FIRST_YEAR_SPREAD_COMMISSION: 91,       // SG
      DBP_PREMIUM_LOADING: 92,                // SG
      GSV_CASHVALUE: 93,                      // SG
      ADJUSTMENT_FACTOR: 94,                  // SG
      NLG_INTEREST: 95,                       // SG
      NATIONALITY_CLASS_LOADING: 96,          // SG
      RESIDENCY_CLASS_LOADING: 97,            // SG
      ADDITIONAL_INCOME: 98,                  // SG
      ADDITIONAL_INCOME_CV: 99,               // SG
      MAX_PREM_TEST_FACTOR: 100,              // SG
      WELCOME_BONUS: 101,                     // SG
      OTHER_MANAGEMENT_FEE: 102,              // SG
      FA_COMMISSION: 103,                     // SG
      MONTHLY_COUPON: 104,                    // SG
      MONTHLY_DIVIDEND: 105,                  // SG
      PREMIUM_POLICYFEE: 106,                 // SG
      LOW_FUND_GROWTH_ADJUSTMENT: 107,        // SG
      HIGH_FUND_GROWTH_ADJUSTMENT: 108,       // SG
      RETURN_OF_SURRENDER_VALUE: 109,         // SG
      EXTRA_PREMIUM: 110                      // SG
      // ---
   },
   RATE_OPTION: {
      PER1000: 1,
      PER100: 2,
      READ_BY_ATTAINAGE: 4,
      MULTIPLE_IPOFILES: 8,
      IPO_10YEARS: 16,
      IPO_5YEARS: 32,
      PERMONTH: 64,
      READ_BY_PAYORAGE: 128,
      PERANNUAL: 256,
      YRT: 512,
      YRT_SIMULATE_LEVEL: 1024
   },
   RATE_CURRENCY: {
      HKD: 1,
      USD: 2,
      CAD: 4,
      GBP: 8,
      AUD: 16,
      SGD: 32,
      PHP: 64,
      VND: 128
   },
   LOCATION: {
      HONG_KONG: 1,
      MACAU: 2,
      SINGAPORE: 4,
      CHINA: 8,
      PHILIPPHINE: 16,
      VIETNAM: 32
   },
   SMOKING_STATUS: {
      SMOKER: 1,
      NONSMOKER: 2,
      AGGREGATE: 4,
      PREFERRED_LIVES: 8,
      PREFERRED_NONSMOKER: 8,
      PREFERRED_SMOKER: 16,
      SUPER_PREFERRED_NONSMOKER: 32,
      STANDARD_PLUS_NONSMOKER: 64
   },
   GENDER: {
      MALE: 1,
      FEMALE: 2
   },
   WAITING_PERIOD: {
      PRD_30DAYS: 1,
      PRD_90DAYS: 2,
      PRD_180DAYS: 4,
      PRD_365DAYS: 8
   },
   BENEFIT_PERIOD: {
      PRD_5YEARS: 1,
      PRD_10YEARS: 2,
      PRD_15YEARS: 4,
      PRD_AGE65: 8
   },
   OCCUPATION_CLASS: {
      CLASS1: 1,
      CLASS2: 2,
      CLASS3: 4,
      CLASS4: 8,
      RCC: 16,
      CLASS0: 32
   },
   NO_OF_PERSONS: {
      PERSONS_1: 1,
      PERSONS_2: 2,
      PERSONS_3: 4,
      PERSONS_4: 8
   },
   OTHER_OPTION: {
      COVERAGE_CLASS_A: 16,
      COVERAGE_CLASS_B: 32,
      COVERAGE_CLASS_C: 64,
      COVERAGE_CLASS_D: 128,
      COVERAGE_CLASS_S: 256,
      COVERAGE_CLASS_E: 512,
      COVERAGE_CLASS_F: 1024,
      COVERAGE_CLASS_G: 2048,
      COVERAGE_CLASS_H: 4096,
      MAJOR_MEDICAL: 1,
      MAJOR_MEDICAL_N: 2,
      MAJOR_MEDICAL_P: 4
   },
   PAYMENT_MODE: {
      MONTHLY: 1,
      QUARTERLY: 2,
      SEMIANNUAL: 4,
      ANNUAL: 8
   },
   PARTICIPATE: {
      YES: 1,
      NO: 2
   },
   CHANNEL: {
      AGENCY: 1,
      BROKER: 2,
      BANK: 4,
      ACTUARIAL: 8,
      ADMIN: 16,
      ALL: 255
   }
};


var DISTRIBUTION_CHANNEL = {
   AGENCY: "Agency",
   BROKER: "Broker",
   BANK: "Bank",
   ACTUARIAL: "Actuarial",
   ADMIN: "Admin",
   ALL: "--"
};

var CURRENCY = {
   HKD: "HKD",
   USD: "USD",
   CAD: "CAD",
   GBP: "GBP",
   AUD: "AUD",
   SGD: "SGD",
   PHP: "PHP",
   VND: "VND"
};

var CatalogConstants = {
   PRODUCT_TYPE: {
      BASEPLAN: "BasePlan",
      RIDER: "Rider",
      BENEFIT: "Benefit",
      TERM: "Term",
      UVLIFE: "UVLife",
      PARTICIPATE: "Participate",
      HAS_DEATH_BENEFIT: "HasDeathBenefit",
      JOINLIFE: "JoinLife",
      BYATTAINAGE: "ByAttainAge",
      WAVIER: "Wavier",
      REGULAR_SAVING: "RegularSaving",
      REFUND: "Refund",
      COUPON: "Coupon",
      ACCIDENTAL_DEATH: "AccidentalDeath",
      HOSPITAL_BENEFIT: "HospitalBenefit",
      PAYORBENEFIT: "PayorBenefit",
      TARGET_SAVING: "TargetSaving",
      SINGLE_PREMIUM: "SinglePremium",
      RECURRENT_SINGLE_PREMIUM: "RecurrentSinglePremium",
      FAMILY: "Family",
      SPOUSE: "Spouse",
      CHILD: "Child",
      BACKEND: "BackEnd",
      INCOME: "Income",
      ROP_DEATH_BENEFIT: "ROPDeathBenefit",
      SHARE_BASIC_PLAN_FACEAMOUNT: "ShareBasicPlanFaceAmount",
      HAS_HIGH_WATER_MARK_FACEAMOUNT: "HasHighWaterMarkFaceAmount",
      DISABILITY_INCOME_PLAN: "DisabilityIncomePlan",
      MAJOR_DISEASE_BENEFIT: "MajorDiseaseBenefit",
      INCOME2: "Income2",
      HAS_SOS: "HasSOS",
      LONG_TERM_CARE: "LongTermCare",
      REDUCING_ASSURANCE: "ReducingAssurance",
      TOTAL_PERMANENT_DISABILITY: "TotalPermanentDisability",
      INCOME3: "Income3",
      GUARANTEED_ISSUE: "GuaranteedIssue",
      CONDITIONAL_GUARANTEED_ISSUE: "ConditionalGuaranteedIssue",
      EDUCATION_PLAN: "Education",
      RETURN_OF_PREMIUM: "ROP",
      PPP_NEXD_BPPP: "PPPNotExceedBPPP",
      PREMIUM_BY_NAR: "PremiumByNar",
      MULTI_DIMENSION_RATES: "MultiDimensionRates"
   },
   LOCATION: {
      HONGKONG: "HongKong",
      MACAU: "Macau",
      SINGAPORE: "Singapore",
      CHINA: "China",
      PHILIPPINE: "Philippines",
      VIETNAM: "Vietnam"
   }
};

var SchemaConstants = {
   IRR_TERM: {
      AGE: "AGE",
      PERIOD: "PERIOD"
   },
   GENDER: {
      MALE: "M",
      FEMALE: "F"
   },
   SMOKING_STATUS: {
      SMOKER: "Standard",
      NONSMOKER: "Non-Smoker",
      AGGREGATE: "Aggregate",
      PREFERRED_LIVES: "Preferred Lives",
      PREFERRED_NONSMOKER: "PreferredNon-Smoker",
      PREFERRED_SMOKER: "PreferredSmoker",
      SUPER_PREFERRED_NONSMOKER: "SuperPreferrredNon-Smoker",
      STANDARD_PLUS_NONSMOKER: "StandardPlusNon-Smoker"
   },
   DIVIDEND_OPTION: {
      CASH_DIVIDEND: "CashDividend",
      ACCUMULATE: "LeaveOnDeposit",
      PAID_UP_ADDITION: "PaidUpAddition",
      BONUS_PROTECTION: "BonusProtection"
   },
   PREMIUM_DISCOUNT: {
      AGE_DISCOUNT: "AgeDiscount",
      AMOUNT_DISCOUNT: "AmountDiscount",
      RATE_DISCOUNT: "RateDiscount",
      PERCENTAGE_DISCOUNT: "PercentageDiscount"
   },
   DB_OPTION: {
      LEVEL: "Level",
      INCREASE: "Increase",
      INDEXED: "Indexed",
      ROP: "ROP"
   },
   WAITING_PERIOD: {
      WP_30DAYS: "30Days",
      WP_90DAYS: "90Days",
      WP_180DAYS: "180Days",
      WP_365DAYS: "365Days"
   },
   BENEFIT_PERIOD: {
      BP_5YEARS: "5Years",
      BP_10YEARS: "10Years",
      BP_15YEARS: "15Years",
      BP_AGE65: "Age65"
   },
   OCCUPATION_CLASS: {
      CLASS_0: "0",
      CLASS_1: "1",
      CLASS_2: "2",
      CLASS_3: "3",
      CLASS_4: "4",
      RCC: "RCC"
   },
   NO_OF_PERSONS: {
      PERSONS_1: "1",
      PERSONS_2: "2",
      PERSONS_3: "3",
      PERSONS_4: "4"
   },
   COVERAGE_CLASS: {
      CLASS_A: "A",
      CLASS_B: "B",
      CLASS_C: "C",
      CLASS_D: "D",
      CLASS_S: "S",
      CLASS_E: "E",
      CLASS_F: "F",
      CLASS_G: "G",
      CLASS_H: "H"
   },
   BENEFIT_OPTION_TYPE: {
      HEALTH_MAX_PROGRAM: "HealthMaxProgram",
      ADDITIONAL_LIFE_COVERAGE: "AdditionalLifeCoverage",
      NO_VALUE: "NoValue"
   },
   PAYOUT_OPTION: {
      GRADE_SCHOOL: "GradeSchool",
      HIGH_SCHEOOL: "HighSchool",
      COLLEGE_4YRS: "4YrsCollege",
      COLLEGE_5YRS: "5YrsCollege",
      RETIREMENT_50: "RetirementAge50",
      RETIREMENT_55: "RetirementAge55",
      RETIREMENT_60: "RetirementAge60",
      RETIREMENT_65: "RetirementAge65"
   },
   PAYMENT_MODE: {
      ANNUAL: "Annual",
      SEMIANNUAL: "Semi-Annual",
      QUARTERLY: "Quarterly",
      MONTHLY: "Monthly"
   },
   PAYMENT_TYPE: {
      BASIC: "Basic",
      PLANNED: "Planned"
   },
   BILLING_MODE: {
      DIRECTBILLING: "DirectBilling",
      AUTOPAY: "AutoPay",
      PDF: "PDF",
      CREDIT_CARD: "CreditCard",
      MANUCARD: "ManuCard",
      SINGLE: "Single"
   },
   AGE_RELATION_TYPE: {
      PAYOR: "Payor",
      Insured: "Insured"
   },
   FACEAMOUNT_RELATION_TYPE: {
      FACEAMOUNT: "FaceAmount",
      PREMIUM: "Premium"
   },
   DEPENDENCY_RULE_TYPE: {
      EXCLUSIVE: "Exclusive",
      INCLUSIVE: "Inclusive",
      EXCLUSION: "Exclusion",
      INCLUSION: "Inclusion"
   },
   FUND_CHANGE_TYPE: {
      NORMAL: "Normal",
      AUTOMATIC: "Automatic",
      PREMIUM: "Premium",
      FACEAMOUNT: "FaceAmount",
      DUMPIN: "Dump-in",
      WITHDRAWAL: "Withdrawal"
   },
   CHARGE_TYPE: {
      POLICYFEE: "PolicyFee",
      MODALFACTOR: "ModalFactor",
      BOS: "Bid-OfferSpread",
      INITIAL_CHARGE: "InitialCharge",
      COMMISSION: "Commission",
      EXPENSE_FACTOR: "ExpenseFactor",
      SUPPLEMENTARY: "Supplementary",
      SURRENDER: "Surrender",
      DPM: "DPMFactor",
      DCV: "DCVFactor",
      MODE_FEE: "ModeFee",
      MODAL_COMMISSION: "ModalCommission",
      TRAILER_FEE: "TrailerFee",
      ADMINISTRATION_FEE: "AdministrationFee",
      TOPUP_COMMISSION: "TopupCommission",
      LOAN_SPREAD: "LoanSpread",
      MANAGEMENT_FEE: "ManagementFee",
      INITIAL_PREMIUM_CHARGE: "InitialPremiumCharge",
      PREMIUM_HOLIDAY_CHARGE: "PremiumHolidayCharge",
      FIRST_YEAR_SPREAD_COMMISSION: "FirstYearSpreadCommission",
      OTHER_MANAGEMENT_FEE: "OtherManagementFee",
      FA_COMMISSION: "FaceAmountCommission"
   },
   PREMIUM_TYPE: {
      BASICPREMIUM: "BasicPremium",
      COSTOFINSURANCE: "CostOfInsurance",
      MINIMUMPREMIUM: "MinimumPremium",
      ALLOCATION: "PremiumAllocation",
      PAYOR_BENEFIT: "PremiumPayorBenefit",
      TOPUP_ALLOCATION: "TopupPremiumAllocation",
      TCP_ADJUSTMENT_FACTOR: "TcpAdjustmentFactor",
      TCP_THRESHOLD_FACTOR: "TcpThresholdFactor",
      EXCESS_PREMIUM_CHARGE: "ExcessPremiumCharge",
      TCP_COI: "TcpCostOfInsurance",
      GUARANTEED_COI: "GuaranteedCostOfInsurance",
      MIN_PLANNED_PREMUM: "MinimumPlannedPremium",
      DBP_PREMIUM_LOADING: "DbpPremiumLoading",
      ADJUSTMENT_FACTOR: "AdjustmentFactor",
      PREMIUM_POLICYFEE: "PremiumPolicyFee",
      EXTRA_PREMIUM: "ExtraPremium"
   },
   POLICY_VALUE: {
      CASHVALUE: "CashValue",
      DIVIDEND: "Dividend",
      PAIDUPADDITION: "PaidUpAddition",
      NSP: "NetSinglePremium",
      COUPON: "Coupon",
      RETURNPREMIUM: "ReturnPremium",
      BONUSPROTECTION: "BonusProtection",
      PROTECTION: "Protection",

      LOW_DIVIDEND: "LowerDividend",
      HIGH_DIVIDEND: "HighDividend",

      TOTALDISABILITY: "TotalDisability",
      SEVEREDISABILITY: "SevereDisability",

      TDO: "TDO",
      PAIDUPINSURANCE: "PaidUpInsurance",
      SPECIAL_BONUS: "SpecialBonus",
      LOYALTY_BONUS: "LoyaltyBonus",
      IRR: "IRR",
      REVERSIONARY_BONUS: "ReversionaryBonus",
      DISCOUNT_FACTOR: "DiscountFactor",
      MATURITY_BONUS: "MaturityBonus",
      TERMINAL_BONUS_DEATH: "TerminalBonusDeath",
      TERMINAL_BONUS_SURRENDER: "TerminalBonusSurrender",
      AX_FACTOR: "AxFactor",
      LOW_IRR: "LowIRR",
      GUARANTEED_MINIMUM_DB: "GuaranteedMinimumDB",
      GUARANTEED_SURRENDER_VALUE: "GuaranteedSurrenderValue",
      REVERSIONARY_BONUS_CV: "ReversionaryBonusCV",

      LOW_REVERSIONARY_BONUS: "LowReversionaryBonus",
      LOW_TERMINAL_BONUS_SURRENDER: "LowTerminalBonusSurrender",
      HIGH_TERMINAL_BONUS_SURRENDER: "HighTerminalBonusSurrender",
      GUARANTEED_TUITION_FUND: "GuaranteedTuitionFund",
      GUARANTEED_EDUCATION_ALLOWANCE: "GuaranteedEducationAllowance",
      GUARANTEED_GRADUATION_GIFT: "GuaranteedGraduationGift",
      MODAL_IRR: "ModalIRR",
      LOW_MATURITY_BONUS: "LowMaturityBonus",
      ADDITIONAL_INCOME: "AdditionalIncome",
      ADDITIONAL_INCOME_CV: "AdditionalIncomeCV",
      WELCOME_BONUS: "WelcomeBonus",
      RETURN_OF_SURRENDER_VALUE: "ReturnOfSurrenderValue",

      MAXBENEFIT: "MaxBenefit",

      LOW_TERMINAL_BONUS_DEATH: "LowTerminalBonusDeath",
      HIGH_TERMINAL_BONUS_DEATH: "HighTerminalBonusDeath",
      MONTHLY_COUPON: "MonthlyCoupon",
      MONTHLY_DIVIDEND: "MonthlyDividend",
      CORRIDOR_FACTOR: "CorridorFactor",
      DBP_INTEREST: "DBPInterest"

   },
   SUPPORT_OPTION: {
      IPO: "IPO",
      PO: "PremiumOffset",
      CURRENCY_CHANGE: "CurrencyChange",
      BACK_DATE: "BackDate",
      MODE_CHANGE: "ModeChange",
      PDF: "PDF",
      WITHDRAWAL_BONUS: "WithdrawalBonus",
      IIO: "IIO",
      JUVENILE: "JuvenileRule",
      WAITPERIOD: "HasWaitingPeriod",
      BENEFITPERIOD: "HasBenefitPeriod",
      OCCUPATION: "HasOccupationClass",
      REQUIRE_POLICYFEE: "RequirePolicyFee",
      NOOFPERSON: "MultiplePerson",
      MAJORMEDICAL: "MajorMedical",
      RCC: "HasRCC",
      PO_W_COUPON: "POWithCoupon",
      EXTRA_RATING: "ExtraRating",
      HAS_SELF_WAVIER: "HasSelfWavier",
      TOPUPPREMIUM: "TopUpPremium",
      HIGHER_ALTDIV: "HigherAltDiv",
      LOWER_ALTDIV: "LowerAltDiv",
      DECLINED: "Declined",
      EXTRA_RATING_WITH_IPO: "ExtraRatingWithIPO",
      PAYOR_REQUIRED: "PayorRequired",
      PERSONS_LIMIT: "PersonsLimit",
      TPD: "TotalPermanentDisability",
      TI: "TerminalIllness",
      FREE_OF_CHARGE: "FreeOfCharge",
      DISALLOW_RIDER_PREMIUM_PAIDUP: "DisallowRiderPremiumPaidup",
      SHARE_BASIC_PLAN_FACEAMOUNT: "ShareBasicPlanFaceAmount",
      INCLUDE_BASIC_PLAN_MP_ONLY: "IncludeBasicPlanMPOnly",
      HAS_COMMENCEMENT_YEAR: "HasCommencementYear",
      IS_SOS_SUPPORTED: "HasSOS",
      HAS_BENEFIT_OPTION: "HasBenefitOption",
      HAS_PREMIUM_DISCOUNT: "HasPremiumDiscount",
      HOOK_SUBSCRIPTION_WITH_FA: "HookSubscriptionWithFA",
      DISALLOW_RIDER_WITH_GUARANTEED_ISSUE: "DisallowRiderWithGuaranteedIssue",
      DISALLOW_GUARANTEED_ISSUE: "DisallowGuaranteedIssue",
      HAS_LONG_TERM_CARE: "HasLongTermCare",
      INCOME_FOR_LIFE: "HasIFL",
      GWB_STEP_UP: "HasGWBStepUp",
      GWB: "HasGWB",
      DEDUCT_CHARGE_FRM_WITHDRAW: "DeductRedempChargeFromWithdraw",
      GUARANTEED_ISSUE_REQUIREMENT: "GuaranteedIssueRequirement",
      IPO_WITH_BASIC_IPO: "IPOwithBasicIPO",
      DVD_OPTION: "DividendOption",
      EXTEND_PREMIUM_PAID_PERIOD: "ExtendPremiumPaidPeriod",
      ANNUALIZED_PREMIUM: "AnnualizedPremium",
      AUTOMATIC_PREMIUM_LOAN: "AutomaticPremiumLoan",
      FOREIGN_LIFE_BENEFIT_LOADING: "ForeignLifeBenefitLoading",
      MATURITY_CASHOUT_BENEFIT: "MaturityCashoutBenefit",
      NATIONALITY_CLASS_LOADING: "NationalityClassLoading",
      DEATH_BENEFIT_WITHOUT_CORRIDOR: "DeathBenefitNoCorridor",
      REDUCED_PAID_UP: "ReducedPaidUp",
      REQUIRE_MODE_FEE: "RequireModeFee",
      RESIDENCY_CLASS_LOADING: "ResidencyClassLoading"
   },
   GENDER_FULL: {
      MALE: "Male",
      FEMALE: "Female"
   },
   PREMIUM_CATEGORY: {
      BASIC: "Basic",
      PLANNED: "Planned",
      BASICONLY: "BasicOnly",
      TOPUP: "TopUp",
      SINGLEPREMIUM: "Single"
   },
   PREMIUM_RANGE_TYPE: {
       PREMIUMTYPE_BASICPREMIUM: "Basic",
       PREMIUMTYPE_TOPUPPREMIUM: "TopUp",
       PREMIUMTYPE_PLANNEDPREMIUM:"Planned",
       PREMIUMTYPE_SINGLEPREMIUM:"Single",
       PREMIUMTYPE_BASICPREMIUM_ONLY:"BasicOnly"
   },
   MAJOR_MEDICAL: {
      Y: "Y",
      N: "N",
      P: "P"
   },
};

var InterfaceConstants = {
   PAYMENT_MODE: {
      ANNUAL: "A",
      SEMIANNUAL: "S",
      QUARTERLY: "Q",
      MONTHLY: "M"
   },
   LOCATION: {
      HONGKONG: "HK",
      MACAU: "MO",
      SINGAPORE: "SG",
      CHINA: "CH",
      PHILIPPINE: "PH",
      VIETNAM: "VN"
   },
   SMOKING_STATUS: {
      SMOKER: "ST",
      NONSMOKER: "NS",
      AGGREGATE: "AG",
      PREFERRED_LIVES: "PL",
      PREFERRED_NONSMOKER: "PN",
      PREFERRED_SMOKER: "PS",
      SUPER_PREFERRED_NONSMOKER: "XN",
      STANDARD_PLUS_NONSMOKER: "ZN"
   },
   OPTION_PO: {
      OPO_W_COUPON: "PO_WITH_COUPON",
      PO_W_COUPON_N: "PO_WITH_COUPON_NO",
      PO_W_REFUND: "PO_WITH_REFUND",
      PO: "Y"
   },
   OPTION_DIVIDEND: {
      DVD_CASH_DIVIDEND: "CD",
      DVD_ACCUMULATED_DIVIDEND: "AD",
      DVD_PAID_UP_ADDITION: "PUA",
      DVD_BONUS_PROTECTION: "BP",
      LOWER_ALTDIV: "LOWALTDIV",
      HIGHER_ALTDIV: "HIGHALTDIV"
   },
   OPTION_IIO: {
      OPTION_IIO_BASIC: "Basic",
      OPTION_IIO_TOPUP: "Topup"
   },
   BILLING_MODE: {
      DIRECTBILLING: "DirectBilling",
      AUTOPAY: "AutoPay",
      PDF: "PDF",
      CREDIT_CARD: "CreditCard",
      MANUCARD: "ManuCard",
      SINGLE: "Single"
   },
   DIVIDEND_OPTION: {
      CASH_DIVIDEND: "CD",
      ACCUMULATE: "AD",
      PAID_UP_ADDITION: "PUA",
      BONUS_PROTECTION: "BP"
   },
   PROJECTION_OPTIONS: {
      BASE_PLAN_ONLY: "BasePlanOnly",
      BASE_PLAN_WITH_RIDERS: "BasePlanWithRiders"
   },
   POLICY_OPTIONS: {
      CASH_OUT_OPTION: "CashOutOption",
      FUND_ACTIVITIES_OPTION: "FundActivitiesOption"
   },
   BENEFIT_OPTION_TYPE: {
      HEALTH_MAX_PROGRAM: "H",
      ADDITIONAL_LIFE_COVERAGE: "A",
      NO_VALUE: "N"
   },
   SINGLEPLAN_AGE: "17"
};

var EventGroupProductTypes = [
   CatalogConstants.PRODUCT_TYPE.UVLIFE,
   CatalogConstants.PRODUCT_TYPE.TERM,
   CatalogConstants.PRODUCT_TYPE.PARTICIPATE,
   CatalogConstants.PRODUCT_TYPE.HOSPITAL_BENEFIT
];

//    PREMIUM_TYPE : {
// 	  BASICPREMIUM : "BasicPremium",
// 	  COSTOFINSURANCE = "CostOfInsurance",
// 	  MINIMUMPREMIUM  = "MinimumPremium",
// 	  TOPUPPREMIUM    = "",
// 	  PLANNEDPREMIUM  = "",
// 	  SINGLEPREMIUM   = "",
// 	  ALLOCATION      = "PremiumAllocation",
// 	  PAYOR_BENEFIT	  = "PremiumPayorBenefit",
// 	  TOPUP_ALLOCATION  = "TopupPremiumAllocation",
// 	  MIN_PLANNED_PREMUM = "MinimumPlannedPremium",
// 	  BASICPREMIUM_ONLY = ""
//    }

// MISSING SUPPORT_OPTION
//    PLAN_CHANGE : new BitPack(4);
// 	  DEATH_BENEFIT_WITHOUT_CORRIDOR = new BitPack(51);   // <<20130802>>
// 	  PREMIUM_PAYING_PERIOD_EXTENSION = new BitPack(52);   // <<20160919>>
// 	  PARTIAL_WITHDRAWAL_NO_SURRENDER_CHARGE = new BitPack(48); // <<20161011>>
//	  PYD_BEFORE_PRODUCT_DATE       = new BitPack(31);    // PublicConstant.L2x31;
// DB_OPTION: {
//       LEVEL: "L",
//       INCREASE: "I",
//       RETURN_OF_PREMIUM: "R",
//       INDEXED: "X"
// },

//Commented as value is copied from PAYOUT_OPTION
// PREMIUM_RANGE_TYPE: {
//       BASIC_PREMIUM: "GradeSchool",
//       HIGH_SCHEOOL: "HighSchool",
//       COLLEGE_4YRS: "4YrsCollege",
//       COLLEGE_5YRS: "5YrsCollege",
//       RETIREMENT_50: "RetirementAge50",
//       RETIREMENT_55: "RetirementAge55",
//       RETIREMENT_60: "RetirementAge60",
//       RETIREMENT_65: "RetirementAge65"
//    },
// prototype overload
String.prototype.repeat = function(num) {
   return new Array(num + 1).join(this);
}

String.prototype.equalsIgnoreCase = function(s) {
   return (this.toLowerCase() == s.toLowerCase());
}

Number.prototype.format = function(n, x) {
   var re = '\\d(?=(\\d{' + (x || 3) + '})+' + (n > 0 ? '\\.' : '$') + ')';
   return this.toFixed(Math.max(0, ~~n)).replace(new RegExp(re, 'g'), '$&,');
}

Date.prototype.julianDay = function() {
   var yearBegin = new Date(this.getFullYear(), 0, 0);
   var diff = this - yearBegin;
   var days = Math.floor(diff / (1000 * 60 * 60 * 24));
   return days;
}

Date.prototype.daysInYear = function() {
   var yearBegin = new Date(this.getFullYear(), 0, 0);
   var nextYearBegin = new Date(this.getFullYear() + 1, 0, 0);
   var diff = nextYearBegin - yearBegin;
   var days = Math.floor(diff / (1000 * 60 * 60 * 24));
   return days;
}

var getPremiumRecord = function(args) {
   var coverage = args['coverage'];
   var schema = args['schema'];
   var premiumType = args['premiumType'];
   premiumType = (Utils.isNothing(premiumType) ? SchemaConstants.PREMIUM_RANGE_TYPE.PREMIUMTYPE_BASICPREMIUM : premiumType);
   var hasValue = args['hasValue'];
   hasValue = (Utils.isNothing(hasValue) ? "N" : hasValue);
   var issueAge = args['issueAge'];

   //console.log("issueAge" + issueAge);

   if (Utils.isNothing(issueAge)) {
      var insured = getPrimaryInsured({coverage: coverage});

      //_DB("insured", insured);

      if (!Utils.isNothing(insured)) {
         issueAge = insured.insuredAge;
      }
   }

   var pmRec = null;
   var pmTable = Utils.iterator(schema.ProductSchema.BasicParticular.PremiumRangeInformation.PremiumRange);
   for (recKey in pmTable) {
      var pm = pmTable[recKey];

      //_SS(pm, 5);
      //_SS(coverage, 5);

      var matched = true;
      matched = matched && (Utils.isNothing(pm.Type) ? false : premiumType == pm.Type.text);
      matched = matched && (coverage.currency.currencyPK.currencyId == pm.CurrencyPK.CurrencyId.text);
      matched = matched && (coverage.options.paymentMode == pm.PaymentMode.text);
      if (hasValue == "Y") {
         matched = matched && (Utils.isNothing(pm.HasValue) ? false : hasValue == pm.HasValue.text);
      }
      matched = matched && (Utils.isNothing(pm.MinAge) ? issueAge >= 0 : issueAge >= Number(pm.MinAge.text));
      matched = matched && (Utils.isNothing(pm.MaxAge) ? issueAge <= 99 : issueAge <= Number(pm.MaxAge.text));
      if (matched) {
         pmRec = pm;
         break;
      }
   }
   return pmRec;
}

var getFundChangeRecord = function(args) {
   var coverage = args['coverage'];
   var fundChange = args['fundChange'];
   var duration = args['duration'];
   var paymentMode = args['paymentMode'];
   var schema = args['schema'];
   fundChange = (Utils.isNothing(fundChange) ? SchemaConstants.FUND_CHANGE_TYPE.DUMPIN : fundChange);
   var matchedFundChangeRec = null;
   if (!(Utils.isNothing(schema.ProductSchema.FundChangeInformation.FundChange))) {
      var fundChangeTable = Utils.iterator(schema.ProductSchema.FundChangeInformation.FundChange);
      for (recKey in fundChangeTable) {
         var fundChangeRec = fundChangeTable[recKey];
         var matched = true;
         matched = matched && (Utils.isNothing(fundChangeRec.Type) ? false : fundChange == fundChangeRec.Type.text);
         matched = matched && (coverage.currency.currencyPK.currencyId == fundChangeRec.CurrencyPK.CurrencyId.text);
         if (!Utils.isNothing(paymentMode)) {
            var recPaymentMode = _PV(fundChangeRec, "PaymentMode");
            if (!Utils.isNothing(recPaymentMode)) {
               matched = matched && (paymentMode == recPaymentMode);
            }
         }
         matched = matched && (Utils.isNothing(fundChangeRec.FromDuration) ? duration >= -100 : duration >= Number(fundChangeRec.FromDuration.text));
         matched = matched && (Utils.isNothing(fundChangeRec.ToDuration) ? duration <= 100 : duration <= Number(fundChangeRec.ToDuration.text));
         if (matched) {
            matchedFundChangeRec = fundChangeRec;
            break;
         }
      }
   }
   return matchedFundChangeRec;
}

var getFirstInsured = function(args) {
   var coverage = args['coverage'];
   var party;
   var parties = _PV(coverage, "parties.party");

   if (parties) {
      var partyList = Utils.iterator( parties );
      for(idx in partyList) {
         var partyRec = partyList[idx];
         party = partyRec;
         break;
      }
   }
   return party;
}

var getInsured = function(args) {
   var coverage = args['coverage'];
   var type = args['type'];
   var party;
   var parties = _PV(coverage, "parties.party");

   //_DB("coverage", coverage);
   //_DB("type", type);
   //_DB("parties", parties);

   if (parties) {
      var partyList = Utils.iterator( parties );

      //_DB("partyList", partyList);

      for(idx in partyList) {
         var partyRec = partyList[idx];
         if (partyRec.type == type) {
            party = partyRec;
            break;
         }
      }
   }
   return party;
}

var getPrimaryInsured = function(args) {
   var party = getInsured({ coverage: args['coverage'], type: 'BASIC' });
   if (Utils.isNothing(party)) party = getFirstInsured( {coverage: args['coverage']} );
   return party;
}

var getSecondInsured = function(args) {
   var party = getInsured({ coverage: args['coverage'], type: 'SECOND' });
   if (Utils.isNothing(party)) party = getFirstInsured( {coverage: args['coverage']} );
   return party;
}

/*
var getJuvenileAge = function(args) {
   var location = args['location'];
   if ((location == CatalogConstants.LOCATION.HONGKONG) || (location == CatalogConstants.LOCATION.MACAU) || (location == CatalogConstants.LOCATION.CHINA))
      return 15;
   else
   if (location == LOCATION.SINGAPORE)
      return 17;
   else
      return 15; // default
}
*/

/*
var isEqualInsured = function(insured1) {
   //var insured1 = args['insured1'];
   var insured2 = this;
   if (Utils.isNothing(insured1) && Utils.isNothing(insured2)) {
      return true;
   } else if (!Utils.isNothing(insured1) && Utils.isNothing(insured2)) {
      return false;
   } else if (Utils.isNothing(insured1) && !Utils.isNothing(insured2)) {
      return false;
   }
   if (insured1.insuredId == insured2.insuredId && insured1.insuredAge == insured2.insuredAge && insured1.insuredSex == insured2.insuredSex && insured1.smokingStatus == insured2.smokingStatus && insured1.type == insured2.type) {
      return true;
   }

   return false;
}
*/

var getBenefitOptionRecord = function(args) {
   var coverage = args['coverage'];
   var schema = args['schema'];
   var benefitOptionType = args['benefitOptionType'];
   //fundChange = (Utils.isNothing(fundChange) ? SchemaConstants.FUND_CHANGE_TYPE.DUMPIN : fundChange);
   var matchedBenefitOptionRec = null;
   if (!(Utils.isNothing(schema.ProductSchema.BasicParticular.BenefitOptionInformation.BenefitOption))) {
      var benefitOptionTable = Utils.iterator(schema.ProductSchema.BasicParticular.BenefitOptionInformation.BenefitOption);
      for (recKey in benefitOptionTable) {
         var benefitOptionRec = benefitOptionTable[recKey];
         var matched = true;
         matched = matched && (Utils.isNothing(benefitOptionRec.Type) ? false : benefitOptionType == benefitOptionRec.Type.text);
         matched = matched && (coverage.currency.currencyPK.currencyId == benefitOptionRec.CurrencyPK.CurrencyId.text);
         if (matched) {
            matchedBenefitOptionRec = benefitOptionRec;
            break;
         }
      }
   }
   return matchedBenefitOptionRec;
}

var getMaxGIFaceamount = function(args) {
   var coverage = args['coverage'];
   var schema = args['schema'];
   var matchedmaxGIFaceamountRec = null;
   if (!(Utils.isNothing(schema.ProductSchema.BasicParticular.MaxGIFaceamount))) {
      var maxGIFaceamountTable = Utils.iterator(schema.ProductSchema.BasicParticular.MaxGIFaceamount);
      for (recKey in maxGIFaceamountTable) {
         var maxGIFaceamountRec = maxGIFaceamountTable[recKey];
         var matched = true;
         matched = matched && (coverage.currency.currencyPK.currencyId == maxGIFaceamountRec.currency);
         if (matched) {
            matchedmaxGIFaceamountRec = maxGIFaceamountRec;
            break;
         }
      }
   }
}
/*
var Repository = {

   managers: {},

   addManager: function(managerName, manager) {
      var newManager = this.managers;
      newManager[managerName] = manager;
      this.managers = newManager;
   },

   getManager: function(managerName) {
      return this.managers[managerName];
   }

}
*/


var RepositoryFactory = function (v) {

    return {

       repo: v,

       addManager: function(managerName, manager) {
          this.repo.call('addManager', {manager: manager, managerName: managerName});
       },

       getManager: function(managerName) {
          return this.repo.call('getManager', {managerName: managerName})
       }
    };

}

var IRepository = Interface.define({
    addManager: Interface.METHOD,
    getManager: Interface.METHOD
})

var RepositoryImpl = Class.define({
    init: function(args) {
        this.self.managers = {};
    },
    addManager: function(args) {
        var manager = args['manager'];
        var managerName = args['managerName'];
        this.self.managers[managerName] = manager;
    },
    getManager: function(args) {
        var managerName = args['managerName'];
        return this.self.managers[managerName];
    }
})

var Repository = new RepositoryFactory(IRepository.implementBy(RepositoryImpl.create()));

// interface of data field which is used for building a interface json to front-end for
// user screen interactons. In IPEService, it holds a collection of fields and then use
// iteration pattern to extract those fields into a product configuraiton object.
var IDataField = Interface.define({
   fieldname: Interface.METHOD,
   readField: Interface.METHOD({
      language: null,
      effectiveDate: null,
      location: null,
      catalog: null,
      schema: null
   })
});

// it is the interface of builder process definition for generating product configurations
// to front-end
var IProductListBuilder = Interface.define({
   matchSchema: Interface.METHOD,
   loadSchema: Interface.METHOD,
   extractFields: Interface.METHOD
});

// IProductEngine Interface
var IProductEngine = Interface.define({
   init: Interface.METHOD({
      managers: []
   }),
   setProposal: Interface.METHOD({
      proposal: null
   }),
   getContext: Interface.METHOD,
   callCustomFunction: Interface.METHOD,
   listCustomFunctions: Interface.METHOD,
   validate: Interface.METHOD,
   calculatePremiums: Interface.METHOD,
   runProjection: Interface.METHOD({
      projectionOptions: null
   }),
   listBaseProducts: Interface.METHOD({
      planCodes: null,
      language: PublicConstants.LANGUAGE.en,
      effectiveDate: null,
      location: null
   }),
   listRiders: Interface.METHOD({
      planCodes: null,
      language: PublicConstants.LANGUAGE.en,
      effectiveDate: null,
      location: null
   }),
   calculateInsuredAge: Interface.METHOD({
      dateOfBirth: null,
      policyYearDate: null
   })
});

// IExecutable specification
// the interface is designed for system use only
var IExecutable = Interface.define({
   execute: Interface.METHOD
});

// IPEService specification
// - loadCatalog is the method to retrieve catalog, which is useful for lookup a appropriate product schema
// - loadSchema is the method to retrieve schema based on the schema key information
// - readRates is the method to load a set of rates (premium, policy values and etc.)
// - readRate is the method to read a single rate (premium, policy values and etc.)
var IPEService = Interface.define({
   createProductListBuilder: Interface.METHOD,
   loadCatalog: Interface.METHOD({
      productCode: null
   }),
   loadSchema: Interface.METHOD({
      productId: null,
      schemaInfo: null
   }),
   listBaseProducts: Interface.METHOD({
      planCodes: null,
      language: PublicConstants.LANGUAGE.en,
      effectiveDate: null,
      location: null
   }),
   listRiders: Interface.METHOD({
      planCodes: null,
      language: PublicConstants.LANGUAGE.en,
      effectiveDate: null,
      location: null
   }),
   readRates: Interface.METHOD({
      schemaPk: null,
      searchRequest: null
   }),
   readRate: Interface.METHOD({
      schemaPk: null,
      searchRequest: null
   })
});

// IBasicPremiumFormula specification
// - calculate is the method of normal premium calculation
// - calculateExtraPremium is the method for calculating the premium of extra loading
var IBasicPremiumFormula = Interface.define({
   formulaName: Interface.METHOD,
   productId: Interface.METHOD({
      coverage: null
   }),
   methodId: Interface.METHOD({
      coverage: null
   }),
   productTypes: Interface.METHOD({
      coverage: null
   }),
   rateList: Interface.METHOD({
      coverage: null,
      ipo:0
   }),
   modalRateList: Interface.METHOD({
      coverage: null,
      ipo: 0
   }),
   calculate: Interface.METHOD({
      coverage: null,
      rates: null,
      rounding: 2,
      overridePremiumRate: null
   }),
   calculateExtraPremium: Interface.METHOD({
      coverage: null,
      rates: null,
      rounding: 2,
      policyYear: 0
   }),
   calculateCompletePremiumRecords: Interface.METHOD({
      coverage: null,
      rates: null,
      rounding: 2,
      policyYear: 0
   })
});

// IValidationRule specification
// - ruleName is the name of rule for identification
// - executionPoint is the timing in process to do the validation (PRE, POST, POST_PROJECT)
// - targetScope is to extract the right information from proposal to test
// - shouldTest is to determination function to decide if the rule should be applied in same target scope
// - validate is the major logic of validation rule
var IValidationRule = Interface.define({
   ruleName: Interface.METHOD,
   shouldTest: Interface.METHOD,
   scope: Interface.METHOD,
   validate: Interface.METHOD({
      target: null
   })
});

// IValidationBuilder specification
var IValidationBuilder = Interface.define({
   init: Interface.METHOD,
   getErrors: Interface.METHOD({
      language: "en"
   }),
   validateProposal: Interface.METHOD({
      proposal: null
   }),
   validateBasePlan: Interface.METHOD({
      basePlan: null
   }),
   validateRider: Interface.METHOD({
      rider: null
   })
});

// ICatalogManager interface
var ICatalogManager = Interface.define({
   lookup: Interface.METHOD({
      productCode: null
   }),
   load: Interface.METHOD({
      productCode: null
   }),
   prepareInstance: Interface.METHOD({
      catalog: null
   })
});

// ISchemaManager interface
var ISchemaManager = Interface.define({
   lookup: Interface.METHOD({
      coverage: null
   }),
   load: Interface.METHOD({
      coverage: null
   }),
   lookupCache: Interface.METHOD({
      productCode: null,
      schemaId: null
   }),
   getCatalogManager: Interface.METHOD({
      productCode: null
   }),
   loadIntoCache: Interface.METHOD({
      coverage: null,
      schemaInfo: null
   }),
   prepareInstance: Interface.METHOD({
      schema: null
   })
});

// IMessageManager interface
var IMessageManager = Interface.define({
   init: Interface.METHOD({
      messages: []
   }),
   getMessage: Interface.METHOD({
      error: null,
      language: null
   })
});

// IValidator interface
var IValidator = Interface.define({
   init: Interface.METHOD({
      preValidationRules: null,
      postValidationRules: null,
      postProjectionValidationRules: null,
      productValidationMapping: null
   }),
   addValidationRule: Interface.METHOD({
      rule: null
   }),
   showRuleNames: Interface.METHOD,
   validate: Interface.METHOD({
      proposal: null
   }),
   preCalculationValidate: Interface.METHOD({
      proposal: null
   }),
   postCalculationValidate: Interface.METHOD({
      proposal: null
   }),
   postProjectionValidate: Interface.METHOD({
      proposal: null,
      context: null,
      projectionResult: null
   })
});

// IPremiumCalculator interface
var IPremiumCalculator = Interface.define({
   init: Interface.METHOD({
      methods: null
   }),
   addMethod: Interface.METHOD({
      productCode: null,
      methodId: null,
      method: null
   }),
   showFormulas: Interface.METHOD,
   lookupCalculator: Interface.METHOD({
      productCode: null,
      methodId: null
   }),
   calculate: Interface.METHOD({
      proposal: null,
   }),
   calculateCoverage: Interface.METHOD({
      coverage: null,
      policyYear: 0,
      ipo: 0
   })
});

// ICatalog interface
var ICatalog = Interface.define({
   init: Interface.METHOD({
      catalogDefintion: null
   }),
   getCatalog: Interface.METHOD,
   lookupSchema: Interface.METHOD({
      coverage: null
   }),
   isBasePlan: Interface.METHOD,
   isRider: Interface.METHOD,
   isUVL: Interface.METHOD,
   isSinglePremium: Interface.METHOD,
   isJoinLife: Interface.METHOD,
   //isRegularUVLPlans: Interface.METHOD({
   //   productCode: null
   //}),
   hasTaxCharge: Interface.METHOD,
   isBenefit: Interface.METHOD,
   rounding: Interface.METHOD({
      coverage: null
   }),
   isCoupon: Interface.METHOD,
   isRegularSaving: Interface.METHOD,
   isFundCodeSupported: Interface.METHOD({
      fund: null
   }),
   isTerm: Interface.METHOD,
   isIncome3: Interface.METHOD,
   isSOS: Interface.METHOD,
   isGuaranteedIssue: Interface.METHOD,
   isConditionalGuaranteedIssue: Interface.METHOD,
   isFamilyProductType: Interface.METHOD,
   isSpouseProductType: Interface.METHOD,
   isChildProductType: Interface.METHOD,
   isRiderProductType: Interface.METHOD,
   isWaiver: Interface.METHOD
});

// ISchema interface
var ISchema = Interface.define({
   getSchema: Interface.METHOD,
   isRefundPremiumSupported: Interface.METHOD,
   isChargeTypeSupported: Interface.METHOD({
      chargeType: null
   }),

   isCurrencySupported: Interface.METHOD({
      currencyId: null
   }),
   hasSupportOption: Interface.METHOD({
      option: null
   }),
   calculateBanding: Interface.METHOD({
      coverage: null
   }),
   matchPremiumInfoRecord: Interface.METHOD({
      coverage: null,
      banding: null,
      premiumType: null
   }),
   matchChargeInfoRecord: Interface.METHOD({
      coverage: null,
      banding: null,
      chargeType: null
   }),
   matchPolicyValueInfoRecord: Interface.METHOD({
      coverage: null,
      banding: null,
      policyValueType: null
   }),
   matchProductionCreditInfoRecord: Interface.METHOD({
      coverage: null,
      banding: null
   }),
   readRefundRates: Interface.METHOD({
      coverage: null,
      policyYear: 0,
      ipo: 0
   }),
   isCurrencyPaymentModeSupported: Interface.METHOD({
      currencyId: null,
      paymentMode: null
   }),
   isInsuredSexSupported: Interface.METHOD({
      gender: null
   }),
   isInsuredSmokingStatusSupported: Interface.METHOD({
      smokingStatus: null
   }),
   isWaitPeriodSupported: Interface.METHOD({
      waitPeriod: null
   }),
   isBenefitPeriodSupported: Interface.METHOD({
      benefitPeriod: null
   }),
   isOccupationSupported: Interface.METHOD({
      occupation: null
   }),
   isBillingMethodPaymentModeSupported: Interface.METHOD({
      billingMethod: null,
      paymentMode: null
   }),
   isCurrencyBillingMethodSupported: Interface.METHOD({
      billingMethod: null,
      currencyId: null
   }),
   calculatePremiumPayingPeriod: Interface.METHOD({
      coverage: null
   }),
   calculateBenefitPeriod: Interface.METHOD({
      coverage: null
   }),
   isDividendOptionSupported: Interface.METHOD({
      dividendOption: null
   }),
   availablePaymentModes: Interface.METHOD({
      premiumType: SchemaConstants.PREMIUM_CATEGORY.BASIC
   }),
   hasExtraRating: Interface.METHOD({
      coverage: null
   }),
   isDBOptionSupported: Interface.METHOD({
      dbOption: null
   }),
   isValidIIO: Interface.METHOD({
      basicIncrePerc: null
   }),
   isIpoDBOptionSupported: Interface.METHOD({
      ipoDbOption: null
   }),
   isMajorMedicalOptionSupported: Interface.METHOD({
      majorMedicalOption: null
   }),
   isNoOfPersonSupported: Interface.METHOD({
      noOfPersonOption: null
   }),
   isClassOtherOptionSupported: Interface.METHOD({
      classOtherOption: null
   })

});

/*
var ICalculatorFactory = Interface.define({
   createCalculator: Interface.METHOD({
      formula: null,
      coverage: null,
      context: null,
      ipo: 0,
      rounding: 2
   })
});
*/

var ICalculateMethod = Interface.define({
   formulaName: Interface.METHOD,
   formulaScope: Interface.METHOD({
      coverage: null
   }),
   calculate: Interface.METHOD({
      policyYear: 0
   }),
   emptyResult: Interface.METHOD
});

var IConditionalCalculateMethod = Interface.define({
   init: Interface.METHOD({
      formula: null,
      coverage: null,
      context: null,
      ipo: 0,
      rounding: 2
   }),
   isMatched: Interface.METHOD,
   prepareRates: Interface.METHOD({
      policyYear: 0
   }),
   calculate: Interface.METHOD({
      policyYear: 0
   })
});

// in both lookupRates and lookupRate, either rateType or resourceKey is required. If both are provided,
// rateType has priority to be used for lookuping the handler. If rateType cannot lookup any and
// resourceKey is provided, resourceKey will be used for lookup.
var IRateManager = Interface.define({
   lookupHandler: Interface.METHOD({
      rateType: null
   }),
   lookupHandlerByResourceKey: Interface.METHOD({
      resourceKey: null
   }),
   lookupRates: Interface.METHOD({
      coverage: null,
      rateType: null,
      resourceKey: null,
      ipo: 0
   }),
   lookupRate: Interface.METHOD({
      coverage: null,
      rateType: null,
      resourceKey: null,
      policyYear: 0,
      ipo: 0
   })
});

// IInputTransformer interface
var IInputTransformer = Interface.define({

   /*transformLocation: Interface.METHOD,
   transformGender:Interface.METHOD,
   transformPaymentMode:Interface.METHOD,
   transformSmokingStatus:Interface.METHOD,*/
   setReturnRatesByCurrency: Interface.METHOD({
      proposal: null
   }),
   transform: Interface.METHOD({
      coverage: null
   })
});

// Projection Related Interface
var IProjectionManager = Interface.define({
   runProjection: Interface.METHOD({
      proposal: null,
      projectionOptions: null,
      policyOptions: null
   })
});

var IEvent = Interface.define({
   eventName: Interface.METHOD,
   run: Interface.METHOD({
      context: null
   }),
   shouldBeRun: Interface.METHOD({
      context: null
   })
});

var IEventColumn = Interface.define({
   columnName: Interface.METHOD,
   calculatedValue: Interface.METHOD({
      context: null
   }),
   shouldBeShown: Interface.METHOD({
      context: null
   })
});

var IEventsProvider = Interface.define({
   providerName: Interface.METHOD,
   matchProviderId: Interface.METHOD,
   matchProductId: Interface.METHOD,
   matchProductType: Interface.METHOD,
   iterations: Interface.METHOD,
   iterationUnit: Interface.METHOD,
   events: Interface.METHOD,
   columns: Interface.METHOD,
   makeSnapshot: Interface.METHOD
});

var IEventsManager = Interface.define({
   addEventProvider: Interface.METHOD({
      eventGroup: null
   }),
   showEventProviders: Interface.METHOD,
   events: Interface.METHOD({
      proposal: null
   })
});

var IFund = Interface.define({
   init: Interface.METHOD({
      fundId: "unknown"
   }),
   dumpin: Interface.METHOD({
      amount: 0
   }),
   withdraw: Interface.METHOD({
      amount: 0
   }),
   payout: Interface.METHOD,
   rollingInterest: Interface.METHOD,
   fundBalances: Interface.METHOD,
   dumpins: Interface.METHOD,
   withdraws: Interface.METHOD,
   depositPayouts: Interface.METHOD,
   surrenderValues: Interface.METHOD
});

var IDataDrivenCalculator = Interface.define({
   init: Interface.METHOD({
      drivenKeys: null,
      drivenDatas: null
   }),
   data: Interface.METHOD({
      drivenKey: null
   }),
   calculate: Interface.METHOD,
   result: Interface.METHOD
});

var IColumn = Interface.define({
   acceptValue: Interface.METHOD,
   column: Interface.METHOD
});

// Core Rules definitions
var ICoreRules = Interface.define({
   create: Interface.METHOD
});

var IFunction = Interface.define({
   functionName: Interface.METHOD,
   execute: Interface.METHOD
});

var IFunctionManager = Interface.define({
   addFunction: Interface.METHOD,
   listFunctions: Interface.METHOD,
   execute: Interface.METHOD
});
// field definitions
var FieldPlanName = Class.define({
   fieldname: function(args) {
      return "planname";
   },
   readField: function(args) {
      var language = args['language'];
      var effectiveDate = args['effectiveDate'];
      var location = args['location'];
      var catalog = args['catalog'];
      var schema = args['schema'];

      var result = null;
      var nameList = Utils.iterator(catalog.ProductCatalog.ProductName.Name);
      for (i in nameList) {
         var n = nameList[i];
         if (Utils.isNothing(language) || n.code == language) {
            result = n.text;
            break;
         }
      }
      return result;
   }
});

var FieldPlanId = Class.define({
   fieldname: function(args) {
      return "planid";
   },
   readField: function(args) {
      var language = args['language'];
      var effectiveDate = args['effectiveDate'];
      var location = args['location'];
      var catalog = args['catalog'];
      var schema = args['schema'];

      return catalog.ProductCatalog.ProductPK.ProductId.text;
   }
});

var FieldFunds = Class.define({
   fieldname: function(args) {
      return "funds";
   },
   readField: function(args) {
      var language = args['language'];
      var effectiveDate = args['effectiveDate'];
      var location = args['location'];
      var catalog = args['catalog'];
      var schema = args['schema'];

      var result = [];
      if (!Utils.isNothing(catalog.ProductCatalog.FundMapInformation.FundCode)) {
         var fundCodeList = Utils.iterator(catalog.ProductCatalog.FundMapInformation.FundCode);
         for (fundInfoIdx in fundCodeList) {
            var fundInfo = fundCodeList[fundInfoIdx];
            result.push(fundInfo.text);
         }
      }
      return result;
   }
});

var FieldProductTypes = Class.define({
   fieldname: function(args) {
      return "producttypes";
   },
   readField: function(args) {
      var language = args['language'];
      var effectiveDate = args['effectiveDate'];
      var location = args['location'];
      var catalog = args['catalog'];
      var schema = args['schema'];

      var result = [];
      var productTypeList = Utils.iterator(catalog.ProductCatalog.ProductType.ProductTypeCode);
      for (prodTypeIdx in productTypeList) {
         var productType = productTypeList[prodTypeIdx].text;
         result.push(productType);
      }
      return result;
   }
});

var FieldIssueAge = Class.define({
   fieldname: function(args) {
      return "issueage";
   },
   readField: function(args) {
      var language = args['language'];
      var effectiveDate = args['effectiveDate'];
      var location = args['location'];
      var catalog = args['catalog'];
      var schema = args['schema'];

      var result = {};
      result["max"] = schema.ProductSchema.BasicParticular.IssueAge.Max.text;
      result["min"] = schema.ProductSchema.BasicParticular.IssueAge.Min.text;
      return result;
   }
});

var FieldGenderOptions = Class.define({
   fieldname: function(args) {
      return "gender";
   },
   readField: function(args) {
      var language = args['language'];
      var effectiveDate = args['effectiveDate'];
      var location = args['location'];
      var catalog = args['catalog'];
      var schema = args['schema'];

      var result = [];
      var genderList = Utils.iterator(schema.ProductSchema.BasicParticular.SupportSex.Sex);
      for (idx in genderList) {
         var sex = genderList[idx];
         if (sex.text == "Male") {
            result.push(SchemaConstants.GENDER.MALE);
         }
         if (sex.text == "Female") {
            result.push(SchemaConstants.GENDER.FEMALE);
         }
      }
      return result;
   }
});

var FieldPremiumPayingPeriod = Class.define({
   fieldname: function(args) {
      return "premiumpayperiod";
   },
   readField: function(args) {
      var language = args['language'];
      var effectiveDate = args['effectiveDate'];
      var location = args['location'];
      var catalog = args['catalog'];
      var schema = args['schema'];

      var result = {};
      result["minperiod"] = schema.ProductSchema.BasicParticular.PremiumPaidPeriod.MinPremiumPaidPeriod.text;
      result["maxage"] = schema.ProductSchema.BasicParticular.PremiumPaidPeriod.MaxPremiumPaidAge.text;
      return result;
   }
});

var FieldBenefitPeriod = Class.define({
   fieldname: function(args) {
      return "benefitperiod";
   },
   readField: function(args) {
      var language = args['language'];
      var effectiveDate = args['effectiveDate'];
      var location = args['location'];
      var catalog = args['catalog'];
      var schema = args['schema'];

      var result = {};
      result["maxage"] = schema.ProductSchema.BasicParticular.BenefitPeriod.MaxBenefitAge.text;
      result["minperiod"] = schema.ProductSchema.BasicParticular.BenefitPeriod.MinBenefitPeriod.text;
      return result;
   }
});

var FieldPremiumRange = Class.define({
   fieldname: function(args) {
      return "premiumrange";
   },
   readField: function(args) {
      var language = args['language'];
      var effectiveDate = args['effectiveDate'];
      var location = args['location'];
      var catalog = args['catalog'];
      var schema = args['schema'];

      // premium range
      var currencies = [];
      var currencyCodes = {};

      var result = {};
      var premiumRangeList = Utils.iterator(schema.ProductSchema.BasicParticular.PremiumRangeInformation.PremiumRange);
      for (idx in premiumRangeList) {
         var pr = premiumRangeList[idx];

         var premRange = null;
         if (pr.Type.text == SchemaConstants.PAYMENT_TYPE.BASIC) {
            if (result[SchemaConstants.PAYMENT_TYPE.BASIC] == undefined) {
               result[SchemaConstants.PAYMENT_TYPE.BASIC] = {};
            }
            if (result[SchemaConstants.PAYMENT_TYPE.BASIC][pr.CurrencyPK.CurrencyId.text] == undefined) {
               result[SchemaConstants.PAYMENT_TYPE.BASIC][pr.CurrencyPK.CurrencyId.text] = {};
            }
            premRange = result[SchemaConstants.PAYMENT_TYPE.BASIC][pr.CurrencyPK.CurrencyId.text];
         } else
         if (pr.Type.text == SchemaConstants.PAYMENT_TYPE.PLANNED) {
            if (result[SchemaConstants.PAYMENT_TYPE.PLANNED] == undefined) {
               result[SchemaConstants.PAYMENT_TYPE.PLANNED] = {};
            }
            if (result[SchemaConstants.PAYMENT_TYPE.PLANNED][pr.CurrencyPK.CurrencyId.text] == undefined) {
               result[SchemaConstants.PAYMENT_TYPE.PLANNED][pr.CurrencyPK.CurrencyId.text] = {};
            }
            premRange = result[SchemaConstants.PAYMENT_TYPE.PLANNED][pr.CurrencyPK.CurrencyId.text];
         } else {
            console.log("iOSservice error: " + pr.Type.text + " is not defined");
         }

         if (!Utils.isNothing(premRange)) {

            if (premRange[pr.PaymentMode.text] == undefined) {
               premRange[pr.PaymentMode.text] = {};
            }

            bpRec = premRange[pr.PaymentMode.text];

            if (!Utils.isNothing(bpRec)) {
               var billingMode = [];
               if (pr.BillingMode) {
                  var billingModeList = Utils.iterator(pr.BillingMode);
                  for (idx in billingModeList) {
                     var bm = billingModeList[idx];

                     //console.log(bm);

                     if (bm) {
                        billingMode.push(bm.text);
                     }
                  }
               }
               bpRec["billingMode"] = billingMode;
               bpRec["max"] = pr.MaxPremium.text;
               bpRec["min"] = pr.MinPremium.text;

               if (currencyCodes[pr.CurrencyPK.CurrencyId.text] == undefined) {
                  currencyCodes[pr.CurrencyPK.CurrencyId.text] = "Y";
                  currencies.push(pr.CurrencyPK.CurrencyId.text);
               }
            }
         }
      }
      return result;
   }
});

var FieldCurrency = Class.define({
   fieldname: function(args) {
      return "currency";
   },
   readField: function(args) {
      var language = args['language'];
      var effectiveDate = args['effectiveDate'];
      var location = args['location'];
      var catalog = args['catalog'];
      var schema = args['schema'];

      // premium range
      var currencies = [];
      var currencyCodes = {};

      var premiumRangeList = Utils.iterator(schema.ProductSchema.BasicParticular.PremiumRangeInformation.PremiumRange);
      for (idx in premiumRangeList) {
         var pr = premiumRangeList[idx];

         if (currencyCodes[pr.CurrencyPK.CurrencyId.text] == undefined) {
            currencyCodes[pr.CurrencyPK.CurrencyId.text] = "Y";
            currencies.push(pr.CurrencyPK.CurrencyId.text);
         }
      }
      return currencies;
   }
});

var FieldSupportOptions = Class.define({
   fieldname: function(args) {
      return "supportoptions";
   },
   readField: function(args) {
      var language = args['language'];
      var effectiveDate = args['effectiveDate'];
      var location = args['location'];
      var catalog = args['catalog'];
      var schema = args['schema'];

      var result = [];
      if (schema.ProductSchema.BasicParticular.SupportOption) {
         for (optionKey in schema.ProductSchema.BasicParticular.SupportOption) {
            if (schema.ProductSchema.BasicParticular.SupportOption[optionKey] != undefined && schema.ProductSchema.BasicParticular.SupportOption[optionKey].text == "Y") {
               result.push(optionKey);
            }
         }
      }
      return result;
   }
});

var FieldInitialPremium = Class.define({
   fieldname: function(args) {
      return "initialpremium";
   },
   readField: function(args) {
      var language = args['language'];
      var effectiveDate = args['effectiveDate'];
      var location = args['location'];
      var catalog = args['catalog'];
      var schema = args['schema'];

      var result = {};
      result["min"] = {};
      if (schema.ProductSchema.BasicParticular.MinInitialDumpin) {
         var minInitialPremiumList = Utils.iterator(schema.ProductSchema.BasicParticular.MinInitialDumpin);
         for (idx in minInitialPremiumList) {
            var minIP = minInitialPremiumList[idx];
            result.min[minIP.currency] = minIP.text;
         }
      }
      return result;
   }
});

var FieldFaceAmount = Class.define({
   fieldname: function(args) {
      return "faceamount";
   },
   readField: function(args) {
      var language = args['language'];
      var effectiveDate = args['effectiveDate'];
      var location = args['location'];
      var catalog = args['catalog'];
      var schema = args['schema'];

      var result = {};
      var bandInfoList = Utils.iterator(schema.ProductSchema.BandInformation.BandRecord);
      for (idx in bandInfoList) {
         var pr = bandInfoList[idx];

         //console.log(JSON.stringify(pr));

         if (Utils.isNothing(result[pr.CurrencyPK.CurrencyId.text])) {
            result[pr.CurrencyPK.CurrencyId.text] =
               {maxTopup:0, minTopup:9999999999,
                maxFaceAmount:0, minFaceAmount:9999999999,
                maxGuaranteeRatio:0,
                maxContractPremium: 0, minContractPremium: 9999999999};
         }
         var rec = result[pr.CurrencyPK.CurrencyId.text];

         rec.maxTopup = Math.max(rec.maxTopup, pr.MaxTopup.text);
         rec.minTopup = Math.min(rec.minTopup, pr.MinTopup.text);
         rec.maxFaceAmount = Math.max(rec.maxFaceAmount, pr.MaxFaceAmount.text);
         rec.minFaceAmount = Math.min(rec.minFaceAmount, pr.MinFaceAmount.text);
         rec.maxContractPremium = Math.max(rec.maxContractPremium, pr.MaxContractPremium.text);
         rec.minContractPremium = Math.min(rec.minContractPremium, pr.MinContractPremium.text);
         rec.maxGuaranteeRatio = Math.max(rec.maxGuaranteeRatio, pr.MaxGuarRatio.text);
      }
      return result;
   }
});

var FieldDeathBenefitOptions = Class.define({
   fieldname: function(args) {
      return "deathbenefitoptions";
   },
   readField: function(args) {
      var language = args['language'];
      var effectiveDate = args['effectiveDate'];
      var location = args['location'];
      var catalog = args['catalog'];
      var schema = args['schema'];

      var result = [];
      if (!Utils.isNothing(schema.ProductSchema.BasicParticular.SupportDeathBenefit.DeathBenefit)) {
         var deathBenefitList = Utils.iterator(schema.ProductSchema.BasicParticular.SupportDeathBenefit.DeathBenefit);
         for (idx in deathBenefitList) {
            var dbOption = deathBenefitList[idx];
            result.push(dbOption.text);
         }
      }
      return result;
   }
});

var FieldFundChange = Class.define({
   fieldname: function(args) {
      return "fundchange";
   },
   readField: function(args) {
      var language = args['language'];
      var effectiveDate = args['effectiveDate'];
      var location = args['location'];
      var catalog = args['catalog'];
      var schema = args['schema'];

      var fundchange = {};
      if (!Utils.isNothing( schema.ProductSchema.FundChangeInformation.FundChange )) {
         var fundChangeList = Utils.iterator(schema.ProductSchema.FundChangeInformation.FundChange);
         for (idx in fundChangeList) {
            var fc = fundChangeList[idx];

            console.log(JSON.stringify(fc));

            if (Utils.isNothing( fundchange[fc.CurrencyPK.CurrencyId.text] )) {
               fundchange[fc.CurrencyPK.CurrencyId.text] = {};
            }
            fundchangeCurrency = fundchange[fc.CurrencyPK.CurrencyId.text];
            if (Utils.isNothing( fundchangeCurrency[fc.Type.text] )) {
               fundchangeCurrency[fc.Type.text] = {};
            }
            fundchangeCurrencyType = fundchangeCurrency[fc.Type.text];
            fundchangeCurrencyType["max"] = fc.MaxIncrease.text;
            fundchangeCurrencyType["min"] = fc.MinIncrease.text;
         }
      }
      return fundchange;
   }
});

// builder
var ProductListBuilder = Class.define({
   context: {},
   init: function(args) {
      this.self.context['planCodes'] = args["planCodes"];
      this.self.context['language'] = args["language"];
      this.self.context['effectiveDate'] = args["effectiveDate"];
      this.self.context['location'] = args["location"];
      this.self.context['catalog'] = args["catalog"];
      this.self.context['now'] = args['now'];
      this.self.context['fields'] = fields = [
         FieldPlanName.create(),
         FieldPlanId.create(),
         FieldFunds.create(),
         FieldProductTypes.create(),
         FieldIssueAge.create(),
         FieldGenderOptions.create(),
         FieldPremiumPayingPeriod.create(),
         FieldBenefitPeriod.create(),
         FieldPremiumRange.create(),
         FieldCurrency.create(),
         FieldSupportOptions.create(),
         FieldInitialPremium.create(),
         FieldFaceAmount.create(),
         FieldDeathBenefitOptions.create(),
         FieldFundChange.create()
      ];
   },
   matchSchema: function(args) {
      var catalog = this.self.context.catalog;
      var latestSchema = null;
      var catalogRecordList = Utils.iterator(catalog.ProductCatalog.ProductCatalogDetail.CatalogRecord);
      for (prodDtlIdx in catalogRecordList) {
         var productDetail = catalogRecordList[prodDtlIdx];

         //console.log(JSON.stringify(productDetail) );

         if (Utils.isNothing(this.self.context.location) || (this.self.context.location == productDetail.Location.text || productDetail.Location.text == WILDCARD)) {
            if ((productDetail.EffectiveDate.text + "000000") <= this.self.context.now) {
               // effective product only
               if (latestSchema == null) {
                  latestSchema = productDetail;
               } else {
                  if (latestSchema.EffectiveDate.text <= productDetail.EffectiveDate.text) {
                     latestSchema = productDetail;
                  }
               }
            }
         }
      }
      this.self.context['latestSchema'] = latestSchema;
   },
   loadSchema: function(args) {
      if (!Utils.isNothing( this.self.context.latestSchema )) {
         var catalog = this.self.context.catalog;
         var latestSchema = this.self.context.latestSchema;
         this.self.context['schema'] = PEservice.loadSchema(
            catalog.ProductCatalog.ProductPK.ProductId.text,
            { schemaId: latestSchema.SchemaId }
         );
      }
   },
   extractFields: function(args) {
      if (!Utils.isNothing( this.self.context.schema )) {
         if (Utils.isNothing())
         this.self.context['product'] = {};
         for (fieldIdx in fields) {
            var fieldImpl = IDataField.appliedTo(fields[fieldIdx]);
            var fieldname = fieldImpl.call("fieldname", {});
            var fieldvalue = null;
            //console.log('fieldname = ' + fieldname);
            try {
               fieldvalue = fieldImpl.call("readField", {
                  planCodes: this.self.context.planCodes,
                  language: this.self.context.language,
                  effectiveDate: this.self.context.effectiveDate,
                  location: this.self.context.location,
                  catalog: this.self.context.catalog,
                  schema: this.self.context.schema
               });
            } catch ( e ) {
               console.log('field (' + fieldname + ') cannot be read. Skip the field - ' + e);
            }
            this.self.context.product[fieldname] = fieldvalue;
         }
      }
   }
});
var PEServiceStubImpl = Class.define({

   loadCatalog: function(args) {
		var productCode = args['productCode'];
      // TODO - implement the actual logic to obtain catalog information
      //        from native code layer in string format or JSON format

      var catalog = JSON.parse(basePlanCatalog);
      //var catalog = JSON.parse(basePlanCatalog, (k, v) => {
      //   return v;
      //});
      return catalog;
   },

   loadSchema: function(args) {
      var schemaInfo = args['productId'];
		var schemaInfo = args['schemaInfo'];
      // TODO - implement the actual logic to obtain schema information
      //        from native code layer, using product code and schema id.
      //        the value can be either JSON or string format

      var schema = JSON.parse(basePlanSchema);
      //var schemas = JSON.parse(basePlanSchema, (k, v) => {
      //   return v;
      //});

      // var schemaFound = null;
      // for (schKey in schemas) {
      //    var schema = schemas[schKey];
      //    if (schema.ProductSchema.ProductSchemaPK.SchemaId.text == schemaInfo.schemaId.text) {
      //       schemaFound = schema;
      //       break;
      //    }
      // }
      return schema;
   },

   listProducts: function(args) {
      return [];
   },

   readRates: function(args) {
      var productId = args['schemaPk'];
		var searchRequest = args['searchRequest'];
      // TODO - implement the actual logic to call RateManager to obtain
      //        rates
      var productRates = rates[searchRequest.rateId];
      var _rates = productRates[searchRequest.rateType];

      if (searchRequest.rateType == RateConstants.RATETYPE.MODALFACTOR) {
         _rates = _rates[searchRequest.paymentMode];
      }

      // create local caches to avoid unnecessary rate loading
      // TODO - build local cache
      // For YRT product, it might be necessary to create a looping here
      // to read all rates from native - need consider.

      return _rates;
   },

   readRate: function(args) {
      // assume readRates to return all rates to JS context already
      // need further consider about YRT and ATTAIN-AGE rates situations
      var _rates = this.readRates(args);
      return _rates.rates[0];
   }

});
var PEServiceIOSImpl = Class.define({

   loadCatalog: function(args) {
      var productCode = args['productCode'];
      var catalog = iOSservice.readProductByProductId(productCode);
      return catalog;
   },

   loadSchema: function(args) {
      var productId = args['productId'];
      var schemaInfo = args['schemaInfo'];
      var schemaFound = iOSservice.readPlanByProductIdSchemaId(productId, Utils.leftPad(schemaInfo.schemaId.text, '0', 2));
      return schemaFound;
   },

   createProductListBuilder: function(args) {
      var planCodes = args["planCodes"];
      var language = args["language"];
      var effectiveDate = args["effectiveDate"];
      var location = args["location"];
      var now = args['now'];
      var catalog = args['catalog'];

      return ProductListBuilder.create(
         {
            planCodes: planCodes,
            language: language,
            effectiveDate: effectiveDate,
            location: location,
            now: now,
            catalog: catalog
         }
      );
   },

   listBaseProducts: function(args) {
      var planCodes = args["planCodes"];
      var language = args["language"];
      var effectiveDate = args["effectiveDate"];
      var location = args["location"];

      console.log("iOSservice (listBaseProducts) --- start")
      console.log(planCodes);
      console.log(language);
      console.log(effectiveDate);
      console.log(location);
      console.log("iOSservice (listBaseProducts)--- end")

      var products = [];
      var now = null;
      if (Utils.isNothing(effectiveDate)) {
         now = Utils.now().formatString();
      } else {
         now = effectiveDate.formatString();
      }
      var buildProcess = BuilderPattern.define(IProductListBuilder, ['matchSchema', 'loadSchema', 'extractFields'] );
      var catalogList = iOSservice.getPlansByProductIds(planCodes);
      for (catalogIdx in catalogList) {
         var catalog = catalogList[catalogIdx];
         var isBasePlan = Utils.matchInList(CatalogConstants.PRODUCT_TYPE.BASEPLAN, catalog.ProductCatalog.ProductType.ProductTypeCode, false);
         if (isBasePlan) {
            var result = buildProcess.build( this.self.createProductListBuilder(
               {
                  planCodes: planCodes,
                  language: language,
                  effectiveDate: effectiveDate,
                  location: location,
                  now: now,
                  catalog: catalog
               }
            ) );
            //console.log("product = " + JSON.stringify(result.product));
            if (!Utils.isNothing( result.context.product )) {
               products.push(result.context.product);
            }
         }
      }
      return products;
   },

   listRiders: function(args) {
      var planCodes = args["planCodes"];
      var language = args["language"];
      var effectiveDate = args["effectiveDate"];
      var location = args["location"];

      console.log("iOSservice (listRiders) --- start")
      console.log(planCodes);
      console.log(language);
      console.log(effectiveDate);
      console.log(location);
      console.log("iOSservice (listRiders)--- end")

      var products = [];
      var now = null;
      if (Utils.isNothing(effectiveDate)) {
         now = Utils.now().formatString();
      } else {
         now = effectiveDate.formatString();
      }
      var buildProcess = BuilderPattern.define(IProductListBuilder, ['matchSchema', 'loadSchema', 'extractFields'] );
      var catalogList = iOSservice.getRidersByProductIds(planCodes);
      for (catalogIdx in catalogList) {
         var product = {};
         var catalog = catalogList[catalogIdx];
         var isBasePlan = Utils.matchInList(CatalogConstants.PRODUCT_TYPE.BASEPLAN, catalog.ProductCatalog.ProductType.ProductTypeCode, false);
         if (!isBasePlan) {
            var result = buildProcess.build( this.self.createProductListBuilder(
               {
                  planCodes: planCodes,
                  language: language,
                  effectiveDate: effectiveDate,
                  location: location,
                  now: now,
                  catalog: catalog
               }
            ) );
            //console.log("product = " + JSON.stringify(result.product));
            if (!Utils.isNothing( result.context.product )) {
               products.push(result.context.product);
            }
         }
      }
      return products;
   },

   readRates: function(args) {
      var schemaPk = args['schemaPk'];
      var searchRequest = args['searchRequest'];


      var context = engine.context();
      //_DB("PE.context: ", context);
      var debug = false;
      if (context && context.proposal && context.proposal.enableDebug) {
         debug = context.proposal.enableDebug;
      }

      //if (PublicConstants.DEBUG) {
      //   console.log(schemaPk);
      //   console.log(searchRequest);
      //}
      var requestString = JSON.stringify({
         schemaPk: schemaPk,
         request: searchRequest
      });
      //if (debug) {
      _DB("readRates.requestString (try 1): " + requestString, "", "PEServiceIOSImpl->");
      //}
      //if (PublicConstants.DEBUG) {
      //   console.log(requestString);
      //}

      /*******************************
      Normal
      *******************************/
      var _rates;
      var isEmpty = true;
      try {
         _rates = iOSservice.readRates(requestString);
         if (!Utils.isNothing(_rates)) {
            if (typeof _rates === 'string' || _rates instanceof String) {
               _rates = JSON.parse(_rates);
            }

            _DB("requestString (try 1}", requestString, "PEServiceIOSImpl->");
            isEmpty = this.self.isEmptyRate({rates: _rates});
            //for(r in _rates.rates) {
            //   if (Number(_rates.rates[r]) > Number(0)) {
            //      isEmpty = false;
            //      break;
            //   }
            //}

            //isEmpty = (_rates.size() == 0)
         }
      } catch (e) {
         _D("Exception (try 1): " + e)
      }

      /*******************************
      Band = 0
      *******************************/
      if (isEmpty && (Number(searchRequest.band) > Number(0))) {
         var bandBackup = searchRequest.band;
         searchRequest.band = 0;
         requestString = JSON.stringify({
            schemaPk: schemaPk,
            request: searchRequest
         });

         //if (debug) {
         _DB("readRates.requestString (try 2 - band=0): " + requestString, "", "PEServiceIOSImpl->");
         //}

         try {
            var _rates2 = iOSservice.readRates(requestString);
            if (!Utils.isNothing(_rates2)) {
               //console.log("_rates = " + JSON.stringify(_rates));
               if (typeof _rates2 === 'string' || _rates2 instanceof String) {
                  _rates2 = JSON.parse(_rates2);
               }
               _rates = _rates2;
            }
            isEmpty = this.self.isEmptyRate({rates: _rates});
         } catch ( e ) {
            _D("Exception (try 2 - band=0): " + e)
         }
         searchRequest.band = bandBackup;
      } else {
         //console.log("_rates = " + JSON.stringify(_rates));
      }

      /*******************************
      Smoking Status = 0
      *******************************/
      if (isEmpty && (Number(searchRequest.smokingStatus) > Number(0))) {
         var smokingStatusBackup = searchRequest.smokingStatus;
         searchRequest.smokingStatus = 0;
         requestString = JSON.stringify({
            schemaPk: schemaPk,
            request: searchRequest
         });

         //if (debug) {
         _DB("readRates.requestString (try 3 - smokingStatus=0): " + requestString, "", "PEServiceIOSImpl->");
         //}

         try {
            var _rates2 = iOSservice.readRates(requestString);
            if (!Utils.isNothing(_rates2)) {
               //console.log("_rates = " + JSON.stringify(_rates));
               if (typeof _rates2 === 'string' || _rates2 instanceof String) {
                  _rates2 = JSON.parse(_rates2);
               }
               _rates = _rates2;
            }
            isEmpty = this.self.isEmptyRate({rates: _rates});
         } catch ( e ) {
            _D("Exception (try 3 - smokingStatus=0): " + e)
         }
         searchRequest.smokingStatus = smokingStatusBackup;
      } else {
         //console.log("_rates = " + JSON.stringify(_rates));
      }

      /*******************************
      Band and Smoking Status = 0
      *******************************/
      if (isEmpty && (Number(searchRequest.smokingStatus) > Number(0))&& (Number(searchRequest.band) > Number(0))) {
         var bandBackup = searchRequest.band;
         var smokingStatusBackup = searchRequest.smokingStatus;
         searchRequest.smokingStatus = 0;
         searchRequest.band = 0;
         requestString = JSON.stringify({
            schemaPk: schemaPk,
            request: searchRequest
         });

         //if (debug) {
         _DB("readRates.requestString (try 4 - band and smokingStatus=0): " + requestString, "", "PEServiceIOSImpl->");
         //}

         try {
            var _rates2 = iOSservice.readRates(requestString);
            if (!Utils.isNothing(_rates2)) {
               //console.log("_rates = " + JSON.stringify(_rates));
               if (typeof _rates2 === 'string' || _rates2 instanceof String) {
                  _rates2 = JSON.parse(_rates2);
               }
               _rates = _rates2;
            }
            isEmpty = this.self.isEmptyRate({rates: _rates});
         } catch ( e ) {
            _D("Exception (try 4 - band and smokingStatus=0): " + e)
         }
         searchRequest.band = bandBackup;
         searchRequest.smokingStatus = smokingStatusBackup;
      } else {
         //console.log("_rates = " + JSON.stringify(_rates));
      }

      if (isEmpty && Number(searchRequest.benefitPeriod) > Number(0)) {
         var bandBackupBenefitPeriod = searchRequest.benefitPeriod;
         searchRequest.benefitPeriod = 0;

         /*******************************
         Normal && coveargeBenefitPeriod = 0
         *******************************/
         requestString = JSON.stringify({
            schemaPk: schemaPk,
            request: searchRequest
         });

         //if (debug) {
         _DB("readRates.requestString (try 2 - band=0): " + requestString, "", "PEServiceIOSImpl->");
         //}

         try {
            var _rates2 = iOSservice.readRates(requestString);
            if (!Utils.isNothing(_rates2)) {
               //console.log("_rates = " + JSON.stringify(_rates));
               if (typeof _rates2 === 'string' || _rates2 instanceof String) {
                  _rates2 = JSON.parse(_rates2);
               }
               _rates = _rates2;
            }
            isEmpty = this.self.isEmptyRate({rates: _rates});
         } catch ( e ) {
            _D("Exception (try B1 - band=0): " + e)
         }

         /*******************************
         Band = 0 && coveargeBenefitPeriod = 0
         *******************************/
         if (isEmpty && (Number(searchRequest.band) > Number(0))) {
            var bandBackup = searchRequest.band;
            searchRequest.band = 0;
            requestString = JSON.stringify({
               schemaPk: schemaPk,
               request: searchRequest
            });

            //if (debug) {
            _DB("readRates.requestString (try 2 - band=0): " + requestString, "", "PEServiceIOSImpl->");
            //}

            try {
               var _rates2 = iOSservice.readRates(requestString);
               if (!Utils.isNothing(_rates2)) {
                  //console.log("_rates = " + JSON.stringify(_rates));
                  if (typeof _rates2 === 'string' || _rates2 instanceof String) {
                     _rates2 = JSON.parse(_rates2);
                  }
                  _rates = _rates2;
               }
               isEmpty = this.self.isEmptyRate({rates: _rates});
            } catch ( e ) {
               _D("Exception (try B2 - band=0): " + e)
            }
            searchRequest.band = bandBackup;
         } else {
            //console.log("_rates = " + JSON.stringify(_rates));
         }

         /*******************************
         Smoking Status = 0 && coveargeBenefitPeriod = 0
         *******************************/
         if (isEmpty && (Number(searchRequest.smokingStatus) > Number(0))) {
            var smokingStatusBackup = searchRequest.smokingStatus;
            searchRequest.smokingStatus = 0;
            requestString = JSON.stringify({
               schemaPk: schemaPk,
               request: searchRequest
            });

            //if (debug) {
            _DB("readRates.requestString (try 3 - smokingStatus=0): " + requestString, "", "PEServiceIOSImpl->");
            //}

            try {
               var _rates2 = iOSservice.readRates(requestString);
               if (!Utils.isNothing(_rates2)) {
                  //console.log("_rates = " + JSON.stringify(_rates));
                  if (typeof _rates2 === 'string' || _rates2 instanceof String) {
                     _rates2 = JSON.parse(_rates2);
                  }
                  _rates = _rates2;
               }
               isEmpty = this.self.isEmptyRate({rates: _rates});
            } catch ( e ) {
               _D("Exception (try B3 - smokingStatus=0): " + e)
            }
            searchRequest.smokingStatus = smokingStatusBackup;
         } else {
            //console.log("_rates = " + JSON.stringify(_rates));
         }

         /*******************************
         Band and Smoking Status = 0 && coveargeBenefitPeriod = 0
         *******************************/
         if (isEmpty && (Number(searchRequest.smokingStatus) > Number(0))&& (Number(searchRequest.band) > Number(0))) {
            var bandBackup = searchRequest.band;
            var smokingStatusBackup = searchRequest.smokingStatus;
            searchRequest.smokingStatus = 0;
            searchRequest.band = 0;
            requestString = JSON.stringify({
               schemaPk: schemaPk,
               request: searchRequest
            });

            //if (debug) {
            _DB("readRates.requestString (try 4 - band and smokingStatus=0): " + requestString, "", "PEServiceIOSImpl->");
            //}

            try {
               var _rates2 = iOSservice.readRates(requestString);
               if (!Utils.isNothing(_rates2)) {
                  //console.log("_rates = " + JSON.stringify(_rates));
                  if (typeof _rates2 === 'string' || _rates2 instanceof String) {
                     _rates2 = JSON.parse(_rates2);
                  }
                  _rates = _rates2;
               }
               isEmpty = this.self.isEmptyRate({rates: _rates});
            } catch ( e ) {
               _D("Exception (try B4 - band and smokingStatus=0): " + e)
            }
            searchRequest.band = bandBackup;
            searchRequest.smokingStatus = smokingStatusBackup;
         } else {
            //console.log("_rates = " + JSON.stringify(_rates));
         }

         searchRequest.benefitPeriod = bandBackupBenefitPeriod;
      }

      return _rates;
   },

   readRate: function(args) {
      var _rates = this.readRates(args);
      return _rates.rates[0];
   },

   isEmptyRate: function(args) {
      var _rates = args['rates'];
      var isEmpty = true;
      for(r in _rates.rates) {
         if (Number(_rates.rates[r]) != Number(0)) {
            isEmpty = false;
            break;
         }
      }
      return isEmpty;
   }

});
var PEServiceWEBImpl = PEServiceIOSImpl.extend({

  loadCatalog: function(args) {
     var catalogString = this.parent.loadCatalog(args);
     //console.log('loadCatalog - catalogString : ' + catalogString);
     var catalog = JSON.parse(catalogString);
     //console.log('loadCatalog - catalog : ' + JSON.stringify(catalog));
     return catalog;
  },

  loadSchema: function(args) {
     var schemaString = this.parent.loadSchema(args);
     var schema = JSON.parse(schemaString);
     return schema;
  },

  readRates: function(args) {
     //var _ratesString = this.parent.readRates(args);
     //var _rates = JSON.parse(_ratesString);
     //return _rates;
     return this.parent.readRates(args);
  },

  readRate: function(args) {
     var _rates = this.self.readRates(args);
     return _rates.rates[0];
  }

});
var BPM1 = Class.define({
    formulaName: function(args) {
        return 'BPM1';
    },
    productId: function(args) {
        var coverage = args['coverage'];
        return null;
    },
    methodId: function(args) {
        var coverage = args['coverage'];
        return 'BPM1';
    },
    productTypes: function(args) {
        var coverage = args['coverage'];
        return null;
    },
    rateList: function(args) {
        var coverage = args['coverage'];
        var ipo = args['ipo'];
        return [{
                rateName: 'premiumRate',
                rateType: RateConstants.RATETYPE.BASICPREMIUM,
                unit: true,
                hasRate: true
            },
            {
                rateName: 'occupationFactorRate',
                rateType: RateConstants.RATETYPE.OCCUPATIONFACTOR,
                unit: false,
                hasRate: coverage.schema.call("hasSupportOption", {
                    option: SchemaConstants.SUPPORT_OPTION.OCCUPATION
                })
            }
        ];
    },
    modalRateList: function(args) {
        var coverage = args['coverage'];
        var ipo = args['ipo'];
        return [{
            rateName: 'modalFactor',
            rateType: RateConstants.RATETYPE.MODALFACTOR,
            unit: false,
            hasRate: true
        }];
    },
    rounding: function(args) {
        var coverage = args['coverage'];
        return coverage.catalog.call("rounding", {
            coverage: coverage
        });
    },
    calculate: function(args) {
        var coverage = args['coverage'];
        var rates = args['rates'];
        var overridePremiumRate = args['overridePremiumRate'];

        var rounding = this.self.rounding(args);
        var modalFactor = rates.modalFactor;
        var occupationFactor = rates.occupationFactorRate;

        var rateUnit = 1;
        var rate = overridePremiumRate;
        if (Utils.isNothing(rate)) {
            rate = rates.premiumRate;
        }
        rateUnit = rates.rateUnits.premiumRate;

        if (!Utils.isNothing(occupationFactor)) {
            rate = rate * occupationFactor;
        }

        var modalRate = rate * modalFactor;
        if (coverage.catalog.call("hasTaxCharge", null)) {
            modalRate = modalRate * PublicConstants.COUNTRY.TAX_RATE;
        }

        var premium = _R(coverage.faceAmount * modalRate / rateUnit, rounding);
        return premium;
    },
    calculateExtraPremium: function(args) {
        var coverage = args['coverage'];
        var rates = args['rates'];
        var policyYear = args['policyYear'];

        var rateUnit = rates.rateUnit.premiumRate;
        var rate = rates.premiumRate;
        var modalFactor = rates.modalFactor;

        var xpremium = 0;
        var premiumX = {};
        if (coverage.extraRating) {
            if (coverage.extraRating.tempFlat) {
                if (coverage.extraRating.tempFlatDuration > policyYear) {
                    var args2 = Utils.extend(args, {
                        overridePremiumRate: coverage.extraRating.tempFlat
                    });

                    var p = this.calculate(args2);
                    premiumX = Utils.extend(premiumX, {
                        temporaryFlatExtra: p
                    });
                    xpremium += p;
                }
            }
            if (coverage.extraRating.flatExtra) {
                var args2 = Utils.extend(args, {
                    overridePremiumRate: coverage.extraRating.flatExtra
                });

                var p = this.calculate(args2);
                premiumX = Utils.extend(premiumX, {
                    permanentFlatExtra: p
                });
                xpremium += p;
            }
            if (coverage.extraRating.percentageExtra) {
                var rounding = this.self.rounding(args);
                var extraRate = rate * (coverage.extraRating.percentageExtra - 1);
                var args2 = Utils.extend(args, {
                    overridePremiumRate: extraRate
                });

                var p = this.calculate(args2);
                premiumX = Utils.extend(premiumX, {
                    percentageExtra: p
                });
                xpremium += p;
            }
        }
        return xpremium;
    }
});

var SPSM = Class.define({
   formulaName: function(args) {
      return 'SPSM';
   },
   productId: function(args) {
      var coverage = args['coverage'];
      return null;
   },
   methodId: function(args) {
      var coverage = args['coverage'];
      return null;
   },
   productTypes: function(args) {
      var coverage = args['coverage'];
      return [CatalogConstants.PRODUCT_TYPE.UVLIFE, CatalogConstants.PRODUCT_TYPE.SINGLE_PREMIUM];
   },
   rateList: function(args) {
      var coverage = args['coverage'];
      var ipo = args['ipo'];
      return [];
   },
   modalRateList: function(args) {
      var coverage = args['coverage'];
      var ipo = args['ipo'];
      return [];
   },
   rounding: function(args) {
      var coverage = args['coverage'];
      return coverage.catalog.call("rounding", {coverage: coverage});
   },
   calculate: function(args) {
      var coverage = args['coverage'];
      var rounding = this.self.rounding(args);
      return _R(coverage.initialDumpIn, rounding);
   },
   calculateExtraPremium: function(args) {
      //return {temporaryFlatExtra : 0, permanentFlatExtra: 0, percentageExtra: 0};
      return 0;
   }
});
var CommonBpm = Class.define({
   init: function(args) {
      this.self.formula = args['formula'];
      this.self.premiums = [];
      this.self.extraPremiums = [];
      this.self.extraPremiumDetails = [];
      this.self.totalPremiums = [];
   },
   /*readModalFactors: function(args) {
      var coverage = args['coverage'];
      //var policyYear = args['policyYear'];
      var paymentMode = args['paymentMode'];
      var ipo = args['ipo'];
      var rateType = args['rateType'];

      var _paymentMode = coverage.options.paymentMode;
      if (paymentMode) {
         coverage.options.paymentMode = paymentMode;
      }
      var PEratemanager = Repository.getManager(SystemComponents.MANAGER.RATE_MANAGER);
      var _rates = IRateManager.appliedTo(PEratemanager).call("lookupRates",
         {coverage: coverage, rateType: rateType, ipo: ipo});
      coverage.options.paymentMode = _paymentMode;
      return _rates;
   },*/
   prepareRates: function(args) {
      var coverage = args['coverage'];
      var ipo = args['ipo'];
      var policyYear = args["policyYear"];
      // prepare annualize rates
      // hasRate, rateType, variableName, policyYear, callback
      var currentYearRates = {};

      var rateList = IBasicPremiumFormula.appliedTo(this.self.formula).call('rateList', {coverage: coverage, ipo: ipo});
      for(rateIndex in rateList) {
         var rateRequired = rateList[rateIndex];

         //if (coverage.proposal.enableDebug) {
         _DB('prepareRates requesting rate', rateRequired, 'CommonBpm ->');
         //}

         var rateName = rateRequired.rateName;
         var rateType = rateRequired.rateType;
         var rateUnit = rateRequired.unit;
         var hasRate = rateRequired.hasRate;

         if (hasRate) {
            /*
            var rates = this.self.loadSingleSetRates(
               {
                  coverage: coverage,
                  ipo: ipo,
                  rateType: rateType,
                  callback: function(rates) {
                     if (rateUnit) {
                        if (Utils.isNothing(currentYearRates["rateUnit"])) {
                            currentYearRates["rateUnit"] = {};
                        }
                        currentYearRates["rateUnit"][rateName] = rates.rateUnit();
                     }
                  }
               }
            );
            */

            var schema = coverage.schema.call('getSchema');
            var rateHandler = _V( _PV(schema, ['ProductSchema','BasicParticular','CalcMethods','RateHandler']), defaultSystemModules.rateHandler );

            _DB('rateHandler', rateHandler);

            var funcManager = Repository.getManager(SystemComponents.MANAGER.FUNCTION_MANAGER);
            var rates = funcManager.call('execute', {
               function: rateHandler,
               args: {
                  coverage: coverage,
                  ipo: ipo,
                  rateType: rateType,
                  callback: function(rates) {
                     if (rateUnit) {
                        if (Utils.isNothing(currentYearRates["rateUnits"])) {
                            currentYearRates["rateUnits"] = {};
                        }
                        currentYearRates["rateUnits"][rateName] = rates.rateUnit();

                        // existing values
                        currentYearRates["rateUnit"] = rates.rateUnit();
                     }
                  }
               }
            }).value;
            //_DB('normal rates', rates);

            if (rates) {
               var rateHelper = IFunction.appliedTo( GetRateByPolicyYear.create() );
               //if (!Utils.isNothing(GetRateByPolicyYearExt)) {
               //   rateHelper = IFunction.appliedTo( GetRateByPolicyYearExt.create() );
               //}
               currentYearRatesObj = rateHelper.call("execute", { rates: rates, year: policyYear });
               currentYearRates[rateName] = currentYearRatesObj.value;
               //currentYearRates[rateName] = rates.rates[0];
               //if (coverage.proposal.enableDebug) {
               _DB('prepareRates(' + rateType + '): ', currentYearRates[rateName], 'CommonBpm ->');
               //}
            }
         }
      }
      return currentYearRates;
   },
   prepareModalRates: function(args) {
      // e.g. modal factor, policy fee
      // mode = A, S, Q, M
      // console.log("prepareModalRates: mode = " + mode);

      // policyYear, mode, coverage, ipo
      var coverage = args['coverage'];
      var ipo = args['ipo'];
      var policyYear = args['policyYear'];
      var mode = args['mode'];

      var modalRates = {};

      var rateList = IBasicPremiumFormula.appliedTo(this.self.formula).call('modalRateList', {coverage: coverage, ipo: ipo});
      for(rateIndex in rateList) {
         var rateRequired = rateList[rateIndex];

         //if (coverage.proposal.enableDebug) {
         _DB('prepareModalRates requesting rate: ', rateRequired, 'CommonBpm ->');
         //}

         var rateName = rateRequired.rateName;
         var rateType = rateRequired.rateType;
         var rateUnit = rateRequired.unit;
         var hasRate = rateRequired.hasRate;

         if (hasRate) {
            /*var rates = this.self.readModalFactors({
               coverage: coverage,
               paymentMode: mode,
               rateType: rateType,
               ipo: ipo
            });
            */
            var rates;
            var schema = coverage.schema.call('getSchema');
            var rateHandler = _V( _PV(schema, ['ProductSchema','BasicParticular','CalcMethods','RateHandler']), "LoadProductRates" );
            _DB('rateHandler', rateHandler);

            var funcManager = Repository.getManager(SystemComponents.MANAGER.FUNCTION_MANAGER);
            rates = funcManager.call('execute', {
               function: rateHandler,
               args: {
                  coverage: coverage,
                  paymentMode: mode,
                  rateType: rateType,
                  ipo: ipo
               }
            }).value;
            //_DB('modal rates', rates);

            if (rates) {
               if (Utils.isNothing(modalRates[rateName])) {
                  modalRates[rateName] = {};
               }
               modalRates[rateName][rateName] = rates.rates[0];
               modalRates[rateName]['rateUnit'] = rates.rateUnit();

               //modalRates[rateName] = rates.rates[0];
               //if (coverage.proposal.enableDebug) {
               _DB('prepareModalRates(' + rateType + '): ', modalRates[rateName], 'CommonBpm ->')
            }
         }
      }
      return modalRates;
   },
   /*loadSingleSetRates: function(args) {
      // hasRate, rateType, variableName, policyYear, callback
      var coverage = args['coverage'];
      var ipo = args['ipo'];
      var rateType = args['rateType'];
      var callback = args['callback'];
      //var hasRate = args['hasRate'];
      //var variableName = args['variableName'];
      //var policyYear = args['policyYear'];

      var PEratemanager = Repository.getManager(SystemComponents.MANAGER.RATE_MANAGER);
      var _rates = IRateManager.appliedTo(PEratemanager).call("lookupRates",
         {coverage: coverage, rateType: rateType, ipo: ipo});
      if (callback) callback(_rates);
      return _rates;
   },*/
   createPremiumResults: function(args) {
      /*
      var premiumResult = args["premiumResult"];
      var extraPremiumResult = args["extraPremiumResult"];
      var extraPremiumResultDetails = args["extraPremiumResultDetails"];
      var totalPremiumResult = args["totalPremiumResult"];

      this.self.premiums = premiumResult;
      this.self.extraPremiums = extraPremiumResult;
      this.self.extraPremiumDetails = extraPremiumResultDetails;
      this.self.totalPremiums = totalPremiumResult;

      var consolidatedPremiums = {
         premiums: this.self.premiums,
         extraPremiums: this.self.extraPremiums,
         extraPremiumDetails: this.self.extraPremiumDetails,
         totalPremiums: this.self.totalPremiums
      };
      */
      var consolidatedPremiums = {};
      for( var premKey in args ) {
          this.self[premKey] = args[premKey];
          consolidatedPremiums[premKey] = args[premKey];
      }
      // console.log("Total Premiums = " + JSON.stringify(consolidatedPremiums));
      return consolidatedPremiums;
   },
   formulaName: function(args) {
      return IBasicPremiumFormula.appliedTo(this.self.formula).call('formulaName', {});
   },
   formulaScope: function(args) {
      var coverage = args['coverage'];
      var methodId = IBasicPremiumFormula.appliedTo( this.self.formula ).call('methodId', {coverage: coverage});
      var productId = IBasicPremiumFormula.appliedTo( this.self.formula ).call('productId', {coverage: coverage});
      var productTypes = IBasicPremiumFormula.appliedTo( this.self.formula ).call('productTypes', {coverage: coverage});
      return {methodId: methodId, productId: productId, productTypes: productTypes};
   },
   emptyResult: function(args) {
      var coverage = args['coverage'];
      var premiumResult = [];
      var extraPremiumResult = [];
      var extraPremiumResultDetails = [];
      var totalPremiumResult = [];

      var premiumModes = coverage.schema.call("availablePaymentModes",
         {premiumType: SchemaConstants.PREMIUM_CATEGORY.BASIC});
      //console.log(JSON.stringify(premiumModes));
      if (Utils.isEmptyObject( premiumModes )) {
         _DB("calculate.paymentModes: ", SchemaConstants.PREMIUM_CATEGORY.BASIC + " cannot be found. Try seach " + SchemaConstants.PREMIUM_CATEGORY.PLANNED + ".", "CommonBpm->");
         premiumModes = coverage.schema.call("availablePaymentModes",
             {premiumType: SchemaConstants.PREMIUM_CATEGORY.PLANNED});
      }
      if (Utils.isEmptyObject( premiumModes )) {
         _DB("calculate.paymentModes: ", SchemaConstants.PREMIUM_CATEGORY.PLANNED + " cannot be found. Try seach " + SchemaConstants.PREMIUM_CATEGORY.BASICONLY + ".", "CommonBpm->");
         premiumModes = coverage.schema.call("availablePaymentModes",
             {premiumType: SchemaConstants.PREMIUM_CATEGORY.BASICONLY});
      }
      //if (coverage.proposal.enableDebug) {
      _DB("calculate.premiumModes: ", premiumModes, "CommonBpm->");
      //}
      for (modeKey in premiumModes) {
         var mode = premiumModes[modeKey];

         premiumResult.push({ paymentMode: mode, premium: 0 });
         extraPremiumResult.push({ paymentMode: mode, extraPremium: 0 });
         totalPremiumResult.push({ paymentMode: mode, totalPremium: 0 });
      }

      return this.self.createPremiumResults({
         premiums: premiumResult,
         extraPremiums: extraPremiumResult,
         extraPremiumDetails: extraPremiumResultDetails,
         totalPremiums: totalPremiumResult
      });
   },
   calculate: function(args) {
      var policyYear = args["policyYear"];
      var coverage = args['coverage'];
      var context = args['context'];
      var ipo = args['ipo'];
      var yearRates = args['yearRates']
      //var rounding = args['rounding'];


      _DB("@@@@ new code 1 @@@@", "")

      // prepare all necessary rates
      var currentYearRates;
      if (Utils.isNothing(yearRates)) {
         currentYearRates = this.self.prepareRates({coverage: coverage, ipo: ipo, policyYear : policyYear});
      } else {
         currentYearRates = _V( yearRates.currentYearRates, {} );
      }

      var premiumResult = [];
      var extraPremiumResult = [];
      var extraPremiumResultDetails = [];
      var totalPremiumResult = [];

      var premiumModes = coverage.schema.call("availablePaymentModes",
         {premiumType: SchemaConstants.PREMIUM_CATEGORY.BASIC});
      //console.log(JSON.stringify(premiumModes));
      if (Utils.isEmptyObject( premiumModes )) {
         _DB("calculate.paymentModes", SchemaConstants.PREMIUM_CATEGORY.BASIC + " cannot be found. Try seach " + SchemaConstants.PREMIUM_CATEGORY.PLANNED + ".", "CommonBpm->");
         premiumModes = coverage.schema.call("availablePaymentModes",
             {premiumType: SchemaConstants.PREMIUM_CATEGORY.PLANNED});
      }
      if (Utils.isEmptyObject( premiumModes )) {
         _DB("calculate.paymentModes", SchemaConstants.PREMIUM_CATEGORY.PLANNED + " cannot be found. Try seach " + SchemaConstants.PREMIUM_CATEGORY.BASICONLY + ".", "CommonBpm->");
         premiumModes = coverage.schema.call("availablePaymentModes",
             {premiumType: SchemaConstants.PREMIUM_CATEGORY.BASICONLY});
      }
      //if (coverage.proposal.enableDebug) {
      _DB("calculate.premiumModes", premiumModes, "CommonBpm->");
      //}

      if ( Utils.isNothing( _PV( this.self.formula, "calculateCompletePremiumRecords" ) ) ) {
         for (modeKey in premiumModes) {
            var mode = premiumModes[modeKey];

            // console.log("mode = " + mode);
            var totalPremium = 0;
            if (Utils.isNothing(yearRates)) {
               var modalRates = this.self.prepareModalRates({coverage: coverage, ipo: ipo, policyYear: policyYear, mode: mode });
               for(var rateName in modalRates) {
                  var modalRate = modalRates[rateName];
                  //currentYearRates = Utils.extend(currentYearRates, { rateName: modalRate[rateName] });
                  currentYearRates[rateName] = modalRate[rateName];
                  currentYearRates.rateUnits[rateName] = modalRate['rateUnit'];
               }
               //_SS(currentYearRates, 10);
               //currentYearRates = Utils.extend(currentYearRates, this.self.prepareModalRates({coverage: coverage, ipo: ipo, policyYear: policyYear, mode: mode }));
            } else {
               if (!Utils.isNothing(yearRates.modalRates)) {
                  currentYearRates = Utils.extend(currentYearRates, _V( yearRates.modalRates[modeKey], {} ) );
               }
            }

            //console.log("normal premium start");
            var premium = IBasicPremiumFormula.appliedTo(this.self.formula).call(
               'calculate', {
                  coverage: coverage,
                  rates: currentYearRates,
                  policyYear: policyYear,
                  paymentMode: mode
               });
            _DB("premium[" + mode + "]", premium, "CommonBpm->");
            //console.log("premium = " + JSON.stringify(premium));
            //console.log("normal premium end");

            premiumResult.push({
               paymentMode: mode,
               premium: premium
            });
            totalPremium += premium;

            if (coverage.extraRating) {
               //console.log("extraRating start");
               //var extraPremiumDetails = this.self.formulaX(policyYear);

               //var extraPremiumDetails = IBasicPremiumFormula.appliedTo(this.self.formula).call(
               var extra = IBasicPremiumFormula.appliedTo(this.self.formula).call(
                  'calculateExtraPremium', {
                     coverage: coverage,
                     rates: currentYearRates,
                     policyYear: policyYear,
                     paymentMode: mode
                  });

               /*
               extraPremiumResultDetails.push({
                  paymentMode: mode,
                  extraPremiumDetails: extraPremiumDetails
               });
               var extra = 0;
               if (extraPremiumDetails.temporaryFlatExtra) {
                  extra += extraPremiumDetails.temporaryFlatExtra;
               }
               if (extraPremiumDetails.permanentFlatExtra) {
                  extra += extraPremiumDetails.permanentFlatExtra;
               }
               if (extraPremiumDetails.percentageExtra) {
                  extra += extraPremiumDetails.percentageExtra;
               }
               */

               if (!Utils.isNothing(extra)) {
                  extraPremiumResult.push({
                     paymentMode: mode,
                     extraPremium: extra
                  });
                  totalPremium += (extra);
               }
               _DB("extraPremium[" + mode + "]", extra, "CommonBpm->");
               //console.log("extraPremium (" + extra + ") = " + JSON.stringify(extraPremiumDetails));
               //console.log("extraRating end");
            }

            totalPremiumResult.push({
               paymentMode: mode,
               totalPremium: totalPremium
            });
         }

         return this.self.createPremiumResults({
            premiums: premiumResult,
            extraPremiums: extraPremiumResult,
            extraPremiumDetails: extraPremiumResultDetails,
            totalPremiums: totalPremiumResult
         })
      } else {
         premiumResult = {};
         for (modeKey in premiumModes) {
            var mode = premiumModes[modeKey];

            // console.log("mode = " + mode);
            var totalPremium = 0;
            //currentYearRates = Utils.extend(currentYearRates, this.self.prepareModalRates({coverage: coverage, ipo: ipo, policyYear: policyYear, mode: mode }));
            if (Utils.isNothing(yearRates)) {
               var modalRates = this.self.prepareModalRates({coverage: coverage, ipo: ipo, policyYear: policyYear, mode: mode });
               for(var rateName in modalRates) {
                  var modalRate = modalRates[rateName];
                  currentYearRates[rateName] = modalRate[rateName];
                  //currentYearRates = Utils.extend(currentYearRates, { rateName: modalRate[rateName] });
                  currentYearRates.rateUnits[rateName] = modalRate['rateUnit'];
               }
               //_SS(currentYearRates, 10);
               //currentYearRates = Utils.extend(currentYearRates, this.self.prepareModalRates({coverage: coverage, ipo: ipo, policyYear: policyYear, mode: mode }));
            } else {
               if (!Utils.isNothing(yearRates.modalRates)) {
                  currentYearRates = Utils.extend(currentYearRates, _V( yearRates.modalRates[modeKey], {} ) );
               }
            }

            var modePremiums = IBasicPremiumFormula.appliedTo(this.self.formula).call(
               'calculateCompletePremiumRecords', {
                  coverage: coverage,
                  rates: currentYearRates,
                  policyYear: policyYear,
                  paymentMode: mode
               });
            // e.g. of modePremiums
            // { premium: 100, extraPremium: 0 }

            if (coverage.proposal.enableDebug) {
               console.log("[ " + mode + " Premiums ]");
               _SS(modePremiums);
            }

            for(var premKey in modePremiums) {
               if (Utils.isNothing(premiumResult[premKey + 's'])) {
                  premiumResult[premKey + 's'] = [];
               }

               var premRec = premiumResult[premKey + 's'];
               var rec = {};
               rec['paymentMode'] = mode;
               rec[premKey] = modePremiums[premKey];
               premRec.push( rec );
            }
            // e.g. of premiumResult
            // { premiums: [ { paymentMode: 'Annual', premium: 100 } ]
         }
         return this.self.createPremiumResults(premiumResult);
      }
   }
});
var PlusFunction = Class.define({
    functionName: function(args) {
        return "PlusFunction";
    },

    execute: function(args) {
        var a = args['a'];
        var b = args['b'];

        _SS(args, 10);

        var result = {};
        if (Utils.isNothing(a) || Utils.isNothing(b)) {
            // error can be json or actual value (depending on function)
            result['errors'] = { code:"00000", message:"Missing input parameters." };
        }

        // value can be json or actual value (depending on function)
        result['value'] = Number(a) + Number(b);
        return result;
    }
});

var CalculateCoveragePremium = Class.define({
    functionName: function(args)
    {
        return "CalculateCoveragePremium";
    },
    execute: function(args)
    {
        var coverage = args["coverage"];
        var year = args['year'];
        var months = args['months'];
        var paymentMode = args['paymentMode'];
        var context = args['context'];
        var debug = args['debug'];

        if (Utils.isNothing(paymentMode)) {
            paymentMode = coverage.proposal.coverageInfo.options.paymentMode;
        }
        if (Utils.isNothing(paymentMode)) {
            paymentMode = SchemaConstants.PAYMENT_MODE.ANNUAL;
        }

        var covPremium = 0;
        var ppp = coverage.schema.call("calculatePremiumPayingPeriod", {
            coverage: coverage
        });

        var debugBackup = _V( coverage.proposal.enableDebug, false );
        if (debug) {
            // follow proposal.enableDebug
        } else {
            coverage.proposal.enableDebug = false;
        }
        if (year < ppp) {
            var premiumCalculator = Repository.getManager(SystemComponents.MANAGER.PREMIUM_CALCULATOR);
            var calculator = premiumCalculator.call("lookupCalculator", {
                coverage: coverage
            });
            if (!Utils.isNothing(calculator)) {
                var result = calculator.call("calculate", {
                    coverage: coverage,
                    ipo: _V(coverage.ipo, 0),
                    context: context,
                    policyYear: year
                });

                //_SS(result, 10);

                for (var i in result.totalPremiums) {
                    var totalPremiumRec = result.totalPremiums[i];
                    if (totalPremiumRec.paymentMode == paymentMode) {
                        covPremium = totalPremiumRec.totalPremium;
                        break;
                    }
                }
            }
        }
        coverage.proposal.enableDebug = debugBackup;

        return {
            value: covPremium
        };
    },
});

var GetRateByPolicyYear = Class.define({
    functionName: function(args) {
        return "GetRateByPolicyYear";
    },
    execute: function(args) {
        var rates = args['rates'];
        var year = args['year'];
        var options = rates.header.options;
        var rateValue;
        var attainAgeRate = RateConstants.RATE_OPTION.READ_BY_ATTAINAGE;
        var yrtRates = RateConstants.RATE_OPTION.READ_BY_ATTAINAGE | RateConstants.RATE_OPTION.YRT;

        //_DB(">>>> IT IS EXTENDED VERSION OF GETRATE")
        //_DB(">>>> check1", Utils.compareBits(options, attainAgeRate));
        //_DB(">>>> check2", Utils.compareBits(options, yrtRates));
        //_DB(">>>> rates.rates", rates.rates);
        //_DB(">>>> year", year);

        if (Utils.compareBits(options, attainAgeRate) || Utils.compareBits(options, yrtRates)) {
            if (rates.rates.length > year) {
                rateValue = rates.rates[year];
            } else {
                rateValue = 0;
            }
        } else {
            rateValue = rates.rates[0];
        }

        //_DB(">>>> rateValue", rateValue);

        return {
            value: rateValue
        };
    }
});

var LoadProductRates = Class.define({
    init: function(args) {
        this.self['cache'] = {};
        this.self['LAST_CLEAR_TIME'] = (new Date()).getTime();
        this.self['INTERVAL'] = 60000;
        this.self['MAX_CACHE'] = 900000;
    },
    functionName: function(args) {
        return "LoadProductRates";
    },
    execute: function(args) {
        // hasRate, rateType, variableName, policyYear, callback
        var coverage = args['coverage'];
        var ipo = args['ipo'];

        var rateType = args['rateType'];
        var resourceKey = args['resourceKey'];

        var callback = args['callback'];
        var paymentMode = args['paymentMode'];

        //var hasRate = args['hasRate'];
        //var variableName = args['variableName'];
        //var policyYear = args['policyYear'];

        if (Utils.isNothing(rateType) && !Utils.isNothing(resourceKey)) {
           _DB('resourceKey -> rateType', '');
           _DB('resourceKey', resourceKey);

           var rm = Repository.getManager(SystemComponents.MANAGER.RATE_MANAGER);
           //if (coverage.proposal.enableDebug) {
           //   _SS(rm.self.handlersByResourceKey, 2);
           //}
           var hdr = rm.self.handlersByResourceKey[resourceKey];
           _DB('rateType', hdr.rateType);

           rateType = hdr.rateType;
           args['rateType'] = rateType;
        }

        var now = new Date();
        var timeToClear = now.getTime() - this.self.LAST_CLEAR_TIME;
        //_DB('@@@ clear cache @@@', 'START');
        //_DB('this.self.timeToClear', timeToClear);
        //_DB('this.self.LAST_CLEAR_TIME', this.self.LAST_CLEAR_TIME);
        if (timeToClear > this.self.INTERVAL) {
           // clear cache
           var clearList = [];
           //if (coverage.proposal.enableDebug) {
           //   _SS(this.self.cache, 1);
           //}
           for (var ck in this.self.cache) {
              var v = this.self.cache[ck];
              var t = v.t;
              var g = now.getTime() - t;
              _DB('cache (' + ck + ')', g + '/' + this.self.MAX_CACHE);
              if (g >= this.self.MAX_CACHE) {
                 clearList.push(ck);
              }
           }
           //if (coverage.proposal.enableDebug) {
           //   _SS(clearList, 5);
           //}
           if (clearList.length > 0) {
              for(var ck in clearList) {
                 var cki = clearList[ck];
                 delete this.self.cache[cki];
              }
           }
           //if (coverage.proposal.enableDebug) {
           //   _SS(this.self.cache, 1);
           //}

           this.self['LAST_CLEAR_TIME'] = now.getTime();
           //_DB('this.self.LAST_CLEAR_TIME', this.self['LAST_CLEAR_TIME']);
        }
        //_DB('@@@ clear cache @@@', 'COMPLETE');

        var _rates;
        var rateKey = this.self.createRateKey(args);
        if (!Utils.isNothing(this.self.cache[rateKey])) {
            var v = this.self.cache[rateKey];
            _rates = v.rates;
            _DB("rateKey (read cache)", rateKey);
        } else {
            var _paymentMode = coverage.options.paymentMode;
            if (paymentMode) {
               coverage.options.paymentMode = paymentMode;
            }
            var PEratemanager = Repository.getManager(SystemComponents.MANAGER.RATE_MANAGER);
            var _rates = IRateManager.appliedTo(PEratemanager).call("lookupRates",
               {coverage: coverage, rateType: rateType, ipo: ipo});
            if (paymentMode) {
               coverage.options.paymentMode = _paymentMode;
            }
            this.self.cache[rateKey] = {rates: _rates, t: now.getTime()};
            _DB("rateKey (write cache)", rateKey);
        }
        if (callback) callback(_rates);
        return {value: _rates};
    },
    createRateKey: function(args) {
        var coverage = args['coverage'];
        var ipo = args['ipo'];
        var rateType = args['rateType'];
        var paymentMode = args['paymentMode'];

        var insured = getPrimaryInsured({coverage:coverage});

        var insuredAge = insured.insuredAge;
        var smokingStatus = insured.smokingStatus;
        var insuredSex = insured.insuredSex;
        var productId = _V( _PV( coverage, 'product.productKey.primaryProduct.productPK.productId' ), '--' );
        var assProductId = _V( _PV( coverage, 'product.productKey.associateProduct.productPK.productId' ), '--' );
        var basProductId = _V( _PV( coverage, 'product.productKey.basicProduct.productPK.productId' ), '--' );

        var location = _V( _PV( coverage, 'product.productKey.location' ), '--' );
        var channel = _V( _PV( coverage, 'proposal.channel' ), '--' );
        var waitingPeriod = _V( _PV( coverage, 'otherOptions.waitingPeriod' ), '--' );
        var benefitPeriod = _V( _PV( coverage, 'otherOptions.benefitPeriod' ), '--' );
        var occupation = _V( _PV( coverage, 'occupation' ), '--' );
        var rcc = _V( _PV( coverage, 'rcc' ), '--' );
        var noOfPerson = _V( _PV( coverage, 'otherOptions.noOfPerson' ), '--' );
        var coverageClass = _V( _PV( coverage, 'otherOptions.coverageClass' ), '--' );
        var majorMedical = _V( _PV( coverage, 'otherOptions.majorMedical' ), '--' );
        var waiverPeriod = _V( _PV( coverage, 'otherOptions.waiverPeriod' ), '--' );
        var banding = _V( _PV(coverage, "banding.Band") );

        var basicKey = rateType + ',' + ipo + ',' + productId + ',' + assProductId + ',' + basProductId + ',' + banding + ',' +
                       insuredAge + ',' + smokingStatus + ',' + insuredSex + ',' + location + ',' + channel + ',' + waitingPeriod + ',' +
                       benefitPeriod + ',' + occupation + ',' + rcc + ',' + noOfPerson + ',' + coverageClass + ',' + majorMedical + ',' +
                       waiverPeriod;
        if (!Utils.isNothing(paymentMode)) {
            basicKey = basicKey + ',' + paymentMode;
        } else {
            basicKey = basicKey + ',--';
        }
        return basicKey;
    }
});

var AgeCalculator = Class.define({
    functionName: function(args) {
        return "AgeCalculator";
    },
    execute: function(args) {
        var dateOfBirth = args["dateOfBirth"];
        var policyYearDate = args["policyYearDate"];
        var language = args["language"];

        /*
        var dob = null;
        if (typeof dateOfBirth === 'string' || dateOfBirth instanceof String) {
            console.log("dob string is received - " + dateOfBirth);
            dob = dateOfBirth.date();
        } else
        if (typeof dateOfBirth === 'date' || dateOfBirth instanceof Date) {
            console.log("dob date is received - " + dateOfBirth);
            dob = dateOfBirth;
        }

        var pyd = null;
        if (typeof policyYearDate === 'string' || policyYearDate instanceof String) {
            console.log("pyd string is received - " + policyYearDate);
            pyd = policyYearDate.date();
        } else
        if (typeof policyYearDate === 'date' || policyYearDate instanceof Date) {
            console.log("pyd date is received - " + policyYearDate);
            pyd = policyYearDate;
        }
        */

        var dob = this.self.toDate({date: dateOfBirth});
        var pyd = this.self.toDate({date: policyYearDate});

        if (Utils.isNothing(language)) {
            language = "en";
        }

        console.log("calculateInsuredAge - begin")
        console.log("dateOfBirth = " + dateOfBirth);
        console.log("policyYearDate = " + policyYearDate);
        console.log("dob = " + dob);
        console.log("pyd = " + pyd);

        var result = {};
        if (dob == null || pyd == null) {
            result["error"] = this.getErrors({
                language: "en",
                errorCode: "ERRC0000",
                variables: []
            });
            result["age"] = -1;
        } else {
            try {
                if (Utils.isNothing(pyd)) {
                    pyd = Utils.now();
                }

                /**
                 * LAST calculation
                 */
                var age = pyd.getFullYear() - dob.getFullYear();
                var dtLstBirth = new Date(dob.getFullYear() + age, dob.getMonth(), dob.getDate());
                /**
                 * If it is a leap year, then do not shift to next day (AddDate function of VB.NET)
                 * for example if DOB=29/2/2016, then DOB + 1YEAR is expected as 28/02/2017
                 */
                var lstDateOfMonth = new Date(dob.getFullYear() + age, dob.getMonth() + 1, 0);
                if( dtLstBirth > lstDateOfMonth){
                  dtLstBirth = lstDateOfMonth;
                }

                if( pyd < dtLstBirth){
                  age = age - 1;
                }

                /*
                 * NEAREST calculation
                var julianDayDob = dob.julianDay();
                var julianDayPyd = pyd.julianDay();

                if (dob.daysInYear() > 365 && julianDayDob > 59) {
                    julianDayDob--;
                }

                if (pyd.daysInYear() > 365 && julianDayPyd > 59) {
                    julianDayPyd--;
                }

                var age = pyd.getFullYear() - dob.getFullYear();
                if (julianDayDob > julianDayPyd) {
                    age--;
                    julianDayPyd += 365;
                }

                if ((julianDayPyd - julianDayDob) > 183) {
                    age++;
                }
                */

                result["age"] = age;
                result["error"] = "";
            } catch (e) {
                result["age"] = null;
                result["error"] = e;
            }
        }
        return result;
    },
    toDate: function(args) {
        var d = args['date'];
        var o;
        if (typeof d === 'string' || d instanceof String) {
            console.log("a string date is received - " + d);
            o = d.date();
        } else
        if (typeof d === 'date' || d instanceof Date) {
            console.log("a date value is received - " + d);
            o = d;
        }
        return o;
    },
    getErrors: function(args) {
        var mm = Repository.getManager(SystemComponents.MANAGER.MESSAGE_MANAGER);

        var language = args["language"];
        var errorCode = args["errorCode"];
        var variables = args["variables"];
        var message = mm.call("getMessage", {
            error: {
                code: errorCode,
                arguments: variables
            },
            language: language
        });
        return message;
    }
});


var CatalogImpl = Class.define({

    init: function(args) {
        var _catalog = args["catalogDefintion"];
        if (Utils.isNothing(_catalog)) {
            console.log("ERROR: Catalog is initialized by a empty definition.");
        } else {
            this.self.catalog = _catalog;
        }
    },

    getCatalog: function(args) {
        return this.self.catalog;
    },

    lookupSchema: function(args) {
        var coverage = args['coverage'];
        var debugMode = coverage.proposal.enableDebug;

        var _proposal = coverage.proposal;
        var _pyd = _proposal.policyYearDate.substring(0, 8);

        //var _coverage = coverage;
        /*
        var conditions = [
        {
            catalogField: "Channel",
            requestField: _proposal.channel
        },
        {
            catalogField: "Location",
            requestField: (_coverage.product.productKey.location)
        },
        {
            catalogField: "ProductPK.ProductId",
            requestField: _coverage.product.productKey.associateProduct.productPK.productId
        },
        {
            catalogField: "BasicProductId",
            requestField: _coverage.product.productKey.basicProduct.productPK.productId
        }
        ];
        */

        var lookupSchemaFilter = _V( defaultSystemModules.LookupSchemaFilter.Products,
           {
              "_ALL_": {
                  "Channel": "coverage.proposal.channel",
                  "Location": "coverage.product.productKey.location",
                  "ProductPK.ProductId": "coverage.product.productKey.associateProduct.productPK.productId",
                  "BasicProductId": "coverage.product.productKey.basicProduct.productPK.productId"
              }
           }
        );

        var productCode = _PV( coverage, "product.productKey.primaryProduct.productPK.productId" );
        // default one
        var searchFields = lookupSchemaFilter["_ALL_"];
        if (!Utils.isNothing(lookupSchemaFilter[productCode])) {
            searchFields = lookupSchemaFilter[productCode];
        }

        var conditions = [];
        var data = {coverage : coverage};
        for(var catalogField in searchFields) {
            var requestField = searchFields[catalogField];
            conditions.push( {catalogField: catalogField, requestField: _V( _PV( data,  requestField ) ) } );
        }

        var matchSchema = function(dtl, cvg) {
            if (cvg.product.productKey.valueDate < dtl.EffectiveDate.text) {
                return false;
            }
            //if (debugMode) {
            _DB('schema record: ', dtl, 'matchSchema->');
            //}
            for (var condKey in conditions) {
                var cond = conditions[condKey];
                _DB("matching condition", cond, 'matchSchema->');

                var dtlValue = _V( _PV( dtl, cond.catalogField ), WILDCARD );
                if (dtlValue != WILDCARD) {
                    if (cond.requestField) {
                        if (cond.requestField.toLowerCase() != dtlValue.toLowerCase()) {
                            //if (debugMode) {
                            _DB('>>> match field (' + cond.catalogField + ') - NOT MATCH: ', cond.requestField.toLowerCase() + ' vs ' + dtlValue.toLowerCase() + '=>' + (cond.requestField.toLowerCase() == dtlValue.toLowerCase()), 'matchSchema->');
                            //}
                            return false;
                        }
                    } else {
                        //if (debugMode) {
                        _DB('>>> match field (' + cond.catalogField + ') - MISSING FIELD: ', dtlValue.toLowerCase(), 'matchSchema->');
                        //}
                        return false;
                    }
                } else {
                    //if (debugMode) {
                    _DB('>>> match field (' + cond.catalogField + ') - SKIP: ', dtlValue, 'matchSchema->');
                    //}
                }
            }
            return true;
        };

        var schemaInfo = null;
        var iter = Utils.iterator(this.self.catalog.ProductCatalog.ProductCatalogDetail.CatalogRecord);
        for (var key in iter) {
            dtl = iter[key];
            var expiryDate = dtl.ExpiryDate;
            var effectiveDate = _V( dtl.EffectiveDate );
            _DB('>>> pyd', _pyd, "lookupSchema->");
            _DB('>>> effectiveDate', effectiveDate, "lookupSchema->");
            _DB('>>> expiryDate', expiryDate, "lookupSchema->");

            if (_pyd >= effectiveDate) {
                var ok = true;
                if (!Utils.isNothing(expiryDate)) {
                    ok = (_V( expiryDate, "" ) > _pyd);
                }

                if (ok) {
                    _DB('>>> Schema', "Acive", "expiryDate->");
                    if (matchSchema(dtl, coverage)) {
                        schemaInfo = {
                            "schemaId": dtl.SchemaId
                        };
                    }
                } else {
                    _DB('>>> Schema', "Expired", "expiryDate->");
                }
            } else {
                _DB('>>> Schema', "Inactive", "expiryDate->");
            }
        }

        //if (debugMode) {
        _DB('schema located: ', schemaInfo, 'matchSchema->');
        //}
        return schemaInfo;
    },

    isUVL: function() {
        return Utils.matchInList(CatalogConstants.PRODUCT_TYPE.UVLIFE, this.self.catalog.ProductCatalog.ProductType.ProductTypeCode, false);
    },

    isSinglePremium: function() {
        return Utils.matchInList(CatalogConstants.PRODUCT_TYPE.SINGLE_PREMIUM, this.self.catalog.ProductCatalog.ProductType.ProductTypeCode, false);
    },

    isJoinLife: function() {
        return Utils.matchInList(CatalogConstants.PRODUCT_TYPE.JOINLIFE, this.self.catalog.ProductCatalog.ProductType.ProductTypeCode, false);
    },

    //isRegularUVLPlans: function(args) {
    //    var planCode = args['productCode'];
    //
    //    // TODO - remove those hardcoded plans by refactoring
    //    var planCodes = "|UN105|UN110|UN199|UN205|UN210|UN299|UO105|UO110|UO199|UO205|UO210|UO299" +
    //        "|UH105|UH110|UH199|UH205|UH210|UH299|UI105|UI110|UI199|UI205|UI210|UI299" +
    //        "|CE105|CE110|CA199|CB199|CC199|CE205|CE210|CA299|CB299|CC299" +
    //        "|DE105|DE110|DA199|DB199|DC199|DE205|DE210|DA299|DB299|DC299|";
    //    return (planCodes.indexOf("|" + planCodes + "|") > 0);
    //},

    hasTaxCharge: function() {
        return Utils.matchInList(CatalogConstants.PRODUCT_TYPE.TAXCHARGE, this.self.catalog.ProductCatalog.ProductType.ProductTypeCode, false);
    },

    isBenefit: function() {
        return Utils.matchInList(CatalogConstants.PRODUCT_TYPE.BENEFIT, this.self.catalog.ProductCatalog.ProductType.ProductTypeCode, false);
    },

    rounding: function(args) {
        /*
        var coverage = args["coverage"];
        if (coverage != coverage.proposal.coverageInfo) {
            var basePlanCatalog = coverage.proposal.coverageInfo.catalog.call("getCatalog", {});
            if (Utils.matchInList(CatalogConstants.PRODUCT_TYPE.UVLIFE, basePlanCatalog.ProductCatalog.ProductType.ProductTypeCode, false) &&
                Utils.matchInList(CatalogConstants.PRODUCT_TYPE.REGULAR_SAVING, basePlanCatalog.ProductCatalog.ProductType.ProductTypeCode, false)) {
                if (!this.self.isRegularUVLPlans({productCode: coverage.product.productKey.primaryProduct.productPK.productId})) {
                    return PublicConstants.ROUNDING.REGULAR_SAVING_UVLIFE;
                }
            }
        } else {
            if (Utils.matchInList(CatalogConstants.PRODUCT_TYPE.UVLIFE, this.self.catalog.ProductCatalog.ProductType.ProductTypeCode, false) &&
                Utils.matchInList(CatalogConstants.PRODUCT_TYPE.REGULAR_SAVING, this.self.catalog.ProductCatalog.ProductType.ProductTypeCode, false)) {
                return PublicConstants.ROUNDING.REGULAR_SAVING_UVLIFE;
            }
        }
        */
        return PublicConstants.ROUNDING.DEFAULT;
    },

    isBasePlan: function() {
        return Utils.matchInList(CatalogConstants.PRODUCT_TYPE.BASEPLAN, this.self.catalog.ProductCatalog.ProductType.ProductTypeCode, false);
    },

    isRider: function() {
        return !this.self.isBasePlan();
    },

    isCoupon: function() {
        return Utils.matchInList(CatalogConstants.PRODUCT_TYPE.COUPON, this.self.catalog.ProductCatalog.ProductType.ProductTypeCode, false);
    },

    isFundCodeSupported: function(args) {
        var fund = args["fund"];
        if (Utils.isNothing(this.self.catalog.ProductCatalog.FundMapInformation.FundCode)) {
            return false;
        }
        var fundTable = Utils.iterator(this.self.catalog.ProductCatalog.FundMapInformation.FundCode);
        //console.log("this.self.catalog.ProductCatalog.FundMapInformation.FundCode = " + this.self.catalog.ProductCatalog.FundMapInformation.FundCode);
        //console.log("this.self.catalog.ProductCatalog.FundMapInformation.FundCode.length = " + this.self.catalog.ProductCatalog.FundMapInformation.FundCode.length);
        //console.log("fundTable = " + JSON.stringify(fundTable));
        //console.log("fundTable.length = " + fundTable.length);
        if (fundTable.length > 0) {
            for (fundi in fundTable) {
                var fundRec = fundTable[fundi];
                if (fundRec.text.toLowerCase() == (fund).toLowerCase()) {
                    return true;
                }
            }
        }
        return false;
    },

    isSOS: function() {
        return Utils.matchInList(CatalogConstants.PRODUCT_TYPE.HAS_SOS, this.self.catalog.ProductCatalog.ProductType.ProductTypeCode, false);
    },

    isIncome3: function() {
        return Utils.matchInList(CatalogConstants.PRODUCT_TYPE.INCOME3, this.self.catalog.ProductCatalog.ProductType.ProductTypeCode, false);
    },

    isTerm: function() {
        return Utils.matchInList(CatalogConstants.PRODUCT_TYPE.TERM, this.self.catalog.ProductCatalog.ProductType.ProductTypeCode, false);
    },

    isRegularSaving: function() {
        return Utils.matchInList(CatalogConstants.PRODUCT_TYPE.REGULAR_SAVING, this.self.catalog.ProductCatalog.ProductType.ProductTypeCode, false);
    },

    isParticipate: function() {
        return Utils.matchInList(CatalogConstants.PRODUCT_TYPE.PARTICIPATE, this.self.catalog.ProductCatalog.ProductType.ProductTypeCode, false);
    },

    isGuaranteedIssue: function() {
        return Utils.matchInList(CatalogConstants.PRODUCT_TYPE.GUARANTEED_ISSUE, this.self.catalog.ProductCatalog.ProductType.ProductTypeCode, false);
    },

    isConditionalGuaranteedIssue: function() {
        return Utils.matchInList(CatalogConstants.PRODUCT_TYPE.CONDITIONAL_GUARANTEED_ISSUE, this.self.catalog.ProductCatalog.ProductType.ProductTypeCode, false);
    },
    isFamilyProductType: function() {
        return Utils.matchInList(CatalogConstants.PRODUCT_TYPE.FAMILY, this.self.catalog.ProductCatalog.ProductType.ProductTypeCode, false);
    },
    isSpouseProductType: function() {
        return Utils.matchInList(CatalogConstants.PRODUCT_TYPE.SPOUSE, this.self.catalog.ProductCatalog.ProductType.ProductTypeCode, false);
    },
    isChildProductType: function() {
        return Utils.matchInList(CatalogConstants.PRODUCT_TYPE.CHILD, this.self.catalog.ProductCatalog.ProductType.ProductTypeCode, false);
    },
    isRiderProductType: function() {
        return Utils.matchInList(CatalogConstants.PRODUCT_TYPE.RIDER, this.self.catalog.ProductCatalog.ProductType.ProductTypeCode, false);
    },
    isWaiver: function() {
        var c1 = Utils.matchInList(CatalogConstants.PRODUCT_TYPE.WAVIER, this.self.catalog.ProductCatalog.ProductType.ProductTypeCode, false);
        var c2 = Utils.matchInList(CatalogConstants.PRODUCT_TYPE.PAYORBENEFIT, this.self.catalog.ProductCatalog.ProductType.ProductTypeCode, false);
        return (c1 || c2);
    }
});
var SchemaImpl = Class.define({

   init: function(args) {
      var _schema = args['schemaDefinition'];
      this.self.schema = _schema;
   },

   getSchema: function() {
      return this.self.schema;
   },

   isRefundPremiumSupported: function() {
      if (Utils.isNothing( _PV(this.self.schema, 'ProductSchema.PolicyValue.PolicyValueTable') )) {
         return false;
      }
      var pvTable = Utils.iterator(this.self.schema.ProductSchema.PolicyValue.PolicyValueTable);
      for (var pvi in pvTable) {
         var pv = pvTable[pvi];
         if (pv.PolicyValueType.text.toLowerCase() == SchemaConstants.POLICY_VALUE.RETURNPREMIUM.toLowerCase()) {
            return true;
         }
      }
      return false;
   },

   isChargeTypeSupported: function(args) {
      var chargeType = args['chargeType'];
      if (!Utils.isNothing(chargeType)) {
         if (Utils.isNothing( _PV(this.self.schema, 'ProductSchema.ChargeInfo.ChargeScale') )) {
            return false;
         }
         var chgTable = Utils.iterator(this.self.schema.ProductSchema.ChargeInfo.ChargeScale);
         //console.log("chgTable = " + JSON.stringify(chgTable));
         //console.log("chgTable.length = " + chgTable.length);
         for (var chgi in chgTable) {
            //console.log("chgi = " + chgi);
            //console.log("chgTable[" + chgi + "] = " + chgTable[chgi]);
            var charge = chgTable[chgi];
            for (var chgti in charge.ChargeType) {
               var chgType = charge.ChargeType[chgti];
               if (!Utils.isNothing(chgType) && !Utils.isNothing(chgType.text)) {
                  if (chgType.text.toLowerCase() == chargeType.toLowerCase()) {
                     return true;
                  }
               }
            }
         }
      }
      return false;
   },

   isCurrencySupported: function(args) {
      var currencyId = args['currencyId'];
      if (Utils.isNothing( _PV(this.self.schema, 'ProductSchema.PremiumInfo.PremiumTable') )) {
         return false;
      }
      var premiumTable = Utils.iterator(this.self.schema.ProductSchema.PremiumInfo.PremiumTable);
      for (var premiumKey in premiumTable) {
         var premiumRec = premiumTable[premiumKey];
         if (currencyId == premiumRec.CurrencyId.text) {
            return true;
         }
      }
      return false;
   },

   hasSupportOption: function(args) {
      var option = args['option'];
      if (Utils.isNothing(option)) return false;
      if (Utils.isNothing( _PV(this.self.schema, 'ProductSchema.BasicParticular.SupportOption') )) {
         return false;
      }
      var opt = this.self.schema.ProductSchema.BasicParticular.SupportOption[option];
      if (opt) {
         if (opt.text.toLowerCase() == "y") {
            return true;
         } else {
            return false;
         }
      } else {
         return false;
      }
   },

   calculateBanding: function(args) {
      var coverage = args['coverage'];
      var insuredAge = args['insuredAge'];

      var showLog = coverage.proposal.enableDebug;

      // if no insured age is passed in, use primary insured age
      if (Utils.isNothing(insuredAge)) {
         var insured = getPrimaryInsured({coverage: coverage});
         if (!Utils.isNothing(insured)) {
             insuredAge = insured.insuredAge;
         }
      }
      // ----

      if (Utils.isNothing( _PV(this.self.schema, 'ProductSchema.BandInformation.BandRecord') )) {
         return null;
      }

      var banding = null;
      var bandTable = Utils.iterator(this.self.schema.ProductSchema.BandInformation.BandRecord);
      for (var bandKey in bandTable) {
         var band = bandTable[bandKey];
         var matched = true;

         if (showLog) console.log("calculateBanding - begin");

         matched = matched && Utils.matchRange(coverage.plannedPremium, Number(band.MinContractPremium.text), Number(band.MaxContractPremium.text), true);
         if (showLog) {
             console.log("1. contract premium - matched = " + matched);
             if (!matched) {
                console.log("coverage.plannedPremium = " + coverage.plannedPremium);
                console.log("band.MinContractPremium.text = " + band.MinContractPremium.text);
                console.log("band.MaxContractPremium.text = " + band.MaxContractPremium.text);
             }
          }
         matched = matched && Utils.matchRange(coverage.faceAmount, Number(band.MinFaceAmount.text), Number(band.MaxFaceAmount.text), true);
         if (showLog) {
             console.log("2. face amount - matched = " + matched);
             if (!matched) {
                console.log("coverage.faceAmount = " + coverage.faceAmount);
                console.log("band.MinFaceAmount.text = " + band.MinFaceAmount.text);
                console.log("band.MaxFaceAmount.text = " + band.MaxFaceAmount.text);
             }
         }
         matched = matched && (coverage.currency.currencyPK.currencyId == band.CurrencyPK.CurrencyId.text);
         if (showLog) {
             console.log("3. currency - matched = " + matched);
             if (!matched) {
                console.log("coverage.currency.currencyPK.currencyId = " + coverage.currency.currencyPK.currencyId);
             }
         }
         matched = matched && Utils.matchRange(insuredAge, Number(band.MinIssueAge.text), Number(band.MaxIssueAge.text), true);
         if (showLog) {
             console.log("4. issue age - matched = " + matched);
             if (!matched) {
                console.log("coverage.parties.party.insuredAge = " + insuredAge);
                console.log("band.MinIssueAge.text = " + band.MinIssueAge.text);
                console.log("band.MaxIssueAge.text = " + band.MaxIssueAge.text);
             }
         }
         matched = matched && Utils.matchRange(coverage.topUpPremium, Number(band.MinTopup.text), Number(band.MaxTopup.text), true);
         if (showLog) {
             console.log("5. topup amount - matched = " + matched);
             if (!matched) {
                console.log("coverage.topUpPremium = " + coverage.topUpPremium);
                console.log("band.MinTopup.text = " + band.MinTopup.text);
                console.log("band.MaxTopup.text = " + band.MaxTopup.text);
             }
         }
         if (!Utils.isNothing(band.MinSinglePremium) && !Utils.isNothing(band.MaxSinglePremium)) {
            matched = matched && Utils.matchRange(coverage.initialDumpIn, Number(band.MinSinglePremium.text), Number(band.MaxSinglePremium.text), true);
            if (showLog) {
                console.log("6. single premium - matched = " + matched);
                if (showLog) {
                   console.log("coverage.initialDumpIn = " + coverage.initialDumpIn);
                   console.log("band.MinSinglePremium.text = " + band.MinSinglePremium.text);
                   console.log("band.MaxSinglePremium.text = " + band.MaxSinglePremium.text);
                }
            }
         }
         if (showLog) console.log("calculateBanding - end");
         if (matched) {
            banding = band;
            break;
         }
      }
      return banding;
   },

   schemaChannel: function(args) {
      var thisSchemaId = this.self.schema.ProductSchema.ProductSchemaPK.SchemaId.text;
      var thisProductId = this.self.schema.ProductSchema.ProductSchemaPK.ProductPK.ProductId.text;

      var cm = Repository.getManager(SystemComponents.MANAGER.CATALOG_HELPER);
      var catalog = cm.call("lookup", {
          productCode: this.self.schema.ProductSchema.ProductSchemaPK.ProductPK.ProductId.text
      });
      if (Utils.isNothing(catalog)) return WILDCARD;   // undefined

      var catalogDetail;
      var catalogObj = catalog.call('getCatalog');
      var details = Utils.iterator( _V( _PV( catalogObj, "ProductCatalog.ProductCatalogDetail.CatalogRecord" ), [] ) );
      for (var i in details ) {
         var detail = details[i];
         if (detail.SchemaId.text == thisSchemaId) {
            catalogDetail = detail;
            break;
         }
      }
      return _V( catalogDetail.Channel, WILDCARD );
   },

   matchPremiumInfoRecord: function(args) {
      var coverage = args['coverage'];
      var banding = args['banding'];
      var premiumType = args['premiumType'];
      var loanInt = args['loanInt'];
      if ( Utils.isNothing( loanInt ) ) {
         loanInt = _V( _PV( coverage, "loanInt" ), "0" );
      }

      var benefitPeriod = args['benefitPeriod']; // pass from external
      if (Utils.isNothing( benefitPeriod)) {
         benefitPeriod = _PV( coverage, 'otherOptions.benefitPeriod');   // try to get from coverage
      }
      if (Utils.isNothing( benefitPeriod)) {
         // if benefit period is not provided, follow the base plan benefit period
         var bp = coverage.schema.call('calculateBenefitPeriod', {coverage: coverage});
         benefitPeriod = bp;
      }

      var premiumPayingPeriod = args['premiumPayingPeriod']; // pass from external
      if (Utils.isNothing( premiumPayingPeriod)) {
         premiumPayingPeriod = _PV( coverage, 'otherOptions.premiumPayingPeriod');   // try to get from coverage
      }
      if (Utils.isNothing( premiumPayingPeriod)) {
         // if benefit period is not provided, follow the base plan benefit period
         var ppp = coverage.schema.call('calculatePremiumPayingPeriod', {coverage: coverage});
         premiumPayingPeriod = ppp;
      }

      //console.log("matchPremiumInfoRecord - begin");
      //console.log(JSON.stringify(banding));
      //console.log("matchPremiumInfoRecord - end");

      if (Utils.isNothing(banding)) return null;
      if (Utils.isNothing(premiumType)) return null;
      if (Utils.isNothing( _PV(this.self.schema, 'ProductSchema.PremiumInfo.PremiumTable') )) {
         return null;
      }

      var premInfoRec = null;
      var premTable = Utils.iterator(this.self.schema.ProductSchema.PremiumInfo.PremiumTable);
      for (var recKey in premTable) {
         var premRec = premTable[recKey];

         var matched = true;
         matched = matched && Utils.matchInList(premiumType, premRec.PremiumType, false);
         //matched = matched && (banding == premRec.Band.text);
         matched = matched && (coverage.currency.currencyPK.currencyId == premRec.CurrencyId.text);

         var premRecBand = _V( premRec.Band, WILDCARD );
         if (premRecBand != WILDCARD) {
            matched = matched && (banding == premRecBand || premRecBand == "0" || premRecBand == "");
         }
         var premRecLoanInt = _V( premRec.LoanInt, WILDCARD );
         if (premRecLoanInt != WILDCARD) {
            matched = matched && (Number(loanInt) == Number(premRecLoanInt) || premRecLoanInt == "0" || premRecLoanInt == "" );
         }
         var premRecBenefitPeriod = _V( premRec.BenefitPeriod, WILDCARD );
         if (premRecBenefitPeriod != WILDCARD) {
            matched = matched && (benefitPeriod == premRecBenefitPeriod || premRecBenefitPeriod == "0" || premRecBenefitPeriod == "");
         }
         var premRecPremiumPayingPeriod = _V( premRec.PremiumPayingPeriod, WILDCARD );
         if (premRecPremiumPayingPeriod != WILDCARD) {
            matched = matched && (premiumPayingPeriod == premRecPremiumPayingPeriod || premRecPremiumPayingPeriod == "0" || premRecPremiumPayingPeriod == "");
         }

         if (matched) {
            premInfoRec = premRec;
            break;
         }
      }
      /*
      if (premInfoRec == null) {
         for (var recKey in premTable) {
            var premRec = premTable[recKey];

            var matched = true;
            matched = matched && Utils.matchInList(premiumType, premRec.PremiumType, false);
            matched = matched && (coverage.currency.currencyPK.currencyId == premRec.CurrencyId.text);
            if (matched) {
               premInfoRec = premRec;
               break;
            }
         }
      }
      */
      return premInfoRec;
   },

   matchChargeInfoRecord: function(args) {
      var coverage = args['coverage'];
      var banding = args['banding'];
      var chargeType = args['chargeType'];
      var loanInt = args['loanInt'];
      if ( Utils.isNothing( loanInt ) ) {
         loanInt = _V( _PV( coverage, "loanInt" ), "0" );
      }

      var benefitPeriod = args['benefitPeriod']; // pass from external
      if (Utils.isNothing( benefitPeriod)) {
          benefitPeriod = _PV( coverage, 'otherOptions.benefitPeriod');   // try to get from coverage
      }
      if (Utils.isNothing( benefitPeriod)) {
          // if benefit period is not provided, follow the base plan benefit period
          var bp = coverage.schema.call('calculateBenefitPeriod', {coverage: coverage});
          benefitPeriod = bp;
      }

      var premiumPayingPeriod = args['premiumPayingPeriod']; // pass from external
      if (Utils.isNothing( premiumPayingPeriod)) {
         premiumPayingPeriod = _PV( coverage, 'otherOptions.premiumPayingPeriod');   // try to get from coverage
      }
      if (Utils.isNothing( premiumPayingPeriod)) {
         // if benefit period is not provided, follow the base plan benefit period
         var ppp = coverage.schema.call('calculatePremiumPayingPeriod', {coverage: coverage});
         premiumPayingPeriod = ppp;
      }

      var channel = coverage.proposal.channel;
      var currencyId = coverage.currency.currencyPK.currencyId;

      var thisChannel = this.self.schemaChannel(args);

      if (Utils.isNothing(banding)) return null;
      if (Utils.isNothing(chargeType)) return null;
      if (Utils.isNothing( _PV(this.self.schema, 'ProductSchema.ChargeInfo.ChargeScale') )) {
         return null;
      }

      var chargeInfoRec = null;
      var chargeTable = Utils.iterator(this.self.schema.ProductSchema.ChargeInfo.ChargeScale);
      for (var recKey in chargeTable) {
         var chargeRec = chargeTable[recKey];

         var matched = true;
         matched = matched && Utils.matchInList(chargeType, chargeRec.ChargeType, false);
         matched = matched && (currencyId == chargeRec.CurrencyId.text);

         var chargeRecBand = _V( chargeRec.Band, WILDCARD );
         if (chargeRecBand != WILDCARD) {
            matched = matched && (banding == chargeRecBand || chargeRecBand == "0" || chargeRecBand == "");
         }
         var chargeRecChannel = _V( chargeRec.Channel, thisChannel );
         if (chargeRecChannel != WILDCARD) {
            matched = matched && (channel == chargeRecChannel);
         }
         var chargeRecLoanInt = _V( chargeRec.LoanInt, WILDCARD );
         if (chargeRecLoanInt != WILDCARD) {
            matched = matched && (Number(loanInt) == Number(chargeRecLoanInt) || chargeRecLoanInt == "0" || chargeRecLoanInt == "");
         }
         var chargeRecBenefitPeriod = _V( chargeRec.BenefitPeriod, WILDCARD );
         if (chargeRecBenefitPeriod != WILDCARD) {
            matched = matched && (benefitPeriod == chargeRecBenefitPeriod || chargeRecBenefitPeriod == "0" || chargeRecBenefitPeriod == "");
         }
         var chargeRecPremiumPayingPeriod = _V( chargeRec.PremiumPayingPeriod, WILDCARD );
         if (chargeRecPremiumPayingPeriod != WILDCARD) {
            matched = matched && (premiumPayingPeriod == chargeRecPremiumPayingPeriod || chargeRecPremiumPayingPeriod == "0" || chargeRecPremiumPayingPeriod == "");
         }

         if (matched) {
            chargeInfoRec = chargeRec;
            break;
         }
      }
      return chargeInfoRec;
   },

   matchPolicyValueInfoRecord: function(args) {
      var coverage = args['coverage'];
      var banding = args['banding'];
      var policyValueType = args['policyValueType'];
      var loanInt = args['loanInt'];
      if ( Utils.isNothing( loanInt ) ) {
         loanInt = _V( _PV( coverage, "loanInt" ), "0" );
      }

      var benefitPeriod = args['benefitPeriod']; // pass from external
      if (Utils.isNothing( benefitPeriod)) {
         benefitPeriod = _PV( coverage, 'otherOptions.benefitPeriod');   // try to get from coverage
      }
      if (Utils.isNothing( benefitPeriod)) {
         // if benefit period is not provided, follow the base plan benefit period
         var bp = coverage.schema.call('calculateBenefitPeriod', {coverage: coverage});
         benefitPeriod = bp;
      }

      var premiumPayingPeriod = args['premiumPayingPeriod']; // pass from external
      if (Utils.isNothing( premiumPayingPeriod)) {
         premiumPayingPeriod = _PV( coverage, 'otherOptions.premiumPayingPeriod');   // try to get from coverage
      }
      if (Utils.isNothing( premiumPayingPeriod)) {
         // if benefit period is not provided, follow the base plan benefit period
         var ppp = coverage.schema.call('calculatePremiumPayingPeriod', {coverage: coverage});
         premiumPayingPeriod = ppp;
      }

      if (Utils.isNothing(banding)) return null;
      if (Utils.isNothing(policyValueType)) return null;
      if (Utils.isNothing( _PV(this.self.schema, 'ProductSchema.PolicyValue.PolicyValueTable') )) {
         return null;
      }

      var policyValueRecord = null;
      var policyValueTable = Utils.iterator(this.self.schema.ProductSchema.PolicyValue.PolicyValueTable);
      for (var recKey in policyValueTable) {
         var pvRec = policyValueTable[recKey];

         var matched = true;
         matched = matched && Utils.matchInList(policyValueType, pvRec.PolicyValueType, false);
         //matched = matched && (banding == pvRec.Band.text || pvRec.Band.text == "0");
         matched = matched && (coverage.currency.currencyPK.currencyId == pvRec.CurrencyId.text);

         var pvRecBand = _V( pvRec.Band, WILDCARD );
         if (pvRecBand != WILDCARD) {
            matched = matched && (banding == pvRecBand || pvRecBand == "0" || pvRecBand == "");
         }
         var pvRecLoanInt = _V( pvRec.LoanInt, WILDCARD );
         if (pvRecLoanInt != WILDCARD) {
            matched = matched && (Number(loanInt) == Number(pvRecLoanInt) || pvRecLoanInt == "0" || pvRecLoanInt == "");
         }
         var pvRecBenefitPeriod = _V( pvRec.BenefitPeriod, WILDCARD );
         if (pvRecBenefitPeriod != WILDCARD) {
            matched = matched && (benefitPeriod == pvRecBenefitPeriod || pvRecBenefitPeriod == "0" || pvRecBenefitPeriod == "");
         }
         var pvRecPremiumPayingPeriod = _V( pvRec.PremiumPayingPeriod, WILDCARD );
         if (pvRecPremiumPayingPeriod != WILDCARD) {
            matched = matched && (premiumPayingPeriod == pvRecPremiumPayingPeriod || pvRecPremiumPayingPeriod == "0" || pvRecPremiumPayingPeriod == "");
         }

         if (matched) {
            policyValueRecord = pvRec;
            break;
         }
      }
      return policyValueRecord;
   },

   matchProductionCreditInfoRecord: function(args) {
      var coverage = args['coverage'];
      var banding = args['banding'];
      var channel = coverage.proposal.channel;

      var thisChannel = this.self.schemaChannel(args);

      if (Utils.isNothing(banding)) return null;
      if (Utils.isNothing( _PV(this.self.schema, 'ProductSchema.ProductionCredit.PCScale') )) {
         return null;
      }

      var pcRec = null;
      var pcTable = Utils.iterator( this.self.schema.ProductSchema.ProductionCredit.PCScale );
      for (var recKey in pcTable) {
         var pc = pcTable[recKey];

         var matched = true;
         //matched = matched && (banding == pc.Band.text || pc.Band.text == "0");
         //matched = matched && (coverage.proposal.channel == pc.Channel.text || pc.Channel.text == "");
         matched = matched && (coverage.currency.currencyPK.currencyId == pc.CurrencyId.text);

         var pcBand = _V( pc.Band, WILDCARD );
         if (pcBand != WILDCARD) {
            matched = matched && (banding == pcBand || pcBand == "0");
         }
         var pcChannel = _V( pc.Channel, thisChannel );
         if (pcChannel != WILDCARD) {
            matched = matched && (channel == pcChannel);
         }
         if (matched) {
            pcRec = pc;
            break;
         }
      }
      return pcRec;
   },

   readRefundRates: function(args) {
      var coverage = args['coverage'];
      var policyYear = args['policyYear'];
      var ipo = args['ipo'];

      var refundRates = null;
      if (coverage.occupation) {
         if (coverage.occupation == SchemaConstants.OCCUPATION_CLASS.CLASS_4) {
            var coverageCopy = Utils.extend({}, coverage);
            coverageCopy.occupation == SchemaConstants.OCCUPATION_CLASS.CLASS_0;
            refundRates = this.self.readPremiumRates(coverageCopy, policyYear, ipo);
         } else {
            refundRates = this.self.readPremiumRates(coverage, policyYear, ipo);
         }
      }
      return refundRates;
   },

   isCurrencyPaymentModeSupported: function(args) {
      var currencyId = args['currencyId'];
      var paymentMode = args['paymentMode'];

      if (Utils.isNothing(currencyId)) return false;
      if (Utils.isNothing(paymentMode)) return false;
      if (Utils.isNothing( _PV(this.self.schema, 'ProductSchema.BasicParticular.PremiumRangeInformation.PremiumRange') )) {
         return false;
      }

      var premiumRangeTable = Utils.iterator( this.self.schema.ProductSchema.BasicParticular.PremiumRangeInformation.PremiumRange );
      for (var premiumKey in premiumRangeTable) {
         var premiumRangeRec = premiumRangeTable[premiumKey];
         //this.getPaymentModeFullName
         if ((currencyId == premiumRangeRec.CurrencyPK.CurrencyId.text) && ((paymentMode) == premiumRangeRec.PaymentMode.text)) {
            return true;
         }
      }
      return false;
   },

   readModalFactors: function(args) {
      var coverage = args['coverage'];
      var policyYear = args['policyYear'];
      var paymentMode = args['paymentMode'];
      var ipo = args['ipo'];

      var _paymentMode = coverage.options.paymentMode;
      if (paymentMode) {
         coverage.options.paymentMode = paymentMode;
      }
      var _rates = PEratemanager.lookupRates(coverage, RateConstants.RATETYPE.MODALFACTOR, policyYear, ipo);
      coverage.options.paymentMode = _paymentMode;
      return _rates;
   },

   isInsuredSexSupported: function(args) {
      var gender = args['gender'];
      if (Utils.isNothing(gender)) return false;
      if (Utils.isNothing( _PV(this.self.schema, 'ProductSchema.BasicParticular.SupportSex.Sex') )) {
         return false;
      }

      var genderTable = Utils.iterator( this.self.schema.ProductSchema.BasicParticular.SupportSex.Sex );
      for (var genderi in genderTable) {
         var genderRec = genderTable[genderi];
         //this.getGenderFullName
         if (genderRec.text.toLowerCase() == (gender).toLowerCase()) {
            return true;
         }
      }
      return false;
   },

   isInsuredSmokingStatusSupported: function(args) {
      var smokingstatus = args['smokingStatus'];
      if (Utils.isNothing(smokingstatus)) return false;
      if (Utils.isNothing( _PV(this.self.schema, 'ProductSchema.BasicParticular.SupportSmokingStatus.SmokingStatus') )) {
         return false;
      }

      var smokingStatusTable = Utils.iterator( this.self.schema.ProductSchema.BasicParticular.SupportSmokingStatus.SmokingStatus );
      for (var smokingStatusi in smokingStatusTable) {
         var smokingStatusRec = smokingStatusTable[smokingStatusi];
         //this.getSmokingStatusFullName
         if (smokingStatusRec.text.toLowerCase() == (smokingstatus).toLowerCase()) {
            return true;
         }
      }
      return false;
   },
   isWaitPeriodSupported: function(args) {
      var waitPeriod = args['waitPeriod'];
      if (Utils.isNothing(waitPeriod)) return false;
      if (Utils.isNothing( _PV(this.self.schema, 'ProductSchema.BasicParticular.SupportWaitingPeriod.WaitingPeriod') )) {
         return false;
      }

      var waitPeriodTable = Utils.iterator(this.self.schema.ProductSchema.BasicParticular.SupportWaitingPeriod.WaitingPeriod);
      for (var waitPeriodi in waitPeriodTable) {
         var waitPeriodRec = waitPeriodTable[waitPeriodi];
         if (waitPeriodRec.text.toLowerCase() == (waitPeriod).toLowerCase()) {
            return true;
         }
      }
      return false;
   },
   isBenefitPeriodSupported: function(args) {
      var benefitPeriod = args['benefitPeriod'];
      if (Utils.isNothing(benefitPeriod)) return false;
      if (Utils.isNothing( _PV(this.self.schema, 'ProductSchema.BasicParticular.SupportBenefitPeriod.BenefitPeriod') )) {
         return false;
      }

      var benefitPeriodTable = Utils.iterator(this.self.schema.ProductSchema.BasicParticular.SupportBenefitPeriod.BenefitPeriod);
      for (var benefitPeriodi in benefitPeriodTable) {
         var benefitPeriodRec = benefitPeriodTable[benefitPeriodi];
         if (benefitPeriodRec.text.toLowerCase() == (benefitPeriod).toLowerCase()) {
            return true;
         }
      }
      return false;
   },
   hasExtraRating: function(args) {
      var coverage = args['coverage'];
      var matched = true;
      matched = matched && (coverage.extraRating.flatExtra != "0.00");
      matched = matched && (coverage.extraRating.tempFlat != "0.00");
      matched = matched && (coverage.extraRating.tempFlatDur > 0);
      matched = matched && (coverage.extraRating.tempPercentDur > 0);
      matched = matched && (coverage.extraRating.percentageExtra > 1);
      matched = matched && (coverage.extraRating.tempPercent > 1);
      matched = matched && ("Y".equalsIgnoreCase(coverage.extraRating.exclution));
      return matched;
   },
   isOccupationSupported: function(args) {
      var occupation = args['occupation'];
      if (Utils.isNothing(occupation)) {
         return false;
      }
      if (Utils.isNothing(_PV( this.self.schema, 'ProductSchema.BasicParticular.SupportOccupationClass.OccupationClass') )) {
         return false;
      }
      var occupationTable = Utils.iterator(this.self.schema.ProductSchema.BasicParticular.SupportOccupationClass.OccupationClass);
      for (var occupationi in occupationTable) {
         var occupationRec = occupationTable[occupationi];
         if (occupationRec.text.toLowerCase() == (occupation).toLowerCase()) {
            return true;
         }
      }
      return false;
   },
   isPremiumDiscountSupported: function(args) {
      var discountType = args['discountType'];
      if (Utils.isNothing(discountType)) {
         return false;
      }
      if (Utils.isNothing( _PV(this.self.schema, 'ProductSchema.BasicParticular.SupportPremiumDiscount.PremiumDiscount') )) {
         return false;
      }
      var discountTypeTable = Utils.iterator(this.self.schema.ProductSchema.BasicParticular.SupportPremiumDiscount.PremiumDiscount);
      for (var discountTypei in discountTypeTable) {
         var discountTypeRec = discountTypeTable[discountTypei];
         if (discountTypeRec.text.toLowerCase() == (discountType).toLowerCase()) {
            return true;
         }
      }
      return false;
   },
   isBillingMethodPaymentModeSupported: function(args) {
      var billingMethod = args['billingMethod'];
      var paymentMode = args['paymentMode'];
      if (Utils.isNothing(paymentMode)) {
         return false;
      }
      if (Utils.isNothing(billingMethod)) {
         return false;
      }
      if (Utils.isNothing( _PV(this.self.schema, 'ProductSchema.BasicParticular.PremiumRangeInformation.PremiumRange') )) {
         return false;
      }
      var premiumRangeTable = Utils.iterator(this.self.schema.ProductSchema.BasicParticular.PremiumRangeInformation.PremiumRange);
      for (var premiumKey in premiumRangeTable) {
         var premiumRangeRec = premiumRangeTable[premiumKey];
         //this.getPaymentModeFullName
         if ((Utils.matchInList(billingMethod, premiumRangeRec.BillingMode, false)) && (paymentMode.equalsIgnoreCase(premiumRangeRec.PaymentMode.text))) {
            return true;
         }
      }
      return false;
   },
   isCurrencyBillingMethodSupported: function(args) {
      var billingMethod = args['billingMethod'];
      var currencyId = args['currencyId'];
      if (Utils.isNothing(billingMethod)) {
         return false;
      }
      if (Utils.isNothing(currencyId)) {
         return false;
      }
      if (Utils.isNothing( _PV(this.self.schema, 'ProductSchema.BasicParticular.PremiumRangeInformation.PremiumRange') )) {
         return false;
      }
      var premiumRangeTable = Utils.iterator(this.self.schema.ProductSchema.BasicParticular.PremiumRangeInformation.PremiumRange);
      for (var premiumKey in premiumRangeTable) {
         var premiumRangeRec = premiumRangeTable[premiumKey];
         //this.getPaymentModeFullName
         if ((currencyId.equalsIgnoreCase(premiumRangeRec.CurrencyPK.CurrencyId.text)) && (Utils.matchInList(billingMethod, premiumRangeRec.BillingMode, false))) {
            return true;
         }
      }
      return false;
   },

   calculatePremiumPayingPeriod: function(args) {
      var coverage = args['coverage'];
      var issueAge = args['issueAge'];
      var debug = _V( args['debug'], false );
      var productId = _PV( coverage, "product.productKey.primaryProduct.productPK.productId" );

      if (Utils.isNothing(issueAge)) {
         var insured = getPrimaryInsured({coverage: coverage});
         if (!Utils.isNothing(insured)) {
            issueAge = insured.insuredAge;
         }
      }

      var maxPremiumPaidAge = Number( _V( _PV( this.self.schema, "ProductSchema.BasicParticular.PremiumPaidPeriod.MaxPremiumPaidAge" ), 0) );
      var minPremiumPaidPeriod = Number( _V( _PV( this.self.schema, "ProductSchema.BasicParticular.PremiumPaidPeriod.MinPremiumPaidPeriod" ), 0) );

      var premiumPayingPeriod = 0;
      if (maxPremiumPaidAge > 0 && minPremiumPaidPeriod > 0) {
         premiumPayingPeriod = Number(maxPremiumPaidAge - issueAge);
         premiumPayingPeriod = Math.min(premiumPayingPeriod, minPremiumPaidPeriod);
      } else
      if (maxPremiumPaidAge > 0) {
         premiumPayingPeriod = Number(maxPremiumPaidAge - issueAge);
      } else
      if (minPremiumPaidPeriod > 0) {
         premiumPayingPeriod = minPremiumPaidPeriod;
      }

      //var maxDuration = Number(100);
      var maxDuration = Number( PublicConstants.PERIOD.MAX_PREMIUM_PAYING_PERIOD );
      if ((premiumPayingPeriod + issueAge) > maxDuration) {
         premiumPayingPeriod = maxDuration - issueAge;
      }

      var payorAge = coverage.payerAge;
      if (payorAge) {
         var maxPayorAge = Number( _V( _PV( this.self.schema, "ProductSchema.BasicParticular.PremiumPaidPeriod.MaxPayorAge" ), 0) );
         if (payorAge) {
            var _payorAge = Number(payorAge);
            if (_payorAge > 0 && maxPayorAge > 0) {
               premiumPayingPeriod = Math.min((maxPayorAge - _payorAge), premiumPayingPeriod);
            }
         }
      }

      if (debug) _DB("@@@ premiumPayingPeriod (" + productId + ")", premiumPayingPeriod, "calculatePremiumPayingPeriod");
      var isRider = coverage.catalog.call('isRider');
      if (debug) _DB("@@@ premiumPayingPeriod (" + productId + ") isRider", isRider, "calculatePremiumPayingPeriod");
      if (isRider) {
          var hasExtendPPPOption = this.self.hasSupportOption({option:SchemaConstants.SUPPORT_OPTION.EXTEND_PREMIUM_PAID_PERIOD});
          if (!hasExtendPPPOption) {
              var basePlan = _PV( coverage, "proposal.coverageInfo" );
              if (!Utils.isNothing(basePlan)) {
                  var bppp = this.self.calculatePremiumPayingPeriod({coverage: basePlan, debug: debug});
                  if (debug) _DB("@@@ aligned to Base Plan PPP", bppp, "calculatePremiumPayingPeriod");

                  premiumPayingPeriod = Math.min(premiumPayingPeriod, bppp);
                  if (debug) _DB("@@@ premiumPayingPeriod adjusted", premiumPayingPeriod, "calculatePremiumPayingPeriod");
              }
          }
      }

      return premiumPayingPeriod;
   },

   isDividendOptionSupported: function(args) {
      var dividendOption = args['dividendOption'];
      if (Utils.isNothing(_PV( this.self.schema, 'ProductSchema.BasicParticular.SupportDividendOption.DividendOption'))) {
         return false;
      }
      var dividendOptionTable = Utils.iterator(this.self.schema.ProductSchema.BasicParticular.SupportDividendOption.DividendOption);
      for (var dividendOptioni in dividendOptionTable) {
         var dividendOptionRec = dividendOptionTable[dividendOptioni];
         if (dividendOptionRec.text.toLowerCase() == (dividendOption).toLowerCase()) {
            return true;
         }
      }
      return false;
   },

   isDBOptionSupported: function(args) {
      var dbOption = args['dbOption'];
      if (Utils.isNothing(_PV( this.self.schema, 'ProductSchema.BasicParticular.SupportDeathBenefit.DeathBenefit'))) {
         return false;
      }
      var dbOptionTable = Utils.iterator(this.self.schema.ProductSchema.BasicParticular.SupportDeathBenefit.DeathBenefit);
      for (var dbOptioni in dbOptionTable) {
         var dbOptionRec = dbOptionTable[dbOptioni];
         if (dbOptionRec.text.toLowerCase() == (dbOption).toLowerCase()) {
            return true;
         }
      }
      return false;
   },
   calculateBenefitPeriod: function(args) {
      var coverage = args['coverage'];
      var issueAge = args['issueAge'];
      var debug = _V( args['debug'], false );
      var productId = _PV( coverage, "product.productKey.primaryProduct.productPK.productId" );

      if (Utils.isNothing(issueAge)) {
         var insured = getPrimaryInsured({coverage: coverage});
         if (!Utils.isNothing(insured)) {
            issueAge = insured.insuredAge;
         }
      }

      var maxBenefitAge = Number( _V( _PV( this.self.schema, "ProductSchema.BasicParticular.BenefitPeriod.MaxBenefitAge" ), 0 ) );
      var minBenefitPeriod = Number( _V( _PV( this.self.schema, "ProductSchema.BasicParticular.BenefitPeriod.MinBenefitPeriod" ), 0 ) );

      // console.log('issueAge = ' + issueAge);
      // console.log('maxBenefitAge = ' + maxBenefitAge);
      // console.log('minBenefitPeriod = ' + minBenefitPeriod);

      var benefitPeriod = 0;
      if (minBenefitPeriod > 0 && maxBenefitAge > 0) {
         benefitPeriod = Math.min(PublicConstants.PERIOD.MAX_BENEFIT_PERIOD, Math.min(maxBenefitAge - issueAge, minBenefitPeriod));
      } else
      if (minBenefitPeriod > 0) {
         benefitPeriod = Math.min(PublicConstants.PERIOD.MAX_BENEFIT_PERIOD, minBenefitPeriod);
      } else
      if (maxBenefitAge > 0) {
         benefitPeriod = Math.min(PublicConstants.PERIOD.MAX_BENEFIT_PERIOD, maxBenefitAge - issueAge);
      }
      // console.log('benefitPeriod = ' + benefitPeriod);

      if (coverage.catalog.call("isTerm")) {
         var renewalPeriod = this.self.schema.ProductSchema.BasicParticular.renewalPeriod;
         // console.log('renewalPeriod = ' + renewalPeriod);
         if (renewalPeriod) {
            var rp = Number(renewalPeriod.text);
            if (rp > 1) {
               benefitPeriod = benefitPeriod - (benefitPeriod % rp);
            }
         }
      }

      if (debug) _DB("@@@ benefitPeriod (" + productId + ")", benefitPeriod, "calculateBenefitPeriod");
      var isRider = coverage.catalog.call('isRider');
      if (debug) _DB("@@@ benefitPeriod (" + productId + ") isRider", isRider, "calculateBenefitPeriod");
      if (isRider) {
          var hasExtendPPPOption = this.self.hasSupportOption({option:SchemaConstants.SUPPORT_OPTION.EXTEND_PREMIUM_PAID_PERIOD});
          if (!hasExtendPPPOption) {
              var basePlan = _PV( coverage, "proposal.coverageInfo" );
              if (!Utils.isNothing(basePlan)) {
                  var bppp = this.self.calculatePremiumPayingPeriod({coverage: basePlan, debug: debug});
                  if (debug) _DB("@@@ aligned to Base Plan PPP", bppp, "calculateBenefitPeriod");

                  benefitPeriod = Math.min(benefitPeriod, bppp);
                  if (debug) _DB("@@@ benefitPeriod adjusted", benefitPeriod, "calculateBenefitPeriod");
              }
          }
      }

      return benefitPeriod;
   },
   availablePaymentModes: function(args) {
      var premiumType = args["premiumType"];
      var schema = this.self.schema.ProductSchema;
      //console.log(JSON.stringify(schema));

      if (Utils.isNothing( _PV(schema, 'BasicParticular.PremiumRangeInformation.PremiumRange') )) {
         return {};
      }

      var premiumModes = {};
      var premiumIterator = Utils.iterator(schema.BasicParticular.PremiumRangeInformation.PremiumRange);
      for (var pii in premiumIterator) {
         var pi = premiumIterator[pii];
         if (Utils.isNothing(premiumType) || (premiumType == pi.Type.text)) {
            premiumModes[pi.PaymentMode.text] = pi.PaymentMode.text;
         }
      }
      return premiumModes;
   },

   isIpoDBOptionSupported: function(args) {
      var ipoDbOption = args['ipoDbOption'];
      if (Utils.isNothing(ipoDbOption)) return false;
      if (Utils.isNothing(_PV( this.self.schema, 'ProductSchema.BasicParticular.SupportIPODeathBenefit.IPODeathBenefit'))) {
         return false;
      }
      var ipoDbOptionTable = Utils.iterator(this.self.schema.ProductSchema.BasicParticular.SupportIPODeathBenefit.IPODeathBenefit);
      for (var ipoDbOptioni in ipoDbOptionTable) {
         var ipoDbOptionRec = ipoDbOptionTable[ipoDbOptioni];
         if (ipoDbOptionRec.text.toLowerCase() == (ipoDbOption).toLowerCase()) {
            return true;
         }
      }
      return false;
   },

   isMajorMedicalOptionSupported: function(args) {
      var majorMedicalOption = args['majorMedicalOption'];
      if (Utils.isNothing(majorMedicalOption)) return false;
      if (Utils.isNothing(_PV( this.self.schema, 'ProductSchema.BasicParticular.SupportOtherOptions.MajorMedical'))) {
         return false;
      }
      var majorMedicalTable = Utils.iterator(this.self.schema.ProductSchema.BasicParticular.SupportOtherOptions.MajorMedical);
      for (var majorMedicali in majorMedicalTable) {
         var dividendOptionRec = majorMedicalTable[majorMedicali];
         if (dividendOptionRec.text.toLowerCase() == (majorMedicalOption).toLowerCase()) {
            return true;
         }
      }
      return false;
   },

   isNoOfPersonSupported: function(args) {
      var noOfPersonOption = args['noOfPersonOption'];
      if (Utils.isNothing(noOfPersonOption)) return false;
      if (Utils.isNothing(_PV( this.self.schema, 'ProductSchema.BasicParticular.SupportNoOfPersons.NoOfPerson'))) {
         return false;
      }
      var noOfPersonTable = Utils.iterator(this.self.schema.ProductSchema.BasicParticular.SupportNoOfPersons.NoOfPerson);
      for (var noOfPersoni in noOfPersonTable) {
         var noOfPersonRec = noOfPersonTable[noOfPersoni];
         if (noOfPersonRec.text.toLowerCase() == (noOfPersonOption).toLowerCase()) {
            return true;
         }
      }
      return false;
   },

   isClassOtherOptionSupported: function(args) {
      var classOtherOption = args['classOtherOption'];
      if (Utils.isNothing(classOtherOption)) return false;
      if (Utils.isNothing(_PV( this.self.schema, 'ProductSchema.BasicParticular.SupportOtherOptions.CoverageClass'))) {
         return false;
      }
      var classOtherOptionTable = Utils.iterator(this.self.schema.ProductSchema.BasicParticular.SupportOtherOptions.CoverageClass);
      for (var classOtherOptioni in classOtherOptionTable) {
         var classOtherOptionRec = classOtherOptionTable[classOtherOptioni];
         if (classOtherOptionRec.text.toLowerCase() == (classOtherOption).toLowerCase()) {
            return true;
         }
      }
      return false;
   }
});
var eventAvyInitialization = Class.define({
   eventName: function(args) {
      // reset data for AVY beginning
      return "Initialize AVY";
   },
   run: function(args) {
      var context = args['context'];
      var proposal = context.proposal;
      var basePlan = proposal.coverageInfo;
      var metadata = context.events.metadata;
      var productId = basePlan.product.productKey.primaryProduct.productPK.productId;
      //this.self.context['cashOutAccount'] = FundImpl.create();
      var runningPolicyValues = context.runningPolicyValues;
      //console.log("runningPolicyValues = " + (runningPolicyValues.fundPool));
      var year = runningPolicyValues.year;
      var months = runningPolicyValues.months;
      var month = months % 12;

      var fundConfig;
      fundConfig = {
         fundId: ""
      };
      fundConfig['annualInterestRate'] = {};
      fundConfig[PublicConstants.FUND_RETURN.LOW] = Number(0);
      fundConfig[PublicConstants.FUND_RETURN.MEDIUM] = Number(0);
      fundConfig[PublicConstants.FUND_RETURN.HIGH] = Number(0);
      fundConfig.annualInterestRate[PublicConstants.FUND_RETURN.LOW] = Number(0);
      fundConfig.annualInterestRate[PublicConstants.FUND_RETURN.MEDIUM] = Number(0);
      fundConfig.annualInterestRate[PublicConstants.FUND_RETURN.HIGH] = Number(0);
      fundConfig['policyOptions'] = context.policyOptions;

      if (months == 0) {
         if (!Utils.isNothing(proposal.funds.fundRecord)) {
            //runningPolicyValues['fundPool'] = FundPoolImpl.create({context : this.self.context});
            runningPolicyValues['fundPool'] = PortfolioImpl.create({
               context: context
            });
         }

         //runningPolicyValues['totalPremiums'] = 0;
         runningPolicyValues['accPremiums'] = 0;
         runningPolicyValues['initialFaceAmountRatio'] = _R(basePlan.faceAmount / proposal.coverageInfo.initialDumpIn,2);
         console.log("initialFaceAmountRatio = " + runningPolicyValues.initialFaceAmountRatio);

         var fundSelections = Utils.iterator(proposal.funds.fundRecord);
         //console.log("fundSelections : " + JSON.stringify(fundSelections));
         for (fundId in fundSelections) {
            var fundRecord = fundSelections[fundId];
            //var fundRecord = proposal.funds.fundRecord[PublicConstants.FUND_CODE.TARGET_INCOME];
            if (fundRecord._code == PublicConstants.FUND_CODE.TARGET_INCOME && Number(fundRecord.allocation) > 0) {
               //console.log("fundRecord.returnRate[" + fundRecord._code + "] = " + JSON.stringify(fundRecord));
               fundConfig = {
                  fundId: fundRecord._code
               };
               if (fundRecord.returnRate > 0) {
                  fundConfig[PublicConstants.FUND_RETURN.LOW] = _R(Math.pow(1 + fundRecord.returnRate / 100, 1 / metadata.iterationUnit) - 1,15);
               }
               if (fundRecord.returnRateMedium > 0) {
                  fundConfig[PublicConstants.FUND_RETURN.MEDIUM] = _R(Math.pow(1 + fundRecord.returnRateMedium / 100, 1 / metadata.iterationUnit) - 1,15);
               }
               if (fundRecord.returnRateHigh > 0) {
                  fundConfig[PublicConstants.FUND_RETURN.HIGH] = _R(Math.pow(1 + fundRecord.returnRateHigh / 100, 1 / metadata.iterationUnit) - 1,15);
               }
               fundConfig['payoutRatio'] = fundRecord.targetPayoutRate;
               fundConfig['annualInterestRate'] = {};
               fundConfig.annualInterestRate[PublicConstants.FUND_RETURN.LOW] = fundRecord.returnRate;
               fundConfig.annualInterestRate[PublicConstants.FUND_RETURN.MEDIUM] = fundRecord.returnRateMedium;
               fundConfig.annualInterestRate[PublicConstants.FUND_RETURN.HIGH] = fundRecord.returnRateHigh;
               fundConfig['isSurrenderChargeApplicable'] = false;

               runningPolicyValues['accumulatedcashOutPayments'] = {};
               for (returnTypeKey in PublicConstants.FUND_RETURN) {
                  runningPolicyValues['accumulatedcashOutPayments'][returnTypeKey] = Number(0);
               }
            }
         }

         runningPolicyValues['cashoutAccount'] = FundImpl.create({
            fundConfig: fundConfig,
            context: context
         });
      }

      if (month == 0) {
         runningPolicyValues['totalPremiums'] = 0;
         runningPolicyValues['initialDumpIn'] = 0;
         runningPolicyValues['newPremium'] = 0;
         runningPolicyValues['withdrawal'] = 0;
         runningPolicyValues['firstMonthCoi'] = Number(0);
         runningPolicyValues['cashOutPayments'] = {};
         runningPolicyValues['cois'] = {};
         runningPolicyValues['annualCois'] = {};

         for (returnTypeKey in PublicConstants.FUND_RETURN) {
            runningPolicyValues['cashOutPayments'][returnTypeKey] = Number(0);
            runningPolicyValues['cois'][returnTypeKey] = Number(0);
            runningPolicyValues['annualCois'][returnTypeKey] = Number(0);
         }
      }
   },
   shouldBeRun: function(args) {
      // it will be executed regardless the calculate options
      return true;
   }
});

var eventReceiveInitialPremiums = Class.define({
   eventName: function(args) {
      // eventReceiveInitialPremiums
      // - receive premium and dump in the amount to accounts
      return "Receive Initial Premiums";
   },
   run: function(args) {
      var context = args["context"];

      var metadata = context.events.metadata;
      var proposal = context.proposal;
      var basePlan = proposal.coverageInfo;
      var productId = basePlan.product.productKey.primaryProduct.productPK.productId;
      var runningPolicyValues = context.runningPolicyValues;
      var newPremium = 0;

      var year = runningPolicyValues.year;
      var months = runningPolicyValues.months;
      //var month = months % 12;

      if (months == 0) {
         newPremium = Number(newPremium) + Number(proposal.coverageInfo.initialDumpIn);
         // if (!Utils.isNothing(proposal.fundActivities) && !Utils.isNothing(proposal.fundActivities.fundActivity)) {
         //    var activities = Utils.iterator( proposal.fundActivities.fundActivity );
         //    //var activities = proposal.fundActivities.fundActivity;
         //    var parties = Utils.iterator(basePlan.parties.party);
         //    for (idx in activities) {
         //       var activity = activities[idx];
         //       if (Number(activity.topupPremium) > 0 && Number(activity.attainAge) == (Number(parties[0].insuredAge) + Number(year))) {
         //          newPremium = Number( newPremium ) + Number( activity.topupPremium );
         //          break;
         //       }
         //    }
         // }
         console.log("initialDumpIn = " + newPremium);
      }
      if (Number(newPremium) > 0) {
         var allocationRates = context.rates[productId][SchemaConstants.PREMIUM_TYPE.ALLOCATION];

         //console.log("allocationRates = " + JSON.stringify(allocationRates));

         var newPremiumRounding = proposal.coverageInfo.catalog.call("rounding", {
            coverage: basePlan
         });
         var netNewPremium = _R(newPremium * _R4(1 - allocationRates.rates[year]),newPremiumRounding);

         console.log("netNewPremium = " + netNewPremium);

         if (Number(netNewPremium) > 0) {
            runningPolicyValues.initialDumpIn = Number(runningPolicyValues.initialDumpIn) + Number(newPremium);
            runningPolicyValues.totalPremiums = Number(runningPolicyValues.totalPremiums) + Number(newPremium);
            IFund.appliedTo(runningPolicyValues.fundPool).call("dumpin", {
               amount: netNewPremium
            });
         }
      }
   },
   shouldBeRun: function(args) {
      // it will be executed regardless the calculate options
      return true;
   }
});

var eventCalculateNAR = Class.define({
   eventName: function(args) {
      // eventCalculateNAR
      // - calculate the Net Amount at Risk
      return "Calculate NAR";
   },
   run: function(args) {
      var context = args["context"];

      var metadata = context.events.metadata;
      var proposal = context.proposal;
      var basePlan = proposal.coverageInfo;
      var runningPolicyValues = context.runningPolicyValues;

      var narCalc = DataDrivenCalculatorImpl.create({
         drivenKeys: PublicConstants.FUND_RETURN,
         drivenDatas: [IFund.appliedTo(runningPolicyValues.fundPool).call("fundBalances", {}), IFund.appliedTo(runningPolicyValues.cashoutAccount).call("fundBalances", {})]
      });
      var nars = IDataDrivenCalculator.appliedTo(narCalc).call("calculate", {
         calculateBlock: function(fund) {
           _DBR("dbLevel", basePlan.options.dbLevel, "eventCalculateNAR->", context.runningPolicyValues.months);
            if (basePlan.options.dbLevel == SchemaConstants.DB_OPTION.INCREASE) {
               if (basePlan.catalog.call("isSinglePremium", {})) {
                  var nar = _R(runningPolicyValues.accPremiums * runningPolicyValues.initialFaceAmountRatio, 15);
                  _DBR("fa = accPremiums(" + runningPolicyValues.accPremiums + ") * initialFaceAmountRatio(" + runningPolicyValues.initialFaceAmountRatio + ")", nar, "eventCalculateNAR->", context.runningPolicyValues.months);
                  return nar;
               } else {
                  var nar = Number(basePlan.faceAmount);
                  _DBR("fa = faceAmount(" + basePlan.faceAmount + ")", nar, "eventCalculateNAR->", context.runningPolicyValues.months);
                  return nar;
               }
               _DBR("NAR", narValue, "eventCalculateNAR->", context.runningPolicyValues.months);
               return narValue
            }
            if (basePlan.options.dbLevel == SchemaConstants.DB_OPTION.LEVEL) {
               var fundBalance = fund[0];
               var cashOutAccountBalance = fund[1];
               var totalFundBalance = Number(fundBalance) + Number(cashOutAccountBalance);
               var narValue = 0;
               _DBR("fundBalance", fundBalance, "eventCalculateNAR->", context.runningPolicyValues.months);
               _DBR("cashOutAccountBalance", cashOutAccountBalance, "eventCalculateNAR->", context.runningPolicyValues.months);
               _DBR("totalFundBalance", totalFundBalance, "eventCalculateNAR->", context.runningPolicyValues.months);
               if (basePlan.catalog.call("isSinglePremium", {})) {
                  var fa = _R(runningPolicyValues.accPremiums * runningPolicyValues.initialFaceAmountRatio, 15);
                  var nar = Math.max(Number(0), _R(Number(fa) - Number(totalFundBalance),15));
                  //console.log("months :" + runningPolicyValues.months + ", fundBalance :" + fundBalance + " ,cahoutAccountBalance :" + cahoutAccountBalance + " ,fa :" + fa + ", nar :" + nar);
                  _DBR("fa = Max(0, accPremiums(" + runningPolicyValues.accPremiums + ") * initialFaceAmountRatio(" + runningPolicyValues.initialFaceAmountRatio + ") - totalFundBalance(" + totalFundBalance + "))", nar, "eventCalculateNAR->", context.runningPolicyValues.months);
                  return nar;
               } else {
                  var nar = _R(Math.max(Number(0), Number(basePlan.faceAmount) - Number(totalFundBalance)), 15);
                  _DBR("fa = Max(0, faceAmount(" + basePlan.faceAmount + ") - totalFundBalance(" + totalFundBalance + "))", nar, "eventCalculateNAR->", context.runningPolicyValues.months);
                  return nar;
               }
            }
         }
      });
      runningPolicyValues['nars'] = nars;

   },
   shouldBeRun: function(args) {
      // it will be executed regardless the calculate options
      return true;
   }
});

var eventCalculateCOI = Class.define({
   eventName: function(args) {
      // eventCalculateCOI
      // - calculate COI based on the NAR result
      return "Calculate COI";
   },
   run: function(args) {
      var context = args["context"];

      var metadata = context.events.metadata;
      var proposal = context.proposal;
      var basePlan = proposal.coverageInfo;
      var productId = basePlan.product.productKey.primaryProduct.productPK.productId;
      var runningPolicyValues = context.runningPolicyValues;
      var year = runningPolicyValues.year;
      var month = runningPolicyValues.months;
      var coiVal = Number(0);

      var coiRates = context.rates[basePlan.product.productKey.primaryProduct.productPK.productId][SchemaConstants.PREMIUM_TYPE.COSTOFINSURANCE];
      var coiRate;
      if (year > coiRates.rates.length - 1) {
         coiRate = coiRates.rates[coiRates.rates.length - 1];
      } else {
         coiRate = coiRates.rates[year];
      }
      _DBR("coiRate", coiRate, "eventCalculateCOI->", context.runningPolicyValues.months);
      var coiCalc = DataDrivenCalculatorImpl.create({
         drivenKeys: PublicConstants.FUND_RETURN,
         drivenDatas: runningPolicyValues.nars
      });
      var cois = IDataDrivenCalculator.appliedTo(coiCalc).call("calculate", {
         calculateBlock: function(nar) {
            var coi = _R(nar * coiRate / 12000,15);
            //console.log("nar = " + nar);
            //console.log("coiRate = " + coiRate);
            //console.log("coi = " + coi);
            _DBR("coi = nar(" + nar + ") * coiRate(" + coiRate + ")", coi, "eventCalculateCOI->", context.runningPolicyValues.months);
            coiVal = coi;
            return coi;
         }
      });
      runningPolicyValues['cois'] = cois;
      runningPolicyValues['coiRate'] = coiRate;
      if (month == "0") {
         runningPolicyValues['firstMonthCoi'] = coiVal;
      }
   },
   shouldBeRun: function(args) {
      // it will be executed regardless the calculate options
      return true;
   }
});

var eventAccumulateCOI = Class.define({
   eventName: function(args) {
      // eventCalculateCOI
      // - calculate COI based on the NAR result
      return "Accumulate COI";
   },
   run: function(args) {
      var context = args["context"];

      var metadata = context.events.metadata;
      var proposal = context.proposal;
      var basePlan = proposal.coverageInfo;
      var productId = basePlan.product.productKey.primaryProduct.productPK.productId;
      var runningPolicyValues = context.runningPolicyValues;
      var year = runningPolicyValues.year;
      var month = runningPolicyValues.months;

      var accumCalc = DataDrivenCalculatorImpl.create({
         drivenKeys: PublicConstants.FUND_RETURN,
         drivenDatas: [runningPolicyValues.cois, runningPolicyValues.annualCois]
      });

      var annualCois = IDataDrivenCalculator.appliedTo(accumCalc).call("calculate", {
         calculateBlock: function(args) {
            var coi = args[0];
            var annualCoi = args[1];
            var accumCoi = _R(Number(annualCoi) + Number(coi), 15);
            _DBR("accumCoi = annualCoi(" + annualCoi + ") + coi(" + coi + ")", accumCoi, "eventCalculateCOI->", context.runningPolicyValues.months);
            return accumCoi;
         }
      });
      runningPolicyValues['annualCois'] = annualCois;
   },
   shouldBeRun: function(args) {
      // it will be executed regardless the calculate options
      return true;
   }
});

var eventDeductCOI = Class.define({
   eventName: function(args) {
      // eventDeductCOI
      // - deduct COI from accounts
      return "Deduct COI";
   },
   run: function(args) {
      var context = args["context"];
      var runningPolicyValues = context.runningPolicyValues;
      IFund.appliedTo(runningPolicyValues.fundPool).call("withdraw", {
         amounts: runningPolicyValues.cois
      });
   },
   shouldBeRun: function(args) {
      // it will be executed regardless the calculate options
      return true;
   }
});

var eventRollInterest = Class.define({
   eventName: function(args) {
      // eventRollInterest
      // - roll interest of accounts
      return "Roll interest";
   },
   run: function(args) {
      var context = args["context"];
      var runningPolicyValues = context.runningPolicyValues;
      //console.log("runningPolicyValues.fundPool : ");
      IFund.appliedTo(runningPolicyValues.fundPool).call("rollingInterest", {});

      if (runningPolicyValues.cashoutAccount) {
         //console.log("runningPolicyValues.cashoutAccount : ");
         IFund.appliedTo(runningPolicyValues.cashoutAccount).call("rollingInterest", {});
      }
   },
   shouldBeRun: function(args) {
      // it will be executed regardless the calculate options
      return true;
   }
});

var eventReceiveTopupPremium = Class.define({
   eventName: function(args) {
      // eventReceiveTopupPremium
      // - deduct withdrawal and redemption fee from accounts
      return "Receive Topup Premium";
   },
   run: function(args) {
      var context = args["context"];
      var metadata = context.events.metadata;
      var proposal = context.proposal;
      var basePlan = proposal.coverageInfo;
      var primary = getPrimaryInsured({coverage: basePlan});

      var runningPolicyValues = context.runningPolicyValues;
      var year = context.runningPolicyValues.year;
      var month = context.runningPolicyValues.months % 12;

      var topupPremium = 0;
      if (!Utils.isNothing(proposal.fundActivities) && !Utils.isNothing(proposal.fundActivities.fundActivity)) {
         var activities = Utils.iterator(proposal.fundActivities.fundActivity);
         //var parties = Utils.iterator(basePlan.parties.party);
         for (idx in activities) {
            var activity = activities[idx];
            if (Number(activity.topupPremium) > Number(0) && Number(activity.attainAge) == (Number(primary.insuredAge) + Number(year)) && (month == 0)) {
               topupPremium = activity.topupPremium;
               break;
            }
         }
      }
      if (Number(topupPremium) > Number(0)) {
         var productId = basePlan.product.productKey.primaryProduct.productPK.productId;
         var allocationRates = context.rates[productId][SchemaConstants.PREMIUM_TYPE.TOPUP_ALLOCATION];

         var newPremiumRounding = proposal.coverageInfo.catalog.call("rounding", {
            coverage: basePlan
         });
         var netTopupPremium = _R(topupPremium * _R4(1 - allocationRates.rates[year]), newPremiumRounding);

         runningPolicyValues.newPremium = Number(runningPolicyValues.newPremium) + Number(topupPremium);
         runningPolicyValues.totalPremiums = Number(runningPolicyValues.totalPremiums) + Number(topupPremium);
         IFund.appliedTo(runningPolicyValues.fundPool).call("dumpin", {
            amount: netTopupPremium
         });
      }
   },
   shouldBeRun: function(args) {
      var context = args["context"];
      var policyOptions = context.policyOptions;
      return Utils.matchInList(InterfaceConstants.POLICY_OPTIONS.FUND_ACTIVITIES_OPTION, policyOptions, false);
   }
});

var eventDeductWithdrawal = Class.define({
   eventName: function(args) {
      // eventPerformWithdrawal
      // - deduct withdrawal and redemption fee from accounts
      return "Deduct withdrawal from accounts";
   },
   run: function(args) {
      var context = args["context"];
      var metadata = context.events.metadata;
      var proposal = context.proposal;
      var basePlan = proposal.coverageInfo;
      var primary = getPrimaryInsured({coverage: basePlan});

      var runningPolicyValues = context.runningPolicyValues;
      var year = context.runningPolicyValues.year;
      var month = context.runningPolicyValues.months % 12;

      var withdrawalAmount = 0;
      if (!Utils.isNothing(proposal.fundActivities) && !Utils.isNothing(proposal.fundActivities.fundActivity)) {
         var activities = Utils.iterator(proposal.fundActivities.fundActivity);
         //var parties = Utils.iterator(basePlan.parties.party);
         for (idx in activities) {
            var activity = activities[idx];
            if (Number(activity.withdrawal) > Number(0) && Number(activity.attainAge) == (Number(primary.insuredAge) + Number(year)) && (month == 0)) {
               withdrawalAmount = activity.withdrawal;
               break;
            }
         }
      }
      if (Number(withdrawalAmount) > Number(0)) {
         runningPolicyValues.withdrawal = runningPolicyValues.withdrawal + withdrawalAmount;
         IFund.appliedTo(runningPolicyValues.fundPool).call("withdraw", {
            amount: withdrawalAmount
         });
      }
   },
   shouldBeRun: function(args) {
      var context = args["context"];
      var policyOptions = context.policyOptions;
      return Utils.matchInList(InterfaceConstants.POLICY_OPTIONS.FUND_ACTIVITIES_OPTION, policyOptions, false);
   }
});

var eventCalculateDeathBenefit = Class.define({
   eventName: function(args) {
      // eventCalculateDeathBenefit
      // - calculate redemption charges base on the withdrawal amount and policy year
      return "Calculate death benefit";
   },
   run: function(args) {
      var context = args["context"];

      var metadata = context.events.metadata;
      var proposal = context.proposal;
      var basePlan = proposal.coverageInfo;
      var runningPolicyValues = context.runningPolicyValues;

      var narCalc = DataDrivenCalculatorImpl.create({
         drivenKeys: PublicConstants.FUND_RETURN,
         drivenDatas: PublicConstants.FUND_RETURN
      });
      var deathBenefits = IDataDrivenCalculator.appliedTo(narCalc).call("calculate", {
         calculateBlock: function(fund) {
            // death benefit = basePlan.faceAmount
            // the logic can be further extended
            var db = _R(Number(runningPolicyValues.accPremiums) * Number(runningPolicyValues.initialFaceAmountRatio),0)
            _DBR("DB = round(accPremiums(" + runningPolicyValues.accPremiums + ") * initialFaceAmountRatio(" + runningPolicyValues.initialFaceAmountRatio + "),0)", db, "eventCalculateDeathBenefit->", runningPolicyValues.months);
            return db;
         }
      });
      runningPolicyValues['deathBenefits'] = deathBenefits;
   },
   shouldBeRun: function(args) {
      return true;
   }
});

var eventCalculateTotalDeathBenefit = Class.define({
   eventName: function(args) {
      // eventCalculateTotalDeathBenefit
      // - calculate redemption charges base on the withdrawal amount and policy year
      return "Calculate total death benefit";
   },
   run: function(args) {
      var context = args["context"];

      var metadata = context.events.metadata;
      var proposal = context.proposal;
      var basePlan = proposal.coverageInfo;
      var runningPolicyValues = context.runningPolicyValues;

      var narCalc = DataDrivenCalculatorImpl.create({
         drivenKeys: PublicConstants.FUND_RETURN,
         drivenDatas: [runningPolicyValues.deathBenefits, IFund.appliedTo(runningPolicyValues.fundPool).call("fundBalances", {}), IFund.appliedTo(runningPolicyValues.cashoutAccount).call("fundBalances", {})]
      });
      var totalDeathBenefits = IDataDrivenCalculator.appliedTo(narCalc).call("calculate", {
         calculateBlock: function(data) {
            var db = data[0];
            var fundBalance = data[1];
            var cashOutAccountBalance = data[2];
            var totalFundBalance = Number(fundBalance) + Number(cashOutAccountBalance);
            var tdb = 0;
            if (basePlan.options.dbLevel == SchemaConstants.DB_OPTION.LEVEL) {
               tdb = Math.max(_R2(db), _R2(totalFundBalance));
               _DBR("TDB = Max(R2(DB(" + db + ")), R2(totalFundBalance(" + totalFundBalance + ")))", tdb, "eventCalculateDeathBenefit->", runningPolicyValues.months);
            } else {
               tdb = _R2(Number(db) + Number(totalFundBalance));
               _DBR("TDB = DB(" + db + ") + totalFundBalance(" + totalFundBalance + ")", tdb, "eventCalculateDeathBenefit->", runningPolicyValues.months);
            }
            return tdb;
         }
      });
      runningPolicyValues['totalDeathBenefits'] = totalDeathBenefits;
   },
   shouldBeRun: function(args) {
      return true;
   }
});

var eventCalcPayout = Class.define({
   eventName: function(args) {
      //eventCalcPayout
      return "Withdraw dividends / target income fund";
   },
   run: function(args) {
      var context = args["context"];
      var metadata = context.events.metadata;
      var proposal = context.proposal;
      var basePlan = proposal.coverageInfo;
      var runningPolicyValues = context.runningPolicyValues;
      var year = context.runningPolicyValues.year;
      var month = context.runningPolicyValues.months % 12;
      var payoutStartYear = Number(proposal.coverageInfo.dividendWithdrawnStartYear) - 1;
      if (payoutStartYear <= year) {
         runningPolicyValues.cashOut = true;
         var totalPayout = IFund.appliedTo(runningPolicyValues.fundPool).call("payout", {});
         for (cashOutKey in totalPayout) {
            if (Utils.isNothing(runningPolicyValues.cashOutPayments[cashOutKey])) {
               runningPolicyValues.cashOutPayments[cashOutKey] = Number(0);
            }
            if (Utils.isNothing(runningPolicyValues.accumulatedcashOutPayments[cashOutKey])) {
               runningPolicyValues.accumulatedcashOutPayments[cashOutKey] = Number(0);
            }
            runningPolicyValues.cashOutPayments[cashOutKey] = Number(totalPayout[cashOutKey]);
            runningPolicyValues.accumulatedcashOutPayments[cashOutKey] = runningPolicyValues.accumulatedcashOutPayments[cashOutKey] + Number(totalPayout[cashOutKey]);
         }
      } else {
         runningPolicyValues.cashOut = false;
      }
      //console.log("eventCalcPayout = " + JSON.stringify(runningPolicyValues.cashOutPayments));
   },
   shouldBeRun: function(args) {
      var context = args["context"];
      var policyOptions = context.policyOptions;
      return true;
      //return Utils.matchInList(InterfaceConstants.POLICY_OPTIONS.CASH_OUT_OPTION, policyOptions, false);
   }
});

var eventDepositPayout = Class.define({
   eventName: function(args) {
      // eventDepositPayout
      return "Deposit Payout";
   },
   run: function(args) {
      var context = args["context"];
      var metadata = context.events.metadata;
      var proposal = context.proposal;
      var basePlan = proposal.coverageInfo;

      var runningPolicyValues = context.runningPolicyValues;
      var year = context.runningPolicyValues.year;
      var month = context.runningPolicyValues.months % 12;
      var payoutStartYear = Number(proposal.coverageInfo.dividendWithdrawnStartYear) - 1;
      if (payoutStartYear <= year) {
         //IFund.appliedTo(runningPolicyValues.fundPool).call("dumpins", {amounts: runningPolicyValues.cashOutPayments});
         IFund.appliedTo(runningPolicyValues.cashoutAccount).call("dumpins", {
            amounts: runningPolicyValues.cashOutPayments
         });
      }
      //console.log("dumpins = " + JSON.stringify(runningPolicyValues.cashOutPayments));
   },
   shouldBeRun: function(args) {
      var context = args["context"];
      var policyOptions = context.policyOptions;
      //return true;
      return !Utils.matchInList(InterfaceConstants.POLICY_OPTIONS.CASH_OUT_OPTION, policyOptions, false);
   }
});

var eventCoreAccumulatePremiums = Class.define({
    eventName: function(args) {
        return "eventCoreAccumulatePremiums";
    },
    shouldBeRun: function(args) {
        var context = args["context"];
        return true;
    },
    run: function(args) {
        var context = args["context"];
        var running = context.runningPolicyValues;
        running.accPremiums = running.accPremiums + running.totalPremiums;
        return;
    }
});

var eventCoreCalculatePremiumXXXXX = Class.define({
    init: function(args) {
        var updateTotalPremium = args['updateTotalPremium'];

        this.self['context'] = {};
        this.self.context['updateTotalPremium'] = _V(updateTotalPremium, true);
    },
    eventName: function(args) {
        return "eventCoreCalculatePremiumXXXXX";
    },
    shouldBeRun: function(args) {
        var context = args["context"];
        return true;
    },
    run: function(args) {
        var context = args["context"];
        var rates = context.rates;
        var running = context.runningPolicyValues;
        var months = running.months;
        var methodId = this.self.premiumMethod(args);

        //if (months == 0) {
        //    _SS( rates, 10 );
        //}

        var basePlan = context.proposal.coverageInfo;
        var basePlanSchema = basePlan.schema.call("getSchema");
        var baseProductId = _PV(basePlan, "product.productKey.primaryProduct.productPK.productId");

        var annualPremium = this.self.calculate({
            context: context,
            coverage: basePlan
        });
        _DBR("premium", annualPremium, "eventCalculatePremium" + methodId + "->", months);
        running.basePlanPremiums += annualPremium;
        _DBR("running.basePlanPremiums", running.basePlanPremiums, "eventCalculatePremium" + methodId + "->", months);
        if (this.self.context.updateTotalPremium) {
            running.totalPremiums += annualPremium;
            _DBR("running.totalPremiums", running.totalPremiums, "eventCalculatePremium" + methodId + "->", months);
        }

        return;
    },
    premiumMethod: function(args) {
        return "XXXXX";
    },
    calculatePremium: function(args) {
        var coverage = args["coverage"];
        var context = args["context"];
        var methodId = this.self.premiumMethod(args);

        var rates = context.rates;
        if (coverage.coverageId.startsWith("R")) {
            rates = context.rates[coverage.coverageId];
        }
        var running = context.runningPolicyValues;
        var months = running.months;
        var productId = _PV(coverage, "product.productKey.primaryProduct.productPK.productId");
        var year = running.year;

        // annual mode rate
        var premRate = rates[productId][SchemaConstants.PREMIUM_TYPE.BASICPREMIUM].rates[year];

        _DBR("year", year, "eventCalculatePremium" + methodId + "->", months);
        _DBR("premRate", premRate, "eventCalculatePremium" + methodId + "->", months);
        _DBR("coverage.faceAmount", coverage.faceAmount, "eventCalculatePremium" + methodId + "->", months);

        var annualPremium = _R2(coverage.faceAmount * premRate * coverage.extraRating.percentageExtra / 1000);
        if (!Utils.isNothing(coverage.extraRating.flatExtra)) {
            annualPremium = annualPremium + _R2(coverage.faceAmount * coverage.extraRating.flatExtra / 1000);
        }
        if (!Utils.isNothing(coverage.extraRating.tempFlat) && !Utils.isNothing(coverage.extraRating.tempFlatDuration)) {
            if (year < coverage.extraRating.tempFlatDuration) {
                annualPremium = annualPremium + _R2(coverage.faceAmount * coverage.extraRating.tempFlat / 1000);
            }
        }
        _DBR("annualPremium", annualPremium, "eventCalculatePremium" + methodId + "->", months);
        return annualPremium;
    },
    calculate: function(args) {
        var coverage = args["coverage"];
        var context = args["context"];
        var methodId = this.self.premiumMethod(args);
        var running = context.runningPolicyValues;
        var months = running.months;
        var productId = _PV(coverage, "product.productKey.primaryProduct.productPK.productId");

        var covPremium = 0;

        var schema = coverage.schema.call("getSchema");
        var premiumTable = _V(_PV(schema, "ProductSchema.PremiumInfo.PremiumTable"), []);
        var premiumTableRec;
        for (recIdx in premiumTable) {
            var premiumRec = premiumTable[recIdx];
            var premiumType = _V(premiumRec.PremiumType);
            if (premiumType == SchemaConstants.PREMIUM_TYPE.BASICPREMIUM) {
                var methodId = _V(premiumRec.Method);
                if (methodId == this.self.premiumMethod(args)) {
                    covPremium = this.self.calculatePremium({
                        coverage: coverage,
                        context: context
                    });
                    _DBR("Product (" + productId + ")", covPremium, "eventCalculatePremium" + methodId + "->", months);
                    break;
                }
            }
        }
        return covPremium;
    }
});

var eventCoreMvyAvyInitialization = Class.define({
    eventName: function(args) {
        return "eventCoreMvyAvyInitialization";
    },
    shouldBeRun: function(args) {
        var context = args["context"];
        return true;
    },
    MVY: function(args) {
        var context = args["context"];
        var running = context.runningPolicyValues;
        var months = running.months;
        // do something
    },
    AVY: function(args) {
        var context = args["context"];
        var running = context.runningPolicyValues;
        var months = running.months;
        // do something
        running['basePlanPremiums'] = 0;
        running['riderPremiums'] = 0;
        running['totalPremiums'] = 0;
    },
    initialSetup: function(args) {
        var context = args["context"];
        var running = context.runningPolicyValues;
        var months = running.months;
        // do something
        running['accPremiums'] = 0;
    },
    run: function(args) {
        var context = args["context"];
        var running = context.runningPolicyValues;
        var months = running.months;
        this.self.MVY(args);
        if (months == 0) {
            this.self.initialSetup(args);
        }
        if (months % 12 == 0) {
            this.self.AVY(args);
        }
        return;
    }
});

var eventCoreCalculateRiderPremiumXXXXX = eventCoreCalculatePremiumXXXXX.extend({
    init: function(args) {
        var updateTotalPremium = args['updateTotalPremium'];

        this.self['context'] = {};
        this.self.context['updateTotalPremium'] = _V(updateTotalPremium, true);
    },
    eventName: function(args) {
        return "eventCoreCalculateRiderPremiumXXXXX";
    },
    shouldBeRun: function(args) {
        var context = args["context"];
        var projOptions = context.projectionOptions;
        return Utils.matchInList(InterfaceConstants.PROJECTION_OPTIONS.BASE_PLAN_WITH_RIDERS, projOptions, false);
    },
    run: function(args) {
        var context = args["context"];
        var methodId = this.self.premiumMethod(args);
        var rates = context.rates;
        var running = context.runningPolicyValues;
        var months = running.months;

        //if (months == 0) {
        //    _SS( rates, 10 );
        //}

        var riders = _V(_PV(context.proposal, "riders.coverageInfo"), []);
        for (var rnd=0; rnd<2; rnd++) {
           var wpRound = (rnd == 1);
           _DBR("@@@@@ WP ROUND", wpRound, "eventCoreCalculateRiderPremiumXXXXX->", months);
           for (var riderIdx in riders) {
               var riderCov = riders[riderIdx];
               var isWp = riderCov.catalog.call('isWaiver');
               if (wpRound == isWp) {
                  var riderPremium = this.self.calculate({
                      context: context,
                      coverage: riderCov
                  });

                  _DBR("riderPremium[" + riderIdx + "]", riderPremium, "eventCalculatePremium" + methodId + "->", months);
                  running.riderPremiums += riderPremium;
                  if (this.self.context.updateTotalPremium) {
                      running.totalPremiums += riderPremium;
                  }
               }
           }
        }
        _DBR("running.riderPremiums", running.riderPremiums, "eventCalculatePremium" + methodId + "->", months);
        if (this.self.context.updateTotalPremium) {
            _DBR("running.totalPremiums", running.totalPremiums, "eventCalculatePremium" + methodId + "->", months);
        }
        return;
    }
});
var columnYear = Class.define({
   columnName: function(args) {
      return "columnYear";
   },
   calculatedValue: function(args) {
      var record = args["record"];
      var calValue = _R(Number(record.year) + Number(1),0);
      return calValue;
   },
   shouldBeShown: function(args) {
      return true;
   }
});

var columnAge = Class.define({
   columnName: function(args) {
      return "columnAge";
   },
   calculatedValue: function(args) {
      var record = args["record"];
      var calValue = _R(Number(record.age) + Number(1),0); // match printing requirements
      return calValue;
   },
   shouldBeShown: function(args) {
      return true;
   }
});

var colAccountLow= Class.define({
   columnName: function(args) {
      return "colAccountLow";
   },
   calculatedValue: function(args) {
      var record = args["record"];
      var calValue = record.accountValues[PublicConstants.FUND_RETURN.LOW] + record.cashoutAccount[PublicConstants.FUND_RETURN.LOW];
      return calValue;
   },
   shouldBeShown: function(args) {
      return true;
   }
});

var colAccountMedium= Class.define({
   columnName: function(args) {
      return "colAccountMedium";
   },
   calculatedValue: function(args) {
      var record = args["record"];
      var calValue = record.accountValues[PublicConstants.FUND_RETURN.MEDIUM] + record.cashoutAccount[PublicConstants.FUND_RETURN.MEDIUM];
      return calValue;
   },
   shouldBeShown: function(args) {
      return true;
   }
});

var colAccountHigh= Class.define({
   columnName: function(args) {
      return "colAccountHigh";
   },
   calculatedValue: function(args) {
      var record = args["record"];
      var calValue = record.accountValues[PublicConstants.FUND_RETURN.HIGH] + record.cashoutAccount[PublicConstants.FUND_RETURN.HIGH];
      return calValue;
   },
   shouldBeShown: function(args) {
      return true;
   }
});

var colNarLow= Class.define({
   columnName: function(args) {
      return "colNarLow";
   },
   calculatedValue: function(args) {
      var record = args["record"];
      var calValue = record.nars[PublicConstants.FUND_RETURN.LOW];
      return calValue;
   },
   shouldBeShown: function(args) {
      return true;
   }
});

var colNarMedium= Class.define({
   columnName: function(args) {
      return "colNarMedium";
   },
   calculatedValue: function(args) {
      var record = args["record"];
      var calValue = record.nars[PublicConstants.FUND_RETURN.MEDIUM];
      return calValue;
   },
   shouldBeShown: function(args) {
      return true;
   }
});

var colNarHigh= Class.define({
   columnName: function(args) {
      return "colNarHigh";
   },
   calculatedValue: function(args) {
      var record = args["record"];
      var calValue = record.nars[PublicConstants.FUND_RETURN.HIGH];
      return calValue;
   },
   shouldBeShown: function(args) {
      return true;
   }
});

var colCoiRate= Class.define({
   columnName: function(args) {
      return "colCoiRate";
   },
   calculatedValue: function(args) {
      var record = args["record"];
      var calValue = record.coiRate;
      return calValue;
   },
   shouldBeShown: function(args) {
      return true;
   }
});

var colCoiLow= Class.define({
   columnName: function(args) {
      return "colCoiLow";
   },
   calculatedValue: function(args) {
      var record = args["record"];
      var calValue = record.cois[PublicConstants.FUND_RETURN.LOW];
      return calValue;
   },
   shouldBeShown: function(args) {
      return true;
   }
});

var colCoiMedium= Class.define({
   columnName: function(args) {
      return "colCoiMedium";
   },
   calculatedValue: function(args) {
      var record = args["record"];
      var calValue = record.cois[PublicConstants.FUND_RETURN.MEDIUM];
      return calValue;
   },
   shouldBeShown: function(args) {
      return true;
   }
});

var colCoiHigh= Class.define({
   columnName: function(args) {
      return "colCoiHigh";
   },
   calculatedValue: function(args) {
      var record = args["record"];
      var calValue = record.cois[PublicConstants.FUND_RETURN.HIGH];
      return calValue;
   },
   shouldBeShown: function(args) {
      return true;
   }
});

var colWithdrawal= Class.define({
   columnName: function(args) {
      return "colWithdrawal";
   },
   calculatedValue: function(args) {
      var record = args["record"];
      var calValue = record.withdrawal;
      return calValue;
   },
   shouldBeShown: function(args) {
      return true;
   }
});

var colInitialDumpin= Class.define({
   columnName: function(args) {
      return "colInitialDumpin";
   },
   calculatedValue: function(args) {
      var record = args["record"];
      var calValue = record.initialDumpIn;
      return calValue;
   },
   shouldBeShown: function(args) {
      return true;
   }
});

var colPremium= Class.define({
   columnName: function(args) {
      return "colPremium";
   },
   calculatedValue: function(args) {
      var record = args["record"];
      var calValue = record.newPremium;
      return calValue;
   },
   shouldBeShown: function(args) {
      return true;
   }
});

var colTotalPremium= Class.define({
   columnName: function(args) {
      return "colTotalPremium";
   },
   calculatedValue: function(args) {
      var record = args["record"];
      var calValue = record.totalPremiums;
      return calValue;
   },
   shouldBeShown: function(args) {
      return true;
   }
});

var colSurValueLow= Class.define({
   columnName: function(args) {
      return "colSurValueLow";
   },
   calculatedValue: function(args) {
      var record = args["record"];
      var calValue = Number(Number(record.surrenderValues[PublicConstants.FUND_RETURN.LOW]) + Number(record.surrenderValuesFromCashoutAccount[PublicConstants.FUND_RETURN.LOW]));
      return calValue;
   },
   shouldBeShown: function(args) {
      return true;
   }
});

var colSurValueMedium= Class.define({
   columnName: function(args) {
      return "colSurValueMedium";
   },
   calculatedValue: function(args) {
      var record = args["record"];
      var calValue = Number(Number(record.surrenderValues[PublicConstants.FUND_RETURN.MEDIUM]) + Number(record.surrenderValuesFromCashoutAccount[PublicConstants.FUND_RETURN.MEDIUM]));
      return calValue;
   },
   shouldBeShown: function(args) {
      return true;
   }
});

var colSurValueHigh= Class.define({
   columnName: function(args) {
      return "colSurValueHigh";
   },
   calculatedValue: function(args) {
      var record = args["record"];
      var calValue = Number(Number(record.surrenderValues[PublicConstants.FUND_RETURN.HIGH]) + Number(record.surrenderValuesFromCashoutAccount[PublicConstants.FUND_RETURN.HIGH]));
      return calValue;
   },
   shouldBeShown: function(args) {
      return true;
   }
});

var colDbLow= Class.define({
   columnName: function(args) {
      return "colDbLow";
   },
   calculatedValue: function(args) {
      var record = args["record"];
      var calValue = record.deathBenefits[PublicConstants.FUND_RETURN.LOW];
      return calValue;
   },
   shouldBeShown: function(args) {
      return true;
   }
});

var colDbMedium= Class.define({
   columnName: function(args) {
      return "colDbMedium";
   },
   calculatedValue: function(args) {
      var record = args["record"];
      var calValue = record.deathBenefits[PublicConstants.FUND_RETURN.MEDIUM];
      return calValue;
   },
   shouldBeShown: function(args) {
      return true;
   }
});

var colDbHigh= Class.define({
   columnName: function(args) {
      return "colDbHigh";
   },
   calculatedValue: function(args) {
      var record = args["record"];
      var calValue = record.deathBenefits[PublicConstants.FUND_RETURN.HIGH];
      return calValue;
   },
   shouldBeShown: function(args) {
      return true;
   }
});

var colTotalDbLow= Class.define({
   columnName: function(args) {
      return "colTotalDbLow";
   },
   calculatedValue: function(args) {
      var record = args["record"];
      var calValue = record.totalDeathBenefits[PublicConstants.FUND_RETURN.LOW];
      return calValue;
   },
   shouldBeShown: function(args) {
      return true;
   }
});

var colTotalDbMedium= Class.define({
   columnName: function(args) {
      return "colTotalDbMedium";
   },
   calculatedValue: function(args) {
      var record = args["record"];
      var calValue = record.totalDeathBenefits[PublicConstants.FUND_RETURN.MEDIUM];
      return calValue;
   },
   shouldBeShown: function(args) {
      return true;
   }
});

var colTotalDbHigh= Class.define({
   columnName: function(args) {
      return "colTotalDbHigh";
   },
   calculatedValue: function(args) {
      var record = args["record"];
      var calValue = record.totalDeathBenefits[PublicConstants.FUND_RETURN.HIGH];
      return calValue;
   },
   shouldBeShown: function(args) {
      return true;
   }
});

var colCashOut= Class.define({
   columnName: function(args) {
      return "colCashOut";
   },
   calculatedValue: function(args) {
      var record = args["record"];
      var calValue = record.cashOut;
      return calValue;
   },
   shouldBeShown: function(args) {
     var context = args["context"];
     var policyOptions = context.policyOptions;
     return Utils.matchInList(InterfaceConstants.POLICY_OPTIONS.CASH_OUT_OPTION, policyOptions, false);
   }
});

var colCashOutPaymentLow= Class.define({
   columnName: function(args) {
      return "colCashOutPaymentLow";
   },
   calculatedValue: function(args) {
      var record = args["record"];
      var calValue = record.cashOutPayments[PublicConstants.FUND_RETURN.LOW];
      return calValue;
   },
   shouldBeShown: function(args) {
     var context = args["context"];
     var policyOptions = context.policyOptions;
     return Utils.matchInList(InterfaceConstants.POLICY_OPTIONS.CASH_OUT_OPTION, policyOptions, false);
   }
});

var colCashOutPaymentMedium= Class.define({
   columnName: function(args) {
      return "colCashOutPaymentMedium";
   },
   calculatedValue: function(args) {
      var record = args["record"];
      var calValue = record.cashOutPayments[PublicConstants.FUND_RETURN.MEDIUM];
      return calValue;
   },
   shouldBeShown: function(args) {
     var context = args["context"];
     var policyOptions = context.policyOptions;
     return Utils.matchInList(InterfaceConstants.POLICY_OPTIONS.CASH_OUT_OPTION, policyOptions, false);
   }
});

var colCashOutPaymentHigh= Class.define({
   columnName: function(args) {
      return "colCashOutPaymentHigh";
   },
   calculatedValue: function(args) {
      var record = args["record"];
      var calValue = record.cashOutPayments[PublicConstants.FUND_RETURN.HIGH];
      return calValue;
   },
   shouldBeShown: function(args) {
     var context = args["context"];
     var policyOptions = context.policyOptions;
     return Utils.matchInList(InterfaceConstants.POLICY_OPTIONS.CASH_OUT_OPTION, policyOptions, false);
   }
});

var colFirstMonthCoi= Class.define({
   columnName: function(args) {
      return "colFirstMonthCoi";
   },
   calculatedValue: function(args) {
      var record = args["record"];
      var calValue = record.firstMonthCoi;
      return calValue;
   },
   shouldBeShown: function(args) {
      return true;
   }
});

var colTradAccumulatePremiums = Class.define({
    columnName: function(args) {
        return "colTradAccumulatePremiums";
    },
    shouldBeShown: function(args) {
        var context = args["context"];
        return true;
    },
    calculatedValue: function(args) {
        var record = args["record"];
        return _V(record.accumulatePremiums, 0.00);
    }
});

var colTradBasePlanPremiums = Class.define({
    columnName: function(args) {
        return "colBasePlanPremiums";
    },
    shouldBeShown: function(args) {
        var context = args["context"];
        return true;
    },
    calculatedValue: function(args) {
        var record = args["record"];
        return _V(record.basePlanPremiums, 0.00);
    }
});

var colTradRiderPremiums = Class.define({
    columnName: function(args) {
        return "colRiderPremiums";
    },
    shouldBeShown: function(args) {
        var context = args["context"];
        return true;
    },
    calculatedValue: function(args) {
        var record = args["record"];
        return _V(record.riderPremiums, 0.00);
    }
});

var colTradTotalPremiums = Class.define({
    columnName: function(args) {
        return "colTradTotalPremiums";
    },
    shouldBeShown: function(args) {
        var context = args["context"];
        return true;
    },
    calculatedValue: function(args) {
        var record = args["record"];
        return _V(record.totalPremiums, 0.00);
    }
});
var CommonEvents = Class.define({
   init: function(args) {
      this.self['name'] = 'CommonEvents';
      this.self['providerId'] = null;
      this.self['productId'] = null;
      this.self['productType'] = [];
   },
   iterationUnit: function(args) {
      var proposal = args['proposal'];
      var basePlan = proposal.coverageInfo;
      if (basePlan.catalog.call("isUVL", {})) {
         return Number(1);
      } else {
         return Number(12);
      }
   },
   iterations: function(args) {
      var proposal = args['proposal'];
      var basePlan = proposal.coverageInfo;
      var benefitPeriod = basePlan.schema.call("calculateBenefitPeriod", {
         coverage: basePlan
      });
      var iterations = benefitPeriod * 12;
      return iterations;
   },
   providerName: function(args) {
      return this.self['name'];
   },
   matchProviderId: function(args) {
      var productId = args['productId'];
      var catalog = args['catalog'];
      if (!Utils.isNothing(this.self.providerId)) {
         var providerId = _V( _PV( catalog.call("getCatalog"), "ProductCatalog.providerId" ) );
         if (!Utils.isNothing(providerId)) {
            _DB( "this.self.providerId", this.self.providerId, "matchProviderId" );
            _DB( "catalog.providerId", providerId, "matchProviderId" );
            return (providerId == this.self.providerId);
         }
      }
      return false;
   },
   matchProductId: function(args) {
      // return true or false;
      var productId = args['productId'];
      var catalog = args['catalog'];
      if (!Utils.isNothing(this.self.productId)) {
         return (this.self.productId == productId);
      } else {
         return false;
      }
   },
   matchProductType: function(args) {
      // return matches
      var productId = args['productId'];
      var catalog = args['catalog'];

      var matchedTypes = 0;
      if (this.self['productType']) {
          for(ptIndex in this.self['productType']) {
              var prodType = this.self['productType'][ptIndex];
              var catalogTypes = _V( _PV(catalog.call('getCatalog',{}), "ProductCatalog.ProductType.ProductTypeCode"), [] );
              if (Utils.matchInList(prodType, catalogTypes, false)) {
                  matchedTypes += 1;
              }
          }
      }
      if (matchedTypes == this.self['productType'].length) {
          return matchedTypes;
      } else {
          return 0;
      }
   }
});

var UVLife_Events = CommonEvents.extend({
   init: function(args) {
      this.self['name'] = 'UVLife_Events';
      this.self['productId'] = null;
      this.self['providerId'] = 'UVLife_Events';
      //this.self['productType'] = [CatalogConstants.PRODUCT_TYPE.UVLIFE];
      this.self['productType'] = [];
   },
   events: function(args) {
      var events = [
         eventAvyInitialization.create(),
         eventReceiveInitialPremiums.create(),
         eventReceiveTopupPremium.create(),
         eventDeductWithdrawal.create(),
         eventCalculateNAR.create(),
         eventCalculateCOI.create(),
         eventAccumulateCOI.create(),
         eventDeductCOI.create(),
         eventRollInterest.create(),
         eventCalcPayout.create(),
         eventDepositPayout.create(),
         eventCalculateDeathBenefit.create(),
         eventCalculateTotalDeathBenefit.create()
      ];
      return events;
   },
   columns: function(args) {
      var columns = [
         columnYear.create(),
         columnAge.create(),
         colAccountLow.create(),
         colAccountMedium.create(),
         colAccountHigh.create(),
         colNarLow.create(),
         colNarMedium.create(),
         colNarHigh.create(),
         colCoiRate.create(),
         colCoiLow.create(),
         colCoiMedium.create(),
         colCoiHigh.create(),
         colWithdrawal.create(),
         colInitialDumpin.create(),
         colPremium.create(),
         colTotalPremium.create(),
         colSurValueLow.create(),
         colSurValueMedium.create(),
         colSurValueHigh.create(),
         colDbLow.create(),
         colDbMedium.create(),
         colDbHigh.create(),
         colTotalDbLow.create(),
         colTotalDbMedium.create(),
         colTotalDbHigh.create(),
         colCashOut.create(),
         colCashOutPaymentLow.create(),
         colCashOutPaymentMedium.create(),
         colCashOutPaymentHigh.create(),
         colFirstMonthCoi.create()
      ];
      return columns;
   },
   makeSnapshot: function(args) {
      var context = args['context'];
      var snapshot = {
          year: context.runningPolicyValues.year,
          month: (context.runningPolicyValues.months % 12),
          age: Number(context.insuredAge) + Number(context.runningPolicyValues.year),
          accountValues: IFund.appliedTo(context.runningPolicyValues.fundPool).call("fundBalances", {}),
          nars: context.runningPolicyValues.nars,
          cois: context.runningPolicyValues.annualCois,
          coiRate: context.runningPolicyValues.coiRate,
          withdrawal: context.runningPolicyValues.withdrawal,
          initialDumpIn: context.runningPolicyValues.initialDumpIn,
          newPremium: context.runningPolicyValues.newPremium,
          totalPremiums: context.runningPolicyValues.totalPremiums,
          deathBenefits: context.runningPolicyValues.deathBenefits,
          totalDeathBenefits: context.runningPolicyValues.totalDeathBenefits,
          cashOut: context.runningPolicyValues.cashOut,
          cashOutPayments: context.runningPolicyValues.accumulatedcashOutPayments,
          firstMonthCoi: context.runningPolicyValues.firstMonthCoi,
          cashoutAccount: IFund.appliedTo(context.runningPolicyValues.cashoutAccount).call("fundBalances", {}),
          surrenderValuesFromCashoutAccount: IFund.appliedTo(context.runningPolicyValues.cashoutAccount).call("surrenderValues", {}),
          surrenderValues: IFund.appliedTo(context.runningPolicyValues.fundPool).call("surrenderValues", {})
      };
      return snapshot;
   }
});

var TradTermCore_Events = CommonEvents.extend({
    events: function(args) {
        var proposal = args["proposal"];
        var events = [
            eventTradAvyInitialization.create(),
            eventCalculatePremiumBPSG1.create(),
            eventCalculateRiderPremiumBPSG1.create(),
            eventAccumulatePremiums.create()
        ];
        return events;
    },
    columns: function(args) {
        var proposal = args["proposal"];
        var columns = [
            columnYear.create(),
            columnAge.create(),
            colBasePlanPremiums.create(),
            colRiderPremiums.create(),
            colTotalPremiums.create(),
            colAccumulatePremiums.create()
        ];
        return columns;
    },
    init: function(args) {
        this.self['name'] = 'TradTerm_Events';
        this.self['productId'] = null;
        this.self['providerId'] = 'TradTerm_Events';
        //this.self['productType'] = [CatalogConstants.PRODUCT_TYPE.TERM];
        this.self['productType'] = [];
    },
    makeSnapshot: function(args) {
        var context = args['context'];
        var snapshot = {
            year: context.runningPolicyValues.year,
            month: (context.runningPolicyValues.months % 12),
            age: Number(context.insuredAge) + Number(context.runningPolicyValues.year),
            totalPremiums: context.runningPolicyValues.totalPremiums,
            accumulatePremiums: context.runningPolicyValues.accPremiums,
            basePlanPremiums: context.runningPolicyValues.basePlanPremiums,
            riderPremiums: context.runningPolicyValues.riderPremiums
        };
        return snapshot;
    }
});

// coverage attributes reader for rate
var RateSearchAttributeReader = function( coverage, ipo ) {

   //banding = coverage.schema.call("calculateBanding", {coverage: coverage});
   banding = coverage.banding;
   return {
      catalog : coverage.catalog,
      schema : coverage.schema,
      coverage : coverage,
      banding : banding,
      ipo : ipo,
      insured: function() {
         return getPrimaryInsured({coverage: this.coverage});
      },
      map : function(v, valueMap, defaultValue) {
         var o = 0;
         if (defaultValue) {
            o = defaultValue;
         }
         if (v) {
            for(k in valueMap) {
               var vp = valueMap[k];
               var match = false;
               //if (v.length) {
               //   match = Utils.matchInList(vp, v, false);
               //} else {
               //   match = v.equalsIgnoreCase(vp.key);
               //}
               if (v.equalsIgnoreCase(vp.key)) {
                  o = o | vp.value;
               }
            }
         }
         return o;
      },
      participate : function() {
         var catalog = this.coverage.catalog.implementation;
         if (catalog.isParticipate()) {
             return RateConstants.PARTICIPATE.YES;
         } else {
             return RateConstants.PARTICIPATE.NO;
         }
      },
      sex : function() {
         //console.log("this.coverage.parties.party.insuredSex = " + this.coverage.parties.party.insuredSex);
         var _sex = this.map(this.insured().insuredSex,
            [
               {key : SchemaConstants.GENDER_FULL.MALE, value : RateConstants.GENDER.MALE},
                {key : SchemaConstants.GENDER_FULL.FEMALE, value : RateConstants.GENDER.FEMALE}
            ]
         );
         return _sex;
      },
      location : function() {
         var _location = this.map(_V(_PV(this.coverage, "product.productKey.location")),
            [
               {key: CatalogConstants.LOCATION.HONGKONG, value: RateConstants.LOCATION.HONG_KONG},
               {key: CatalogConstants.LOCATION.MACAU, value: RateConstants.LOCATION.MACAU},
               {key: CatalogConstants.LOCATION.SINGAPORE, value: RateConstants.LOCATION.SINGAPORE},
               {key: CatalogConstants.LOCATION.CHINA, value: RateConstants.LOCATION.CHINA},
               {key: CatalogConstants.LOCATION.PHILIPPINE, value: RateConstants.LOCATION.PHILIPPHINE},
               {key: CatalogConstants.LOCATION.VIETNAM, value: RateConstants.LOCATION.VIETNAM}
            ]
         );

         //console.log('this.coverage.product.productKey.location = ' + this.coverage.product.productKey.location);
         //console.log('_location = ' + _location);

         return _location;
      },
      channel : function() {
         var _channel = this.map(_V(_PV(this.coverage, "proposal.channel")),
         [
            {key: DISTRIBUTION_CHANNEL.AGENCY, value: RateConstants.CHANNEL.AGENCY},
            {key: DISTRIBUTION_CHANNEL.BROKER, value: RateConstants.CHANNEL.BROKER},
            {key: DISTRIBUTION_CHANNEL.BANK, value: RateConstants.CHANNEL.BANK},
            {key: DISTRIBUTION_CHANNEL.ACTUARIAL, value: RateConstants.CHANNEL.ACTUARIAL},
            {key: DISTRIBUTION_CHANNEL.ADMIN, value: RateConstants.CHANNEL.ADMIN},
            {key: DISTRIBUTION_CHANNEL.ALL, value: RateConstants.CHANNEL.ALL}
         ]);
         return _channel;
      },
      smokingStatus : function() {
         var _smokingStatus = this.map(this.insured().smokingStatus,
            [
               {key: SchemaConstants.SMOKING_STATUS.SMOKER, value: RateConstants.SMOKING_STATUS.SMOKER},
               {key: SchemaConstants.SMOKING_STATUS.NONSMOKER, value: RateConstants.SMOKING_STATUS.NONSMOKER},
               {key: SchemaConstants.SMOKING_STATUS.AGGREGATE, value: RateConstants.SMOKING_STATUS.AGGREGATE},
               {key: SchemaConstants.SMOKING_STATUS.PREFERRED_LIVES, value: RateConstants.SMOKING_STATUS.PREFERRED_LIVES},
               {key: SchemaConstants.SMOKING_STATUS.PREFERRED_NONSMOKER, value: RateConstants.SMOKING_STATUS.PREFERRED_NONSMOKER},
               {key: SchemaConstants.SMOKING_STATUS.PREFERRED_SMOKER, value: RateConstants.SMOKING_STATUS.PREFERRED_SMOKER},
               {key: SchemaConstants.SMOKING_STATUS.SUPER_PREFERRED_NONSMOKER, value: RateConstants.SMOKING_STATUS.SUPER_PREFERRED_NONSMOKER},
               {key: SchemaConstants.SMOKING_STATUS.STANDARD_PLUS_NONSMOKER, value: RateConstants.SMOKING_STATUS.STANDARD_PLUS_NONSMOKER}
            ]
         );
         return _smokingStatus;
      },
      waitingPeriod : function() {
         var _waitingPeriod = this.map(_V(_PV(this.coverage, "otherOptions.waitingPeriod")),
            [
               {key: SchemaConstants.WAITING_PERIOD.WP_30DAYS, value: RateConstants.WAITING_PERIOD.PRD_30DAYS},
               {key: SchemaConstants.WAITING_PERIOD.WP_90DAYS, value: RateConstants.WAITING_PERIOD.PRD_90DAYS},
               {key: SchemaConstants.WAITING_PERIOD.WP_180DAYS, value: RateConstants.WAITING_PERIOD.PRD_180DAYS},
               {key: SchemaConstants.WAITING_PERIOD.WP_365DAYS, value: RateConstants.WAITING_PERIOD.PRD_365DAYS}
            ]
         );
         return _waitingPeriod;
      },
      benefitPeriod : function() {
         var _bp = _V(_PV(this.coverage, "otherOptions.benefitPeriod"));
         var _benefitPeriod = this.map(_bp,
            [
               {key: SchemaConstants.BENEFIT_PERIOD.BP_5YEARS, value: RateConstants.BENEFIT_PERIOD.PRD_5YEARS},
               {key: SchemaConstants.BENEFIT_PERIOD.BP_10YEARS, value: RateConstants.BENEFIT_PERIOD.PRD_10YEARS},
               {key: SchemaConstants.BENEFIT_PERIOD.BP_15YEARS, value: RateConstants.BENEFIT_PERIOD.PRD_15YEARS},
               {key: SchemaConstants.BENEFIT_PERIOD.BP_AGE65, value: RateConstants.BENEFIT_PERIOD.PRD_AGE65}
            ],
            _bp
         );
         return _benefitPeriod;
      },
      occupation : function() {
         var _occupation = this.map(this.coverage.occupation,
            [
               {key: SchemaConstants.OCCUPATION_CLASS.CLASS_0, value: RateConstants.OCCUPATION_CLASS.CLASS0},
               {key: SchemaConstants.OCCUPATION_CLASS.CLASS_1, value: RateConstants.OCCUPATION_CLASS.CLASS1},
               {key: SchemaConstants.OCCUPATION_CLASS.CLASS_2, value: RateConstants.OCCUPATION_CLASS.CLASS2},
               {key: SchemaConstants.OCCUPATION_CLASS.CLASS_3, value: RateConstants.OCCUPATION_CLASS.CLASS3},
               {key: SchemaConstants.OCCUPATION_CLASS.CLASS_4, value: RateConstants.OCCUPATION_CLASS.CLASS4}
            ]
         );
         if (this.coverage.rcc) {
            if (this.coverage.rcc.equalsIgnoreCase("Y")) {
               _occupation = _occupation | RateConstants.OCCUPATION_CLASS.RCC;
            }
         }
         return _occupation;
      },
      noOfPerson : function() {
         var _noOfPerson = this.map(_V(_PV(this.coverage, "otherOptions.noOfPerson")),
            [
               {key: SchemaConstants.NO_OF_PERSONS.PERSONS_1, value: RateConstants.NO_OF_PERSONS.PERSONS_1},
               {key: SchemaConstants.NO_OF_PERSONS.PERSONS_2, value: RateConstants.NO_OF_PERSONS.PERSONS_2},
               {key: SchemaConstants.NO_OF_PERSONS.PERSONS_3, value: RateConstants.NO_OF_PERSONS.PERSONS_3},
               {key: SchemaConstants.NO_OF_PERSONS.PERSONS_4, value: RateConstants.NO_OF_PERSONS.PERSONS_4}
            ]
         );
         return _noOfPerson;
      },
      otherOption : function() {
         var _otherOption = this.map(_V(_PV(this.coverage, "otherOptions.coverageClass")),
            [
               {key: SchemaConstants.COVERAGE_CLASS.CLASS_A, value: RateConstants.OTHER_OPTION.COVERAGE_CLASS_A},
               {key: SchemaConstants.COVERAGE_CLASS.CLASS_B, value: RateConstants.OTHER_OPTION.COVERAGE_CLASS_B},
               {key: SchemaConstants.COVERAGE_CLASS.CLASS_C, value: RateConstants.OTHER_OPTION.COVERAGE_CLASS_C},
               {key: SchemaConstants.COVERAGE_CLASS.CLASS_D, value: RateConstants.OTHER_OPTION.COVERAGE_CLASS_D},
               {key: SchemaConstants.COVERAGE_CLASS.CLASS_S, value: RateConstants.OTHER_OPTION.COVERAGE_CLASS_S},
               {key: SchemaConstants.COVERAGE_CLASS.CLASS_E, value: RateConstants.OTHER_OPTION.COVERAGE_CLASS_E},
               {key: SchemaConstants.COVERAGE_CLASS.CLASS_F, value: RateConstants.OTHER_OPTION.COVERAGE_CLASS_F},
               {key: SchemaConstants.COVERAGE_CLASS.CLASS_G, value: RateConstants.OTHER_OPTION.COVERAGE_CLASS_G},
               {key: SchemaConstants.COVERAGE_CLASS.CLASS_H, value: RateConstants.OTHER_OPTION.COVERAGE_CLASS_H}
            ]
         );
         var _majorMedical = this.map(_V(_PV(this.coverage, "otherOptions.majorMedical")),
            [
               {key: "Y", value: RateConstants.OTHER_OPTION.MAJOR_MEDICAL},
               {key: "N", value: RateConstants.OTHER_OPTION.MAJOR_MEDICAL_N},
               {key: "P", value: RateConstants.OTHER_OPTION.MAJOR_MEDICAL_P}
            ]
         );
         var result = (_otherOption | _majorMedical);
         return result;
      },
      paymentMode : function() {
         var _paymentMode = this.map(_V(_PV(this.coverage, "options.paymentMode")),
            [
               {key: SchemaConstants.PAYMENT_MODE.ANNUAL, value: RateConstants.PAYMENT_MODE.ANNUAL},
               {key: SchemaConstants.PAYMENT_MODE.SEMIANNUAL, value: RateConstants.PAYMENT_MODE.SEMIANNUAL},
               {key: SchemaConstants.PAYMENT_MODE.QUARTERLY, value: RateConstants.PAYMENT_MODE.QUARTERLY},
               {key: SchemaConstants.PAYMENT_MODE.MONTHLY, value: RateConstants.PAYMENT_MODE.MONTHLY}
            ]
         )
         return _paymentMode;
      },
      rateId : function( resourceKey ) {
         if (resourceKey) {
            if (Utils.isMemberOf(resourceKey, SchemaConstants.CHARGE_TYPE)) {
               var rec = this.schema.call("matchChargeInfoRecord", {coverage: this.coverage, banding: banding.Band.text, chargeType: resourceKey});
               return rec.ChargePK.ChargeId.text;
            }
            if (Utils.isMemberOf(resourceKey, SchemaConstants.PREMIUM_TYPE)) {
               var rec = this.schema.call("matchPremiumInfoRecord", {coverage: this.coverage, banding: banding.Band.text, premiumType: resourceKey});
               return rec.PremiumPK.PremiumId.text;
            }
            if (Utils.isMemberOf(resourceKey, SchemaConstants.POLICY_VALUE)) {
               var rec = this.schema.call("matchPolicyValueInfoRecord", {coverage: this.coverage, banding: banding.Band.text, policyValueType: resourceKey});
               return rec.PolicyValuePK.PolicyValueId.text;
            }
            var _schema = this.schema.call("getSchema", null);
            //return _schema.ProductSchema.ProductSchemaPK.ProductPK.ProductId.text +
            //   Utils.leftPad(_schema.ProductSchema.ProductSchemaPK.SchemaId);
            return _V(_schema.ProductSchema.ProductSchemaPK.ProductPK.ProductId) +
               Utils.leftPad(_V(_schema.ProductSchema.ProductSchemaPK.SchemaId), '0', 2);
         } else {
            var _schema = this.schema.call("getSchema", null);
            return _V(_schema.ProductSchema.ProductSchemaPK.ProductPK.ProductId) +
               Utils.leftPad(_V(_schema.ProductSchema.ProductSchemaPK.SchemaId), '0', 2);
         }
      }
   };

}

// super function for generate default search VO
SearchVO = function( coverage, rateType, resourceKey, policyYear, ipo ) {
   var coverageForRateSearch = new RateSearchAttributeReader( coverage, ipo);

   // var assPrd = (coverage.product.productKey.associateProduct.productPK) ? coverage.product.productKey.associateProduct.productPK.productId : null;
   var location = coverageForRateSearch.location();
   var rateId = coverageForRateSearch.rateId(resourceKey);
   /*
   return {
           rateId : rateId,
           currency : coverage.currency.currencyPK.currencyId,
           location : location,
           rateType : rateType,
           valueDate : coverage.product.productKey.valueDate,
           issueDate : Utils.now(),
           associateProductPK : assPrd,
           attainAge : (Number(coverage.parties.party.insuredAge)  + Number(policyYear)),

           calcMethod : null,
           renewalPeriod : 0,
         };
    */
   var insured = getPrimaryInsured({coverage: coverage});
   return {
           rateId : rateId,
           currency : coverage.currency.currencyPK.currencyId,
           location : location,
           rateType : rateType,
           valueDate : coverage.product.productKey.valueDate,
           issueDate : Utils.now(),
           attainAge : (Number(insured.insuredAge)  + Number(policyYear)),

           calcMethod : null,
           renewalPeriod : 0,
         };
};

// premium rates
var handlerType0 = function(rateType, resourceKey) {
   return {
      rateType: rateType,
      resourceKey: resourceKey,
      createSearchRequest : function( coverage, policyYear, ipo ) {
         var searchVO = new SearchVO( coverage, this.rateType, this.resourceKey, policyYear, ipo );
         var insured = getPrimaryInsured({coverage: coverage});
         var bp = coverage.schema.call("calculateBenefitPeriod", {coverage:coverage, issueAge: insured.issueAge});

         var coverageForRateSearch = new RateSearchAttributeReader(coverage, ipo);
         var _sex = coverageForRateSearch.sex();
         var _channel = coverageForRateSearch.channel();
         var _smokingStatus = coverageForRateSearch.smokingStatus();
         var _waitingPeriod = coverageForRateSearch.waitingPeriod();
         var _benefitPeriod = coverageForRateSearch.benefitPeriod();
         var _occupation = coverageForRateSearch.occupation();
         var _noOfPerson = coverageForRateSearch.noOfPerson();
         var _otherOption = coverageForRateSearch.otherOption();
         var _waiverPeriod = 0;
         if (coverage.waiverPeriod) {
            _waiverPeriod = coverage.waiverPeriod;
         }
         var searchVOx = {
            coverageBenefitPeriod : bp,
            channel : _channel,
            issueAge : insured.insuredAge,
            sex : _sex,
            smokingStatus : _smokingStatus,
            band : coverage.banding.Band.text,
            ipo : ipo,
            waitingPeriod : _waitingPeriod,
            benefitPeriod : _benefitPeriod,
            occupation : _occupation,
            noOfPerson : _noOfPerson,
            otherOption : _otherOption,
            waiverPeriod : _waiverPeriod
         };

         var svo = Utils.extend(searchVO, searchVOx);
            //if (coverage.proposal.enableDebug) {
            _DB("handlerType0.svo: ", svo, "PE_ratemanager->");
            //}
         return svo;
      }
   };
};

//policy value rates
var handlerType1 = function(rateType, resourceKey) {
   return {
      rateType: rateType,
      resourceKey: resourceKey,
      createSearchRequest : function( coverage, policyYear, ipo ) {
         var searchVO = new SearchVO( coverage, this.rateType, this.resourceKey, policyYear, ipo );
         var insured = getPrimaryInsured({coverage: coverage});
         var bp = coverage.schema.call("calculateBenefitPeriod", {coverage:coverage, issueAge: insured.issueAge});

         var coverageForRateSearch = new RateSearchAttributeReader(coverage, ipo);
         var _sex = coverageForRateSearch.sex();
         var _channel = coverageForRateSearch.channel();
         var _smokingStatus = coverageForRateSearch.smokingStatus();
         var _waitingPeriod = coverageForRateSearch.waitingPeriod();
         var _benefitPeriod = coverageForRateSearch.benefitPeriod();
         var _occupation = coverageForRateSearch.occupation();
         var _noOfPerson = coverageForRateSearch.noOfPerson();
         var _otherOption = coverageForRateSearch.otherOption();
         var _waiverPeriod = 0;
         if (coverage.waiverPeriod) {
            _waiverPeriod = coverage.waiverPeriod;
         }
         var searchVOx = {
            coverageBenefitPeriod : bp,
            channel : _channel,
            issueAge : insured.insuredAge,
            sex : _sex,
            smokingStatus : _smokingStatus,
            band : coverage.banding.Band.text,
            ipo : ipo,
            waitingPeriod : 0,
            benefitPeriod : 0,
            occupation : 0,
            noOfPerson : 0,
            otherOption : 0,
            waiverPeriod : 0
         };

         var svo = Utils.extend(searchVO, searchVOx);
            //if (coverage.proposal.enableDebug) {
            _DB("handlerType1.svo: ", svo, "PE_ratemanager->");
            //}
         return svo;
      }
   };
};


// modal factor
var handlerType2 = function(rateType, resourceKey) {
   return {
      rateType: rateType,
      resourceKey: resourceKey,
      createSearchRequest: function( coverage, policyYear, ipo ) {
         searchVO = new SearchVO( coverage, this.rateType, this.resourceKey, policyYear, ipo );

         var coverageForRateSearch = new RateSearchAttributeReader(coverage, ipo);
         var _paymentMode = coverageForRateSearch.paymentMode();
         var searchVOx = {
            paymentMode : _paymentMode
         };
         var svo = Utils.extend( searchVO, searchVOx );
            //if (coverage.proposal.enableDebug) {
            _DB("handlerType2.svo: ", svo, "PE_ratemanaer->");
            //}
         return svo;
      }
   };
};

// modal factor
var handlerType3 = function(rateType, resourceKey) {
   return {
      rateType: rateType,
      resourceKey: resourceKey,
      createSearchRequest: function( coverage, policyYear, ipo ) {
         searchVO = new SearchVO( coverage, this.rateType, this.resourceKey, policyYear, ipo );

         var coverageForRateSearch = new RateSearchAttributeReader(coverage, ipo);
         var _paymentMode = coverageForRateSearch.paymentMode();
         var _participate = coverageForRateSearch.participate();
         var searchVOx = {
            paymentMode : _paymentMode,
            participate : _participate
         };
         var svo = Utils.extend( searchVO, searchVOx );
            //if (coverage.proposal.enableDebug) {
            _DB("handlerType3.svo: ", svo, "PE_ratemanaer->");
            //}
         return svo;
      }
   };
};

// refund premium rates
var handlerType4 = function(rateType, resourceKey) {
   return {
      rateType: rateType,
      resourceKey: resourceKey,
      createSearchRequest : function( coverage, policyYear, ipo ) {
         var schema = coverage.schema.implementation;
         var searchVO = new SearchVO( coverage, this.rateType, this.resourceKey, policyYear, ipo );
         var insured = getPrimaryInsured({coverage: coverage});

         var coverageForRateSearch = new RateSearchAttributeReader(coverage, ipo);
         var _sex = coverageForRateSearch.sex();
         var _channel = coverageForRateSearch.channel();
         var _smokingStatus = coverageForRateSearch.smokingStatus();
         var _waitingPeriod = coverageForRateSearch.waitingPeriod();
         var _benefitPeriod = coverageForRateSearch.benefitPeriod();
         var _occupation = coverageForRateSearch.occupation();
         var _noOfPerson = coverageForRateSearch.noOfPerson();
         var _otherOption = coverageForRateSearch.otherOption();

         //var _refundPeriod = schema.ProductSchema.BasicParticular.RefundPeriod.text;
         var _refundPeriod = schema.schema.ProductSchema.BasicParticular.RefundPeriod.text;

         var _otherOption = coverageForRateSearch.otherOption();

         //var _waitingPeriod = 0;
         var _waiverPeriod = 0;
         if (coverage.waiverPeriod) {
            //_waitingPeriod = coverage.waiverPeriod;
             _waiverPeriod = coverage.waiverPeriod;
         }
         var searchVOx = {
            channel : _channel,
            issueAge : insured.insuredAge,
            sex : _sex,
            smokingStatus : _smokingStatus,
            band : coverage.banding.Band.text,
            ipo : ipo,
            waitingPeriod : _waitingPeriod,
            benefitPeriod : _benefitPeriod,
            occupation : _occupation,
            noOfPerson : _noOfPerson,
            otherOption : _otherOption,
            waiverPeriod : _waiverPeriod,
            refundPeriod: _refundPeriod
         };

         var svo = Utils.extend(searchVO, searchVOx);
            //if (coverage.proposal.enableDebug) {
            _DB("handlerType4.svo: ", svo, "PE_ratemanager->");
            //}
         return svo;
      }
   };
};

// commission rates
var handlerType5 = function(rateType, resourceKey) {
   return {
      rateType: rateType,
      resourceKey: resourceKey,
      createSearchRequest : function( coverage, policyYear, ipo ) {
         var searchVO = new SearchVO( coverage, this.rateType, this.resourceKey, policyYear, ipo );
         var insured = getPrimaryInsured({coverage: coverage});

         var coverageForRateSearch = new RateSearchAttributeReader(coverage, ipo);
         var _sex = coverageForRateSearch.sex();
         var _channel = coverageForRateSearch.channel();
         var _smokingStatus = coverageForRateSearch.smokingStatus();
         var _waitingPeriod = coverageForRateSearch.waitingPeriod();
         var _benefitPeriod = coverageForRateSearch.benefitPeriod();
         var _occupation = coverageForRateSearch.occupation();
         var _noOfPerson = coverageForRateSearch.noOfPerson();
         var _otherOption = coverageForRateSearch.otherOption();
         var _waitingPeriod = 0;
         if (coverage.waiverPeriod) {
            _waitingPeriod = coverage.waiverPeriod;
         }
         var _paymentMode = coverageForRateSearch.paymentMode();
         var searchVOx = {
            channel : _channel,
            issueAge : insured.insuredAge,
            sex : _sex,
            smokingStatus : _smokingStatus,
            band : coverage.banding.Band.text,
            ipo : ipo,
            waitingPeriod : _waitingPeriod,
            benefitPeriod : _benefitPeriod,
            occupation : _occupation,
            noOfPerson : _noOfPerson,
            otherOption : _otherOption,
            waiverPeriod : _waitingPeriod,
            paymentMode : _paymentMode
         };

         var svo = Utils.extend(searchVO, searchVOx);
            //if (coverage.proposal.enableDebug) {
            _DB("handlerType5.svo: ", svo, "PE_ratemanager->");
            //}
         return svo;
      }
   };
};

// payor premium rates
var handlerType6 = function(rateType, resourceKey) {
   return {
      rateType: rateType,
      resourceKey: resourceKey,
      createSearchRequest : function( coverage, policyYear, ipo ) {
         var searchVO = new SearchVO( coverage, this.rateType, this.resourceKey, policyYear, ipo );
         var insured = getPrimaryInsured({coverage: coverage});
         var bp = coverage.schema.call("calculateBenefitPeriod", {coverage:coverage, issueAge: insured.issueAge});

         var coverageForRateSearch = new RateSearchAttributeReader(coverage, ipo);
         var _sex = coverageForRateSearch.sex();
         var _channel = coverageForRateSearch.channel();
         var _smokingStatus = coverageForRateSearch.smokingStatus();
         var _waitingPeriod = coverageForRateSearch.waitingPeriod();
         var _benefitPeriod = coverageForRateSearch.benefitPeriod();
         var _occupation = coverageForRateSearch.occupation();
         var _noOfPerson = coverageForRateSearch.noOfPerson();
         var _otherOption = coverageForRateSearch.otherOption();
         var _waiverPeriod = 0;
         if (coverage.waiverPeriod) {
            _waiverPeriod = coverage.waiverPeriod;
         }
         var searchVOx = {
            coverageBenefitPeriod : bp,
            channel : _channel,
            issueAge : insured.insuredAge,
            sex : _sex,
            smokingStatus : _smokingStatus,
            band : coverage.banding.Band.text,
            ipo : ipo,
            waitingPeriod : _waitingPeriod,
            benefitPeriod : _benefitPeriod,
            occupation : _occupation,
            noOfPerson : _noOfPerson,
            otherOption : _otherOption,
            waiverPeriod : _waiverPeriod
         };

         var svo = Utils.extend(searchVO, searchVOx);
            //if (coverage.proposal.enableDebug) {
            _DB("handlerType6.svo: ", svo, "PE_ratemanager->");
            //}
         return svo;
      }
   };
};

var PERateManager = Class.define({

   init: function(args) {
      var handlersList = null;

      if (!Utils.isNothing(args)) {
         handlersList = args["handlers"];
      }

      if (Utils.isNothing(handlersList)) {
         handlersList = this.self.defaultHandlers(args);
      }

      var handlerResourceMap = {};
      var handlerMap = {};
      for(handlerKey in handlersList) {
         var handlerRec = handlersList[handlerKey];
         handlerMap[handlerRec.rateType] = handlerRec;
         handlerResourceMap[handlerRec.resourceKey] = handlerRec;
      }

      this.self.handlers = handlerMap;
      this.self.handlersByResourceKey = handlerResourceMap;
   },

   createHandler: function(args) {
      var handler = args['handler'];
      var rateType = args['rateType'];
      var resource = args['resource'];

      if (handler === 0) {
         return new handlerType0(rateType, resource);
      }
      if (handler === 1) {
         return new handlerType1(rateType, resource);
      }
      if (handler === 2) {
         return new handlerType2(rateType, resource);
      }
      if (handler === 3) {
         return new handlerType3(rateType, resource);
      }
      if (handler === 4) {
         return new handlerType4(rateType, resource);
      }
      if (handler === 5) {
         return new handlerType5(rateType, resource);
      }
      if (handler === 6) {
         return new handlerType6(rateType, resource);
      }
      /* default */
      return new handlerType0(rateType, resource);
   },

   defaultHandlers: function(args) {
       /*
      var coreHandlers = [
         new handlerType1(RateConstants.RATETYPE.BASICPREMIUM, SchemaConstants.PREMIUM_TYPE.BASICPREMIUM),
         new handlerType2(RateConstants.RATETYPE.MODALFACTOR, SchemaConstants.CHARGE_TYPE.MODALFACTOR),
         new handlerType1(RateConstants.RATETYPE.COI, SchemaConstants.PREMIUM_TYPE.COSTOFINSURANCE),
         new handlerType1(RateConstants.RATETYPE.PREMIUM_ALLOCATION, SchemaConstants.PREMIUM_TYPE.ALLOCATION),
         new handlerType1(RateConstants.RATETYPE.TOPUP_PREMIUM_ALLOCATION, SchemaConstants.PREMIUM_TYPE.TOPUP_ALLOCATION),
         new handlerType1(RateConstants.RATETYPE.SURRENDER, SchemaConstants.CHARGE_TYPE.SURRENDER),
         new handlerType1(RateConstants.RATETYPE.COMMISSION, SchemaConstants.CHARGE_TYPE.COMMISSION),
         new handlerType1(RateConstants.RATETYPE.OCCUPATIONFACTOR),
         new handlerType3(RateConstants.RATETYPE.POLICYFEE, SchemaConstants.CHARGE_TYPE.POLICYFEE),
      ];
      */

      /* -- replaced by system configure -- */
      /*
      var coreHandlers = [
         new handlerType0(RateConstants.RATETYPE.BASICPREMIUM, SchemaConstants.PREMIUM_TYPE.BASICPREMIUM),
         new handlerType0(RateConstants.RATETYPE.COI, SchemaConstants.PREMIUM_TYPE.COSTOFINSURANCE),
         new handlerType0(RateConstants.RATETYPE.MINIMUMPREMIUM, SchemaConstants.PREMIUM_TYPE.MINIMUMPREMIUM),
         new handlerType3(RateConstants.RATETYPE.POLICYFEE, SchemaConstants.CHARGE_TYPE.POLICYFEE),
         new handlerType2(RateConstants.RATETYPE.MODALFACTOR, SchemaConstants.CHARGE_TYPE.MODALFACTOR),
         new handlerType1(RateConstants.RATETYPE.OCCUPATIONFACTOR),
         new handlerType1(RateConstants.RATETYPE.CASHVALUE, SchemaConstants.POLICY_VALUE.CASHVALUE),
         new handlerType1(RateConstants.RATETYPE.DIVIDEND, SchemaConstants.POLICY_VALUE.DIVIDEND),
         new handlerType1(RateConstants.RATETYPE.PAIDUPADDITION, SchemaConstants.POLICY_VALUE.PAIDUPADDITION),
         new handlerType1(RateConstants.RATETYPE.NSP, SchemaConstants.POLICY_VALUE.NSP),
         new handlerType1(RateConstants.RATETYPE.COUPON, SchemaConstants.POLICY_VALUE.COUPON),
         new handlerType4(RateConstants.RATETYPE.RETURNPREMIUM, SchemaConstants.POLICY_VALUE.RETURNPREMIUM),
         new handlerType1(RateConstants.RATETYPE.TAXCHARGE),
         new handlerType1(RateConstants.RATETYPE.DUMPIN),

         new handlerType1(RateConstants.RATETYPE.DIVIDENDSCALE),    // SG COMPROP BUT NO USE

         new handlerType1(RateConstants.RATETYPE.PROTECTION, SchemaConstants.POLICY_VALUE.PROTECTION),
         new handlerType1(RateConstants.RATETYPE.LOW_DIVIDEND, SchemaConstants.POLICY_VALUE.LOW_DIVIDEND),
         new handlerType1(RateConstants.RATETYPE.HIGH_DIVIDEND, SchemaConstants.POLICY_VALUE.HIGH_DIVIDEND),
         new handlerType1(RateConstants.RATETYPE.TOTALDISABILITY, SchemaConstants.POLICY_VALUE.TOTALDISABILITY),
         new handlerType1(RateConstants.RATETYPE.SEVEREDISABILITY, SchemaConstants.POLICY_VALUE.SEVEREDISABILITY),
         new handlerType1(RateConstants.RATETYPE.TDO, SchemaConstants.POLICY_VALUE.TDO),
         new handlerType1(RateConstants.RATETYPE.REDUCED_PAID_UP),
         new handlerType1(RateConstants.RATETYPE.ROLLING),
         new handlerType1(RateConstants.RATETYPE.BOS, SchemaConstants.CHARGE_TYPE.BOS),
         new handlerType1(RateConstants.RATETYPE.FUND_GROWTH),
         new handlerType1(RateConstants.RATETYPE.INITIAL_CHARGE, SchemaConstants.CHARGE_TYPE.INITIAL_CHARGE),
         new handlerType1(RateConstants.RATETYPE.SPECIAL_BONUS, SchemaConstants.POLICY_VALUE.SPECIAL_BONUS),
         new handlerType1(RateConstants.RATETYPE.LOYALTY_BONUS, SchemaConstants.POLICY_VALUE.LOYALTY_BONUS),
         new handlerType1(RateConstants.RATETYPE.IRR, SchemaConstants.POLICY_VALUE.IRR),
         new handlerType1(RateConstants.RATETYPE.COMMISSION, SchemaConstants.CHARGE_TYPE.COMMISSION),
         new handlerType1(RateConstants.RATETYPE.EXPENSE_FACTOR, SchemaConstants.CHARGE_TYPE.EXPENSE_FACTOR),
         new handlerType1(RateConstants.RATETYPE.PREMIUM_ALLOCATION, SchemaConstants.PREMIUM_TYPE.ALLOCATION),
         new handlerType1(RateConstants.RATETYPE.SUPPLEMENTARY, SchemaConstants.CHARGE_TYPE.SUPPLEMENTARY),
         new handlerType1(RateConstants.RATETYPE.SURRENDER, SchemaConstants.CHARGE_TYPE.SURRENDER),
         new handlerType1(RateConstants.RATETYPE.MONTHLY_FACTOR),
         new handlerType1(RateConstants.RATETYPE.DPM, SchemaConstants.CHARGE_TYPE.DPM),
         new handlerType1(RateConstants.RATETYPE.DCV, SchemaConstants.CHARGE_TYPE.DCV),
         new handlerType1(RateConstants.RATETYPE.PAYOR_BENEFIT, SchemaConstants.PREMIUM_TYPE.PAYOR_BENEFIT),
         new handlerType1(RateConstants.RATETYPE.CURRENT_FUND),
         new handlerType1(RateConstants.RATETYPE.LOAN),
         new handlerType2(RateConstants.RATETYPE.MODE_FEE, SchemaConstants.CHARGE_TYPE.MODE_FEE),
         new handlerType1(RateConstants.RATETYPE.REVERSIONARY_BONUS, SchemaConstants.POLICY_VALUE.REVERSIONARY_BONUS),
         new handlerType1(RateConstants.RATETYPE.DISCOUNT_FACTOR, SchemaConstants.POLICY_VALUE.DISCOUNT_FACTOR),
         new handlerType1(RateConstants.RATETYPE.MATURITY_BONUS, SchemaConstants.POLICY_VALUE.MATURITY_BONUS),
         new handlerType1(RateConstants.RATETYPE.TERMINAL_BONUS_DEATH, SchemaConstants.POLICY_VALUE.TERMINAL_BONUS_DEATH),
         new handlerType1(RateConstants.RATETYPE.TERMINAL_BONUS_SURRENDER, SchemaConstants.POLICY_VALUE.TERMINAL_BONUS_SURRENDER),
         new handlerType1(RateConstants.RATETYPE.AX_FACTOR, SchemaConstants.POLICY_VALUE.AX_FACTOR),
         new handlerType5(RateConstants.RATETYPE.MODAL_COMMISSION, SchemaConstants.CHARGE_TYPE.MODAL_COMMISSION),
         new handlerType1(RateConstants.RATETYPE.PROJECTED_IRR),
         new handlerType1(RateConstants.RATETYPE.HIGH_IRR),
         new handlerType1(RateConstants.RATETYPE.LOW_IRR),
         new handlerType1(RateConstants.RATETYPE.AUTOMATIC_PREMIUM_LOAN),
         new handlerType1(RateConstants.RATETYPE.REVERSIONARY_INTEREST),
         new handlerType1(RateConstants.RATETYPE.GUARANTEED_MINIMUM_DB, SchemaConstants.POLICY_VALUE.GUARANTEED_MINIMUM_DB),
         new handlerType1(RateConstants.RATETYPE.GUARANTEED_SURRENDER_VALUE, SchemaConstants.POLICY_VALUE.GUARANTEED_SURRENDER_VALUE),
         new handlerType1(RateConstants.RATETYPE.TRAILER_FEE),
         new handlerType1(RateConstants.RATETYPE.REVERSIONARY_BONUS_CV, SchemaConstants.POLICY_VALUE.REVERSIONARY_BONUS_CV),
         new handlerType1(RateConstants.RATETYPE.TOPUP_PREMIUM_ALLOCATION, SchemaConstants.PREMIUM_TYPE.TOPUP_ALLOCATION),
         new handlerType1(RateConstants.RATETYPE.LOW_REVERSIONARY_BONUS, SchemaConstants.POLICY_VALUE.LOW_REVERSIONARY_BONUS),
         new handlerType1(RateConstants.RATETYPE.PRODUCTION_CREDIT),
         new handlerType1(RateConstants.RATETYPE.DEPOSIT_INTEREST),
         new handlerType1(RateConstants.RATETYPE.LOW_DEPOSIT_INTEREST),
         new handlerType1(RateConstants.RATETYPE.LOW_TERMINAL_BONUS_SURRENDER, SchemaConstants.POLICY_VALUE.LOW_TERMINAL_BONUS_SURRENDER),
         new handlerType1(RateConstants.RATETYPE.ADMINISTRATION_FEE),

         new handlerType1(RateConstants.RATETYPE.LOW_COUPON),                           // PH
         new handlerType1(RateConstants.RATETYPE.ADMINISTRATION_FEE_REFUND),            // SG

         new handlerType1(RateConstants.RATETYPE.COI_LOADING),
         new handlerType1(RateConstants.RATETYPE.ADVANCE_TOPUP_BONUS),

         new handlerType1(RateConstants.RATETYPE.EXTENDED_TERM),                        // SG
         new handlerType1(RateConstants.RATETYPE.EXTENDED_TERM_ENDOWMENT),              // SG

         new handlerType5(RateConstants.RATETYPE.TOPUP_COMMISSION, SchemaConstants.CHARGE_TYPE.TOPUP_COMMISSION),

         new handlerType1(RateConstants.RATETYPE.RETURNTAXCHARGE),                      // PH
         new handlerType1(RateConstants.RATETYPE.MEDICAL_RESERVE),                      // SG

         new handlerType1(RateConstants.RATETYPE.RETIRE_MEDICAL_RESERVE),               // SG
         new handlerType1(RateConstants.RATETYPE.PROTECTION_AX_FACTOR),                 // SG

         new handlerType1(RateConstants.RATETYPE.LOW_REVERSIONARY_INTEREST),

         new handlerType1(RateConstants.RATETYPE.LOW_COUPON, SchemaConstants.POLICY_VALUE.LOW_COUPON),                                                                                       // SG
         new handlerType1(RateConstants.RATETYPE.CORRIDOR_FACTOR),                                                                                  // SG
         new handlerType1(RateConstants.RATETYPE.TCP_ADJUSTMENT_FACTOR, SchemaConstants.PREMIUM_TYPE.TCP_ADJUSTMENT_FACTOR),                        // SG
         new handlerType1(RateConstants.RATETYPE.TCP_THRESHOLD_FACTOR, SchemaConstants.PREMIUM_TYPE.TCP_THRESHOLD_FACTOR),                          // SG
         new handlerType1(RateConstants.RATETYPE.DBP_INTEREST),                                                                                     // SG
         new handlerType1(RateConstants.RATETYPE.LOAN_SPREAD, SchemaConstants.CHARGE_TYPE.LOAN_SPREAD),                                             // SG
         new handlerType1(RateConstants.RATETYPE.EXCESS_PREMIUM_CHARGE, SchemaConstants.PREMIUM_TYPE.EXCESS_PREMIUM_CHARGE),                        // SG

         new handlerType1(RateConstants.RATETYPE.GUARANTEED_TUITION_FUND, SchemaConstants.POLICY_VALUE.GUARANTEED_TUITION_FUND),                    // PH
         new handlerType1(RateConstants.RATETYPE.TCP_COI, SchemaConstants.PREMIUM_TYPE.TCP_COI),                                                    // SG

         new handlerType1(RateConstants.RATETYPE.GUARANTEED_EDUCATION_ALLOWANCE, SchemaConstants.POLICY_VALUE.GUARANTEED_EDUCATION_ALLOWANCE),      // PH
         new handlerType1(RateConstants.RATETYPE.GUARANTEED_COI, SchemaConstants.PREMIUM_TYPE.GUARANTEED_COI),                                      // SG

         new handlerType1(RateConstants.RATETYPE.GUARANTEED_GRADUATION_GIFT, SchemaConstants.POLICY_VALUE.GUARANTEED_GRADUATION_GIFT),              // PH
         new handlerType1(RateConstants.RATETYPE.LOAN_INTEREST),                                                                                    // SG

         new handlerType0(RateConstants.RATETYPE.MIN_PLANNED_PREMIUM, SchemaConstants.PREMIUM_TYPE.MIN_PLANNED_PREMUM),                             // PH
         new handlerType1(RateConstants.RATETYPE.CONTRACT_DEBT_INTEREST),                                                                           // SG

         new handlerType1(RateConstants.RATETYPE.MANAGEMENT_FEE, SchemaConstants.CHARGE_TYPE.MANAGEMENT_FEE),                                       // PH
         new handlerType1(RateConstants.RATETYPE.TCP_INTEREST),                                                                                     // SG

         new handlerType0(RateConstants.RATETYPE.INITIAL_PREMIUM_CHARGE, SchemaConstants.CHARGE_TYPE.INITIAL_PREMIUM_CHARGE),                       // PH
         new handlerType1(RateConstants.RATETYPE.LOW_TERMINAL_BONUS_DEATH, SchemaConstants.POLICY_VALUE.LOW_TERMINAL_BONUS_DEATH),                                                                         // SG

         new handlerType5(RateConstants.RATETYPE.MODAL_IRR, SchemaConstants.POLICY_VALUE.MODAL_IRR),                                                // PH
         new handlerType1(RateConstants.RATETYPE.HIGH_TERMINAL_BONUS_DEATH, SchemaConstants.POLICY_VALUE.HIGH_TERMINAL_BONUS_DEATH),                                                                        // SG

         new handlerType2(RateConstants.RATETYPE.TOPUP_MODE_FEE),                                                                                   // PH
         new handlerType1(RateConstants.RATETYPE.HIGH_TERMINAL_BONUS_SURRENDER, SchemaConstants.POLICY_VALUE.HIGH_TERMINAL_BONUS_SURRENDER),                                                                    // SG

         new handlerType1(RateConstants.RATETYPE.PREMIUM_HOLIDAY_CHARGE, SchemaConstants.CHARGE_TYPE.PREMIUM_HOLIDAY_CHARGE),                       // PH
         new handlerType1(RateConstants.RATETYPE.LOW_MATURITY_BONUS, SchemaConstants.POLICY_VALUE.LOW_MATURITY_BONUS),                              // SG

         new handlerType1(RateConstants.RATETYPE.FIRST_YEAR_SPREAD_COMMISSION, SchemaConstants.CHARGE_TYPE.FIRST_YEAR_SPREAD_COMMISSION),           // SG
         new handlerType1(RateConstants.RATETYPE.DBP_PREMIUM_LOADING, SchemaConstants.PREMIUM_TYPE.DBP_PREMIUM_LOADING),                            // SG
         new handlerType1(RateConstants.RATETYPE.GSV_CASHVALUE),                                                                                    // SG
         new handlerType1(RateConstants.RATETYPE.ADJUSTMENT_FACTOR, SchemaConstants.PREMIUM_TYPE.ADJUSTMENT_FACTOR),                                // SG
         new handlerType1(RateConstants.RATETYPE.NLG_INTEREST),                                                                                     // SG
         new handlerType1(RateConstants.RATETYPE.NATIONALITY_CLASS_LOADING),                                                                        // SG
         new handlerType1(RateConstants.RATETYPE.RESIDENCY_CLASS_LOADING),                                                                          // SG
         new handlerType1(RateConstants.RATETYPE.ADDITIONAL_INCOME, SchemaConstants.POLICY_VALUE.ADDITIONAL_INCOME),                                // SG
         new handlerType1(RateConstants.RATETYPE.ADDITIONAL_INCOME_CV, SchemaConstants.POLICY_VALUE.ADDITIONAL_INCOME_CV),                          // SG
         new handlerType1(RateConstants.RATETYPE.MAX_PREM_TEST_FACTOR),                                                                             // SG
         new handlerType1(RateConstants.RATETYPE.WELCOME_BONUS, SchemaConstants.POLICY_VALUE.WELCOME_BONUS),                                        // SG
         new handlerType1(RateConstants.RATETYPE.OTHER_MANAGEMENT_FEE, SchemaConstants.CHARGE_TYPE.OTHER_MANAGEMENT_FEE),                           // SG
         new handlerType1(RateConstants.RATETYPE.FA_COMMISSION, SchemaConstants.CHARGE_TYPE.FA_COMMISSION),                                         // SG
         new handlerType1(RateConstants.RATETYPE.MONTHLY_COUPON, SchemaConstants.POLICY_VALUE.MONTHLY_COUPON),                                                                                   // SG
         new handlerType1(RateConstants.RATETYPE.MONTHLY_DIVIDEND, SchemaConstants.POLICY_VALUE.MONTHLY_DIVIDEND),                                                                                // SG
         new handlerType1(RateConstants.RATETYPE.PREMIUM_POLICYFEE, SchemaConstants.PREMIUM_TYPE.PREMIUM_POLICYFEE),                                // SG
         new handlerType1(RateConstants.RATETYPE.LOW_FUND_GROWTH_ADJUSTMENT),                                                                       // SG
         new handlerType1(RateConstants.RATETYPE.HIGH_FUND_GROWTH_ADJUSTMENT),                                                                      // SG
         new handlerType1(RateConstants.RATETYPE.RETURN_OF_SURRENDER_VALUE, SchemaConstants.POLICY_VALUE.RETURN_OF_SURRENDER_VALUE),                // SG
         new handlerType1(RateConstants.RATETYPE.EXTRA_PREMIUM, SchemaConstants.PREMIUM_TYPE.EXTRA_PREMIUM)                                         // SG
      ];
      */
      var coreHandlers = [];
      for(var hi in defaultSystemModules.handlers) {
         var handlerInfo = defaultSystemModules.handlers[hi];
         var handler = this.self.createHandler(handlerInfo);
         coreHandlers.push(handler);
      }
      return coreHandlers;
   },

   lookupHandler: function( rateType ) {
      //return this.handlers.get( rateType );
      return this.self.handlers[rateType];
   },

   lookupHandlerByResourceKey: function( resourceKey ) {
      //return this.handlers.get( rateType );
      return this.self.handlersByResourceKey[resourceKey];
   },

   lookupRates: function( args ) {
      var coverage = args["coverage"];
      var rateType = args["rateType"];
      var resourceKey = args["resourceKey"];
      var ipo = args["ipo"];
      var rateId = args['rateId'];

      var handler;
      if (!Utils.isNothing(rateType)) {
         handler = this.self.lookupHandler( rateType );
      }
      if (Utils.isNothing(handler)) {
         if (!Utils.isNothing(resourceKey)) {
            handler = this.self.lookupHandlerByResourceKey( resourceKey );
         }
      }
       //console.log("handler = " + JSON.stringify( handler));
      if (handler) {
         var svo = handler.createSearchRequest( coverage, 0, ipo );
         if (rateId) {
            svo.rateId = rateId;
         }
         //console.log("svo[" + handler.resourceKey + "] = " + JSON.stringify(svo));

         var schema = coverage.schema.call("getSchema", null);
         var _rates = PEservice.readRates( schema.ProductSchema.ProductSchemaPK, svo );
         if ( Utils.compareBits(_rates.header.options, RateConstants.RATE_OPTION.READ_BY_ATTAINAGE ) ) {
            _DB("", "INFO: (1) It is ATTAINAGE rates.", "");
            if ( !Utils.compareBits(_rates.header.options, RateConstants.RATE_OPTION.YRT) ) {
               _DB("", "INFO: (2) It is NOT YRT rates.", "");
               if ( !Utils.isNothing( svo.coverageBenefitPeriod ) ) {
                  _DB("", "INFO: (3) coverageBenefitPeriod is found.", "");
                  if ( _rates.rates.length == 1 ) {
                     _DB("", "INFO: (3) only 1 rate is returned in first call.", "");
                     var debug = coverage.proposal.enableDebug;

                     coverage.proposal.enableDebug = false;
                     var svo2 = Utils.extend({}, svo);
                     for(var attainAgeInc=1; attainAgeInc<svo.coverageBenefitPeriod; attainAgeInc++) {
                        svo2.attainAge = svo2.issueAge + attainAgeInc;
                        var _rates2 = PEservice.readRates( schema.ProductSchema.ProductSchemaPK, svo2 );
                        for(var rateIdx in _rates2.rates) {
                           _rates.rates.push(_rates2.rates[rateIdx]);
                        }
                     }
                     coverage.proposal.enableDebug = debug;
                  }
               }
            }
         }
         var _xrates = Utils.extend(_rates, ratesMethods);
         return _xrates;
      } else {
         if (rateType) {
            throw "rate handler (" + rateType + ") cannot be find.";
         }
         if (resourceKey) {
            throw "rate handler (" + resourceKey + ") cannot be find.";
         }
      }
   },

   lookupRate: function( args ) {
      var coverage = args["coverage"];
      var rateType = args["rateType"];
      var resourceKey = args["resourceKey"];
      var policyYear = args["policyYear"];
      var ipo = args["ipo"];
      var rateId = args['rateId'];

      //var handler = this.self.lookupHandler( rateType );
      var handler;
      if (!Utils.isNothing(rateType)) {
         handler = this.self.lookupHandler( rateType );
      }
      if (Utils.isNothing(handler)) {
         if (!Utils.isNothing(resourceKey)) {
            handler = this.self.lookupHandlerByResourceKey( resourceKey );
         }
      }
      if (handler) {
         var svo = handler.createSearchRequest( coverage, policyYear, ipo );
         if (rateId) {
            svo.rateId = rateId;
         }

         var schema = coverage.schema.call("getSchema", null);
         var _rate = PEservice.readRate( schema.ProductSchema.ProductSchemaPK, svo );
         return _rate;
      } else {
         if (rateType) {
            throw "rate handler (" + rateType + ") cannot be find.";
         }
         if (resourceKey) {
            throw "rate handler (" + resourceKey + ") cannot be find.";
         }
      }
   }

});
// abstract factory
var PEservice = {
   dataSource: "IosService",
   serviceImpl: function() {
      return peServiceLocator.locateService();
   },
   loadCatalog: function(productCode) {
      return this.serviceImpl().call("loadCatalog", productCode, null);
   },
   loadSchema: function(productId, schemaInfo) {
      return this.serviceImpl().call("loadSchema", productId, schemaInfo, null);
   },
   listBaseProducts: function(planCodes, language, effectiveDate, location) {
      return this.serviceImpl().call("listBaseProducts", {planCodes: planCodes, language: language, effectiveDate: effectiveDate, location: location});
   },
   listRiders: function(planCodes, language, effectiveDate, location) {
      return this.serviceImpl().call("listRiders", {planCodes: planCodes, language: language, effectiveDate: effectiveDate, location: location});
   },
   readRates: function(schemaPk, searchRequest) {
      return this.serviceImpl().call("readRates", schemaPk, searchRequest, null);
   },
   readRate: function(schemaPk, searchRequest) {
      return this.serviceImpl().call("readRate", schemaPk, searchRequest, null);
   }
};

//var dataSource = "IOS";
var peServiceLocator = ServiceLocatorPattern.define(IPEService,
   function() {
      return PEservice.dataSource;
   }
);

peServiceLocator.register("StubService", PEServiceStubImpl.create(null));
peServiceLocator.register("IosService", PEServiceIOSImpl.create(null));
peServiceLocator.register("WebService", PEServiceWEBImpl.create(null));
// core prototype extension
var CatalogManagerImpl = Class.define({

   init: function(args) {
      this.self.cache = [];
   },

   lookup: function(args) {
      var productCode = args["productCode"];

      for (key in this.self.self.cache) {
         var cacheRecord = this.self.self.cache[key];
         if (cacheRecord.productCode == productCode) {
            return cacheRecord.manager;
         }
      }
      return this.self.load({productCode: productCode});

   },

   load: function(args) {
      var productCode = args["productCode"];

      var _catalog = PEservice.loadCatalog(productCode);
      var _instance = this.self.prepareInstance({catalog: _catalog});

      this.self.cache.push({
         productCode: productCode,
         manager: _instance
      });
      return _instance;

   },

   prepareInstance: function(args) {
      var catalog = args["catalog"];
      var cf = Repository.getManager(SystemComponents.MANAGER.CATALOG_FACTORY);
      return cf.create({catalogDefintion: catalog});
   }

});
var SchemaManagerImpl = Class.define( {

   init: function(args) {
      this.self.cache = [];
   },

   lookup: function(args) {
      var coverage = args["coverage"];

      var catalog = this.self.getCatalog({productCode: coverage.product.productKey.primaryProduct.productPK.productId});
      var schemaInfo = catalog.call("lookupSchema", {coverage: coverage});
      var schema;
      _DB("schemaInfo", schemaInfo, "SchemaManagerImpl->");
      if (!Utils.isNothing(schemaInfo)) {
         _DB("try locate cache", "", "SchemaManagerImpl->");
         schema = this.self.lookupCache({coverage: coverage.product.productKey.primaryProduct.productPK.productId, schemaId: schemaInfo.schemaId.text});
         if (Utils.isNothing(schema)) {
            _DB("load scheme from backend server", "", "SchemaManagerImpl->");
            schema = this.self.loadIntoCache({coverage: coverage, schemaInfo: schemaInfo});
         }
      } else {
         _DB("set schema information to default empty object", "", "SchemaManagerImpl->");
         schema = this.self.prepareInstance({schema:schema});
      }
      return schema;
   },

   load: function(args) {
      var coverage = args["coverage"];

      var catalog = this.self.getCatalog(coverage.product.productKey.primaryProduct.productPK.productId);
      var schemaInfo = catalog.call("lookupSchema", {coverage: coverage});
      return this.self.loadIntoCache({coverage: coverage, schemaInfo: schemaInfo});
   },

   lookupCache: function(args) {
      var productCode = args["productCode"];
      var schemaId = args["schemaId"];

      for (key in this.self.cache) {
         var cacheRecord = this.self.cache[key];
         if (cacheRecord.productCode == productCode && cacheRecord.schemaId == schemaId) {
            return cacheRecord.manager;
         }
      }
      return null;

   },

   getCatalog: function(args) {
      var productCode = args["productCode"];

      var cm = Repository.getManager(SystemComponents.MANAGER.CATALOG_HELPER);
      var catalogManager = cm.call("lookup", {
         productCode: productCode
      });
      if (!(catalogManager)) {
         cm.call("load", {productCode: productCode});
         catalogManager = cm.call("lookup", {
            productCode: productCode
         });
      }
      return catalogManager;
   },

   loadIntoCache: function(args) {
      var coverage = args["coverage"];
      var schemaInfo = args["schemaInfo"];

      var schema = PEservice.loadSchema(coverage.product.productKey.primaryProduct.productPK.productId, schemaInfo);
      var schemaManager = this.self.prepareInstance({schema: schema});
      this.self.cache.push({
         productCode: coverage.product.productKey.primaryProduct.productPK.productId,
         schemaId: schemaInfo.schemaId.text,
         manager: schemaManager
      });
      return schemaManager;
   },

   prepareInstance: function(args) {
      var schema = args["schema"];
      var sf = Repository.getManager(SystemComponents.MANAGER.SCHEMA_FACTORY);
      return sf.create({schemaDefinition: schema});
   }

} );
var MessageManagerImpl = Class.define( {

   init: function(args) {
      this.self.messages = [];
      var messages = args["messages"];
      if (messages != undefined && messages != null) {
         this.self.messages.push(messages);
      }
   },

   getMessage: function(args) {
      var error = args["error"];
      var language = args["language"];

      if (this.self.messages.length > 0) {
         var msg = this.self.messages[0][error.code];
         if (msg) {
            var warning = false;
            if (!Utils.isNothing(msg['warning'])) {
                warning = msg['warning'];
            }
            var localMessage = msg[language];
            if (!localMessage) localMessage = msg["en"];
            if (!localMessage) localMessage = "Error " + code + " occured!!";
            userMessage = localMessage.replace(/%\w+%/g, function(all) {
               return error.arguments[all] || all;
            });
            return {
               parameters: error.arguments,
               error: error.code,
               code: msg.uiCode,
               warning: warning,
               message: userMessage
            };
         } else {
            console.log("ERROR: error code (" + error.code + ") cannot be found in messages!");
            return {
               parameters: error.arguments,
               error: error.code,
               code: null,
               warning: false,
               message: "Error " + error.code + " occured but no such error is defined in system."
            };
         }
      } else {
         console.log("ERROR: no error message is loaded into engine.");
         return null;
      }
   }

} );
var FunctionManagerImpl = Class.define({

    init: function(args) {
       console.log("");
       console.log("++++ FunctionManagerImpl initialization -- begin.");
       this.self['context'] = {};
       this.self.context['functionTables'] = {};

       var functions = args['functions'];
       for(var functionIdx in functions) {
           this.self.addFunction( {"function": functions[functionIdx] } );
       }
       console.log("++++ FunctionManagerImpl initialization -- completed.");
       console.log("");
    },

    addFunction: function(args) {
       var funcObj = args['function']
       var funcName = IFunction.appliedTo(funcObj).call('functionName', {});
       if (Utils.isNothing(funcName)) {
          throw "Error: The name of function is not defined.";
       }
       this.self.context.functionTables[funcName] = funcObj;
       _D("Custom function loaded", funcName, "FunctionManagerImpl->");
    },

    listFunctions: function(args) {
       var list = [];
       for(var funcName in this.self.context.functionTables) {
          list.push(funcName);
       }
       return list;
    },

    execute: function(args) {
       var funcName = args['function'];
       var funcObj = this.self.context.functionTables[funcName];
       if (Utils.isNothing(funcObj)) {
          return { errors: "Error: The function (" + funcName + ") cannot be found." };
       }
       //var funcObjName = IFunction.appliedTo(funcObj).call('functionName');
       //_D('function name', funcObjName, 'FunctionManagerImpl->')
       //if (funcObjName == 'RateHandlerENX') _SS(funcObj, 10)
       var parameters = args.args;
       if (Utils.isNothing(parameters)) parameters = {};
       //try {
       //_D('function name', funcName + ' START', 'FunctionManagerImpl->')
       var result = IFunction.appliedTo(funcObj).call("execute", parameters);
       //_D('function name', funcName + ' STOP', 'FunctionManagerImpl->')
       return result;
       //} catch ( e ) {
       //   _D('ERROR(execute)', e, '**** FunctionManagerImpl.' + funcName + '->')
       //   return { errors: "Error: " + e };
       //}
    }

});
// EventsManager
// - determine which event list is for proposal
// - return the event list instance
var EventsManagerImpl = Class.define({
   eventProviders: [],
   init: function(args) {
      this.self.eventProviders.push(UVLife_Events.create());
   },
   locateProviders: function(args) {
      var proposal = args['proposal'];
      var basePlan = proposal.coverageInfo;

      var events = null;
      var provider = null;
      // try matchProductId
      for (var ep in this.self.eventProviders) {
         var eventProviderInstance = this.self.eventProviders[ep];
         var eventProvider = IEventsProvider.appliedTo(eventProviderInstance);
         var productId = basePlan.product.productKey.primaryProduct.productPK.productId;
         var catalog = basePlan.catalog;

         var providerName = eventProvider.call("providerName", args);
         console.log('matching ProductId - eventProvider: ' + providerName);
         var isMatch = eventProvider.call("matchProductId", {productId:productId, catalog:catalog});
         if (isMatch) {
            provider = eventProviderInstance;
            break;
         }
      }
      // try matchProviderId
      if (Utils.isNothing(provider)) {
         for (var ep in this.self.eventProviders) {
            var eventProviderInstance = this.self.eventProviders[ep];
            var eventProvider = IEventsProvider.appliedTo(eventProviderInstance);
            var productId = basePlan.product.productKey.primaryProduct.productPK.productId;
            var catalog = basePlan.catalog;

            var providerName = eventProvider.call("providerName", args);
            console.log('matching ProviderId - eventProvider: ' + providerName);
            var isMatch = eventProvider.call("matchProviderId", {productId:productId, catalog:catalog});
            if (isMatch) {
               provider = eventProviderInstance;
               break;
            }
         }
      }
      // try matchProductType
      if (Utils.isNothing(provider)) {
         var providerMatches = 0;
         for (var ep in this.self.eventProviders) {
            var eventProviderInstance = this.self.eventProviders[ep];
            var eventProvider = IEventsProvider.appliedTo(eventProviderInstance);
            var productId = basePlan.product.productKey.primaryProduct.productPK.productId;
            var catalog = basePlan.catalog;

            var providerName = eventProvider.call("providerName", args);
            console.log('matching ProductTypes - eventProvider: ' + providerName);
            var matches = eventProvider.call("matchProductType", {productId:productId, catalog:catalog});
            if (matches > 0 && matches > providerMatches) {
               providerMatches = matches;
               provider = eventProviderInstance;
            }
            console.log('matching ProductTypes - eventProvider (' + providerName + ') results: ' + matches);
         }
      }
      if (Utils.isNothing(provider)) {
         throw "Event provider cannot be located."
      }
      var providerName = IEventsProvider.appliedTo(provider).call("providerName", args);
      console.log("EventManagerImpl locateProviders: " + providerName);
      return provider;
   },
   //iterationUnit: function(args) {
   //   var proposal = args['proposal'];
   //   var basePlan = proposal.coverageInfo;
   //   if (basePlan.catalog.call("isUVL", {})) {
   //      return Number(1);
   //   } else {
   //      return Number(12);
   //   }
   //},
   //calculateIterationPeriod: function(args) {
   //   var benefitPeriod = args['benefitPeriod'];
   //   var iterationUnit = args['iterationUnit'];
   //   var iterations = _R(benefitPeriod * iterationUnit, 0);
   //   return iterations;
   //},
   addEventProvider: function(args) {
      var provider = args["provider"];
      if (provider) {
         this.self.eventProviders.push(provider);
      }
   },
   showEventProviders: function(args) {
      _D("", '[ Event Providers ]', "");
      for(ei in this.self.eventProviders) {
         var eg = this.self.eventProviders[ei];
         var egName = IEventsProvider.appliedTo(eg).call('providerName', {});
         _D("", 'event provider: ' + egName, "");
      }
   },
   events: function(args) {
      var proposal = args['proposal'];
      var basePlan = proposal.coverageInfo;

      var provider = this.self.locateProviders(args);
      var benefitPeriod = basePlan.schema.call("calculateBenefitPeriod", {
         coverage: basePlan
      });
      var ppp = basePlan.schema.call("calculatePremiumPayingPeriod", {
         coverage: basePlan
      });
      //var iterationUnit = this.self.iterationUnit({
      //   proposal: proposal
      //});
      //var iterations = this.self.calculateIterationPeriod({
      //   benefitPeriod: benefitPeriod,
      //   iterationUnit: 12
      //});

      var eventItems = IEventsProvider.appliedTo(provider).call("events", args);
      var columnItems = IEventsProvider.appliedTo(provider).call("columns", args);
      var iterations = IEventsProvider.appliedTo(provider).call("iterations", args);
      var iterationUnit = IEventsProvider.appliedTo(provider).call("iterationUnit", args);

      return {
         provider: provider,
         items: eventItems,
         columnItems: columnItems,
         metadata: {
            iterations: iterations,
            iterationUnit: iterationUnit,
            benefitPeriod: benefitPeriod,
            premiumPayingPeriod: ppp
         }
      };
   }
});
// Data key driven calculations
// mainly design for different return types
var DataDrivenCalculatorImpl = Class.define({
   init: function(args) {
      this.self.context = {};
      this.self.context.drivenKeys = args["drivenKeys"];
      this.self.context.drivenDatas = args["drivenDatas"];
      this.self.result = {};
   },
   data: function(args) {
      var key = args["drivenKey"];
      return this.self.context.drivenDatas[key];
   },
   calculate: function(args) {
      var calculateBlock = args["calculateBlock"];

      var dataSeries = Utils.iterator(this.self.context.drivenDatas);
      //console.log(dataSeries);

      for (idx in this.self.context.drivenKeys) {
         var drivenKey = this.self.context.drivenKeys[idx];

         var dataList = [];
         for (var seriesIdx in dataSeries) {
            var data = dataSeries[seriesIdx];
            dataList.push(data[drivenKey]);
         }

         //console.log(dataList);
         if (dataList.length == 1) {
            this.self.result[drivenKey] = calculateBlock(dataList[0]);
         } else {
            this.self.result[drivenKey] = calculateBlock(dataList);
         }
      }
      return this.self.result;
   },
   result: function(args) {
      return this.self.result;
   }
});

// fund proposal
var FundImpl = Class.define({
   init: function(args) {
      if (Utils.isNothing(this.self.context)) {
         this.self.context = {};
      }

      var context = args["context"];
      var metadata = context.events.metadata;
      var proposal = context.proposal;
      var basePlan = proposal.coverageInfo;
      var productId = basePlan.product.productKey.primaryProduct.productPK.productId;
      var precision = context.precision;
      if (!precision) {
          precision = 15;
      }

      this.self.context['iteratorContext'] = context;

      this.self.context.noOfRolloingPerYear = metadata.iterationUnit;
      this.self.context.noOfInterestRolling = 0;
      this.self.context.surrenderValueRates = context.rates[productId][SchemaConstants.CHARGE_TYPE.SURRENDER];
      this.self.context.precision = precision;

      //console.log("args = " + JSON.stringify(args));
      var fundConfig = args['fundConfig'];
      var fundId = fundConfig["fundId"];
      this.self.context["fundId"] = fundId;
      //console.log("fundId = " + fundId);
      this.self.context['fund'] = {};
      this.self.context['interestRate'] = {};
      this.self.context['annualInterestRate'] = {};
      for (var returnTypeKey in PublicConstants.FUND_RETURN) {
         var returnType = PublicConstants.FUND_RETURN[returnTypeKey];
         this.self.context.interestRate[returnType] = fundConfig[returnType];
         this.self.context.annualInterestRate[returnType] = fundConfig['annualInterestRate'][returnType];
         this.self.context.fund[returnType] = Number(0);
      }
      this.self.context['payoutRatio'] = fundConfig['payoutRatio'];
      //this.self.context['policyOptions'] = fundConfig['policyOptions'];
      this.self.context['surrenderRate'] = fundConfig['surrenderRate'];
      this.self.context['isSurrenderChargeApplicable'] = fundConfig['isSurrenderChargeApplicable'];

      //console.log(JSON.stringify(this.self.context.fund));
      //if (this.self.context.proposal.enableDebug) {
      console.log("--------------------------------------------------");
      _DB("fundId", this.self.context.fundId, "FundImpl->");
      _DB("interestRate", this.self.context.interestRate, "FundImpl->");
      _DB("annualInterestRate", this.self.context.annualInterestRate, "FundImpl->");
      _DB("payoutRatio", this.self.context.payoutRatio, "FundImpl->");
      _DB("precision", this.self.context.precision, "FundImpl->");
      //_DB("policyOptions", this.self.context.policyOptions, "FundImpl->");
      _DB("surrenderRate", this.self.context.surrenderValueRates, "FundImpl->");
      _DB("isSurrenderChargeApplicable", this.self.context.isSurrenderChargeApplicable, "FundImpl->");
      console.log("--------------------------------------------------");
      //}
   },
   dumpin: function(args) {
      var amount = args['amount'];
      for (var returnTypeKey in PublicConstants.FUND_RETURN) {
         var returnType = PublicConstants.FUND_RETURN[returnTypeKey];
         var currentBalance = Number(this.self.context.fund[returnType]);
         this.self.context.fund[returnType] = currentBalance + Number(amount);
         _DBR("fundBalance(" + returnType +  ") = currentBalance(" + currentBalance + ") + dumpin(" + amount + ")", this.self.context.fund[returnType], "FundImpl->" ,this.self.context.iteratorContext.runningPolicyValues.months);
      }
   },
   withdraw: function(args) {
      var amount = args['amount'];
      for (var returnTypeKey in PublicConstants.FUND_RETURN) {
         var returnType = PublicConstants.FUND_RETURN[returnTypeKey];
         var currentBalance = Number(this.self.context.fund[returnType]);
         this.self.context.fund[returnType] = currentBalance - Number(amount);
         _DBR("fundBalance(" + returnType +  ") = currentBalance(" + currentBalance + ") - withdraw(" + amount + ")", this.self.context.fund[returnType], "FundImpl->" ,this.self.context.iteratorContext.runningPolicyValues.months);
      }
   },
   withdraws: function(args) {
      var amounts = args['amounts'];
      for (var returnTypeKey in PublicConstants.FUND_RETURN) {
         var returnType = PublicConstants.FUND_RETURN[returnTypeKey];
         if (!Utils.isNothing(amounts[returnType])) {
            var currentBalance = Number(this.self.context.fund[returnType]);
            this.self.context.fund[returnType] = currentBalance - Number(amounts[returnType]);
            _DBR("fundBalance(" + returnType +  ") = currentBalance(" + currentBalance + ") - withdraw(" + Number(amounts[returnType]) + ")", this.self.context.fund[returnType], "FundImpl->" ,this.self.context.iteratorContext.runningPolicyValues.months);
         }
      }
   },
   dumpins: function(args) {
      var amounts = args['amounts'];
      for (var returnTypeKey in PublicConstants.FUND_RETURN) {
         var returnType = PublicConstants.FUND_RETURN[returnTypeKey];
         if (!Utils.isNothing(amounts[returnType])) {
            var currentBalance = Number(this.self.context.fund[returnType]);
            this.self.context.fund[returnType] = currentBalance + Number(amounts[returnType]);
            _DBR("fundBalance(" + returnType +  ") = currentBalance(" + currentBalance + ") + dumpin(" + Number(amounts[returnType]) + ")", this.self.context.fund[returnType], "FundImpl->" ,this.self.context.iteratorContext.runningPolicyValues.months);
         }
      }
   },
   payout: function(args) {
      var payoutCash = {};
      var payRate = {};
      if (!Utils.isNothing(this.self.context['payoutRatio'])) {
         for (var returnTypeKey in PublicConstants.FUND_RETURN) {
            var returnType = PublicConstants.FUND_RETURN[returnTypeKey];
            var payRate = Math.min(Number(this.self.context.payoutRatio), _R(Number(this.self.context.annualInterestRate[returnType]) / Number(12), 15));
            if (Number(payRate) > 0) {
               //var effectiveInterestRate = Number(Number(this.self.context.interestRate[returnType]) - (Number(payRate) / Number(100))).toFixed(15);
               //this.self.context.effectiveInterestRate[returnType]= Number(effectiveInterestRate);
               var payoutOut = _R( Number(this.self.context.fund[returnType]) * Number(payRate) / Number(100), this.context.precision);
               payoutCash[returnType] = Number(payoutOut).valueOf();
            }
         }
         this.self.withdraws({
            amounts: payoutCash
         });
      }
      return payoutCash;
   },
   rollingInterest: function(args) {
      for (var returnTypeKey in PublicConstants.FUND_RETURN) {
         var returnType = PublicConstants.FUND_RETURN[returnTypeKey];
         if (!Utils.isNothing(this.self.context.interestRate[returnType])) {
            var currentBalance = this.self.context.fund[returnType];
            if (currentBalance >= 0) {
                var interest = _R(Number(this.self.context.interestRate[returnType]) * Number(currentBalance), this.context.precision);
                _DBR("interest(" + returnType + ") = round( interestRate(" + this.self.context.interestRate[returnType] + ") * fund(" + this.self.context.fund[returnType] + "), " + this.context.precision + ")", interest, "FundImpl->" ,this.self.context.iteratorContext.runningPolicyValues.months);

                this.self.context.fund[returnType] = _R( Number(currentBalance) + Number(interest) ,this.context.precision);
                _DBR("fund(" + returnType + ") = interest(" + interest + ") + fund(" + currentBalance + ")", this.self.context.fund[returnType], "FundImpl->" ,this.self.context.iteratorContext.runningPolicyValues.months);
            }
         }
      }
      //_DB("fundBalances after interest rolling", this.self.context.fund, "FundImpl->");
      this.self.context.noOfInterestRolling++;
   },
   fundBalances: function(args) {
      var fundValues = {};
      for (var returnTypeKey in PublicConstants.FUND_RETURN) {
         var returnType = PublicConstants.FUND_RETURN[returnTypeKey];
         fundValues[returnType] = _R(this.self.context.fund[returnType], this.context.precision);
      }
      return fundValues;
   },
   surrenderValues: function(args) {
      var year = parseInt(String(this.self.context.noOfInterestRolling / this.self.context.noOfRolloingPerYear));
      if (this.self.context.isSurrenderChargeApplicable) {
         if (!Utils.isNothing(this.self.context.surrenderValueRates)) {
            var surrenderRate = this.self.context.surrenderValueRates.rates[year];
            var surrenderValues = {};
            for (var returnTypeKey in PublicConstants.FUND_RETURN) {
               var returnType = PublicConstants.FUND_RETURN[returnTypeKey];
               surrenderValues[returnType] = _R(this.self.context.fund[returnType] * (1 - surrenderRate), this.context.precision);
            }
            return surrenderValues;
         } else {
            return this.self.fundBalances(args);
         }
      } else {
         return this.self.fundBalances(args);
      }
   }
});

// fund proposal
var FundPoolImpl = Class.define({
   init: function(args) {
      if (Utils.isNothing(this.self.context)) {
         this.self.context = {};
      }
      this.self.context.fundPools = {};
      this.self.context.allocations = {};
      var context = args["context"];
      var metadata = context.events.metadata;
      var proposal = context.proposal;
      var basePlan = proposal.coverageInfo;
      var productId = basePlan.product.productKey.primaryProduct.productPK.productId;
      var precision = context.precision;
      if (!precision) {
          precision = 15;
      }
      var interestRatePrecision = context.interestRatePrecision;
      if (!interestRatePrecision) {
          interestRatePrecision = 15;
      }

      this.self.context['iteratorContext'] = context;

      this.self.context.noOfRolloingPerYear = metadata.iterationUnit;
      this.self.context.noOfInterestRolling = 0;
      this.self.context.surrenderValueRates = context.rates[productId][SchemaConstants.CHARGE_TYPE.SURRENDER];
      this.self.context.precision = precision;
      this.self.context.interestRatePrecision = interestRatePrecision;

      var fundSelections = Utils.iterator(proposal.funds.fundRecord);
      //console.log("fundSelections : " + JSON.stringify(fundSelections));
      for (var fundId in fundSelections) {
         var fundRecord = fundSelections[fundId];
         if (Number(fundRecord.allocation) > 0) {
            //console.log("fundRecord.returnRate[" + fundRecord._code + "] = " + JSON.stringify(fundRecord));
            var fundConfig = {
               fundId: fundRecord._code
            };
            if (fundRecord.returnRate > 0) {
               fundConfig[PublicConstants.FUND_RETURN.LOW] = _R(Math.pow(1 + fundRecord.returnRate / 100, 1 / (12/metadata.iterationUnit)) - 1, interestRatePrecision);
            }
            if (fundRecord.returnRateMedium > 0) {
               fundConfig[PublicConstants.FUND_RETURN.MEDIUM] = _R(Math.pow(1 + fundRecord.returnRateMedium / 100, 1 / (12/metadata.iterationUnit)) - 1, interestRatePrecision);
            }
            if (fundRecord.returnRateHigh > 0) {
               fundConfig[PublicConstants.FUND_RETURN.HIGH] = _R(Math.pow(1 + fundRecord.returnRateHigh / 100, 1 / (12/metadata.iterationUnit)) - 1, interestRatePrecision);
            }
            fundConfig['payoutRatio'] = fundRecord.targetPayoutRate;

            fundConfig['annualInterestRate'] = {};
            fundConfig.annualInterestRate[PublicConstants.FUND_RETURN.LOW] = fundRecord.returnRate;
            fundConfig.annualInterestRate[PublicConstants.FUND_RETURN.MEDIUM] = fundRecord.returnRateMedium;
            fundConfig.annualInterestRate[PublicConstants.FUND_RETURN.HIGH] = fundRecord.returnRateHigh;
            //fundConfig['policyOptions'] = context.policyOptions;
            this.self.context.allocations[fundRecord._code] = fundRecord.allocation;
            fundConfig['isSurrenderChargeApplicable'] = true;
            this.self.context.fundPools[fundRecord._code] = FundImpl.create({
               fundConfig: fundConfig,
               context: context
            });
         }
      }
   },
   allocations: function(args) {
      var allocationRatios = {};
      var balanceTotals = this.self.fundBalances();

      for (var fundPoolKey in this.self.context.fundPools) {
         //console.log(fundPoolKey);

         if (Utils.isNothing(allocationRatios[fundPoolKey])) {
            allocationRatios[fundPoolKey] = {};
         }
         var balances = IFund.appliedTo(this.self.context.fundPools[fundPoolKey]).call("fundBalances", {});
         //console.log(JSON.stringify(balances));

         for (var balanceIdx in balances) {
            if (Number(balanceTotals[balanceIdx]) == 0) {
               allocationRatios[fundPoolKey][balanceIdx] = _R(this.self.context.allocations[fundPoolKey] / 100, 15);
            } else {
               allocationRatios[fundPoolKey][balanceIdx] = _R(balances[balanceIdx] / balanceTotals[balanceIdx], 15);
            }
         }
      }
      return allocationRatios;
   },
   dumpin: function(args) {
      var amount = args['amount'];
      var amounts = args['amounts'];
      var allocationRatios = this.self.allocations();

      var remainAmount = amount;
      var remainAmounts = Utils.extend({}, amounts);

      //console.log("allocationRatios (i.e. pool allocation ratio) = " + JSON.stringify(allocationRatios));
      var i = 0;
      _DBR("allocationRatios", allocationRatios, "FundPoolImpl->" ,this.self.context.iteratorContext.runningPolicyValues.months);
      for (var fundPoolKey in this.self.context.fundPools) {
         i = i + 1;
         var lastOne = (i == this.self.context.fundPools.length);

         var pool = this.self.context.fundPools[fundPoolKey];
         for (var returnType in pool.context.fund) {
            if (Utils.isNothing(pool.context.fund[returnType])) {
               pool.context.fund[returnType] = 0;
            }
            //console.log("fund before = " + pool.context.fund[returnType]);
            var allocatedAmount = Number(0);
            if (!Utils.isNothing(amounts)) {
               if (!lastOne) {
                   allocatedAmount = _R(Number(amounts[returnType]) * Number(allocationRatios[fundPoolKey][returnType]), this.context.precision);
                   remainAmounts[returnType] = remainAmounts[returnType] - allocatedAmount;
               } else {
                   allocatedAmount = remainAmounts[returnType];
               }
            } else {
               if (!lastOne) {
                   allocatedAmount = _R(amount * allocationRatios[fundPoolKey][returnType], this.context.precision);
                   remainAmount = remainAmount - allocatedAmount;
               } else {
                   allocatedAmount = remainAmount;
               }
            }

            var currentBalance = Number(pool.context.fund[returnType]);
            pool.context.fund[returnType] = _R(currentBalance + Number(allocatedAmount), this.context.precision);

            if (allocatedAmount < 0) {
                _DBR("fundBalance(" + fundPoolKey + ")[" + returnType + "] = currentBalance(" + currentBalance +  ") - amount(" + Number(-allocatedAmount) + ")", pool.context.fund[returnType], "FundPoolImpl->" ,this.self.context.iteratorContext.runningPolicyValues.months);
            } else {
                _DBR("fundBalance(" + fundPoolKey + ")[" + returnType + "] = currentBalance(" + currentBalance +  ") + amount(" + Number(allocatedAmount) + ")", pool.context.fund[returnType], "FundPoolImpl->" ,this.self.context.iteratorContext.runningPolicyValues.months);
            }
            //console.log("fund after = " + pool.context.fund[returnType]);
         }
      }
   },
   withdraw: function(args) {
      var amount = args['amount'];
      var amounts = args['amounts'];
      if (!Utils.isNothing(amounts)) {
         var deductions = {};
         for (var amountsIdx in amounts) {
            deductions[amountsIdx] = Number(-1 * amounts[amountsIdx]);
         }
         //console.log("deductions = " + JSON.stringify(deductions));
         this.self.dumpin({
            amounts: deductions
         });
      } else {
         this.self.dumpin({
            amount: -amount
         });
      }
   },

   withdraws: function(args) {
      var amounts = args['amounts'];
      if (!Utils.isNothing(amounts)) {
         for (var fundPoolKey in this.self.context.fundPools) {
            var pool = this.self.context.fundPools[fundPoolKey];
            IFund.appliedTo(pool).call("withdraw", {
               amounts: amounts
            });
         }
      }
   },

   dumpins: function(args) {
      var amounts = args['amounts'];
      for (var fundPoolKey in this.self.context.fundPools) {
         var pool = this.self.context.fundPools[fundPoolKey];
         IFund.appliedTo(pool).call("dumpins", {
            amounts: amounts
         });
      }
   },

   payout: function(args) {
      var totalCashOuts = {};
      for (var fundPoolKey in this.self.context.fundPools) {
         var pool = this.self.context.fundPools[fundPoolKey];
         var cashOut = IFund.appliedTo(pool).call("payout", {});
         for (var cashOutKey in cashOut) {
            if (Utils.isNothing(totalCashOuts[cashOutKey])) {
               totalCashOuts[cashOutKey] = Number(0);
            }
            totalCashOuts[cashOutKey] = Number(totalCashOuts[cashOutKey]) + Number(cashOut[cashOutKey]);
         }
      }
      return totalCashOuts;
   },
   rollingInterest: function(args) {
      for (var fundPoolKey in this.self.context.fundPools) {
         var pool = this.self.context.fundPools[fundPoolKey];
         IFund.appliedTo(pool).call("rollingInterest", {});
      }
      this.self.context.noOfInterestRolling++;
   },
   fundBalances: function(args) {
      var fundReturns = {};
      for (var fundPoolKey in this.self.context.fundPools) {
         var pool = this.self.context.fundPools[fundPoolKey];
         var poolFunds = IFund.appliedTo(pool).call("fundBalances", {});
         //console.log("poolFunds = " + JSON.stringify(poolFunds));

         for (var fundKey in poolFunds) {
            if (Utils.isNothing(fundReturns[fundKey])) {
               fundReturns[fundKey] = 0;
            }
            fundReturns[fundKey] = Number(fundReturns[fundKey]) + Number(poolFunds[fundKey]);
         }
      }
      //console.log("Pool.fundBalances = " + JSON.stringify(fundReturns));
      return fundReturns;
   },
   surrenderValues: function(args) {
      var surrenderVal = {};
      if (!Utils.isNothing(this.self.context.surrenderValueRates)) {
         for (var fundPoolKey in this.self.context.fundPools) {
            var pool = this.self.context.fundPools[fundPoolKey];
            var poolSurrenders = IFund.appliedTo(pool).call("surrenderValues");
            for (var fundKey in poolSurrenders) {
               if (Utils.isNothing(surrenderVal[fundKey])) {
                  surrenderVal[fundKey] = 0;
               }
               surrenderVal[fundKey] = Number(surrenderVal[fundKey]) + Number(poolSurrenders[fundKey]);
            }
         }
         return surrenderVal;
      } else {
         return this.self.fundBalances(args);
      }
   }

});

// fund proposal
var PortfolioImpl = Class.define({
   init: function(args) {
      if (Utils.isNothing(this.self.context)) {
         this.self.context = {};
      }
      this.self.context.fundPools = [];
      this.self.context.projectionContext = args['context'];
      if (!this.self.context.projectionContext) {
          this.self.context.projectionContext.precision = 15;
      }
   },
   allocations: function(args) {
      var allocationRatios = [];
      var portfolioTotals = this.self.fundBalances();

      // sum of porfolio
      var totalPortfolioAmount = 0;
      for (var returnType in portfolioTotals) {
         totalPortfolioAmount = _R(Number(totalPortfolioAmount) + Number(portfolioTotals[returnType]), 15);
      }

      for (var poolIdx in this.self.context.fundPools) {
         var pool = this.self.context.fundPools[poolIdx];
         var balanceTotals = IFund.appliedTo(pool).call("fundBalances", {});

         // sum of fund pool
         var totalPoolAmount = 0;
         for (var returnType in balanceTotals) {
            totalPoolAmount = _R(Number(totalPoolAmount) + Number(balanceTotals[returnType]), 15);
         }
         var ratio = _R(totalPoolAmount / totalPortfolioAmount, 15);
         allocationRatios.push(ratio);
      }
      return allocationRatios;
   },
   dumpin: function(args) {
      //console.log('new fund pool is created - begin');
      var newFundPool = FundPoolImpl.create({
         context: this.self.context.projectionContext
      });
      //console.log('new fund pool is created - end');

      //console.log('dumpin is processed - begin');
      IFund.appliedTo(newFundPool).call("dumpin", args);
      //console.log('dumpin is processed - end');

      //console.log('show balances - begin');
      //console.log(JSON.stringify(IFund.appliedTo(newFundPool).call("fundBalances", args)));
      //console.log('show balances - end');

      this.self.context.fundPools.push(newFundPool);
      //console.log('funds in fundPools = ' + this.self.context.fundPools.length);
   },
   withdraw: function(args) {
      var amount = args['amount'];
      var amounts = args['amounts'];
      var allocationRatios = this.self.allocations();

      //console.log("allocationRatios = " + allocationRatios);

      if (!Utils.isNothing(amounts)) {
         var i = 0;
         var remainAmounts = Utils.extend({}, amounts);
         for (var poolIdx in this.self.context.fundPools) {
            i = i + 1;
            var lastOne = (i == this.self.context.fundPools.length);

            var fundPool = this.self.context.fundPools[poolIdx];

            var deductions = {};
            if (!lastOne) {
                for (var amountsIdx in amounts) {
                   deductions[amountsIdx] = _R(amounts[amountsIdx] * allocationRatios[poolIdx], this.self.context.projectionContext.precision);
                   //console.log("amounts[amountsIdx] = " + amounts[amountsIdx]);
                   //console.log("deductions[amountsIdx] = " + deductions[amountsIdx]);
                   remainAmounts[amountsIdx] = remainAmounts[amountsIdx] - deductions[amountsIdx];
                }
            } else {
                deductions = remainAmounts;
            }

            IFund.appliedTo(fundPool).call("withdraw", {
               amounts: deductions
            });
         }
      } else {
         for (var poolIdx in this.self.context.fundPools) {
            var fundPool = this.self.context.fundPools[poolIdx];
            IFund.appliedTo(fundPool).call("withdraw", {
               amount: _R(amount * allocationRatios[poolIdx], 15)
            });
         }
      }
   },
   withdraws: function(args) {
      var amounts = args['amounts'];
      if (!Utils.isNothing(amounts)) {
         for (var poolIdx in this.self.context.fundPools) {
            var fundPool = this.self.context.fundPools[poolIdx];
            var deductions = {};
            IFund.appliedTo(fundPool).call("withdraw", {
               amounts: amounts
            });
         }
      }
   },
   dumpins: function(args) {
      var amounts = args['amounts'];
      if (!Utils.isNothing(amounts)) {
         for (var poolIdx in this.self.context.fundPools) {
            var fundPool = this.self.context.fundPools[poolIdx];
            var deductions = {};
            IFund.appliedTo(fundPool).call("dumpins", {
               amounts: amounts
            });
         }
      }
   },
   payout: function(args) {
      var totalPayoutCash = {};
      for (var poolIdx in this.self.context.fundPools) {
         var fundPool = this.self.context.fundPools[poolIdx];
         var totalCashOut = IFund.appliedTo(fundPool).call("payout", {});
         for (var cashOutKey in totalCashOut) {
            if (Utils.isNothing(totalPayoutCash[cashOutKey])) {
               totalPayoutCash[cashOutKey] = Number(0);
            }
            totalPayoutCash[cashOutKey] = Number(totalPayoutCash[cashOutKey]) + Number(totalCashOut[cashOutKey]);
         }
      }
      return totalPayoutCash;
   },
   rollingInterest: function(args) {
      for (var fundPoolKey in this.self.context.fundPools) {
         var pool = this.self.context.fundPools[fundPoolKey];
         IFund.appliedTo(pool).call("rollingInterest", {});
      }
   },
   fundBalances: function(args) {
      var fundReturns = {};
      for (var fundPoolKey in this.self.context.fundPools) {
         var pool = this.self.context.fundPools[fundPoolKey];
         var poolFunds = IFund.appliedTo(pool).call("fundBalances", {});
         //console.log("poolFunds = " + JSON.stringify(poolFunds));

         for (var fundKey in poolFunds) {
            if (Utils.isNothing(fundReturns[fundKey])) {
               fundReturns[fundKey] = 0;
            }
            fundReturns[fundKey] = Number(fundReturns[fundKey]) + Number(poolFunds[fundKey]);
         }
      }
      //console.log("Pool.fundBalances = " + JSON.stringify(fundReturns));
      return fundReturns;
   },

   surrenderValues: function(args) {
      var surrenderFunds = {};
      for (var fundPoolKey in this.self.context.fundPools) {
         var pool = this.self.context.fundPools[fundPoolKey];
         var surrenderBalances = IFund.appliedTo(pool).call("surrenderValues", {});
         //console.log("poolFunds = " + JSON.stringify(poolFunds));
         for (var fundKey in surrenderBalances) {
            if (Utils.isNothing(surrenderFunds[fundKey])) {
               surrenderFunds[fundKey] = 0;
            }
            surrenderFunds[fundKey] = Number(surrenderFunds[fundKey]) + Number(surrenderBalances[fundKey]);
         }
      }
      //console.log("Pool.fundBalances = " + JSON.stringify(fundReturns));
      return surrenderFunds;
   }
});

// Column Implementation
var ColumnImpl = Class.define({
   init: function(args) {
      this.self['columnName'] = args["columnName"];
      this.self['columnItem'] = args["columnItem"];
      this.self['values'] = [];
   },
   acceptValue: function(args) {
      var year = args['year'];
      var age = args['age'];
      var value = args['value'];
      this.self.values.push({
         year: year,
         age: age,
         value: value
      });
   },
   column: function(args) {
      return {
         Name: this.self.columnName,
         Values: this.self.values
      };
   }
});

// Projection Manager Implementation
var ProjectionManagerImpl = Class.define({
   init: function(args) {
      this.self.context = {};
      this.self.context['runningPolicyValues'] = {};
      this.self.context['result'] = {};
      this.self.context['rates'] = {};
      this.self.context.monthlyResult = false;
      this.self.context.stepChanges = false;
   },
   loadProductRates: function(args) {
      _DB("","","");
      _DB("", "ProjectionManagerImpl.loadProductRates","");
      _DB("","--------------------------------","");
      // base plan rates
      var basePlan = this.self.context.proposal.coverageInfo;
      var productId = basePlan.product.productKey.primaryProduct.productPK.productId;
      var schemaObject = basePlan.schema.call("getSchema", {});
      var PEratemanager = Repository.getManager(SystemComponents.MANAGER.RATE_MANAGER);

      if (Utils.isNothing(this.self.context[productId])) {
         this.self.context.rates[productId] = {};
      };

      var currencyId = basePlan.currency.currencyPK.currencyId;
      var banding = basePlan.banding.Band.text;
      var channel = basePlan.proposal.channel;
      var loanInt = basePlan.loanInt;
      var benefitPeriod = _PV( basePlan, "otherOptions.benefitPeriod" );
      if (Utils.isNothing(benefitPeriod)) {
         benefitPeriod = basePlan.schema.call("calculateBenefitPeriod", {coverage:basePlan});
      }
      _DB("[" + productId +  "] loadProductRates.benefitPeriod", benefitPeriod, "ProjectionManagerImpl");

      var configInfos = {
         PremiumType: _V(_PV( schemaObject, "ProductSchema.PremiumInfo.PremiumTable" ), []),
         PolicyValueType: _V(_PV( schemaObject, "ProductSchema.PolicyValue.PolicyValueTable" ), []),
         ChargeType: _V(_PV( schemaObject, "ProductSchema.ChargeInfo.ChargeScale" ), [])
      };
      for (var configKey in configInfos) {
         var config = configInfos[configKey];

         var configIterator = Utils.iterator(config);
         for (var idx in configIterator) {
            var configElement = configIterator[idx];

            var configElementCurrencyId = _V(configElement.CurrencyId, WILDCARD);
            var configElementBanding = _V(configElement.Band, WILDCARD);
            var configElementChannel = _V(configElement.Channel, WILDCARD);
            var configElementLoanInt = _V(configElement.LoanInt, WILDCARD);
            var configElementBenefitPeriod = _V(configElement.BenefitPeriod, WILDCARD);

            if (configElementBanding == "0" || configElementBanding == "") configElementBanding = WILDCARD;
            if (configElementLoanInt == "0" || configElementLoanInt == "") configElementLoanInt = WILDCARD;
            if (configElementBenefitPeriod == "0" || configElementBenefitPeriod == "") configElementBenefitPeriod = WILDCARD;

            //if (configElement.CurrencyId.text == basePlan.currency.currencyPK.currencyId) {
            //_DB("[" + productId +  "] loadProductRates.configElement", configElement[configKey].text, "ProjectionManagerImpl");
            //_DB("[" + productId +  "] loadProductRates.configElement.currencyId", configElementCurrencyId + " (" + currencyId + ")", "ProjectionManagerImpl");
            //_DB("[" + productId +  "] loadProductRates.configElement.band", configElementBanding + " (" + banding + ")", "ProjectionManagerImpl");
            //_DB("[" + productId +  "] loadProductRates.configElement.channel", configElementChannel + " (" + channel + ")", "ProjectionManagerImpl");
            //_DB("[" + productId +  "] loadProductRates.configElement.loanInt", configElementLoanInt + " (" + loanInt + ")", "ProjectionManagerImpl");
            //_DB("[" + productId +  "] loadProductRates.configElement.benefitPeriod", configElementBenefitPeriod + " (" + benefitPeriod + ")", "ProjectionManagerImpl");
            if (
                  ( configElementCurrencyId == WILDCARD || configElementCurrencyId == currencyId ) &&
                  ( configElementBanding == WILDCARD || configElementBanding == banding ) &&
                  ( configElementChannel == WILDCARD || configElementChannel == channel ) &&
                  ( configElementLoanInt == WILDCARD || configElementLoanInt == loanInt ) &&
                  ( configElementBenefitPeriod == WILDCARD || configElementBenefitPeriod == benefitPeriod )
               ) {
               _DB("[" + productId +  "] loadProductRates.configElement", configElement[configKey].text, "ProjectionManagerImpl");
               //_DB("[" + productId +  "] loadProductRates.configElement.matched", "TRUE", "ProjectionManagerImpl")

               if (Utils.isNothing(this.self.context.rates[productId][configElement[configKey].text])) {
                  /*
                  // divert request to LoadProductRates
                  var rates = IRateManager.appliedTo(PEratemanager).call("lookupRates", {
                     coverage: basePlan,
                     resourceKey: configElement[configKey].text,
                     ipo: 0
                  });
                  */

                  var rateHandler = _V( _PV(schemaObject, ['ProductSchema','BasicParticular','CalcMethods','RateHandler']), defaultSystemModules.rateHandler );
                  _DB('ProjectionManagerImpl.loadProductRates.rateHandler', rateHandler);
                  var funcManager = Repository.getManager(SystemComponents.MANAGER.FUNCTION_MANAGER);
                  var rates = funcManager.call('execute', {
                     function: rateHandler,
                     args: {
                        coverage: basePlan,
                        resourceKey: configElement[configKey].text,
                        ipo: 0
                     }
                  }).value;

                  //console.log("rates[" + premInfo.PremiumType.text + "] = " + JSON.stringify(rates));
                  _DB("","","");
                  this.self.context.rates[productId][configElement[configKey].text] = rates;
                  _DB("rates[" + productId + "][" + configElement[configKey].text + "]", rates, "");
               }
            } else {
               //_DB("[" + productId +  "] loadProductRates.configElement.matched", "FALSE", "ProjectionManagerImpl")
            }
         }
      }

      for(var riderIdx in this.self.context.proposal.riders.coverageInfo) {
         var rider = this.self.context.proposal.riders.coverageInfo[riderIdx];
         var riderId = rider.product.productKey.primaryProduct.productPK.productId;
         var riderSchemaObj = rider.schema.call("getSchema", {});

         if (Utils.isNothing(this.self.context.rates[rider.coverageId])) {
            this.self.context.rates[rider.coverageId] = {};
         };
         if (Utils.isNothing(this.self.context.rates[rider.coverageId][riderId])) {
            this.self.context.rates[rider.coverageId][riderId] = {};
         };

         var currencyId = rider.currency.currencyPK.currencyId;
         var banding = rider.banding.Band.text;
         var channel = rider.proposal.channel;
         var loanInt = rider.loanInt;
         var benefitPeriod2 = _PV( rider, "otherOptions.benefitPeriod" );
         if (Utils.isNothing(benefitPeriod2)) {
            benefitPeriod2 = rider.schema.call("calculateBenefitPeriod", {coverage:rider});
         }
         benefitPeriod2 = Math.min(benefitPeriod2, benefitPeriod);
         _DB("[" + riderId +  "] loadProductRates.benefitPeriod2", benefitPeriod2, "ProjectionManagerImpl");

         var configInfos = {
            PremiumType: _V( _PV( riderSchemaObj, "ProductSchema.PremiumInfo.PremiumTable" ), [] ),
            PolicyValueType: _V( _PV( riderSchemaObj, "ProductSchema.PolicyValue.PolicyValueTable" ), [] ),
            ChargeType: _V( _PV( riderSchemaObj, "ProductSchema.ChargeInfo.ChargeScale" ), [] )
         };
         for (var configKey in configInfos) {
            var config = configInfos[configKey];

            var configIterator = Utils.iterator(config);
            for (var idx in configIterator) {
               var configElement = configIterator[idx];

               var configElementCurrencyId = _V(configElement.CurrencyId, WILDCARD);
               var configElementBanding = _V(configElement.Band, WILDCARD);
               var configElementChannel = _V(configElement.Channel, WILDCARD);
               var configElementLoanInt = _V(configElement.LoanInt, WILDCARD);
               var configElementBenefitPeriod = _V(configElement.BenefitPeriod, WILDCARD);

               if (configElementBanding == "0" || configElementBanding == "") configElementBanding = WILDCARD;
               if (configElementLoanInt == "0" || configElementLoanInt == "") configElementLoanInt = WILDCARD;
               if (configElementBenefitPeriod == "0" || configElementBenefitPeriod == "") configElementBenefitPeriod = WILDCARD;

               //_DB("[" + riderId +  "] loadProductRates.configElement", configElement[configKey].text, "ProjectionManagerImpl");
               //_DB("[" + riderId +  "] loadProductRates.configElement.currencyId", configElementCurrencyId + " (" + currencyId + ")", "ProjectionManagerImpl");
               //_DB("[" + riderId +  "] loadProductRates.configElement.band", configElementBanding + " (" + banding + ")", "ProjectionManagerImpl");
               //_DB("[" + riderId +  "] loadProductRates.configElement.channel", configElementChannel + " (" + channel + ")", "ProjectionManagerImpl");
               //_DB("[" + riderId +  "] loadProductRates.configElement.loanInt", configElementLoanInt + " (" + loanInt + ")", "ProjectionManagerImpl");
               //_DB("[" + riderId +  "] loadProductRates.configElement.benefitPeriod", configElementBenefitPeriod + " (" + benefitPeriod + ")", "ProjectionManagerImpl");
               //if (configElement.CurrencyId.text == basePlan.currency.currencyPK.currencyId) {
               if (
                     ( configElementCurrencyId == WILDCARD || configElementCurrencyId == currencyId ) &&
                     ( configElementBanding == WILDCARD || configElementBanding == banding ) &&
                     ( configElementChannel == WILDCARD || configElementChannel == channel ) &&
                     ( configElementLoanInt == WILDCARD || configElementLoanInt == loanInt ) &&
                     ( configElementBenefitPeriod == WILDCARD || configElementBenefitPeriod == benefitPeriod2 )
                  ) {
                  //if (configElement.CurrencyId.text == rider.currency.currencyPK.currencyId) {
                  //console.log("configElement = " + configElement[configKey].text);
                  _DB("[" + riderId +  "] loadProductRates.configElement", configElement[configKey].text, "ProjectionManagerImpl");
                  //_DB("[" + productId +  "] loadProductRates.configElement.matched", "TRUE", "ProjectionManagerImpl")
                  if (Utils.isNothing(this.self.context.rates[rider.coverageId][riderId][configElement[configKey].text])) {
                     /*
                     // divert request to LoadProductRates
                     var rates = IRateManager.appliedTo(PEratemanager).call("lookupRates", {
                        coverage: rider,
                        resourceKey: configElement[configKey].text,
                        ipo: 0
                     });
                     */

                     var rateHandler = _V( _PV(riderSchemaObj, ['ProductSchema','BasicParticular','CalcMethods','RateHandler']), defaultSystemModules.rateHandler );
                     _DB('ProjectionManagerImpl.loadProductRates.rateHandler(Rider)', rateHandler);
                     var funcManager = Repository.getManager(SystemComponents.MANAGER.FUNCTION_MANAGER);
                     var rates = funcManager.call('execute', {
                        function: rateHandler,
                        args: {
                           coverage: rider,
                           resourceKey: configElement[configKey].text,
                           ipo: 0
                        }
                     }).value;

                     //console.log("rates[" + premInfo.PremiumType.text + "] = " + JSON.stringify(rates));
                     _DB("","","");
                     this.self.context.rates[rider.coverageId][riderId][configElement[configKey].text] = rates;
                     _DB("rates[" + rider.coverageId + "][" + riderId + "][" + configElement[configKey].text + "]", rates, "");
                  }
               } else {
                  //_DB("[" + productId +  "] loadProductRates.configElement.matched", "FALSE", "ProjectionManagerImpl")
               }
            }
         }

      }
      _DB("","--------------------------------","");

      // console.log("this.self.context.rates = " + JSON.stringify(this.self.context.rates));
   },
   runProjection: function(args) {
      this.self.init(args);

      var proposal = args['proposal'];
      var projectionOptions = args['projectionOptions'];
      var policyOptions = args['policyOptions'];
      //var parties = Utils.iterator(proposal.coverageInfo.parties.party);

      this.self.context['proposal'] = proposal;
      this.self.context['insuredAge'] = _V( _PV( getPrimaryInsured({coverage: proposal.coverageInfo}), 'insuredAge' ) );
      this.self.context['projectionOptions'] = projectionOptions;
      this.self.context['policyOptions'] = policyOptions;

      // load rates
      this.self.loadProductRates();

      // locate event manager
      var em = Repository.getManager(SystemComponents.MANAGER.EVENTS_MANAGER);
      var events = em.call("events", {
         proposal: proposal
      });
      this.self.context['events'] = events;

      if (proposal.enableDebug) {
         console.log('Event List - begin');
         console.log('------------------')
         console.log('benefitPeriod = ' + events.metadata.benefitPeriod);
         console.log('premiumPayingPeriod = ' + events.metadata.premiumPayingPeriod);
         console.log('iterations = ' + events.metadata.iterations);
         console.log('iterationUnit = ' + events.metadata.iterationUnit);
         for (var idx in events.items) {
            var eventInstance = events.items[idx];
            var eventImpl = IEvent.appliedTo(eventInstance);
            console.log('' + idx + '. ' + eventImpl.call('eventName', {}));
         }
         console.log('Event List - end');
      }

      /*
      if (!Utils.isNothing(proposal.funds.fundRecord)) {
         //this.self.context.runningPolicyValues['fundPool'] = FundPoolImpl.create({context : this.self.context});
         this.self.context.runningPolicyValues['fundPool'] = PortfolioImpl.create({
            context: this.self.context
         });
      }
      */

      var hasCashOut = Utils.matchInList(InterfaceConstants.POLICY_OPTIONS.CASH_OUT_OPTION, this.self.context.policyOptions, false);
      var tryRuns = 10000;
      var year = 0;
      var months = 0;
      var i;
      for (var i = 0; i < Math.min(tryRuns, events.metadata.iterations); i+=events.metadata.iterationUnit) {
         if (proposal.enableDebug) {
            _DBR("","","",i);
            _DBR("","@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@","",i);
            _DBR("","@@@@ YEAR " + year + " / MONTH " + (i % 12), "",i);
            _DBR("","@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@","",i);
         }

         this.self.context.runningPolicyValues['year'] = year;
         this.self.context.runningPolicyValues['months'] = months;

         // if (year == 10) {
         //    this.self.context.monthlyResult = true;
         //    this.self.context.stepChanges = true;
         // } else {
         //    this.self.context.monthlyResult = false;//    this.self.context.stepChanges = false;
         // }
         for (var eventIdx in events.items) {
            var event = events.items[eventIdx];
            var shouldRun = IEvent.appliedTo(event).call("shouldBeRun", {
               context: this.self.context
            });
            if (shouldRun) {
               if (proposal.enableDebug) {
                  _DBR("","","",i);
                  _DBR("","##### Event (" + IEvent.appliedTo(event).call("eventName", {}) + ") started #####","",i);
               }
               IEvent.appliedTo(event).call("run", {
                  context: this.self.context
               });
               if (this.self.context.stepChanges) {
                  var snapshot = this.self.makeSnapshotValues();
                   if (proposal.enableDebug) {
                       _DBR("","Event (" + IEvent.appliedTo(event).call("eventName", {}) + ") completed","",i);
                   }
               }
            }
         }

         months += events.metadata.iterationUnit;
         year = parseInt( months / 12 );

         //if ((i + 1) % events.metadata.iterationUnit == 0) {
         //    year = year + 1;
         //}
         //if ((i + 1) % events.metadata.iterationUnit == 0 || this.self.context.monthlyResult) {
         if (months % 12 == 0 || this.self.context.monthlyResult) {
            var snapshot = this.self.makeSnapshotValues();
            if (snapshot) {
               this.self.saveSnapshot({
                  snapshot: snapshot
               });
            }
         }
      }
      //console.log(JSON.stringify(this.self.context.result[this.self.context.projectionOptions]));
      var resultData = this.self.transformResult();
      //console.log("RESULT = \n" + JSON.stringify(resultData));
      var finalResult = {
         projectionOptions: this.self.context.projectionOptions,
         policyOptions: this.self.context.policyOptions,
         columns: resultData
      };

      var validator = Repository.getManager(SystemComponents.MANAGER.VALIDATOR);
      if (!Utils.isNothing(validator)) {
         // validator is defined
         var validationResult = validator.call("postProjectionValidate", {
            proposal: proposal,
            context: this.self.context,
            projectionResult: finalResult
         });
         finalResult["validationResult"] = validationResult;
      }

      //console.log("RESULT = \n" + JSON.stringify(finalResult));
      return finalResult;
   },


   transformResult: function(args) {
      var columnSet = [];
      var columnResults = [];

      for (var columnIdx in this.self.context.events.columnItems) {
         var column = this.self.context.events.columnItems[columnIdx];
         var shouldShown = IEventColumn.appliedTo(column).call("shouldBeShown", {
            context: this.self.context
         });
         if (shouldShown) {
            var columnName = IEventColumn.appliedTo(column).call("columnName", {});
            columnSet.push(ColumnImpl.create({
               columnName: columnName,
               columnItem: column
            }));
         }
      }

      var result = this.self.context.result[this.self.context.projectionOptions];
      for (var i in result) {
         var record = result[i];
         var year = _R(Number(record.year) + Number(1), 0); // match printing requirements
         var age = _R(Number(record.age) + Number(1), 0); // match printing requirements
         for (var columnIdx in columnSet) {
            var column = columnSet[columnIdx];
            var colVal = IEventColumn.appliedTo(column.columnItem).call("calculatedValue", {
               record: record
            });
            IColumn.appliedTo(column).call("acceptValue", {
               year: year,
               age: age,
               value: colVal
            });
         }
      }

      for (var columnIdx in columnSet) {
         var column = columnSet[columnIdx];
         columnResults.push(IColumn.appliedTo(column).call("column", {}));
      }
      return columnResults;
   },

   makeSnapshotValues: function(args) {
      //months: this.self.context.runningPolicyValues.months - (this.self.context.runningPolicyValues.year * 12),
      //console.log("cashOut = " + this.self.context.runningPolicyValues.cashOut);
      /*
      var returnValues = {
         year: this.self.context.runningPolicyValues.year,
         month: (this.self.context.runningPolicyValues.months % 12),
         age: Number(this.self.context.insuredAge) + Number(this.self.context.runningPolicyValues.year),
         accountValues: IFund.appliedTo(this.self.context.runningPolicyValues.fundPool).call("fundBalances", {}),
         nars: this.self.context.runningPolicyValues.nars,
         cois: this.self.context.runningPolicyValues.annualCois,
         coiRate: this.self.context.runningPolicyValues.coiRate,
         withdrawal: this.self.context.runningPolicyValues.withdrawal,
         initialDumpIn: this.self.context.runningPolicyValues.initialDumpIn,
         newPremium: this.self.context.runningPolicyValues.newPremium,
         totalPremiums: this.self.context.runningPolicyValues.totalPremiums,
         deathBenefits: this.self.context.runningPolicyValues.deathBenefits,
         totalDeathBenefits: this.self.context.runningPolicyValues.totalDeathBenefits,
         cashOut: this.self.context.runningPolicyValues.cashOut,
         cashOutPayments: this.self.context.runningPolicyValues.accumulatedcashOutPayments,
         firstMonthCoi: this.self.context.runningPolicyValues.firstMonthCoi,
         cashoutAccount: IFund.appliedTo(this.self.context.runningPolicyValues.cashoutAccount).call("fundBalances", {}),
         surrenderValuesFromCashoutAccount: IFund.appliedTo(this.self.context.runningPolicyValues.cashoutAccount).call("surrenderValues", {}),
         surrenderValues: IFund.appliedTo(this.self.context.runningPolicyValues.fundPool).call("surrenderValues", {})
      };
      //console.log(JSON.stringify(returnValues));
      */
      var events = this.self.context.events;
      var provider = events.provider;
      var returnValues = IEventsProvider.appliedTo(provider).call("makeSnapshot", { context: this.self.context });
      return returnValues;
   },
   saveSnapshot: function(args) {
      var snapshot = args['snapshot'];
      if (Utils.isNothing(this.self.context.result[this.self.context.projectionOptions])) {
         this.self.context.result[this.self.context.projectionOptions] = [];
      }
      this.self.context.result[this.self.context.projectionOptions].push(Utils.extend({}, snapshot));
      //console.log('result record[' + i + '] = ' + JSON.stringify(snapshot));
   }
});
var ratesMethods = {

   attributes : {

   },

   supportOption : function(option) {
      return (option && this.header.options == option);
   },

   rateUnit : function() {
      var unit;
      if (!(unit) && this.supportOption(RateConstants.RATE_OPTION.PER1000)) {
         unit = 1000;
      }
      if (!(unit) && this.supportOption(RateConstants.RATE_OPTION.PER100)) {
         unit = 100;
      }
      if (!(unit)) {
         // default value
         unit = 1;
      }
      this.attributes = Utils.extend(this.attributes, { rateUnit: unit });
      return this.attributes.rateUnit;
   }

}
var PremiumCalculatorImpl = Class.define({
   init: function(args) {
      this.self.calculateMethods = [];

      this.self.calculateMethods.push(CommonBpm.create({formula: BPM1.create()}));
      this.self.calculateMethods.push(CommonBpm.create({formula: SPSM.create()}));

      var calculateMethods = args["methods"];
      if (!Utils.isNothing(calculateMethods)) {
         for (index in calculateMethods) {
            var methodDefinition = calculateMethods[index];
            this.self.calculateMethods.push(methodDefinition);
         }
      }
   },
   addMethod: function(args) {
      var newMethod = args['method'];
      this.self.calculateMethods.push(newMethod);

      var formulaName = ICalculateMethod.appliedTo(newMethod).call('formulaName', {});
      _D("Premium formula loaded", formulaName, "PremiumCalculatorImpl->");
   },
   lookupCalculator: function(args) {
      var coverage = args['coverage'];

      var calculator;
      // lookup by Product Id
      for(methodIndex in this.self.calculateMethods) {
         var method = this.self.calculateMethods[methodIndex];
         var productId = ICalculateMethod.appliedTo(method).call('formulaScope', {coverage: coverage}).productId;

         if (coverage.proposal.enableDebug) {
            var formulaName = ICalculateMethod.appliedTo(method).call('formulaName', {});
            _DB('lookupCalculator by Product Id: ', '(' + formulaName + ').productId(' + productId + ') compare to coverage.productId('
               + coverage.product.productKey.primaryProduct.productPK.productId + ') = '
               + (productId == coverage.product.productKey.primaryProduct.productPK.productId), 'PremiumCalculatorImpl->');
         }

         if (!Utils.isNothing(productId)) {
            if (productId == coverage.product.productKey.primaryProduct.productPK.productId) {
               calculator = method;
               break;
            }
         }
      }

      // lookup by method Id;
      if (!calculator) {
         var premiumInfo;
         var premiumTypes = [SchemaConstants.PREMIUM_TYPE.BASICPREMIUM,SchemaConstants.PREMIUM_TYPE.MINIMUMPREMIUM,SchemaConstants.PREMIUM_TYPE.MIN_PLANNED_PREMUM];
         for(var ii in premiumTypes) {
            premiumInfo = coverage.schema.call("matchPremiumInfoRecord", {
               coverage: coverage,
               banding: coverage.banding.Band.text,
               premiumType: premiumTypes[ii]
            });

            if (!Utils.isNothing(premiumInfo)) break;
         }
         //var premiumInfo = coverage.schema.call("matchPremiumInfoRecord", {
         //   coverage: coverage,
         //   banding: coverage.banding.Band.text,
         //   premiumType: SchemaConstants.PREMIUM_TYPE.BASICPREMIUM
         //});

         if (premiumInfo) {
            var searchMethodId = premiumInfo.Method.text;
            for(methodIndex in this.self.calculateMethods) {
               var method = this.self.calculateMethods[methodIndex];
               var methodId = ICalculateMethod.appliedTo(method).call('formulaScope', {coverage: coverage}).methodId;

               if (coverage.proposal.enableDebug) {
                  var formulaName = ICalculateMethod.appliedTo(method).call('formulaName', {});
                  _DB('lookupCalculator by Method Id: ', '(' + formulaName + ').methodId(' + methodId + ') compare to premiumInfo.methodId('
                     + searchMethodId + ') = '
                     + (methodId == searchMethodId), 'PremiumCalculatorImpl->');
               }

               if (!Utils.isNothing(methodId)) {
                  if (methodId == searchMethodId) {
                     calculator = method;
                     break;
                  }
               }
            }
         }
      }

      // lookup by productTypes;
      if (!calculator) {
         var mostMatchingMethod = null;
         var mostMatchingScore = 0;

         var availableProductTypes = coverage.catalog.implementation.catalog.ProductCatalog.ProductType.ProductTypeCode;
         for(methodIndex in this.self.calculateMethods) {
            var method = this.self.calculateMethods[methodIndex];
            var productTypes = ICalculateMethod.appliedTo(method).call('formulaScope', {coverage: coverage}).productTypes;
            var formulaName = ICalculateMethod.appliedTo(method).call('formulaName', {});

            //if (coverage.proposal.enableDebug) {
            _DB('lookupCalculator by Product Types: ', '(' + formulaName + ').productTypes(' + productTypes + ') compare to catalog.availableProductTypes('
               + JSON.stringify(availableProductTypes) + ')', 'PremiumCalculatorImpl->');
            //}

            var score = 0;
            if (!Utils.isNothing(productTypes)) {
               for(typeIdx in productTypes) {
                  var found = false;
                  var productType = productTypes[typeIdx];
                  for(availableProductIndex in availableProductTypes) {
                     var avaProdType = availableProductTypes[availableProductIndex];
                     if (avaProdType.text == productType) {
                        found = true;
                        break;
                     }
                  }
                  if (found) score = score + 1;
                  //if (coverage.proposal.enableDebug) {
                  _DB('lookupCalculator by Product Types: ', '(' + formulaName + ').productType(' + productType + ') found = ' + found, 'PremiumCalculatorImpl->');
                  //}
               }
            }

            if (coverage.proposal.enableDebug) {
               var formulaName = ICalculateMethod.appliedTo(method).call('formulaName', {});
               _DB('lookupCalculator by Product Types: ', '(' + formulaName + ').productTypes(' + productTypes + ') compare to catalog.availableProductTypes('
                  + JSON.stringify(availableProductTypes) + ') = '
                  + score + ((!Utils.isNothing(productTypes) && score==productTypes.length) ? ' [MATCHED]' : ' [NOT MATCHED]'), 'PremiumCalculatorImpl->');
            }

            if (!Utils.isNothing(productTypes) && score==productTypes.length && score > mostMatchingScore) {
               mostMatchingScore = score;
               mostMatchingMethod = method;
            }
         }

         if (mostMatchingMethod) {
            calculator = mostMatchingMethod;
         }
      }

      if (calculator) {
         return ICalculateMethod.implementBy( calculator );
      } else {
         return;
      }
   },
   showFormulas: function(args) {
      for(methodIndex in this.self.calculateMethods) {
         var method = this.self.calculateMethods[methodIndex];
         var formulaName = ICalculateMethod.appliedTo(method).call('formulaName', {});
         _D("showFormulas.formulaName: ", formulaName, "PremiumCalculatorImpl->");
      }
   },
   calculate: function(args) {
      var proposal = args['proposal'];
      var policyYear = _V( args['policyYear'], 0 );
      var ipo = _V( args['ipo'], 0 );

      var basePlanPremiums = this.self.calculateCoverage({
         coverage: proposal.coverageInfo,
         policyYear: policyYear,
         ipo: ipo
      });
      proposal.coverageInfo[PublicConstants.PREMIUM_RESULT.PREMIUM_RESULT_FIELD_NAME] = basePlanPremiums;
      if (!Utils.isNothing(proposal.riders)) {
         var riderPremiums = [];
         for (var rnd=0; rnd<2; rnd++) {
            var wpRound = (rnd == 1);
            // Comment this log because we don't have variable "months"
            //_DBR("@@@@@ WP ROUND", wpRound, "PremiumCalculatorImpl->", months);
            for (var riderIndex in proposal.riders.coverageInfo) {
               var rider = proposal.riders.coverageInfo[riderIndex];
               var schema = rider.schema.call("getSchema", {});
               var freeRider = _V( _PV( schema, "ProductSchema.BasicParticular.SupportOption.FreeOfCharge"), "N" );
               var isPremiumWaiver = rider.catalog.call('isWaiver');
               if (wpRound == isPremiumWaiver) {
                  if (freeRider != "Y") {
                      var riderPremium = this.self.calculateCoverage({
                         coverage: rider,
                         policyYear: policyYear,
                         ipo: ipo
                      });
                      var riderPremiumRecord = {
                         riderCode: rider.product.productKey.primaryProduct.productPK.productId,
                         premiums: riderPremium
                      };
                      riderPremiums.push(riderPremiumRecord);
                      rider[PublicConstants.PREMIUM_RESULT.PREMIUM_RESULT_FIELD_NAME] = riderPremium;
                  }
               }
            }
         }
      }
      //if (proposal.enableDebug) {
      _DB("basePlanPremiums = ", basePlanPremiums, "PremiumCalculatorImpl->");
      _DB("riderPremiums = ", riderPremiums, "PremiumCalculatorImpl->");
      //}
      var consolidatedPremiums = {
         basePlan: basePlanPremiums,
         basePlanCode: proposal.coverageInfo.product.productKey.primaryProduct.productPK.productId,
         riders: riderPremiums
      };
      //_DB("consolidatedPremiums = ", JSON.stringify(consolidatedPremiums), "PremiumCalculatorImpl->");
      if (proposal.enableDebug) {
          console.log("consolidatedPremiums = " + JSON.stringify(consolidatedPremiums));
      }
      return consolidatedPremiums;
   },
   calculateCoverage: function(args) {
      var coverage = args["coverage"];
      var policyYear = args["policyYear"];
      var ipo = args["ipo"];

      var calculator = this.self.lookupCalculator({coverage: coverage});
      if (calculator) {
          var ppp = coverage.schema.call("calculatePremiumPayingPeriod", {coverage: coverage});
          if (policyYear > ppp) {
             return calculator.call("emptyResult", {coverage: coverage});
          } else {
             return calculator.call("calculate",
                {
                   coverage: coverage,
                   ipo: ipo,
                   context: PE.context,
                   policyYear: policyYear
                }
             );
          }
      } else {
         throw "ERROR: Premium calculator (" + coverage.product.productKey.primaryProduct.productPK.productId + "," +
            coverage.product.productKey.associateProduct.productPK.productId + "," +
            coverage.product.productKey.basicProduct.productPK.productId +
            ")  cannot be found or premium information is not defined";
      }
   }
});
var IssueAgeValidationRule = Class.define({
   ruleName: function(args) {
      return "IssueAgeValidationRule";
   },
   shouldTest: function(args) {
      return true;
   },
   scope: function(args) {
      return PublicConstants.TARGET_SCOPE.BASE_COVERAGE | PublicConstants.TARGET_SCOPE.RIDER_COVERAGE;
   },
   validate: function(args) {
      var coverage = args["coverage"];
      var productId = _PV(coverage, 'product.productKey.primaryProduct.productPK.productId');
      var catalog = coverage.catalog.call("getCatalog", null);
      var schema = coverage.schema.call("getSchema", null);
      //console.log("Base Product = " + catalog.ProductCatalog.ProductPK.ProductId.text);
      //var riderCatalog = coverage.proposal.coverageInfo.catalog.call("getCatalog", null);
      //var riderSchema = coverage.proposal.coverageInfo.schema.call("getSchema", null);
      //console.log("Rider Product = " + riderCatalog.ProductCatalog.ProductPK.ProductId.text);
      var insureds = _PV( coverage, 'parties.party' );
      if (Utils.isNothing(insureds)) {
          return {
             code: "ERRC0213",
             arguments: {"%PRODUCT_ID%" : productId}
          };
      }
      var insuredList = Utils.iterator( insureds );
      for (insuredIdx in insuredList) {
          var insured = insuredList[insuredIdx];
          var insuredAge = insured.insuredAge;
          _DB("insuredAge("+ insuredIdx + ")", insuredAge);

          var isDeclined = false;
          var minDeclineAge = 9999999999;
          var maxDeclineAge = 0;
          var minDeclAge = _PV( schema, "ProductSchema.BasicParticular.MinDeclinedAge" );
          var maxDeclAge = _PV( schema, "ProductSchema.BasicParticular.MaxDeclinedAge" );
          if (!(Utils.isNothing(minDeclAge))) {
             minDeclineAge = Math.min( minDeclineAge, Number(minDeclAge) );
          }
          if (!(Utils.isNothing(maxDeclAge))) {
             maxDeclineAge = Math.max( maxDeclineAge, Number(maxDeclAge) );
          }

          _DB("maxDeclineAge", maxDeclineAge);
          _DB("minDeclineAge", minDeclineAge);

          var a = function( v, d ) {
             if (v) return parseInt(v);
             return d;
          }

          var maxIssueAge = 0;
          var minIssueAge = 9999999999;
          if (schema) {
             maxIssueAge = Math.max( maxIssueAge, a( _PV(schema, 'ProductSchema.BasicParticular.IssueAge.Max'), maxIssueAge ) );
             minIssueAge = Math.min( minIssueAge, a( _PV(schema, 'ProductSchema.BasicParticular.IssueAge.Min'), minIssueAge ) );
          }
          var specialMaxIssueAge = a( _PV( schema, "ProductSchema.BasicParticular.specialMaxIssueAge" ), 0);

          _DB("maxIssueAge", maxIssueAge);
          _DB("minIssueAge", minIssueAge);
          _DB("specialMaxIssueAge", specialMaxIssueAge);

          if (insuredAge < minIssueAge) {
             // Error: Issue age is below the minimum.
             return {
                code: "ERRC0001",
                arguments: {"%INSURED%" : insured}
             };
          }
          if (insuredAge > maxIssueAge) {
             if (insuredAge <= specialMaxIssueAge && specialMaxIssueAge > 0) {
                // Warning: Issue age is greater than the maximum.
                return {
                   code: "ERRC0003",
                   arguments: {"%INSURED%" : insured}
                };
             } else {
                // Error: Issue age is greater than the maximum.
                return {
                   code: "ERRC0002",
                   arguments: {"%INSURED%" : insured}
                };
             }
          }
          //}

          if (coverage.schema.call("hasSupportOption", {option: SchemaConstants.SUPPORT_OPTION.DECLINED})) {
             if ((insuredAge >= minDeclineAge) && (insuredAge <= maxDeclineAge)) {
                isDeclined = true;
                // Warning: This is a declined or over-insurance case.
                return {
                   code: "ERRC0004",
                   arguments: {"%INSURED%" : insured}
                };
             }
          }

      }
   }

});

var FaceAmountValidationRule = Class.define({
   ruleName: function(args) {
      return "FaceAmountValidationRule";
   },
   shouldTest: function(args) {
      return true;
   },
   getMaxDeclinedFaceAmount: function(args) {
      var coverage = args['coverage'];
      var schema = args['schema'];
      //Currency Filter - To Do Test
      if (Utils.isNothing(schema.ProductSchema.BasicParticular.MaxDeclinedFaceAmount)) {
         return 0;
      }
      var faceAmountTable = Utils.iterator(schema.ProductSchema.BasicParticular.MaxDeclinedFaceAmount);
      for (recKey in faceAmountTable) {
         var recInfo = faceAmountTable[recKey];
         if (recInfo._Currency != null) {
            return recInfo.text;
         }
         return 0;
      }
   },
   scope: function(args) {
      return PublicConstants.TARGET_SCOPE.BASE_COVERAGE | PublicConstants.TARGET_SCOPE.RIDER_COVERAGE;
   },
   getFaceAmountLimits: function(args) {
      var coverage = args['coverage'];
      var schema = coverage.schema.call("getSchema", null);
      var productId = _PV(coverage, 'product.productKey.primaryProduct.productPK.productId');

      var primary = getPrimaryInsured({coverage: coverage});
      if (Utils.isNothing(primary)) {
         return {
            code: "ERRC0213",
            arguments: {"%PRODUCT_ID%" : productId}
         };
      }
      var insuredAge = primary.insuredAge;

      var minFA = 99989898989898.999;
      var maxFA = -99989898989898.999;
      var result = {};
      for (bandKey in schema.ProductSchema.BandInformation.BandRecord) {
         var bandRec = schema.ProductSchema.BandInformation.BandRecord[bandKey];
         if (!Utils.isNothing(bandRec.CurrencyPK)) {
            //console.log("productRules.length = " + bandRec.CurrencyPK.CurrencyId.text);
            if (coverage.currency.currencyPK.currencyId == bandRec.CurrencyPK.CurrencyId.text) {
               if (insuredAge >= Number(bandRec.MinIssueAge.text) && insuredAge <= Number(bandRec.MaxIssueAge.text)) {
                  minFA = Math.min(minFA, Number(bandRec.MinFaceAmount.text));
                  maxFA = Math.max(maxFA, Number(bandRec.MaxFaceAmount.text));
               }
            }
         }
      }

      var currencyBasedLimits = Utils.iterator( _V( _PV( schema, "ProductSchema.CurrencyBaseLimits.CurrencyLimitRecord" ), [] ) );
      var bpFaceAmount = _V( _PV( coverage, "proposal.coverageInfo.faceAmount" ) );
      var currencyId = _PV( coverage, "currency.currencyPK.currencyId" );
      _DB("currencyBasedLimits(" + productId + ")", currencyBasedLimits, "FaceAmountValidationRule->");
      _DB("currencyId", currencyId, "FaceAmountValidationRule->");
      if (!Utils.isNothing(bpFaceAmount)) {
         var minBpRatio;
         var maxBpRatio;
         var bpFA = Number( bpFaceAmount );
         for(limitRecIdx in currencyBasedLimits) {
            var limitRec = currencyBasedLimits[limitRecIdx];
            var limitRecCurrency = _V( _PV( limitRec, "CurrencyPK.CurrencyId" ) );
            var limitNature =  _V( limitRec.LimitNature );

            _DB("limitRecCurrency", limitRecCurrency, "FaceAmountValidationRule->");
            _DB("limitNature", limitNature, "FaceAmountValidationRule->");

            if (currencyId == limitRecCurrency) {
                if (limitNature == "Min") {
                    minBpRatio =  _V( limitRec.BpFaRatio );
                }
                if (limitNature == "Max") {
                    maxBpRatio =  _V( limitRec.BpFaRatio );
                }
            }
         }
         _DB("", "Face amount ratio logic", "")
         _DB("bpFA", bpFA, "FaceAmountValidationRule->");
         _DB("minBpRatio", minBpRatio, "FaceAmountValidationRule->");
         _DB("maxBpRatio", maxBpRatio, "FaceAmountValidationRule->");
         if (!Utils.isNothing(minBpRatio)) {
            minFA = Math.max(minFA, (bpFA * Number(minBpRatio)));
         }
         if (!Utils.isNothing(maxBpRatio)) {
            maxFA = Math.min(maxFA, (bpFA * Number(maxBpRatio)));
         }
         _DB("minFA", minFA, "FaceAmountValidationRule->");
         _DB("maxFA", maxFA, "FaceAmountValidationRule->");
      }

      return {minLimit: minFA, maxLimit: maxFA};
   },
   validate: function(args) {
      var coverage = args["coverage"];
      var productId = _PV(coverage, 'product.productKey.primaryProduct.productPK.productId');

      var schema = coverage.schema.call("getSchema", null);
      var catalog = coverage.catalog.call("getCatalog", null);

      var amountFA = 0;
      var isDeclined = false;
      var basicFaceAmountValid = true;
      var basicFaceAmount = 0;
      var minDeclineAge = 99989898989898.999;
      var maxDeclineAge = 0;

      basicFaceAmount = Utils.isNothing(coverage.faceAmount) ? 0 : Number(coverage.faceAmount);

      if (!(Utils.isNothing(schema.ProductSchema.BasicParticular.MinDeclineAge))) {
         minDeclineAge = Math.min(minDeclineAge, schema.ProductSchema.BasicParticular.MinDeclineAge.text);
      }
      if (!(Utils.isNothing(schema.ProductSchema.BasicParticular.MinDeclineAge))) {
         maxDeclineAge = Math.max(maxDeclineAge, schema.ProductSchema.BasicParticular.MaxDeclineAge.text);
      }

      var insureds = _PV( coverage, 'parties.party' );
      if (Utils.isNothing(insureds)) {
          return {
             code: "ERRC0213",
             arguments: {"%PRODUCT_ID%" : productId}
          };
      }

      //To Do confimation required on default min and max value
      var minFA;
      var maxFA;
      var result = this.self.getFaceAmountLimits({ coverage: coverage })
      if (!Utils.isNothing(result)) {
         minFA = result.minLimit;
         maxFA = result.maxLimit;
      }
      var insuredList = Utils.iterator( insureds );
      for (insuredIdx in insuredList) {
          var insured = insuredList[insuredIdx];
          var insuredAge = insured.insuredAge;
          _DB("insuredAge("+ insuredIdx + ")", insuredAge);

          if (coverage.schema.call("hasSupportOption", {
                option: SchemaConstants.SUPPORT_OPTION.DECLINED
             })) {
            if ((insuredAge >= minDeclineAge) && (insuredAge >= maxDeclineAge)) {
               isDeclined = true;

            }
          }
          var isCurrencySupported = (coverage.schema.call("isCurrencySupported", {
             currencyId: coverage.currency.currencyPK.currencyId
          }));

          if (isCurrencySupported) {
             //for (bandKey in schema.ProductSchema.BandInformation.BandRecord) {
             //   var bandRec = schema.ProductSchema.BandInformation.BandRecord[bandKey];
             //   if (!Utils.isNothing(bandRec.CurrencyPK)) {
             //      //console.log("productRules.length = " + bandRec.CurrencyPK.CurrencyId.text);
             //      if (coverage.currency.currencyPK.currencyId == bandRec.CurrencyPK.CurrencyId.text) {
             //         if (insuredAge >= Number(bandRec.MinIssueAge.text) && insuredAge <= Number(bandRec.MaxIssueAge.text)) {
             //            minFA = Math.min(minFA, Number(bandRec.MinFaceAmount.text));
             //            maxFA = Math.max(maxFA, Number(bandRec.MaxFaceAmount.text));
             //         }
             //      }
             //   }
             //}

             if (isDeclined) {
                maxFA = this.getMaxDeclinedFaceAmount({coverage: coverage, schema: schema});
             }

             //if (minFA + maxFA == 0) {
             if (Utils.isNothing(minFA) || Utils.isNothing(maxFA)) {
                if (basicFaceAmount > 0) {
                   basicFaceAmountValid = false;
                   //message = "Error: No face amount is required.";
                   return {
                      code: "ERRC0113",
                      arguments: {"%INSURED%" : insured, "%PRODUCT_ID%" : productId}
                   };
                }
             } else {
                if (basicFaceAmount < minFA) {
                   basicFaceAmountValid = false;
                   var variables = {"%INSURED%" : insured, "%PRODUCT_ID%" : productId};
                   //variables[PublicConstants.MESSAGE_FIELD.COVERAGE_FACE_AMOUNT] = coverage.currency.currencyPK.currencyId + coverage.faceAmount;
                   variables[PublicConstants.MESSAGE_FIELD.MINIMUM_FACE_AMOUNT] = coverage.currency.currencyPK.currencyId + minFA;
                   if (!coverage.catalog.call("isRegularSaving")) {
                      // Error: The face amount is below minimum.
                      return {
                         code: "ERRC0106",
                         arguments: variables
                      };
                   } else {
                      // M313", "Error: The Base Saving premium is below the minimum ($_).
                      return {
                         code: "ERRC0107",
                         arguments: variables
                      };
                   }
                }
                // check if the face amount is less than minimum after fa reduced
                if (coverage.reduceFaPercent > 0) {
                   if (coverage.catalog.call("isIncome3") && coverage.startAnnuityAge != null && coverage.startAnnuityAge != 0) {
                      var reduceFA = basicFaceAmount * (100 - coverage.reduceFaPercent) / 100;
                      if (reduceFA < minFA) {
                         basicFaceAmountValid = false;
                         // Error: 266 Reduced face amount is below the minimum requirement.
                         var variables = {"%INSURED%" : insured, "%PRODUCT_ID%" : productId};
                         //variables[PublicConstants.MESSAGE_FIELD.COVERAGE_FACE_AMOUNT] = coverage.currency.currencyPK.currencyId + coverage.faceAmount;
                         variables[PublicConstants.MESSAGE_FIELD.MINIMUM_FACE_AMOUNT] = coverage.currency.currencyPK.currencyId + minFA;
                         return {
                            code: "ERRC0112",
                            arguments: variables
                         };
                      }
                   }
                }
                if (basicFaceAmount > maxFA) {
                   basicFaceAmountValid = false;
                   var variables = {"%INSURED%" : insured, "%PRODUCT_ID%" : productId};
                   variables[PublicConstants.MESSAGE_FIELD.MAXIMUM_FACE_AMOUNT] = coverage.currency.currencyPK.currencyId + maxFA;
                   if (!coverage.catalog.call("isRegularSaving")) {
                      // Error: The face amount is greater than maximum.
                      return {
                         code: "ERRC0108",
                         arguments: variables
                      };
                   } else {
                      // M314", "Error: The Base Saving premium is greater than the maximum ($_).
                      return {
                         code: "ERRC0109",
                         arguments: variables
                      };
                   }
                }
             }
          } else {
             basicFaceAmountValid = false;
             if (coverage.catalog.call("isRegularSaving") || coverage.catalog.call("isUVL")) {
                // Error: The face amount cannot be check due to invalid currency entered.
                return {
                   code: "ERRC0110",
                   arguments: {"%INSURED%" : insured, "%PRODUCT_ID%" : productId}
                };
             } else {
                //M317", "Error: The Base Saving premium cannot be check due to invalid currency entered.
                return {
                   code: "ERRC0111",
                   arguments: {"%INSURED%" : insured, "%PRODUCT_ID%" : productId}
                };
             }
          }

      }
   }

});

var CurrencyValidationRule = Class.define({
   ruleName: function(args) {
      return "CurrencyValidationRule";
   },
   shouldTest: function(args) {
      return true;
   },
   scope: function(args) {
      return PublicConstants.TARGET_SCOPE.BASE_COVERAGE | PublicConstants.TARGET_SCOPE.RIDER_COVERAGE;
   },
   validate: function(args) {
      var coverage = args["coverage"];
      var productId = _PV(coverage, 'product.productKey.primaryProduct.productPK.productId');
      //var schema = coverage.schema.call("getSchema", null);
      //var catalog = coverage.catalog.call("getCatalog", null);
      if (!(Utils.isNothing(coverage)) && !(Utils.isNothing(coverage.currency)) && !(Utils.isNothing(coverage.currency.currencyPK))) {
         if (!(coverage.schema.call("isCurrencySupported", {
               currencyId: coverage.currency.currencyPK.currencyId
            }))) {
            //var variables = {};
            //variables[PublicConstants.MESSAGE_FIELD.CURRENCY] = coverage.currency.currencyPK.currencyId;
            return {
               code: "ERRC0007",
               arguments: {"%PRODUCT_ID%" : productId}
            };
         }
      }
   }
});

var PaymentModeValidationRule = Class.define({
   ruleName: function(args) {
      return "PaymentModeValidationRule";
   },
   shouldTest: function(args) {
      return true;
   },
   scope: function(args) {
      return PublicConstants.TARGET_SCOPE.BASE_COVERAGE;
   },
   validate: function(args) {
      var coverage = args["coverage"];
      var productId = _PV(coverage, 'product.productKey.primaryProduct.productPK.productId');

      if (!(Utils.isNothing(coverage)) && !(Utils.isNothing(coverage.currency)) && !(Utils.isNothing(coverage.currency.currencyPK))) {
         if (!(coverage.schema.call("isCurrencySupported", {
               currencyId: coverage.currency.currencyPK.currencyId
            }))) {
            return {
               code: "ERRC0009",
               arguments: {"%PRODUCT_ID%" : productId}
            };
         } else {
            var variables = {"%PRODUCT_ID%" : productId};
            variables[PublicConstants.MESSAGE_FIELD.CURRENCY] = coverage.currency.currencyPK.currencyId;
            variables[PublicConstants.MESSAGE_FIELD.PAYMENT_MODE] = coverage.options.paymentMode;
            if (!(coverage.schema.call("isCurrencyPaymentModeSupported", {
                  currencyId: coverage.currency.currencyPK.currencyId,
                  paymentMode: coverage.options.paymentMode
               }))) {
               return {
                  code: "ERRC0010",
                  arguments: variables
               };
            }
         }
      }
   }
});

var IssuedCountValidationRule = Class.define({
   ruleName: function(args) {
      return "IssuedCountValidationRule";
   },
   shouldTest: function(args) {
      return true;
   },
   scope: function(args) {
      return PublicConstants.TARGET_SCOPE.BASE_COVERAGE;
   },
   validate: function(args) {
      var coverage = args["coverage"];
      var productId = _PV(coverage, 'product.productKey.primaryProduct.productPK.productId');
      //Clarification Required on parties struture
      var insureds = _PV( coverage, 'parties.party' );
      if (Utils.isNothing(insureds)) {
          return {
             code: "ERRC0213",
             arguments: {"%PRODUCT_ID%" : productId}
          };
      }
      var insuredList = Utils.iterator(insureds);
      if (coverage.catalog.call("isJoinLife", null)) {
         if (insuredList.length != 2) {
             return {
                code: "ERRC0011",
                arguments: {"%PRODUCT_ID%" : productId}
             };
         }
      } else {
         if (insuredList.length != 1) {
             return {
                code: "ERRC0012",
                arguments: {"%PRODUCT_ID%" : productId}
             };
         }
      }
   }
});

var InsuredSexValidationRule = Class.define({
   ruleName: function(args) {
      return "InsuredSexValidationRule";
   },
   shouldTest: function(args) {
      return true;
   },
   scope: function(args) {
      return PublicConstants.TARGET_SCOPE.BASE_COVERAGE | PublicConstants.TARGET_SCOPE.RIDER_COVERAGE;
   },
   validate: function(args) {
      var coverage = args["coverage"];
      var productId = _PV(coverage, 'product.productKey.primaryProduct.productPK.productId');
      var schema = coverage.schema.call("getSchema", null);

      var insureds = _PV( coverage, 'parties.party' );
      if (Utils.isNothing(insureds)) {
          return {
             code: "ERRC0213",
             arguments: {"%PRODUCT_ID%" : productId}
          };
      }
      var insuredList = Utils.iterator( insureds );
      for (insuredIdx in insuredList) {
         var insured = insuredList[insuredIdx];
         var insuredSex = insured.insuredSex;
         _DB("insuredSex("+ insuredIdx + ")", insuredSex);

         if (!(coverage.schema.call("isInsuredSexSupported", { gender: insuredSex }))) {
            return {
               code: "ERRC0013",
               arguments: {"%INSURED%" : insured, "%PRODUCT_ID%" : productId}
            };
         }
      }
   }
});

var InsuredSmokingStatusValidationRule = Class.define({
   ruleName: function(args) {
      return "InsuredSmokingStatusValidationRule";
   },
   shouldTest: function(args) {
      return true;
   },
   scope: function(args) {
      return PublicConstants.TARGET_SCOPE.BASE_COVERAGE;
   },
   getJuvenileAge: function(args) {
      var location = args['location'];
      if ((location == CatalogConstants.LOCATION.HONGKONG) || (location == CatalogConstants.LOCATION.MACAU) || (location == CatalogConstants.LOCATION.CHINA))
         return 15;
      else
      if (location == CatalogConstants.LOCATION.SINGAPORE)
         return 17;
      else
         return 15; // default
   },
   performAggregateSmokingStatusChecking: function(args) {
      var coverage = args["coverage"];
      var insured = args['insured'];
      var insuredAge = args['insuredAge'];
      var smokingStatus = args['smokingStatus'];

      var productId = _PV(coverage, 'product.productKey.primaryProduct.productPK.productId');
      var schema = coverage.schema.call("getSchema", null);

      var location = _PV( coverage, ['product','productKey','location'] );
      var juvenileAge = this.self.getJuvenileAge({ location: location });

      var variables = {"%INSURED%" : insured, "%PRODUCT_ID%" : productId};
      variables[PublicConstants.MESSAGE_FIELD.SMOKING_STATUS] = "" + smokingStatus;

      if ((coverage.schema.call("isInsuredSmokingStatusSupported", { smokingStatus: InterfaceConstants.SMOKING_STATUS.AGGREGATE }))) {
         if (insuredAge > juvenileAge) {
            if (smokingStatus == InterfaceConstants.SMOKING_STATUS.AGGREGATE) {
               // message = "Error: Smoking status is not supported for age 16 or above.";
               return {
                  code: "ERRC0016",
                  arguments: variables
               };
            }
         } else {
            // 0-15
            if (smokingStatus != InterfaceConstants.SMOKING_STATUS.AGGREGATE) {
               return {
                  code: "ERRC0017",
                  arguments: variables
               };
            }
         }
      } else {
         // std, non smoke
         if (coverage.schema.call("hasSupportOption", { option: SchemaConstants.SUPPORT_OPTION.JUVENILE })) {
            if (smokingStatus != InterfaceConstants.SMOKING_STATUS.AGGREGATE) {
               if (insuredAge <= juvenileAge) {
                  return {
                     code: "ERRC0017",
                     arguments: variables
                  };
               }
            }
         }
      }
   },
   validate: function(args) {
      var coverage = args["coverage"];
      var productId = _PV(coverage, 'product.productKey.primaryProduct.productPK.productId');
      var schema = coverage.schema.call("getSchema", null);

      var insureds = _PV( coverage, 'parties.party' );
      if (Utils.isNothing(insureds)) {
          return {
             code: "ERRC0213",
             arguments: {"%PRODUCT_ID%" : productId}
          };
      }
      var insuredList = Utils.iterator( insureds );
      for (insuredIdx in insuredList) {
         var insured = insuredList[insuredIdx];
         var insuredAge = insured.insuredAge;
         var smokingStatus = insured.smokingStatus;
         _DB("insuredAge("+ insuredIdx + ")", insuredAge);
         _DB("smokingStatus("+ insuredIdx + ")", smokingStatus);

         var variables = {"%INSURED%" : insured, "%PRODUCT_ID%" : productId};
         variables[PublicConstants.MESSAGE_FIELD.SMOKING_STATUS] = "" + smokingStatus;

         if (!(coverage.schema.call("isInsuredSmokingStatusSupported", {
               smokingStatus: smokingStatus
            }))) {
            return {
               code: "ERRC0015",
               arguments: variables
            };
         } else {
            return this.self.performAggregateSmokingStatusChecking({coverage: coverage, insured: insured, insuredAge: insuredAge, smokingStatus: smokingStatus});
         }
      }
   }
});

var WaitingPeriodValidationRule = Class.define({
   ruleName: function(args) {
      return "WaitingPeriodValidationRule";
   },
   shouldTest: function(args) {
      return true;
   },
   scope: function(args) {
      return PublicConstants.TARGET_SCOPE.BASE_COVERAGE | PublicConstants.TARGET_SCOPE.RIDER_COVERAGE;
   },
   validate: function(args) {
      var coverage = args["coverage"];
      var productId = _PV(coverage, 'product.productKey.primaryProduct.productPK.productId');
      var schema = coverage.schema.call("getSchema", null);
      if (coverage.schema.call("hasSupportOption", {
            option: SchemaConstants.SUPPORT_OPTION.WAITPERIOD
         })) {
         if ((!Utils.isNothing(coverage.otherOptions)) && !(Utils.isNothing(coverage.otherOptions.waitingPeriod))) {
            if (!(coverage.otherOptions.waitingPeriod == SchemaConstants.WAITING_PERIOD.WP_30DAYS || coverage.otherOptions.waitingPeriod == SchemaConstants.WAITING_PERIOD.WP_90DAYS || coverage.otherOptions.waitingPeriod == SchemaConstants.WAITING_PERIOD.WP_180DAYS || coverage.otherOptions.waitingPeriod == SchemaConstants.WAITING_PERIOD.WP_365DAYS)) {
               return {
                  // Error: No wait period is set.
                  code: "ERRC0018",
                  arguments: {"%PRODUCT_ID%" : productId}
               };
            }
            var variables = {"%PRODUCT_ID%" : productId};
            variables[PublicConstants.MESSAGE_FIELD.WAITING_PERIOD] = coverage.otherOptions.waitingPeriod;
            if (!(coverage.schema.call("isWaitPeriodSupported", {
                  waitPeriod: coverage.otherOptions.waitingPeriod
               }))) {
               //message = "Error: It does not support wait period " + modeStr + ".";
               return {
                  code: "ERRC0031",
                  arguments: variables
               };
            }
         }

      } else {
         if ((!Utils.isNothing(coverage.otherOptions)) && !(Utils.isNothing(coverage.otherOptions.waitingPeriod))) {
            //message = "Error: It does not support any wait period.";
            return {
               code: "ERRC0032",
               arguments: {"%PRODUCT_ID%" : productId}
            };
         }
      }

   }
});

var BenefitPeriodValidationRule = Class.define({
   ruleName: function(args) {
      return "BenefitPeriodValidationRule";
   },
   shouldTest: function(args) {
      return true;
   },
   scope: function(args) {
      return PublicConstants.TARGET_SCOPE.BASE_COVERAGE | PublicConstants.TARGET_SCOPE.RIDER_COVERAGE;
   },
   validate: function(args) {
      var coverage = args["coverage"];
      var productId = _PV(coverage, 'product.productKey.primaryProduct.productPK.productId');
      var schema = coverage.schema.call("getSchema", null);
      if (coverage.schema.call("hasSupportOption", {
            option: SchemaConstants.SUPPORT_OPTION.BENEFITPERIOD
         })) {
         if ((!Utils.isNothing(coverage.otherOptions)) && !(Utils.isNothing(coverage.otherOptions.benefitPeriod))) {
            if (!(coverage.otherOptions.benefitPeriod == SchemaConstants.BENEFIT_PERIOD.BP_5YEARS || coverage.otherOptions.benefitPeriod == SchemaConstants.BENEFIT_PERIOD.BP_10YEARS || coverage.otherOptions.benefitPeriod == SchemaConstants.BENEFIT_PERIOD.BP_15YEARS || coverage.otherOptions.benefitPeriod == SchemaConstants.BENEFIT_PERIOD.BP_AGE65)) {
               return {
                  code: "ERRC0019",
                  arguments: {"%PRODUCT_ID%" : productId}
               };
            }

            if (!(coverage.schema.call("isBenefitPeriodSupported", {
                  benefitPeriod: coverage.otherOptions.benefitPeriod
               }))) {

               var variables = {"%PRODUCT_ID%" : productId};
               variables[PublicConstants.MESSAGE_FIELD.BENEFIT_PERIOD] = coverage.otherOptions.benefitPeriod;
               if (coverage.otherOptions.benefitPeriod == SchemaConstants.BENEFIT_PERIOD.BP_AGE65) {
                  return {
                     code: "ERRC0029",
                     arguments: variables
                  };
               } else {
                  return {
                     code: "ERRC0028",
                     arguments: variables
                  };
               }
            }
         }

      } else {
         //If not support but selected
         if ((!Utils.isNothing(coverage.otherOptions)) && !(Utils.isNothing(coverage.otherOptions.benefitPeriod))) {
            return {
               code: "ERRC0030",
               arguments: {"%PRODUCT_ID%" : productId}
            };
         }
      }

   }
});

var InitialDumpInValidationRule = Class.define({
   ruleName: function(args) {
      return "InitialDumpInValidationRule";
   },
   shouldTest: function(args) {
      return true;
   },
   scope: function(args) {
      return PublicConstants.TARGET_SCOPE.BASE_COVERAGE;
   },
   minDumpinAmount: function(args) {
      var result = null;

      var schema = args['schema'];
      var coverage = args['coverage'];
      var minInitialDumpin = schema.ProductSchema.BasicParticular.MinInitialDumpin;
      if (minInitialDumpin) {
          var iterMinInitialDumpin = Utils.iterator(minInitialDumpin);
          for(dpIdx in iterMinInitialDumpin) {
              var minInitDumpinRec = iterMinInitialDumpin[dpIdx];
              if (minInitialDumpin.currency) {
                  if (minInitialDumpin.currency == coverage.currency.currencyPK.currencyId) {
                      result = Number(minInitDumpinRec.text);
                      break;
                  }
              }
          }
      }
      var currencyLimits = schema.ProductSchema.CurrencyBaseLimits.CurrencyLimitRecord;
      if (currencyLimits) {
          var iterCurrencyLimits = Utils.iterator(currencyLimits);
          for(limitIdx in iterCurrencyLimits) {
              var currencyLimitRec = iterCurrencyLimits[limitIdx];
              if (currencyLimitRec.LimitNature.text == "Min") {
                  if (currencyLimitRec.CurrencyPK.CurrencyId.text) {
                      if (currencyLimitRec.CurrencyPK.CurrencyId.text == coverage.currency.currencyPK.currencyId) {
                          result = Number( currencyLimitRec.InitialDumpin.text );
                          break;
                      }
                  }
              }
          }
      }

      return result;
   },
   maxDumpinAmount: function(args) {
      var result = null;

      var schema = args['schema'];
      var coverage = args['coverage'];
      var maxInitialDumpin = schema.ProductSchema.BasicParticular.MaxInitialDumpin;
      if (maxInitialDumpin) {
          var iterMaxInitialDumpin = Utils.iterator(maxInitialDumpin);
          for(dpIdx in iterMaxInitialDumpin) {
              var maxInitDumpinRec = iterMaxInitialDumpin[dpIdx];
              if (maxInitialDumpin.currency) {
                  if (maxInitialDumpin.currency == coverage.currency.currencyPK.currencyId) {
                      result = Number(maxInitDumpinRec.text);
                      break;
                  }
              }
          }
      }
      var currencyLimits = schema.ProductSchema.CurrencyBaseLimits.CurrencyLimitRecord;
      if (currencyLimits) {
          var iterCurrencyLimits = Utils.iterator(currencyLimits);
          for(limitIdx in iterCurrencyLimits) {
              var currencyLimitRec = iterCurrencyLimits[limitIdx];
              if (currencyLimitRec.LimitNature.text == "Max") {
                  if (currencyLimitRec.CurrencyPK.CurrencyId.text) {
                      if (currencyLimitRec.CurrencyPK.CurrencyId.text == coverage.currency.currencyPK.currencyId) {
                          result = Number( currencyLimitRec.InitialDumpin.text );
                          break;
                      }
                  }
              }
          }
      }

      return result;
   },
   validate: function(args) {
      var coverage = args["coverage"];
      var productId = _PV(coverage, 'product.productKey.primaryProduct.productPK.productId');

      var schema = coverage.schema.call("getSchema", null);
      var catalog = coverage.catalog.call("getCatalog", null);
      if ((coverage.catalog.call("isUVL"))) {
         if (!(Utils.isNothing(coverage)) && !(Utils.isNothing(coverage.initialDumpIn))) {
            //if ((coverage.initialDumpIn) > 0 || coverage.catalog.call("isSinglePremium")) {
            if (coverage.initialDumpIn != 0) {

               if (!(coverage.schema.call("isCurrencySupported", {
                     currencyId: coverage.currency.currencyPK.currencyId
                  }))) {
                  return {
                     code: "ERRC0021",
                     arguments: {"%PRODUCT_ID%" : productId}
                  };
               } else {
                  // min dump , max dump validation
                  //var minDumpIn = schema.ProductSchema.BasicParticular.MinInitialDumpin.text;
                  //var maxDumpIn = schema.ProductSchema.BasicParticular.MaxInitialDumpin.text;

                  var minDumpIn = this.self.minDumpinAmount({coverage:coverage, schema:schema});
                  //if (minDumpIn == null) throw "Minimum dump-in setting is not available in schema.";
                  var maxDumpIn = this.self.maxDumpinAmount({coverage:coverage, schema:schema});
                  //if (maxDumpIn == null) throw "Maximum dump-in setting is not available in schmea";

                  if (!Utils.isNothing(minDumpIn) && !Utils.isNothing(maxDumpIn)) {
                     if ((coverage.initialDumpIn) < minDumpIn) {
                        var variables = {"%PRODUCT_ID%" : productId};
                        variables[PublicConstants.MESSAGE_FIELD.MINIMUM_INITIAL_TOP_UP] =
                           coverage.currency.currencyPK.currencyId + " " + minDumpIn;
                        if (coverage.catalog.call("isSinglePremium")) {
                           //"Error: Basic Single Premium is below the minimum requirement."
                           return {
                              code: "ERRC0044",
                              arguments: variables
                           };
                        } else if (coverage.catalog.call("isRegularSaving") || coverage.catalog.call("isUVL")) {
                           //var variables = {"%PRODUCT_ID%" : productId};
                           //variables[PublicConstants.MESSAGE_FIELD.MINIMUM_INITIAL_TOP_UP] = minDumpIn;
                           //"Error: Initial Top-up Premium is below the minimum ($_)."
                           return {
                              code: "ERRC0046",
                              arguments: variables
                           };
                        }
                     }
                     if ((coverage.initialDumpIn) > maxDumpIn) {
                        var variables = {"%PRODUCT_ID%" : productId};
                        variables[PublicConstants.MESSAGE_FIELD.MAXIMUM_INITIAL_TOP_UP] =
                           coverage.currency.currencyPK.currencyId + " " + maxDumpIn;
                        if (coverage.catalog.call("isSinglePremium")) {
                           //"Error: Initial Subscription (Initial Dump-in) is above the maximum requirement."
                           return {
                              code: "ERRC0045",
                              arguments: variables
                           };
                        } else if (coverage.catalog.call("isRegularSaving") || coverage.catalog.call("isUVL")) {
                           //var variables = {"%PRODUCT_ID%" : productId};
                           //variables[PublicConstants.MESSAGE_FIELD.MAXIMUM_INITIAL_TOP_UP] = maxDumpIn;
                           //"Error: Initial Top-up Premium is above the maximum ($_)."
                           return {
                              code: "ERRC0047",
                              arguments: variables
                           };
                        }

                     }

                  }
               }

            }
         }
      } else {
         if (!(Utils.isNothing(coverage)) && !(Utils.isNothing(coverage.initialDumpIn))) {
            if (Utils.isNothing(coverage.initialDumpIn) > 0) {
               return {
                  code: "ERRC0020",
                  arguments: {"%PRODUCT_ID%" : productId}
               };
            }
         }
      }

   }
});

var CouponValidationRule = Class.define({
   ruleName: function(args) {
      return "CouponValidationRule";
   },
   shouldTest: function(args) {
      return true;
   },
   scope: function(args) {
      return PublicConstants.TARGET_SCOPE.BASE_COVERAGE;
   },
   validate: function(args) {
      var coverage = args["coverage"];
      var productId = _PV(coverage, 'product.productKey.primaryProduct.productPK.productId');

      var schema = coverage.schema.call("getSchema", null);
      if ((!Utils.isNothing(coverage.options)) && !(Utils.isNothing(coverage.options.PO))) {
         if (coverage.options.PO == InterfaceConstants.OPTION_PO.PO_W_COUPON) {
            if (!(coverage.catalog.call("isCoupon"))) {
               return {
                  //Coupon is not supported.
                  code: "ERRC0022",
                  arguments: {"%PRODUCT_ID%" : productId}
               };
            } else {
               if (!coverage.schema.call("hasSupportOption", {
                     option: SchemaConstants.SUPPORT_OPTION.PO_W_COUPON
                  })) {
                  return {
                     //"PO with Coupon is not allowed."
                     code: "ERRC0023",
                     arguments: {"%PRODUCT_ID%" : productId}
                  };
               }
               if ((!Utils.isNothing(coverage.options)) && !(Utils.isNothing(coverage.options.prePayment))) {
                  if (coverage.options.prePayment == "Y") {
                     return {
                        //"PO with Coupon is not allowed with Prepayment."
                        code: "ERRC0024",
                        arguments: {"%PRODUCT_ID%" : productId}
                     };
                  }
               }
            }
         } else {
            if (coverage.options.PO == InterfaceConstants.OPTION_PO.PO_W_COUPON_N) {
               if (!(coverage.catalog.call("isCoupon"))) {
                  return {
                     //Coupon is not supported.
                     code: "ERRC0022",
                     arguments: {"%PRODUCT_ID%" : productId}
                  };
               }
            }
         }
      }
   }
});

var POValidationRule = Class.define({
   ruleName: function(args) {
      return "POValidationRule";
   },
   shouldTest: function(args) {
      return true;
   },
   getFundActivitySize: function(coverage) {
      if (!Utils.isNothing(coverage.proposal.fundActivities) && !Utils.isNothing(coverage.proposal.fundActivities.fundActivity)) {
         var fundActivityTable = Utils.iterator(coverage.proposal.fundActivities.fundActivity);
         return fundActivityTable.length;
      }
      return 0;
   },
   scope: function(args) {
      return PublicConstants.TARGET_SCOPE.BASE_COVERAGE;
   },
   validate: function(args) {
      var coverage = args["coverage"];
      var productId = _PV(coverage, 'product.productKey.primaryProduct.productPK.productId');

      var schema = coverage.schema.call("getSchema", null);
      if ((!Utils.isNothing(coverage.options)) && !(Utils.isNothing(coverage.options.PO)) && (coverage.options.PO == "Y")) {
         if (!coverage.schema.call("hasSupportOption", {
               option: SchemaConstants.SUPPORT_OPTION.PO
            })) {
            return {
               //"The Premium Offset is not supported."
               code: "ERRC0025",
               arguments: {"%PRODUCT_ID%" : productId}
            };
         } else {
            if (coverage.catalog.call("isUVL")) {

               if (this.getFundActivitySize(coverage) > 0) {
                  return {
                     //"The Premium Offset is not available with Fund Activities."
                     code: "ERRC0026",
                     arguments: {"%PRODUCT_ID%" : productId}
                  };
               }
            } else {
               if (coverage.options.dividendOption != InterfaceConstants.OPTION_DIVIDEND.DVD_ACCUMULATED_DIVIDEND) {
                  return {
                     //"The Premium Offset supports Accumulated Dividend option only."
                     code: "ERRC0027",
                     arguments: {"%PRODUCT_ID%" : productId}
                  };
               }
            }
         }
      }
   }
});

var IPOValidationRule = Class.define({
   ruleName: function(args) {
      return "IPOValidationRule";
   },
   shouldTest: function(args) {
      return true;
   },
   scope: function(args) {
      return PublicConstants.TARGET_SCOPE.BASE_COVERAGE;
   },
   validate: function(args) {
      var coverage = args["coverage"];
      var productId = _PV(coverage, 'product.productKey.primaryProduct.productPK.productId');

      var schema = coverage.schema.call("getSchema", null);
      if ((!Utils.isNothing(coverage.options)) && !(Utils.isNothing(coverage.options.IPO)) && (coverage.options.IPO == "Y")) {
         if (!coverage.schema.call("hasSupportOption", {
               option: SchemaConstants.SUPPORT_OPTION.IPO
            })) {
            return {
               //"IPO is not supported."
               code: "ERRC0033",
               arguments: {"%PRODUCT_ID%" : productId}
            };
         } else {
            var insureds = _PV( coverage, 'parties.party' );
            if (Utils.isNothing(insureds)) {
                return {
                   code: "ERRC0213",
                   arguments: {"%PRODUCT_ID%" : productId}
                };
            }
            var insuredList = Utils.iterator( insureds );
            for (insuredIdx in insuredList) {
               var insured = insuredList[insuredIdx];
               var insuredAge = insured.insuredAge;
               _DB("insuredAge("+ insuredIdx + ")", insuredAge);

               var variables = {"%PRODUCT_ID%" : productId};
               variables[PublicConstants.MESSAGE_FIELD.MAXIMUM_BASIC_IPO_ISSUE_AGE] = "" + Number(schema.ProductSchema.BasicParticular.MaxBasicIPOIssueAge.text);
               variables[PublicConstants.MESSAGE_FIELD.MINIMUM_BASIC_IPO_ISSUE_AGE] = "" + Number(schema.ProductSchema.BasicParticular.MinBasicIPOIssueAge.text);
               if (insuredAge > Number(schema.ProductSchema.BasicParticular.MaxBasicIPOIssueAge.text)) {
                  return {
                     // "IPO is not supported for age over " + psVO.getBasicParticular().getMaxBasicIPOIssueAge() + "."
                     code: "ERRC0034",
                     arguments: variables
                  };
               } else if (insuredAge < Number(schema.ProductSchema.BasicParticular.MinBasicIPOIssueAge.text)) {
                  return {
                     //"IPO is not supported for age below " + psVO.getBasicParticular().getMaxBasicIPOIssueAge() + ".
                     code: "ERRC0034",
                     arguments: variables
                  };
               }

            }
         }
         if (coverage.schema.call("hasExtraRating", {coverage: coverage})) {
            return {
               //IPO is not supported due to extra rating.
               code: "ERRC0036",
               arguments: {"%PRODUCT_ID%" : productId}
            };
         }
      } else {
         if (coverage.schema.call("hasExtraRating", {
               coverage: coverage
            })) {
            if (!coverage.schema.call("hasSupportOption", {
                  option: SchemaConstants.SUPPORT_OPTION.EXTRA_RATING
               })) {
               return {
                  // Error: It does not support extra rating.
                  code: "ERRC0037",
                  arguments: {"%PRODUCT_ID%" : productId}
               };
            } else {
               //TO DO- check condition
               if (coverage.extraRating.tempFlatDuration > 0 && coverage.extraRating.tempFlat == "0.0") {
                  return {
                     // Error: The temp flat duration is not set.
                     code: "ERRC0038",
                     arguments: {"%PRODUCT_ID%" : productId}
                  };
               }
               if (coverage.extraRating.tempFlatDuration == 0 && coverage.extraRating.tempFlat > 0) {
                  return {
                     // Error: The temp flat rate is not set.
                     code: "ERRC0039",
                     arguments: {"%PRODUCT_ID%" : productId}
                  };
               }
               // compatible logic - clarification required
               if (coverage.extraRating.tempPercentageDuration > 0 && coverage.extraRating.tempPercentage < 1) {
                  return {
                     // Error: The temp percentage rate is not set.
                     code: "ERRC0040",
                     arguments: {"%PRODUCT_ID%" : productId}
                  };
               }
               if (coverage.extraRating.tempPercentageDuration == 0 && coverage.extraRating.tempPercentage > 1) {
                  return {
                     // Error: The temp percentage duration is not set.
                     code: "ERRC0041",
                     arguments: {"%PRODUCT_ID%" : productId}
                  };
               }

               // Error: The temp extra duration cannot over premium duration.
               var premiumPayingPeriod = coverage.schema.call("calculatePremiumPayingPeriod", {
                  coverage: coverage
               })
               if (coverage.extraRating.tempFlatDuration > premiumPayingPeriod || coverage.extraRating.tempPercentageDuration > premiumPayingPeriod) {
                  return {
                     code: "ERRC0042",
                     arguments: {"%PRODUCT_ID%" : productId}
                  };

               }
               // compatible logic - clarification required
               if (coverage.extraRating.percentageExtra < 1) {
                  var variables = {"%PRODUCT_ID%" : productId};
                  variables[PublicConstants.MESSAGE_FIELD.PRODUCT_ID] = coverage.product.productKey.primaryProduct.productPK.productId;
                  return {
                     // 259 Error: Percentage extra for $_ must be greater than 1 or equal to 1.
                     code: "ERRC0043",
                     arguments: variables
                  };
               }
            }

         }
      }
   }
});

var OccupationClassValidationRule = Class.define({
   ruleName: function(args) {
      return "OccupationClassValidationRule";
   },
   shouldTest: function(args) {
      return true;
   },
   scope: function(args) {
      return PublicConstants.TARGET_SCOPE.BASE_COVERAGE | PublicConstants.TARGET_SCOPE.RIDER_COVERAGE;
   },
   validate: function(args) {
      var coverage = args["coverage"];
      var productId = _PV(coverage, 'product.productKey.primaryProduct.productPK.productId');

      var schema = coverage.schema.call("getSchema", null);
      if (coverage.schema.call("hasSupportOption", {
            option: SchemaConstants.SUPPORT_OPTION.OCCUPATION
         })) {

         if (Utils.isNothing(coverage.occupation)) {
            return {
               // Error: No occupation class is set.
               code: "ERRC0048",
               arguments: {"%PRODUCT_ID%" : productId}
            };
         }

         var validOccupations = Utils.iterator( _V( _PV(schema, 'ProductSchema.BasicParticular.SupportOccupationClass.OccupationClass'), [] ) );
         if (!Utils.isNothing(coverage.occupation)) {
            var variables = {"%PRODUCT_ID%" : productId};
            variables[PublicConstants.MESSAGE_FIELD.OCCUPATION] = "" + coverage.occupation;

            var matched = false;
            for(i in validOccupations) {
               if (coverage.occupation == _V(validOccupations[i])) {
                   matched = true;
                   break;
               }
            }

            if (!matched) {
               //"Error: It does not support occupation class CLASS $_."
               return {
                  code: "ERRC0050",
                  arguments: variables
               };
            }
         }
      } else {
         if (!Utils.isNothing(coverage.occupation)) {
            return {
               //"Error: It does not support occupation class."
               code: "ERRC0049",
               arguments: {"%PRODUCT_ID%" : productId}
            };
         }
      }
   }
});

var PremiumDiscountValidationRule = Class.define({
   ruleName: function(args) {
      return "PremiumDiscountValidationRule";
   },
   shouldTest: function(args) {
      return true;
   },
   scope: function(args) {
      return PublicConstants.TARGET_SCOPE.BASE_COVERAGE | PublicConstants.TARGET_SCOPE.RIDER_COVERAGE;
   },
   validate: function(args) {
      var coverage = args["coverage"];
      var productId = _PV(coverage, 'product.productKey.primaryProduct.productPK.productId');

      var schema = coverage.schema.call("getSchema", null);
      var variables = {"%PRODUCT_ID%" : productId};
      if (!Utils.isNothing(coverage.discountType)) {
         var errCode = "ERRC0052";
         variables[PublicConstants.MESSAGE_FIELD.PREMIUM_DISCOUNT] = coverage.discountType;
         if (coverage.discountType == SchemaConstants.PREMIUM_DISCOUNT.AGE_DISCOUNT) {
            errCode = "ERRC0052";
         } else if (coverage.discountType == SchemaConstants.PREMIUM_DISCOUNT.AMOUNT_DISCOUNT) {
            errCode = "ERRC0053";
         } else if (coverage.discountType == SchemaConstants.PREMIUM_DISCOUNT.RATE_DISCOUNT) {
            errCode = "ERRC0054";
         } else if (coverage.discountType == SchemaConstants.PREMIUM_DISCOUNT.PERCENTAGE_DISCOUNT) {
            errCode = "ERRC0055";
         }


         if (coverage.schema.call("hasSupportOption", {
               option: SchemaConstants.SUPPORT_OPTION.HAS_PREMIUM_DISCOUNT
            })) {
            // TO DO logic is not correct : same werror messages
            if (!(coverage.schema.call("isPremiumDiscountSupported", {
                  discountType: coverage.discountType
               }))) {
               return {
                  //"Error: Age Discount is not allowed for $_."
                  //"Error: Amount Discount is not allowed for $_."
                  //"Error: Rate Discount is not allowed for $_."
                  //"Error: Percentage Discount is not allowed for $_."
                  code: errCode,
                  arguments: variables
               };
            }
         } else {
            return {
               //"Error: Age Discount is not allowed for $_."
               //"Error: Amount Discount is not allowed for $_."
               //"Error: Rate Discount is not allowed for $_."
               //"Error: Percentage Discount is not allowed for $_."
               code: errCode,
               arguments: variables
            };
         }
      }

   }
});

var PayorAgeValidationRule = Class.define({
   ruleName: function(args) {
      return "PayorAgeValidationRule";
   },
   shouldTest: function(args) {
      return true;
   },
   scope: function(args) {
      return PublicConstants.TARGET_SCOPE.RIDER_COVERAGE;
   },
   isAcceptableAgeGap: function(args) {
      var ageRelationType = args['ageRelationType'];
      var insuredAge = args['insuredAge'];
      var coverage = args['coverage'];
      var schema = args['schema'];

      var errorCode = "";
      var ageGap = coverage.payerAge - insuredAge;

      var dependencyTbl = null;
      if (schema.ProductSchema.Dependency) {
         if (schema.ProductSchema.Dependency.AgeRelationRecord) {
            dependencyTbl = schema.ProductSchema.Dependency.AgeRelationRecord;
         }
      }
      if (schema.ProductSchema.AgeDependency) {
         if (schema.ProductSchema.AgeDependency.AgeRelationRecord) {
            dependencyTbl = schema.ProductSchema.AgeDependency.AgeRelationRecord;
         }
      }
      if (Utils.isNothing(dependencyTbl)) {
         return errorCode;
      } else {
         var ageRelTable = Utils.iterator(dependencyTbl);

         if (ageRelTable.length == 0 && coverage.payerAge > 0) {
            return errorCode;
         }

         for (recKey in ageRelTable) {
            var rec = ageRelTable[recKey];
            if (ageRelationType.equalsIgnoreCase(rec.Type.text)) {
               if (coverage.payerAge < _V(rec.MinAge)) {
                  return "ERRC0151";
               }
               if (coverage.payerAge > _V(rec.MaxAge)) {
                  return "ERRC0152";
               }
               if (ageGap < _V(rec.MinAgeGap)) {
                  return "ERRC0153";
               }
               if (ageGap < _V(rec.MaxAgeGap)) {
                  return "ERRC0154";
               }
            }
         }
         return errorCode;
      }
   },

   validate: function(args) {
      var coverage = args["coverage"];
      var productId = _PV(coverage, 'product.productKey.primaryProduct.productPK.productId');

      var schema = coverage.schema.call("getSchema", null);
      if (!Utils.isNothing(coverage.payerAge) && Number(coverage.payerAge) == 0) {
         if (coverage.schema.call("hasSupportOption", {
               option: SchemaConstants.SUPPORT_OPTION.PAYOR_REQUIRED
            })) {
            return {
               //"The payor age must be entered and greater than zero
               code: "ERRC0157",
               arguments: {"%PRODUCT_ID%" : productId}
            };
         }
      } else if (!Utils.isNothing(coverage.payerAge) && Number(coverage.payerAge) > 0) {
         if (!coverage.schema.call("hasSupportOption", {
               option: SchemaConstants.SUPPORT_OPTION.PAYOR_REQUIRED
            })) {
            return {
               //"TThe payor age is not required
               code: "ERRC0156",
               arguments: {"%PRODUCT_ID%" : productId}
            };
         } else if (!Utils.isNothing(coverage.payerAge) && Number(coverage.payerAge) > 0) {
      var insureds = _PV( coverage, 'parties.party' );
           if (Utils.isNothing(insureds)) {
               return {
                  code: "ERRC0213",
                  arguments: {"%PRODUCT_ID%" : productId}
               };
           }
           var insuredList = Utils.iterator( insureds );
           for (insuredIdx in insuredList) {
               var insured = insuredList[insuredIdx];
               var insuredAge = insured.insuredAge;
               _DB("insuredAge("+ insuredIdx + ")", insuredAge);

               var errorCode = this.self.isAcceptableAgeGap({
                    ageRelationType: SchemaConstants.AGE_RELATION_TYPE.PAYOR,
                    insuredAge: Number(insuredAge),
                    coverage: coverage,
                    schema: schema
               });
               if (errorCode != "") {
                  return {
                     code: errorCode,
                     arguments: {"%PRODUCT_ID%" : productId}
                  };
               }
            }
         }
      }
   }
});

var BillingMethodValidationRule = Class.define({
   ruleName: function(args) {
      return "BillingMethodValidationRule";
   },
   shouldTest: function(args) {
      return true;
   },
   scope: function(args) {
      return PublicConstants.TARGET_SCOPE.BASE_COVERAGE;
   },
   validate: function(args) {
      var coverage = args["coverage"];
      var productId = _PV(coverage, 'product.productKey.primaryProduct.productPK.productId');

      var schema = coverage.schema.call("getSchema", null);
      if ((!Utils.isNothing(coverage.options)) && !(Utils.isNothing(coverage.options.billingMethod))) {
         if (coverage.options.billingMethod.equalsIgnoreCase(SchemaConstants.BILLING_MODE.PDF)) {

            if (!coverage.schema.call("hasSupportOption", {
                  option: SchemaConstants.SUPPORT_OPTION.PDF
               })) {
               return {
                  //"PDF is not supported."
                  code: "ERRC0066",
                  arguments: {"%PRODUCT_ID%" : productId}
               };
            } else {
               //
               if (coverage.options.paymentMode != SchemaConstants.PAYMENT_MODE.ANNUAL) {
                  // Error: Only ANNUAL mode support PDF.
                  return {
                     code: "ERRC0067",
                     arguments: {"%PRODUCT_ID%" : productId}
                  };
               }

               if (coverage.noOfInstallmentYear > 0) {
                  var premiumPayingPeriod = (coverage.schema.call("calculatePremiumPayingPeriod", {
                     coverage: coverage
                  }))

                  if (coverage.noOfInstallmentYear >= premiumPayingPeriod) {
                     //Error: Installment Year cannot be equal or greater than premium paying period.
                     return {
                        code: "ERRC0068",
                        arguments: {"%PRODUCT_ID%" : productId}
                     };
                  } else {
                     if (coverage.prepayYear > 0) {
                        if (coverage.prepayYear < 5) {
                           // Error: Prepay Year must be 5 years or above.
                           return {
                              code: "ERRC0069",
                              arguments: {"%PRODUCT_ID%" : productId}
                           };
                        } else {
                           if (coverage.noOfInstallmentYear >= coverage.prepayYear) {
                              // Error: Installment Year cannot be equal or greater than Prepay Year.
                              return {
                                 code: "ERRC070",
                                 arguments: {"%PRODUCT_ID%" : productId}
                              };
                           }
                        }
                     }
                  }
               } else {
                  // Error: Installment Year must be 1 year or above.
                  return {
                     code: "ERRC0071",
                     arguments: {"%PRODUCT_ID%" : productId}
                  };
               }
            }
         }
      }

      //var billingMethod = coverage.options.billingMethod;
      _DB("coverage.options", coverage.options, "BillingMethodValidationRule->");
      if (Utils.isNothing( _PV( coverage, ['options', 'billingMethod'] ) )) {
         return {
            // Error: The billing method is not inputed.
            code: "ERRC0065",
            arguments: {"%PRODUCT_ID%" : productId}
         };
      } else {
         var billingMethod = coverage.options.billingMethod;
         if (!(Utils.isNothing(coverage)) && !(Utils.isNothing(coverage.currency)) && !(Utils.isNothing(coverage.currency.currencyPK))) {
            if (!(coverage.schema.call("isCurrencySupported", {
                  currencyId: coverage.currency.currencyPK.currencyId
               }))) {
               return {
                  // Error: The billing method cannot be checked due to invalid currency.
                  code: "ERRC0064",
                  arguments: {"%PRODUCT_ID%" : productId}
               };
            } else {
               if (!(coverage.schema.call("isBillingMethodPaymentModeSupported", {
                     billingMethod: coverage.options.billingMethod,
                     paymentMode: coverage.options.paymentMode
                  }))) {
                  //Autopay does not support for payment mode ANNUAL.
                  //Direct billing does not support for payment mode ANNUAL.
                  //Credit card does not support for payment mode ANNUAL.
                  //Autopay does not support for payment mode SEMI-ANNUAL.
                  //Direct billing does not support for payment mode SEMI-ANNUAL.
                  //Credit card does not support for payment mode SEMI-ANNUAL.
                  //Autopay does not support for payment mode QUARTERLY.
                  //Direct billing does not support for payment mode QUARTERLY.
                  //Credit card does not support for payment mode QUARTERLY.
                  //Autopay does not support for payment mode MONTHLY.
                  //Direct billing does not support for payment mode MONTHLY.
                  //Credit card does not support for payment mode MONTHLY.
                  //Single does not support for payment mode ANNUAL.
                  //Single does not support for payment mode SEMI-ANNUAL
                  //Single does not support for payment mode QUARTERLY.
                  //Single does not support for payment mode MONTHLY
                  var variables = {"%PRODUCT_ID%" : productId};
                  variables[PublicConstants.MESSAGE_FIELD.BILLING_METHOD] = coverage.options.billingMethod;
                  variables[PublicConstants.MESSAGE_FIELD.PAYMENT_MODE] = coverage.options.paymentMode;
                  return {
                     code: "ERRC0062",
                     arguments: variables
                  };
               }

               if (!(coverage.schema.call("isCurrencyBillingMethodSupported", {
                     billingMethod: coverage.options.billingMethod,
                     currencyId: coverage.currency.currencyPK.currencyId
                  }))) {
                  var variables = {"%PRODUCT_ID%" : productId};
                  variables[PublicConstants.MESSAGE_FIELD.BILLING_METHOD] = coverage.options.billingMethod;
                  variables[PublicConstants.MESSAGE_FIELD.CURRENCY] = coverage.currency.currencyPK.currencyId;
                  return {
                     code: "ERRC0063",
                     arguments: variables
                  };
               }
            }
         }
      }
   }
});

var DividendOptionValidationRule = Class.define({
   ruleName: function(args) {
      return "DividendOptionValidationRule";
   },
   shouldTest: function(args) {
      return true;
   },
   scope: function(args) {
      return PublicConstants.TARGET_SCOPE.BASE_COVERAGE;
   },
   validate: function(args) {
      var coverage = args["coverage"];
      var productId = _PV(coverage, 'product.productKey.primaryProduct.productPK.productId');

      var schema = coverage.schema.call("getSchema", null);
      var isInputtedValidDividendOption = false;
      if ((!Utils.isNothing(coverage.options)) && !(Utils.isNothing(coverage.options.dividendOption))) {
         if (coverage.options.dividendOption == SchemaConstants.DIVIDEND_OPTION.CASH_DIVIDEND || coverage.options.dividendOption == SchemaConstants.DIVIDEND_OPTION.ACCUMULATE || coverage.options.dividendOption == SchemaConstants.DIVIDEND_OPTION.PAID_UP_ADDITION || coverage.options.dividendOption == SchemaConstants.DIVIDEND_OPTION.BONUS_PROTECTION) {
            isInputtedValidDividendOption = true;
         }
      }
      if ((!Utils.isNothing(schema.ProductSchema.BasicParticular.SupportDividendOption)) && !(Utils.isNothing(schema.ProductSchema.BasicParticular.SupportDividendOption.DividendOption))) {
         var dividentOptionTable = Utils.iterator(schema.ProductSchema.BasicParticular.SupportDividendOption.DividendOption);
         if (dividentOptionTable.length > 0 && !isInputtedValidDividendOption) {
            return {
               // Error: The dividend option is not set
               code: "ERRC0077",
               arguments: {"%PRODUCT_ID%" : productId}
            };
         }
      }
      if (isInputtedValidDividendOption) {
         if (coverage.options.billingMethod == SchemaConstants.BILLING_MODE.PDF && !(coverage.options.dividendOption == SchemaConstants.DIVIDEND_OPTION.ACCUMULATE)) {
            return {
               // Error: The dividend option must be Leave On Deposit because PDF is selected
               code: "ERRC0072",
               arguments: {"%PRODUCT_ID%" : productId}
            };
         }

         if (!coverage.schema.call("isDividendOptionSupported", {
               dividendOption: coverage.options.dividendOption
            })) {

            if (coverage.options.dividendOption == SchemaConstants.DIVIDEND_OPTION.CASH_DIVIDEND) {
               return {
                  //message = "Error: Cash Dividend option is not supported.";
                  code: "ERRC0073",
                  arguments: {"%PRODUCT_ID%" : productId}
               };
            } else if (coverage.options.dividendOption == SchemaConstants.DIVIDEND_OPTION.ACCUMULATE) {
               return {
                  //message = "Error: Accumulating Dividend option is not supported.";
                  code: "ERRC0074",
                  arguments: {"%PRODUCT_ID%" : productId}
               };
            } else if (coverage.options.dividendOption == SchemaConstants.DIVIDEND_OPTION.PAID_UP_ADDITION) {
               return {
                  //message = "Error: Paid-up Addition option is not supported.";
                  code: "ERRC0075",
                  arguments: {"%PRODUCT_ID%" : productId}
               };
            } else if (coverage.options.dividendOption == SchemaConstants.DIVIDEND_OPTION.BONUS_PROTECTION) {
               return {
                  //message = "Error: Bonus Protection option is not supported.";
                  code: "ERRC0076",
                  arguments: {"%PRODUCT_ID%" : productId}
               };
            }
         }
      }

   }
});

var UVDeathBenefitValidationRule = Class.define({
   ruleName: function(args) {
      return "UVDeathBenefitValidationRule";
   },
   shouldTest: function(args) {
      return true;
   },
   scope: function(args) {
      return PublicConstants.TARGET_SCOPE.BASE_COVERAGE;
   },
   validate: function(args) {
      var coverage = args["coverage"];
      var productId = _PV(coverage, 'product.productKey.primaryProduct.productPK.productId');

      var schema = coverage.schema.call("getSchema", null);
      var isValidDeathBenefitInputed = false;

      var dbLevel = _PV(coverage, ['options', 'dbLevel']);
      var dbOptions = _PV(schema, ['ProductSchema','BasicParticular','SupportDeathBenefit','DeathBenefit']);

      if (dbOptions && dbOptions.length > 0) {
         if (Utils.isNothing( _PV(coverage, ['options', 'dbLevel']) )) {
            // Error: The death benefit option is not set.
            return {
               code: "ERRC0078",
               arguments: {"%PRODUCT_ID%" : productId}
            };
         }
         var dbLevel = _PV(coverage, 'options.dbLevel');
         if (coverage.schema.call("isDBOptionSupported", { dbOption: dbLevel })) {
             if (dbLevel == SchemaConstants.DB_OPTION.INCREASE) {
                var insureds = _PV( coverage, 'parties.party' );
                if (Utils.isNothing(insureds)) {
                   return {
                      code: "ERRC0213",
                      arguments: {"%PRODUCT_ID%" : productId}
                   };
                }
                var insuredList = Utils.iterator( insureds );
                for (insuredIdx in insuredList) {
                   var insured = insuredList[insuredIdx];
                   var insuredAge = insured.insuredAge;
                   _DB("insuredAge("+ insuredIdx + ")", insuredAge);

                   if (!Utils.isNothing(coverage.dbToLevelAtAge) && coverage.dbToLevelAtAge >= 0 && coverage.dbToLevelAtAge <= insuredAge) {
                      var variables = {"%INSURED%" : insured, "%PRODUCT_ID%" : productId};
                      variables[PublicConstants.MESSAGE_FIELD.DB_LEVEL_AGE] = "" + coverage.dbToLevelAtAge;
                      // "Error: Change death benefit to Level at age ($_) must above issue age."
                      return {
                         code: "ERRC0079",
                         arguments: variables
                      };
                   }
                }
             } else {
                if (!Utils.isNothing(coverage.dbToLevelAtAge) && coverage.dbToLevelAtAge >= 0) {
                   // Error: Change death benefit to Level is not supported.
                   return {
                      code: "ERRC0080",
                      arguments: {"%PRODUCT_ID%" : productId}
                   };
                }
             }
         } else {
             if (coverage.options.dbLevel == SchemaConstants.DB_OPTION.LEVEL) {
                //message = "Error: The level death benefit option is not supported.";
                return {
                   code: "ERRC0081",
                   arguments: {"%PRODUCT_ID%" : productId}
                };
             } else if (coverage.options.dbLevel == SchemaConstants.DB_OPTION.INCREASE) {
                //message = "Error: The increase death benefit option is not supported.";
                return {
                   code: "ERRC0082",
                   arguments: {"%PRODUCT_ID%" : productId}
                };
             } else if (coverage.options.dbLevel == SchemaConstants.DB_OPTION.INDEXED) {
                //message = "Error: The indexed death benefit option is not supported.";
                return {
                   code: "ERRC0083",
                   arguments: {"%PRODUCT_ID%" : productId}
                };
             } else if (coverage.options.dbLevel == SchemaConstants.DB_OPTION.ROP) {
                //message = "Error: The ROP death benefit option is not supported.";
                return {
                   code: "ERRC0084",
                   arguments: {"%PRODUCT_ID%" : productId}
                };
             } else {
                //message = "Error: The death benefit option is not supported.";
                return {
                   code: "ERRC0214",
                   arguments: {"%PRODUCT_ID%" : productId}
                };
             }
         }
      } else {
         if (!Utils.isNothing( _PV(coverage, ['options', 'dbLevel']) )) {
            // Error: The death benefit option is not required.
            return {
               code: "ERRC0211",
               arguments: {"%PRODUCT_ID%" : productId}
            };
         }
      }
   }
});

var IFLStartingAgeValidationRule = Class.define({
   ruleName: function(args) {
      return "IFLStartingAgeValidationRule";
   },
   shouldTest: function(args) {
      return true;
   },
   scope: function(args) {
      return PublicConstants.TARGET_SCOPE.BASE_COVERAGE;
   },
   validate: function(args) {
      var coverage = args["coverage"];
      var productId = _PV(coverage, 'product.productKey.primaryProduct.productPK.productId');

      var schema = coverage.schema.call("getSchema", null);

      var startIFLAge = schema.ProductSchema.BasicParticular.StartAgeIFL;
      var endIFLAge = schema.ProductSchema.BasicParticular.EndAgeIFL;

      if (coverage.schema.call("hasSupportOption", {
            option: SchemaConstants.SUPPORT_OPTION.INCOME_FOR_LIFE
         })) {
         if (!Utils.isNothing(coverage.iflAge)) {
            if (coverage.iflAge < startIFLAge) {
               var variables = {"%PRODUCT_ID%" : productId};
               variables[PublicConstants.MESSAGE_FIELD.IFL_AGE] = coverage.iflAge;
               return {
                  //Error: The starting age of IFL cannot be less than the age $_.
                  code: "ERRC0085",
                  arguments: variables
               };
            }
            if (coverage.iflAge > endIFLAge) {
               var variables = {"%PRODUCT_ID%" : productId};
               variables[PublicConstants.MESSAGE_FIELD.IFL_AGE] = coverage.iflAge;
               return {
                  //Error: The starting age of IFL cannot be over than the age $_.
                  code: "ERRC0086",
                  arguments: variables
               };
            }
         }
      } else {
         if (!Utils.isNothing(coverage.iflAge) || !Utils.isNothing(coverage.iflAmount)) {
            //Error: IFL is not allowed.
            return {
               code: "ERRC0087",
               arguments: {"%PRODUCT_ID%" : productId}
            };
         }
      }
   }
});

var FundCodeValidationRule = Class.define({
   ruleName: function(args) {
      return "FundCodeValidationRule";
   },
   shouldTest: function(args) {
      return true;
   },
   scope: function(args) {
      return PublicConstants.TARGET_SCOPE.BASE_COVERAGE;
   },
   validate: function(args) {
      var coverage = args["coverage"];
      var productId = _PV(coverage, 'product.productKey.primaryProduct.productPK.productId');

      var schema = coverage.schema.call("getSchema", null);
      var catalog = coverage.catalog.call("getCatalog", null);
      if (!(coverage.catalog.call("isUVL"))) {
         return;
      }
      if (!Utils.isNothing(coverage.proposal.funds) && !Utils.isNothing(coverage.proposal.funds.fundRecord)) {
         var fundTable = Utils.iterator(coverage.proposal.funds.fundRecord);
         if (fundTable.length > 0) {
            var accumAllocation = 0;
            for (fundi in fundTable) {
               var fundRec = fundTable[fundi];
               accumAllocation += parseInt(fundRec.allocation);
               if (!(coverage.catalog.call("isFundCodeSupported", {
                     fund: fundRec._code
                  }))) {
                  var variables = {"%PRODUCT_ID%" : productId};
                  variables[PublicConstants.MESSAGE_FIELD.FUND_CODE] = fundRec._code;
                  return {
                     //message = "Error: Fund code (" + vo.getFundRecord(i).getFundCode() + ") is not supported.";
                     code: "ERRC0088",
                     arguments: variables
                  };
               }
            }
            if (accumAllocation != 100) {
               return {
                  //280", "Error: Total allocation of all funds must be 100%.
                  code: "ERRC0089",
                  arguments: {"%PRODUCT_ID%" : productId}
               };
            }
         } else {
            return {
               code: "ERRC0210",
               arguments: {"%PRODUCT_ID%" : productId}
            }
         }
      }
      if (!Utils.isNothing(coverage.proposal.topupFunds) && !Utils.isNothing(coverage.proposal.topupFunds.fundRecord)) {
         var topupFundTable = Utils.iterator(coverage.proposal.topupFunds.fundRecord);
         if (topupFundTable.length > 0) {
            var accumAllocation = 0;
            for (topupfundi in topupFundTable) {
               var topupfundRec = topupFundTable[fundi];
               accumAllocation += topupfundRec.allocation;
               if (!(coverage.catalog.call("isFundCodeSupported", {
                     fund: topupfundRec._code
                  }))) {
                  var variables = {"%PRODUCT_ID%" : productId};
                  variables[PublicConstants.MESSAGE_FIELD.FUND_CODE] = topupfundRec._code;
                  return {
                     //message = "Error: Fund code (" + vo.getFundRecord(i).getFundCode() + ") is not supported.";
                     code: "ERRC0090",
                     arguments: variables
                  };
               }
            }
            if (accumAllocation != 100) {
               return {
                  //280", "Error: Total allocation of all funds must be 100%.
                  code: "ERRC0209",
                  arguments: {"%PRODUCT_ID%" : productId}
               };
            }
         }
      }
   }
});

var FundInterestValidationRule = Class.define({
   ruleName: function(args) {
      return "FundInterestValidationRule";
   },
   shouldTest: function(args) {
      return true;
   },
   scope: function(args) {
      return PublicConstants.TARGET_SCOPE.BASE_COVERAGE;
   },
   validate: function(args) {
      var coverage = args["coverage"];
      var productId = _PV(coverage, 'product.productKey.primaryProduct.productPK.productId');

      var schema = coverage.schema.call("getSchema", null);
      // TO DO minRate and maxRate
      var minRate = 0;
      var maxRate = 99999;
      if (coverage.catalog.call("isUVL")) {
         var fundTable = Utils.iterator(coverage.funds.fundRecord);
         if (fundTable.length > 0) {
            var allocation = 0;
            for (fundi in fundTable) {
               var fundRec = fundTable[fundi];
               if (fundRec.returnRate < minRate || fundRec.returnRate > maxRate) {
                  var variables = {"%PRODUCT_ID%" : productId};
                  variables[PublicConstants.MESSAGE_FIELD.FUND_CODE] = fundRec._code;
                  variables[PublicConstants.MESSAGE_FIELD.RETURN_RATE] = fundRec.returnRate;
                  variables[PublicConstants.MESSAGE_FIELD.MIN_RETURN_RATE] = minRate;
                  variables[PublicConstants.MESSAGE_FIELD.MAX_RETURN_RATE] = maxRate;
                  return {
                     //"Error: The $_ return rate of $_ fund must be between $_ and $_."
                     code: "ERRC0091",
                     arguments: variables
                  };
               }
            }

         }

         var fundInt = coverage.FundInt;
         if (fundTable.length > 0) {
            var combineInt = 0;
            for (recKey in fundTable) {
               var fundRec = fundTable[recKey];
               combineInt += fundRec.returnRate * fundRec.allocation;
            }
            combineInt = combineInt / 100;

            if (combineInt > 0)
               fundInt = combineInt;
         }
         if (fundInt < 0) {
            // Error: Fund Growth Interest rate is not set.
            return {
               code: "ERRC0155",
               arguments: {"%PRODUCT_ID%" : productId}
            };
         }
      }
   }
});

var SupportSOSByPolicyValidationRule = Class.define({
   ruleName: function(args) {
      return "SupportSOSByPolicyValidationRule";
   },
   shouldTest: function(args) {
      return true;
   },
   scope: function(args) {
      return PublicConstants.TARGET_SCOPE.BASE_COVERAGE;
   },
   validateSupportSOSByCoverage: function(args) {
      var coverage = args['coverage'];
      var productKey = args['productKey'];
      var sosSupportedInCatalog = false;
      var sosSupportedInSchema = false;
      if ((coverage.catalog.call("isSOS"))) {
         sosSupportedInCatalog = true;
         if ((coverage.schema.call("hasSupportOption", {
               option: SchemaConstants.SUPPORT_OPTION.IS_SOS_SUPPORTED
            }))) {
            sosSupportedInSchema = true;
         }
      }
      if (sosSupportedInCatalog && sosSupportedInSchema) {
         return 1;
      } else
      if (sosSupportedInCatalog && !sosSupportedInSchema) {
         return 2;
      } else {
         return 3;
      }
   },

   validate: function(args) {
      var coverage = args["coverage"];
      var productId = _PV(coverage, 'product.productKey.primaryProduct.productPK.productId');

      var schema = coverage.schema.call("getSchema", null);
      var sosSupported = true;
      if (coverage.proposal.policyExcludeSOS == "N") {
         var validCode = this.validateSupportSOSByCoverage({
            coverage: coverage,
            productKey: coverage.productKey
         });
         if (validCode == 1) {
            sosSupported = true;
         } else
         if (validCode == 2) {
            sosSupported = false;
         }

         if (!Utils.isNothing(coverage.proposal.riders)) {
            var ridersTable = Utils.iterator(coverage.proposal.riders.coverageInfo);
            for (riderIndex in ridersTable) {
               var riderCov = coverage.proposal.riders.coverageInfo[riderIndex];
               var validCode = this.validateSupportSOSByCoverage({coverage: riderCov, productKey: riderCov.productKey});
               if (validCode == 1) {
                  sosSupported = true;
               } else
               if (validCode == 2) {
                  sosSupported = false;
               }
            }
         }

         if (!sosSupported) {
            var variables = {"%PRODUCT_ID%" : productId};
            variables[PublicConstants.MESSAGE_FIELD.LOCATION] = coverage.product.productKey.location;
            return {
               //"Error: The SOS is not supported for the location $_."
               code: "ERRC0092",
               arguments: variables
            };
         }
      }
   }
});

var AnnuityOptionValidationRule = Class.define({
   ruleName: function(args) {
      return "AnnuityOptionValidationRule";
   },
   shouldTest: function(args) {
      return true;
   },
   scope: function(args) {
      return PublicConstants.TARGET_SCOPE.BASE_COVERAGE;
   },
   validate: function(args) {
      var coverage = args["coverage"];
      var productId = _PV(coverage, 'product.productKey.primaryProduct.productPK.productId');

      var schema = coverage.schema.call("getSchema", null);

      var paymentPeriod = coverage.fixedPeriod;
      var bp = (coverage.schema.call("calculateBenefitPeriod", {
         coverage: coverage
      }));
      var giPayout = schema.ProductSchema.BasicParticular.PayoutPeriod;
      var rolling = coverage.rollingPeriod;

      if ((coverage.catalog.call("isIncome3"))) {
         if (coverage.startAnnuityAge > 0) {
            var premiumPayingPeriod = (coverage.schema.call("calculatePremiumPayingPeriod", {
               coverage: coverage
            }));

            if (!Utils.isNothing(coverage.proposal.riders)) {
               var ridersTable = Utils.iterator(coverage.proposal.riders.coverageInfo);
               if (ridersTable.length > 0) {
                  // 265 Error: Payout option is only available if no supplementary benefit is selected.
                  return {
                     code: "ERRC0206",
                     arguments: {"%PRODUCT_ID%" : productId}
                  };
               }
            }

            var insureds = _PV( coverage, 'parties.party' );
            if (Utils.isNothing(insureds)) {
                return {
                   code: "ERRC0213",
                   arguments: {"%PRODUCT_ID%" : productId}
                };
            }
            var insuredList = Utils.iterator( insureds );
            for (insuredIdx in insuredList) {
               var insured = insuredList[insuredIdx];
               var insuredAge = insured.insuredAge;
               _DB("insuredAge("+ insuredIdx + ")", insuredAge);

               if (coverage.startAnnuityAge < (insuredAge + premiumPayingPeriod)) {
                  // 260 Error: The dividend withdrawn start age must be after the premium paying period.
                  return {
                     code: "ERRC0093",
                     arguments: {"%INSURED%" : insured, "%PRODUCT_ID%" : productId}
                  };
               }
               if (paymentPeriod > 0) {
                  if ((coverage.startAnnuityAge + paymentPeriod) > (insuredAge + premiumPayingPeriod)) {
                     var variables = {"%INSURED%" : insured, "%PRODUCT_ID%" : productId};
                     variables[PublicConstants.MESSAGE_FIELD.YEAR] = "" + (insuredAge + bp - startAnnuity);
                     // 262 Error: The fixed payment period cannot be greater than $_ year(s).
                     return {
                        code: "ERRC0094",
                        arguments: variables
                     };
                  }
               }

            }
         }
      } else {
         if (coverage.startAnnuityAge > 0) {
            return {
               // 261 Error: The payout option is not allowed.
               code: "ERRC0095",
               arguments: {"%PRODUCT_ID%" : productId}
            };
         }

         if (paymentPeriod > 0) {
            if ((rolling + paymentPeriod) < giPayout) {

               var variables = {"%PRODUCT_ID%" : productId};
               variables[PublicConstants.MESSAGE_FIELD.YEAR] = (giPayout);
               return {
                  // 263 Error: The total of rolling and fixed payment period cannot be less than the guarantee payout period ($_ years).
                  code: "ERRC0096",
                  arguments: variables
               };
            }

            if ((ppp + rolling + paymentPeriod) > bp) {
               var variables = {"%PRODUCT_ID%" : productId};
               variables[PublicConstants.MESSAGE_FIELD.YEAR] = (bp - ppp);
               return {
                  // 264, Error: The total of rolling and fixed payment period cannot be greater than $_ year(s).
                  code: "ERRC0097",
                  arguments: variables
               };
            }
         }
      }
   }
});

var IIOValidationRule = Class.define({
   ruleName: function(args) {
      return "IIOValidationRule";
   },
   shouldTest: function(args) {
      return true;
   },
   scope: function(args) {
      return PublicConstants.TARGET_SCOPE.BASE_COVERAGE;
   },
   validate: function(args) {
      var coverage = args["coverage"];
      var productId = _PV(coverage, 'product.productKey.primaryProduct.productPK.productId');

      var schema = coverage.schema.call("getSchema", null);
      var paymentMode = coverage.options.paymentMode;
      var isValidIIOInputed = false;
      if ((!Utils.isNothing(coverage.options)) && !(Utils.isNothing(coverage.options.IIO))) {
         if (coverage.options.IIO.equalsIgnoreCase(SchemaConstants.OPTION_IIO.OPTION_IIO_BASIC) || coverage.options.IIO.equalsIgnoreCase(SchemaConstants.OPTION_IIO.OPTION_IIO_TOPUP)) {
            isValidIIOInputed = true;
         }
         if (!coverage.schema.call("hasSupportOption", {
               option: SchemaConstants.SUPPORT_OPTION.IIO
            })) {
            if (isValidIIOInputed) {
               return {
                  // Error: IIO is not supported.
                  code: "ERRC0098",
                  arguments: {"%PRODUCT_ID%" : productId}
               };
            }
         } else {
            if (isValidIIOInputed) {
               if (coverage.options.IIO.equalsIgnoreCase(SchemaConstants.OPTION_IIO.OPTION_IIO_BASIC)) {
                  if (coverage.basicIncrePerc != 0) {
                     if (!coverage.schema.call("isValidIIO", {
                           basicIncrePerc: coverage.basicIncrePerc
                        })) {
                        // Error: Basic IIO% is not valid.
                        return {
                           code: "ERRC0099",
                           arguments: {"%PRODUCT_ID%" : productId}
                        };
                     }
                  } else {
                     // Error: Basic IIO% is not set.
                     return {
                        code: "ERRC0100",
                        arguments: {"%PRODUCT_ID%" : productId}
                     };
                  }
                  var premiumPayingPeriod = (coverage.schema.call("calculatePremiumPayingPeriod", {
                     coverage: coverage
                  }))
                  if (coverage.iioDuration > premiumPayingPeriod) {
                     // Error: Basic IIO Duration cannot over premium duration.
                     return {
                        code: "ERRC0101",
                        arguments: {"%PRODUCT_ID%" : productId}
                     };
                  }

               }

               if (coverage.options.IIO.equalsIgnoreCase(SchemaConstants.OPTION_IIO.OPTION_IIO_TOPUP)) {
                  if (coverage.topUpIncrePerc != 0) {
                     if (!coverage.schema.call("isValidIIO", {
                           basicIncrePerc: coverage.topUpIncrePerc
                        })) {
                        // Error: Top-up IIO% is not valid.
                        return {
                           code: "ERRC0102",
                           arguments: {"%PRODUCT_ID%" : productId}
                        };
                     }
                  } else {
                     // Error: Basic IIO% is not set.
                     return {
                        code: "ERRC0103",
                        arguments: {"%PRODUCT_ID%" : productId}
                     };
                  }
               } else {
                  if (coverage.topUpIncrePerc > 0) {
                     // Error: Top-up IIO% is not required.
                     return {
                        code: "ERRC0104",
                        arguments: {"%PRODUCT_ID%" : productId}
                     };
                  }
               }
            }
            if (coverage.topUpIncrePerc > 0 && coverage.topUpPremium <= 0) {
               // Error: Top-up Premium is not set.
               return {
                  code: "ERRC0105",
                  arguments: {"%PRODUCT_ID%" : productId}
               };

            }
            // TO DO some more logic

            var regularBasicPrem = coverage.plannedPremium;
            var minPremium = 0;
            if (regularBasicPrem > 0) {
               var fundChangeRec = getFundChangeRecord({
                  fundChange: SchemaConstants.FUND_CHANGE_TYPE.AUTOMATIC,
                  coverage: coverage,
                  duration: duration,
                  paymentMode: paymentMode,
                  schema: schema
               });
               if (!Utils.isNothing(fundChangeRec)) {
                  minPremium = Number(fundChangeRec.MinIncrease.text);
               }
               var fundChangeRec = getFundChangeRecord({
                  fundChange: SchemaConstants.FUND_CHANGE_TYPE.PREMIUM,
                  coverage: coverage,
                  duration: duration,
                  paymentMode: paymentMode,
                  schema: schema
               });
               if (!Utils.isNothing(fundChangeRec)) {
                  minPremium = Number(fundChangeRec.MinIncrease.text);
               }
               // TO DO : Clarification required on 100d
               var basicIncrePerc = Number(coverage.basicIncrePerc);
               var iioPremium = (basicIncrePerc * regularBasicPrem) / 100;
               if (coverage.options.IIO.equalsIgnoreCase(SchemaConstants.OPTION_IIO.OPTION_IIO_TOPUP)) {
                  var topUpIncrePerc = Number(coverage.topUpIncrePerc);
                  var topUpPremium = Number(coverage.topUpPremium);
                  iioPremium = (iioPremium + (topUpIncrePerc + topUpPremium)) / 100;
               }
               if (iioPremium > 0 && iioPremium < minPremium) {
                  // Error: Increase in Planned Premium is below minimum.
                  return {
                     code: "ERRC0197",
                     arguments: {"%PRODUCT_ID%" : productId}
                  };
               }
            }
         }
      }
   }
});

var CommencementYearValidationRule = Class.define({
   ruleName: function(args) {
      return "CommencementYearValidationRule";
   },
   shouldTest: function(args) {
      return true;
   },
   scope: function(args) {
      return PublicConstants.TARGET_SCOPE.BASE_COVERAGE;
   },
   validate: function(args) {
      var coverage = args["coverage"];
      var productId = _PV(coverage, 'product.productKey.primaryProduct.productPK.productId');

      var schema = coverage.schema.call("getSchema", null);
      if (!Utils.isNothing(coverage.proposal.commencementYear) && coverage.proposal.commencementYear > 0) {
         if (coverage.schema.call("hasSupportOption", {
               option: SchemaConstants.SUPPORT_OPTION.HAS_COMMENCEMENT_YEAR
            })) {
            var policyYearDate = new Date(coverage.proposal.policyYearDate);
            var policyYear = policyYearDate.getFullYear();
            if (coverage.proposal.commencementYear < schema.ProductSchema.BasicParticular.CommencementYear + policyYear) {
               var variables = {"%PRODUCT_ID%" : productId};
               variables[PublicConstants.MESSAGE_FIELD.YEAR] = policyYear;
               return {
                  //"Error: Commencement Year should be the year ??? or later.";
                  code: "ERRC0114",
                  arguments: variables
               };
            }
         } else {
            return {
               // Error: Commencement Year is not supported.
               code: "ERRC0115",
               arguments: {"%PRODUCT_ID%" : productId}
            };
         }
      }
   }
});

var HookSubscriptionWithFAValidationRule = Class.define({
   ruleName: function(args) {
      return "HookSubscriptionWithFAValidationRule";
   },
   shouldTest: function(args) {
      return true;
   },
   scope: function(args) {
      return PublicConstants.TARGET_SCOPE.BASE_COVERAGE | PublicConstants.TARGET_SCOPE.RIDER_COVERAGE;
   },
   validate: function(args) {
      var coverage = args["coverage"];
      var productId = _PV(coverage, 'product.productKey.primaryProduct.productPK.productId');

      var schema = coverage.schema.call("getSchema", null);

      if (coverage.schema.call("hasSupportOption", {
            option: SchemaConstants.SUPPORT_OPTION.HOOK_SUBSCRIPTION_WITH_FA
         })) {
         amountFA = Utils.isNothing(coverage.faceAmount) ? 0 : Number(coverage.faceAmount);
         if (amountFA > 0) {
            return {
               // Error: No face amount is required..
               code: "ERRC0113",
               arguments: {"%PRODUCT_ID%" : productId}
            };
         }
      }
   }
});

var DisallowRiderWithGuaranteedIssueValidationRule = Class.define({
   ruleName: function(args) {
      return "DisallowRiderWithGuaranteedIssueValidationRule";
   },
   shouldTest: function(args) {
      return true;
   },

   scope: function(args) {
      return PublicConstants.TARGET_SCOPE.BASE_COVERAGE;
   },
   validate: function(args) {
      var coverage = args["coverage"];
      var productId = _PV(coverage, 'product.productKey.primaryProduct.productPK.productId');

      var hasNonGIrider = 0;
      var nonGIriderCode = "";

      var hasOverLimitGIrider = 0;
      var overLimitGIrider = "";
      var giRiderLimit = "";
      var schema = coverage.schema.call("getSchema", null);
      if ((!Utils.isNothing(coverage.options)) && !(Utils.isNothing(coverage.options.guaranteedIssue)) && coverage.options.guaranteedIssue == "Y") {
         if (!coverage.catalog.call("isGuaranteedIssue") && !coverage.catalog.call("isConditionalGuaranteedIssue")) {
            // Error: Guaranteed Issue is not allowed to this plan.
            return {
               code: "ERRC0124",
               arguments: {"%PRODUCT_ID%" : productId}
            };
         } else if (!Utils.isNothing(coverage.proposal.riders)) {
            var ridersTable = Utils.iterator(coverage.proposal.riders.coverageInfo);
            for (riderIndex in ridersTable) {
               var riderCov = coverage.proposal.riders.coverageInfo[riderIndex];
               var riderCatalog = riderCov.catalog.call("getCatalog", null);
               var riderSchema = riderCov.schema.call("getSchema", null);
               if (!riderCov.catalog.call("isGuaranteedIssue") && !riderCov.catalog.call("isConditionalGuaranteedIssue")) {
                  hasNonGIrider = hasNonGIrider + 1;
                  if ("".equalsIgnoreCase(nonGIriderCode)) {
                     nonGIriderCode = nonGIriderCode + riderCov.product.productKey.primaryProduct.productPK.productId;
                  } else {
                     nonGIriderCode = nonGIriderCode + ", " + riderCov.product.productKey.primaryProduct.productPK.productId;
                  }
               } else {
                  if (riderCov.catalog.call("isGuaranteedIssue")) {
                     var hasGuarantedIssueRequirementSupport = (coverage.schema.call("hasSupportOption", {
                        option: SchemaConstants.SUPPORT_OPTION.GUARANTEED_ISSUE_REQUIREMENT
                     }));
                     if (hasGuarantedIssueRequirementSupport) {
                        var maxGIFaceamountRec = null;
                        var maxGIFaceamountRec = getMaxGIFaceamount({
                           coverage: riderCov,
                           schema: riderSchema
                        });
                        if (maxGIFaceamountRec != null) {
                           if (riderCov.faceAmount > Number(maxGIFaceamountRec.MaxGIFaceamount.text)) {
                              hasOverLimitGIrider = hasOverLimitGIrider + 1;
                              if ("".equalsIgnoreCase(hasOverLimitGIrider)) {
                                 overLimitGIrider = overLimitGIrider + riderCov.product.productKey.primaryProduct.productPK.productId;
                                 giRiderLimit = giRiderLimit + riderCov.currency.currencyPK.currencyId + (maxGIFaceamount);
                              } else {
                                 overLimitGIrider = overLimitGIrider + ", " + riderCov.product.productKey.primaryProduct.productPK.productId;
                                 giRiderLimit = giRiderLimit + ", " + riderCov.currency.currencyPK.currencyId + (maxGIFaceamount);
                              }
                           }
                        }

                     } else {
                        hasNonGIrider = hasNonGIrider + 1;
                        if ("".equalsIgnoreCase(nonGIriderCode)) {
                           nonGIriderCode = nonGIriderCode + riderCov.product.productKey.primaryProduct.productPK.productId;
                        } else {
                           nonGIriderCode = nonGIriderCode + ", " + riderCov.product.productKey.primaryProduct.productPK.productId;
                        }
                     }

                  }
               }

               if (hasNonGIrider > 0) {
                  // Error: Non-GI rider ($_) cannot be attached with Guaranteed Issue Option
                  var variables = {"%PRODUCT_ID%" : productId};
                  variables[PublicConstants.MESSAGE_FIELD.RIDER] = nonGIriderCode;
                  return {
                     code: "ERRC0207",
                     arguments: variables
                  };

               }
               if (hasOverLimitGIrider > 0) {
                  //Error: Guarantee Issue Option is not allowed since the face amount of riders (%RIDER%) is over the limit (%AMOUNT%)
                  var variables = {"%PRODUCT_ID%" : productId};
                  variables[PublicConstants.MESSAGE_FIELD.AMOUNT] = hasOverLimitGIrider;
                  variables[PublicConstants.MESSAGE_FIELD.RIDER] = nonGIriderCode;
                  return {
                     code: "ERRC0208",
                     arguments: variables
                  };

               }

            }
         }

      }

   }
});

var TopUpPremiumValidationRule = Class.define({
   ruleName: function(args) {
      return "TopUpPremiumValidationRule";
   },
   shouldTest: function(args) {
      return true;
   },
   scope: function(args) {
      return PublicConstants.TARGET_SCOPE.BASE_COVERAGE | PublicConstants.TARGET_SCOPE.RIDER_COVERAGE;
   },
   validate: function(args) {
      var coverage = args["coverage"];
      var productId = _PV(coverage, 'product.productKey.primaryProduct.productPK.productId');

      var schema = coverage.schema.call("getSchema", null);
      var catalog = coverage.catalog.call("getCatalog", null);
      var regularBasicPrem = 0;

      if (coverage.catalog.call("isRegularSaving")) {

         regularBasicPrem = _PV( coverage, ['plannedPremium'] );
         if (Utils.isNothing(regularBasicPrem)) regularBasicPrem = 0;

         if (coverage.schema.call("hasSupportOption", { option: SchemaConstants.SUPPORT_OPTION.TOPUPPREMIUM })) {
            if (!Utils.isNothing(coverage.topUpPremium) && (coverage.topUpPremium > 0)) {
               var minTopUpPremium = 999999999;
               var maxTopUpPremium = 0;

               var premiumRec = getPremiumRecord({
                  premiumType: SchemaConstants.PREMIUM_RANGE_TYPE.PREMIUMTYPE_TOPUPPREMIUM,
                  coverage: coverage,
                  schema: schema
               });

               if (!Utils.isNothing(premiumRec)) {
                  minTopUpPremium = Math.min(minTopUpPremium, Number( _PV( premiumRec, 'MinPremium' ) ));
                  maxTopUpPremium = Math.max(maxTopUpPremium, Number( _PV( premiumRec, 'MaxPremium' ) ));
               }

                _DB("minPremium (TopUp)", minTopUpPremium, "TopUpPremiumValidationRule.validate()->");
                _DB("maxPremium (TopUp)", maxTopUpPremium, "TopUpPremiumValidationRule.validate()->");

               /*
               for (premiumRangeKey in schema.ProductSchema.BasicParticular.PremiumRangeInformation.PremiumRange) {
                   var premiumRangeRec = schema.ProductSchema.BasicParticular.PremiumRangeInformation.PremiumRange[premiumRangeKey];
                   if ((coverage.currency.currencyPK.currencyId == premiumRangeRec.CurrencyPK.CurrencyId.text) && (premiumRangeRec.PaymentMode.text == coverage.options.paymentMode) && premiumRangeRec.MinAge > insuredAge && premiumRangeRec.MaxAge < insuredAge && premiumRangeRec.Type == SchemaConstants.PREMIUM_RANGE_TYPE.PREMIUMTYPE_TOPUPPREMIUM) {
                       minTopUpPremium = Math.min(minTopUpPremium, premiumRangeRec.MinPremium.text);
                       //maxTopUpPremium = Math.max(maxTopUpPremium, premiumRangeRec.MaxPremium.text);
                   }
               }*/

               /*
               if (regularBasicPrem > 0) {
                  maxTopUpPremium = coverage.topUpLimits * regularBasicPrem;
               } else {

                  var premiumRec = getPremiumRecord({
                     premiumType: SchemaConstants.PREMIUM_RANGE_TYPE.PREMIUMTYPE_BASICPREMIUM,
                     coverage: coverage,
                     schema: schema
                  });
                  if (!Utils.isNothing(premiumRec)) {
                     maxTopUpPremium = Math.max(maxTopUpPremium, Number(premiumRec.MaxPremium.text));
                  }
               }
               */
               if (coverage.topUpPremium < minTopUpPremium) {
                  var vars = {"%PRODUCT_ID%" : productId};
                  vars[PublicConstants.MESSAGE_FIELD.MINIMUM_INITIAL_TOP_UP] = minTopUpPremium;
                  // Error: Top Up Premium is below the minimum.
                  return {
                     code: "ERRC0119",
                     arguments: vars
                  };
               } else {
                  if (coverage.topUpPremium > maxTopUpPremium) {
                     var vars = {"%PRODUCT_ID%" : productId};
                     vars[PublicConstants.MESSAGE_FIELD.MAXIMUM_INITIAL_TOP_UP] = maxTopUpPremium;
                     // Error: Top Up Premium is above the maximum.
                     return {
                        code: "ERRC0120",
                        arguments: vars
                     };
                  } else {
                     //var maxBasicPremium = 0;
                     var premiumRec2 = getPremiumRecord({
                        premiumType: SchemaConstants.PREMIUM_RANGE_TYPE.PREMIUMTYPE_BASICPREMIUM,
                        coverage: coverage,
                        schema: schema
                     });
                     if (Utils.isNothing(premiumRec2)) {
                        premiumRec2 = getPremiumRecord({
                           premiumType: SchemaConstants.PREMIUM_RANGE_TYPE.PREMIUMTYPE_PLANNEDPREMIUM,
                           coverage: coverage,
                           schema: schema
                        });
                     }
                     var maxPremium = 0;
                     if (!Utils.isNothing(premiumRec2)) {
                        maxPremium = Math.max(maxPremium, Number( _PV( premiumRec, 'MaxPremium' ) ));
                     }
                     if ((regularBasicPrem + coverage.topUpPremium) > maxPremium) {
                        var vars = {"%PRODUCT_ID%" : productId};
                        vars[PublicConstants.MESSAGE_FIELD.MAXIMUM_PLANNEDPREMIUM] = maxPremium;
                        // Error: Premium is above the maximum.
                        return {
                           code: "ERRC0121",
                           arguments: vars
                        };
                     }
                  }
               }
            }
         } else {
            if (coverage.topUpPremium > 0) {
               return {
                  // Error: No Top Up Premium is required.
                  code: "ERRC0122",
                  arguments: {"%PRODUCT_ID%" : productId}
               };
            }
         }
      }
   }
});

var TotalPremiumValidationRule = Class.define({
   ruleName: function(args) {
      return "TotalPremiumValidationRule";
   },
   shouldTest: function(args) {
      return true;
   },
   scope: function(args) {
      return PublicConstants.TARGET_SCOPE.PROPOSAL;
   },
   getPremiumRange: function(args) {
      var proposal = args['proposal'];
      var coverage = proposal.coverageInfo;
      var schema = coverage.schema.call("getSchema");

      var premiumRec = getPremiumRecord({
         premiumType: SchemaConstants.PREMIUM_RANGE_TYPE.PREMIUMTYPE_BASICPREMIUM,
         coverage: coverage,
         schema: schema
      });
      if (Utils.isNothing(premiumRec)) {
         premiumRec = getPremiumRecord({
            premiumType: SchemaConstants.PREMIUM_RANGE_TYPE.PREMIUMTYPE_PLANNEDPREMIUM,
            coverage: coverage,
            schema: schema
         });
      }

      var minPP;
      var maxPP;
      if (!Utils.isNothing(premiumRec)) {
         minPP = Number( _PV( premiumRec, ['MinPremium'] ) );
         maxPP = Number( _PV( premiumRec, ['MaxPremium'] ) );
      }
      return {minLimit: minPP, maxLimit: maxPP};
   },
   getTotalPremium: function(args) {
      var proposal = args["proposal"];
      var coverage = proposal.coverageInfo;
      var totalPremium = 0;
      for (totalPremiumsKey in coverage._premiums.totalPremiums) {
         var totalPremiumsRec = coverage._premiums.totalPremiums[totalPremiumsKey];
         if (totalPremiumsRec.paymentMode == coverage.options.paymentMode) {
            totalPremium = totalPremiumsRec.totalPremium;
         }
      }
      return totalPremium;
   },
   validate: function(args) {
      var proposal = args["proposal"];
      var coverage = proposal.coverageInfo;
      var productId = _PV(coverage, 'product.productKey.primaryProduct.productPK.productId');
      var schema = coverage.schema.call("getSchema", null);
      var catalog = coverage.catalog.call("getCatalog", null);

      var constantPaymentMode = "";
      var minError = "";
      var maxError = "";
      var issueAge = 0;
      var maxPP = 0;
      var minPP = 0;
      var totalPremium = this.self.getTotalPremium(args);

      //if (!coverage.catalog.call("isRegularSaving") && !coverage.catalog.call("isSinglePremium") && coverage.catalog.call("isUVL")) {
      //if ((!Utils.isNothing(coverage.options)) && !(Utils.isNothing(coverage.options.paymentMode))) {

      //for (totalPremiumsKey in coverage._premiums.totalPremiums) {
      //   var totalPremiumsRec = coverage._premiums.totalPremiums[totalPremiumsKey];
      //   if (totalPremiumsRec.paymentMode == coverage.options.paymentMode) {
      //      totalPremium = totalPremiumsRec.totalPremium;
      //   }
      //}

      //}
      //} else {
      //   for (totalPremiumsKey in coverage._premiums.totalPremiums) {
      //      var totalPremiumsRec = coverage._premiums.totalPremiums[totalPremiumsKey];
      //      if (totalPremiumsRec.paymentMode == coverage.options.paymentMode) {
      //         if (coverage.options.paymentMode == SchemaConstants.PAYMENT_MODE.ANNUAL || coverage.options.paymentMode == SchemaConstants.PAYMENT_MODE.MONTHLY) {
      //            totalPremium = totalPremiumsRec.totalPremium;
      //         }
      //      }
      //   }
      //}
      //_SS(proposal.coverageInfo, 10);

      var basePlan = proposal.coverageInfo;
      var noOfPays = 1;
      if (coverage.catalog.call('isUVL')) {
         if (basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.MONTHLY) {
            noOfPays = 12;
         }
         if (basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.QUARTERLY) {
            noOfPays = 4;
         }
         if (basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.SEMIANNUAL) {
            noOfPays = 2;
         }
      }
      totalPremium = totalPremium / noOfPays;

      _DB("totalPremium", totalPremium, "TotalPremiumValidationRule->");

      var variables = {"%PRODUCT_ID%" : productId};
      variables[PublicConstants.MESSAGE_FIELD.TOTAL_AMOUNT] = coverage.currency.currencyPK.currencyId + " " + totalPremium;

      if (!(Utils.isNothing(coverage.options)) && !(Utils.isNothing(coverage.options.paymentMode))) {
         if (coverage.options.paymentMode == SchemaConstants.PAYMENT_MODE.ANNUAL) {
            minError = "ERRC0158";
            maxError = "ERRC0159";
         } else if (coverage.options.paymentMode == SchemaConstants.PAYMENT_MODE.SEMIANNUAL) {
            minError = "ERRC0160";
            maxError = "ERRC0161";
         } else if (coverage.options.paymentMode == SchemaConstants.PAYMENT_MODE.QUARTERLY) {
            minError = "ERRC0162";
            maxError = "ERRC0163";
         } else if (coverage.options.paymentMode == SchemaConstants.PAYMENT_MODE.MONTHLY) {
            minError = "ERRC0164";
            maxError = "ERRC0165";
         }
      }

      /*
      var premiumRec = getPremiumRecord({
         premiumType: SchemaConstants.PREMIUM_RANGE_TYPE.PREMIUMTYPE_BASICPREMIUM,
         coverage: coverage,
         schema: schema
      });
      if (Utils.isNothing(premiumRec)) {
         premiumRec = getPremiumRecord({
            premiumType: SchemaConstants.PREMIUM_RANGE_TYPE.PREMIUMTYPE_PLANNEDPREMIUM,
            coverage: coverage,
            schema: schema
         });
      }
      if (!Utils.isNothing(premiumRec)) {
         minPP = Number( _PV( premiumRec, ['MinPremium'] ) );
         maxPP = Number( _PV( premiumRec, ['MaxPremium'] ) );
      }
      */
      var range = this.self.getPremiumRange({proposal: proposal});
      if (!Utils.isNothing(range)) {
          minPP = range.minLimit;
          maxPP = range.maxLimit;
      }
      _DB("minPP", minPP, "TotalPremiumValidationRule->");
      _DB("maxPP", maxPP, "TotalPremiumValidationRule->");


      if (totalPremium < minPP) {
         variables[PublicConstants.MESSAGE_FIELD.AMOUNT] = coverage.currency.currencyPK.currencyId + " " + minPP;
         if (minError != "") {
            return {
               code: minError,
               arguments: variables
            };
         }
      }
      if (totalPremium > maxPP) {
         variables[PublicConstants.MESSAGE_FIELD.AMOUNT] = coverage.currency.currencyPK.currencyId + " " + maxPP;
         if (maxError != "") {
            return {
               code: maxError,
               arguments: variables
            };
         }
      }
   }
});

var MPREPremiumValidationRule = Class.define({
   ruleName: function(args) {
      return "MPREPremiumValidationRule";
   },
   shouldTest: function(args) {
      return true;
   },
   scope: function(args) {
      return PublicConstants.TARGET_SCOPE.PROPOSAL;
   },
   validate: function(args) {
      var proposal = args["proposal"];
      var coverage = proposal.coverageInfo;
      var productId = _PV(coverage, 'product.productKey.primaryProduct.productPK.productId');
      var schema = coverage.schema.call("getSchema", null);
      var catalog = coverage.catalog.call("getCatalog", null);

      var constantPaymentMode = "";
      var minError = "";
      var maxError = "";
      var issueAge = _PV( coverage, 'parties.party.insuredAge' ) ;
      var maxPremium = 0;
      var minPremium = 0;
      var totalPremium = 0;

      if (coverage.catalog.call("isUVL")) {
         if (!coverage.catalog.call("isRegularSaving")) {
            if (!coverage.catalog.call("isSinglePremium")) {

               var plannedPremium = _PV( coverage, ['plannedPremium'] );
               if ((Utils.isNothing(plannedPremium) || plannedPremium == 0) && !coverage.catalog.call("isSinglePremium")) {
                  return {
                     code: "ERRC0166",
                     arguments: {"%PRODUCT_ID%" : productId}
                  };
               } else {
                  var annualMPRE = 0;
                  var annualPP = 0;
                  if (coverage.options.paymentMode == SchemaConstants.PAYMENT_MODE.MONTHLY) {
                     annualPP = plannedPremium * 12;
                  }

                  for (totalPremiumsKey in coverage._premiums.totalPremiums) {
                     var totalPremiumsRec = coverage._premiums.totalPremiums[totalPremiumsKey];
                     if (totalPremiumsRec.paymentMode == coverage.options.paymentMode) {
                        if (coverage.options.paymentMode == SchemaConstants.PAYMENT_MODE.ANNUAL) {
                           annualMPRE = totalPremiumsRec.totalPremium;
                        }
                     }
                  }

                  if (!Utils.isNothing(coverage.proposal.riders)) {
                     var ridersTable = Utils.iterator(coverage.proposal.riders.coverageInfo);
                     for (riderIndex in ridersTable) {
                        var riderCov = coverage.proposal.riders.coverageInfo[riderIndex];
                        for (totalPremiumsKey in riderCov._premiums.totalPremiums) {
                           var totalPremiumsRec = riderCov._premiums.totalPremiums[totalPremiumsKey];
                           if (totalPremiumsRec.paymentMode == riderCov.options.paymentMode) {
                              if (riderCov.options.paymentMode == SchemaConstants.PAYMENT_MODE.ANNUAL) {
                                 annualMPRE += totalPremiumsRec.totalPremium;
                              }
                           }
                        }
                     }
                  }

                  var compropPremium = coverage.compropPremium;
                  if (plannedPremium < compropPremium || annualPP < annualMPRE) {
                     return {
                        code: "ERRC0167",
                        arguments: {"%PRODUCT_ID%" : productId}
                     };

                  }
               }

               var premiumRec = getPremiumRecord({
                  premiumType: SchemaConstants.PREMIUM_RANGE_TYPE.PREMIUMTYPE_PLANNEDPREMIUM,
                  coverage: coverage,
                  schema: schema
               });
               if (!Utils.isNothing(premiumRec)) {
                  maxPremium = Number( _PV( premiumRec , ['MaxPremium'] ) );
               }

               if (maxPremium > 0 && plannedPremium > maxPremium) {
                  return {
                     code: "ERRC0168",
                     arguments: {"%PRODUCT_ID%" : productId}
                  };

               }

            } else {
               //
               var billingMethod = coverage.options.billingMethod;
               if (billingMethod.equalsIgnoreCase(SchemaConstants.BILLING_MODE.SINGLE) && plannedPremium > 0) {
                  return {
                     code: "ERRC0169",
                     arguments: {"%PRODUCT_ID%" : productId}
                  };
               } else {
                  // HasValue Logic
                  var premiumRec = getPremiumRecord({
                     premiumType: SchemaConstants.PREMIUM_RANGE_TYPE.PREMIUMTYPE_PLANNEDPREMIUM,
                     coverage: coverage,
                     hasValue: "Y",
                     schema: schema
                  });
                  if (!Utils.isNothing(premiumRec)) {
                     minPremium = Number( _PV( premiumRec, ['MinPremium'] ) );
                     maxPremium = Number( _PV( premiumRec, ['MaxPremium'] ) );
                  }
                  /*
                  for (premiumRangeKey in schema.ProductSchema.BasicParticular.PremiumRangeInformation.PremiumRange) {
                      var premiumRangeRec = schema.ProductSchema.BasicParticular.PremiumRangeInformation.PremiumRange[premiumRangeKey];
                      if ((coverage.currency.currencyPK.currencyId == premiumRangeRec.CurrencyPK.CurrencyId.text) && premiumRangeRec.HasValue == "Y" && (premiumRangeRec.PaymentMode.text == coverage.options.paymentMode) && (premiumRangeRec.Type == SchemaConstants.PREMIUM_RANGE_TYPE.PREMIUMTYPE_PLANNEDPREMIUM)) {
                          minPremium = premiumRangeRec.MinPremium.text;
                          maxPremium = premiumRangeRec.MaxPremium.text;
                      }
                  }*/
                  var variables = {"%PRODUCT_ID%" : productId};
                  variables[PublicConstants.MESSAGE_FIELD.AGE] = issueAge;
                  if (plannedPremium > 0 && plannedPremium < minPremium) {
                     return {
                        code: "ERRC0170",
                        arguments: variables
                     };
                  }
                  if (plannedPremium > 0 && plannedPremium < maxPremium) {
                     return {
                        code: "ERRC0171",
                        arguments: variables
                     };
                  }
               }

            }
         }
      } else {
         if (maxPremium > 0) {
            return {
               code: "ERRC0169",
               arguments: {"%PRODUCT_ID%" : productId}
            };

         }
      }
   }
});

var FaceAmountLimitBySmokingStatusValidationRule = Class.define({
   ruleName: function(args) {
      return "FaceAmountLimitBySmokingStatusValidationRule";
   },
   shouldTest: function(args) {
      return true;
   },
   scope: function(args) {
      return PublicConstants.TARGET_SCOPE.BASE_COVERAGE | PublicConstants.TARGET_SCOPE.RIDER_COVERAGE;
   },
   validate: function(args) {
      var coverage = args["coverage"];
      var productId = _PV(coverage, 'product.productKey.primaryProduct.productPK.productId');

      var schema = coverage.schema.call("getSchema", null);
      var variables = {"%PRODUCT_ID%" : productId};

      var insureds = _PV( coverage, 'parties.party' );
      if (Utils.isNothing(insureds)) {
          return {
             code: "ERRC0213",
             arguments: {"%PRODUCT_ID%" : productId}
          };
      }
      var insuredList = Utils.iterator( insureds );
      for (insuredIdx in insuredList) {
         var insured = insuredList[insuredIdx];
         var insuredAge = insured.insuredAge;
         var smokingStatus = insured.smokingStatus;
         _DB("insuredAge("+ insuredIdx + ")", insuredAge);
         _DB("smokingStatus("+ insuredIdx + ")", smokingStatus);

         variables[PublicConstants.MESSAGE_FIELD.SMOKING_STATUS] = "" + smokingStatus;

         var currencyId = coverage.currency.currencyPK.currencyId;
         var basicFaceAmount = Utils.isNothing(coverage.faceAmount) ? 0 : Number(coverage.faceAmount);
         if (!Utils.isNothing(schema.ProductSchema.BasicParticular.SmokingStatusRequirement)) {
            var smokingStatusReqTable = Utils.iterator(schema.ProductSchema.BasicParticular.SmokingStatusRequirement);
            for (smokingStatusReqi in smokingStatusReqTable) {
               var smokingStatusReqRec = smokingStatusReqTable[smokingStatusReqi];
               if (smokingStatusReqRec.status.toLowerCase() == (smokingstatus).toLowerCase()) {
                  if (!Utils.isNothing(smokingStatusReqRec.Requirement)) {
                     var requirementTable = Utils.iterator(smokingStatusReqRec.Requirement);
                     for (requirementI in requirementTable) {
                        var requirementRec = requirementTable[requirementI];
                        if (requirementRec.status.toLowerCase() == (smokingstatus).toLowerCase()) {
                           if (!Utils.isNothing(requirementRec.MinFA)) {
                              if (requirementRec.MinFA.curr.toLowerCase() == (currencyId).toLowerCase()) {
                                 if (basicFaceAmount < Number(requirementRec.MinFA.text)) {
                                    return {
                                       code: "ERRC0172",
                                       arguments: {"%PRODUCT_ID%" : productId}
                                    };
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }

   }
});


var JuvenileRiderTypeValidationRule = Class.define({
   ruleName: function(args) {
      return "JuvenileRiderTypeValidationRule";
   },
   shouldTest: function(args) {
      return true;
   },
   scope: function(args) {
      return PublicConstants.TARGET_SCOPE.RIDER_COVERAGE;
   },
   getJuvenileAge: function(args) {
      var location = args['location'];
      if ((location == CatalogConstants.LOCATION.HONGKONG) || (location == CatalogConstants.LOCATION.MACAU) || (location == CatalogConstants.LOCATION.CHINA))
         return 15;
      else
      if (location == CatalogConstants.LOCATION.SINGAPORE)
         return 17;
      else
         return 15; // default
   },
   isEqualsParty: function(args) {
      var party1 = args['party1'];
      var party2 = args['party2'];

      //"type" : "BASIC",
      //"smokingStatus" : "NS",
      //"insuredSex" : "M",
      //"insuredId" : "PROJ, RIDER(ADD 800K)",
      //"insuredAge" : 29,
      //"birthDate" : "19890305070000"

      if (Utils.isNothing(party1) || Utils.isNothing(party2)) return false;
      var result = (party1.type == party2.type) &&
             (party1.smokingStatus == party2.smokingStatus) &&
             (party1.insuredSex == party2.insuredSex) &&
             (party1.insuredAge == party2.insuredAge) &&
             (party1.insuredId == party2.insuredId)
      return result;
   },
   validate: function(args) {
      var coverage = args["coverage"];
      var productId = _PV(coverage, 'product.productKey.primaryProduct.productPK.productId');

      var isJuvenile = true;
      var basicParty = null;
      /*var riderCatalog = coverage.catalog.call("getCatalog", null);
      var baseCatalog = coverage.catalog.call("getCatalog", null);*/

      var riderCatalog = coverage.catalog.call("getCatalog", null);
      var riderSchema = coverage.schema.call("getSchema", null);
      //console.log("Rider Product = " + riderCatalog.ProductCatalog.ProductPK.ProductId.text);

      var catalog = coverage.proposal.coverageInfo.catalog.call("getCatalog", null);
      var schema = coverage.proposal.coverageInfo.schema.call("getSchema", null);
      //console.log("Base Product = " + catalog.ProductCatalog.ProductPK.ProductId.text);

      var basePlan = coverage.proposal.coverageInfo;
      var location = _PV( basePlan, ['product','productKey','location'] );
      //var juvenileAge = getJuvenileAge({
      //   location: location
      //});
      var juvenileAge = this.self.getJuvenileAge({ location: location });

      //var partyTable = Utils.iterator(basePlan.parties.party);
      //for (partyi in partyTable) {
      //   basicParty = partyTable[partyi];
      //   if (basicParty.insuredAge <= juvenileAge) {
      //      isJuvenile = true;
      //   }
      //}

      var primary = getPrimaryInsured({coverage: basePlan});
      if (Utils.isNothing(primary)) {
         return {
            code: "ERRC0213",
            arguments: {"%PRODUCT_ID%" : productId}
         };
      }
      var primaryInsuredAge = primary.insuredAge;
      var primaryInsuredType = primary.type;
      var isJuvenile = (primaryInsuredAge <= juvenileAge);

      if (!coverage.catalog.call("isRiderProductType") && !coverage.catalog.call("isBenefit")) {
         // Error: It is not a rider.
         return {
            code: "ERRC0192",
            arguments: {"%PRODUCT_ID%" : productId}
         };
      }

      var insureds = _PV( coverage, 'parties.party' );
      if (Utils.isNothing(insureds)) {
          return {
             code: "ERRC0213",
             arguments: {"%PRODUCT_ID%" : productId}
          };
      }
      var insuredList = Utils.iterator( insureds );
      for (insuredIdx in insuredList) {
         var insured = insuredList[insuredIdx];
         var insuredAge = insured.insuredAge;
         var insuredType = insured.type;
         _DB("insuredAge("+ insuredIdx + ")", insuredAge);
         _DB("insuredType("+ insuredIdx + ")", insuredType);

         //To DO : Clarification on product type compare logic
         if (!isJuvenile && basePlan.catalog.call("isFamilyProductType")) {
            if (coverage.catalog.call("isSpouseProductType")) {
               if (insuredType != CatalogConstants.PRODUCT_TYPE.SPOUSE) {
                  // Error: This rider is for spouse insured.
                  return {
                     code: "ERRC0193",
                     arguments: {"%INSURED%" : insured, "%PRODUCT_ID%" : productId}
                  };
               }
            //} else {
               /*
               if (coverage.parties.party.type != CatalogConstants.PRODUCT_TYPE.SPOUSE) {
                  // Error: This rider is for spouse insured.
                  return {
                     code: "ERRC0193",
                     arguments: {}
                  };
               } else
               if (coverage.parties.party.type != CatalogConstants.PRODUCT_TYPE.CHILD) {
                  //message = "Error: This rider is for child insured.";
                  return {
                     code: "ERRC0194",
                     arguments: {}
                  };
               } else
               if (coverage.parties.party.type != CatalogConstants.PRODUCT_TYPE.BASIC) {
                  //message = "Error: This rider is for basic insured.";
                  return {
                     code: "ERRC0195",
                     arguments: {}
                  };
               }
               */
            }
         } else {
            if (!this.self.isEqualsParty( { party1: primary, party2: insured } )) {
               // Error: Rider insured must be same as basic insured.
               return {
                  code: "ERRC0196",
                  arguments: {"%INSURED%" : insured, "%PRODUCT_ID%" : productId}
               };
            }
         }
      }

   }
});

var IIOWithIPOValidationRule = Class.define({
   ruleName: function(args) {
      return "IIOWithIPOValidationRule";
   },
   shouldTest: function(args) {
      return true;
   },
   scope: function(args) {
      return PublicConstants.TARGET_SCOPE.BASE_COVERAGE;
   },
   validate: function(args) {
      var coverage = args["coverage"];
      var productId = _PV(coverage, 'product.productKey.primaryProduct.productPK.productId');

      var schema = coverage.schema.call("getSchema", null);
      if (coverage.catalog.call("isUVL")) {
         if (coverage.schema.call("hasSupportOption", {
               option: SchemaConstants.SUPPORT_OPTION.IPO
            })) {
            if ((!Utils.isNothing(coverage.options)) && !(Utils.isNothing(coverage.options.IPO)) && (coverage.options.IPO == "Y")) {
               if (!(Utils.isNothing(coverage.options.IIO)) && (coverage.options.IIO.equalsIgnoreCase(SchemaConstants.OPTION_IIO.OPTION_IIO_BASIC))) {
                  // Error: IPO is not supported due to Basic IIO selected.
                  return {
                     code: "ERRC0173",
                     arguments: {"%PRODUCT_ID%" : productId}
                  };
               }
            }
         }
      }
   }
});

var DBWithIPOValidationRule = Class.define({
   ruleName: function(args) {
      return "DBWithIPOValidationRule";
   },
   shouldTest: function(args) {
      return true;
   },
   scope: function(args) {
      return PublicConstants.TARGET_SCOPE.BASE_COVERAGE;
   },
   validate: function(args) {
      var coverage = args["coverage"];
      var productId = _PV(coverage, 'product.productKey.primaryProduct.productPK.productId');

      var schema = coverage.schema.call("getSchema", null);
      if (coverage.catalog.call("isUVL")) {
         if (coverage.schema.call("hasSupportOption", {
               option: SchemaConstants.SUPPORT_OPTION.IPO
            })) {
            if ((!Utils.isNothing(coverage.options)) && !(Utils.isNothing(coverage.options.IPO))) {
               var dbOption = coverage.options.dbLevel;
               if (coverage.options.IPO == "Y") {
                  if (!coverage.schema.call("isIpoDBOptionSupported", {
                        ipoDbOption: dbOption
                     })) {
                     // Error: IPO is not supported for DB option selected.
                     return {
                        code: "ERRC0174",
                        arguments: {"%PRODUCT_ID%" : productId}
                     };
                  }
               }
            }
         }
      }
   }
});


var RiderIPOValidationRule = Class.define({
   ruleName: function(args) {
      return "RiderIPOValidationRule";
   },
   shouldTest: function(args) {
      return true;
   },
   getMinBasicLayerFA: function(args) {
      var coverage = args['coverage'];
      var schema = args['schema'];
      //Currency Filter - To Do Test
      if (Utils.isNothing(schema.ProductSchema.BasicParticular.MinInitialFAIPO)) {
         return 0;
      }
      var faIPOTable = Utils.iterator(schema.ProductSchema.BasicParticular.MinInitialFAIPO);
      for (recKey in faIPOTable) {
         var recInfo = faIPOTable[recKey];
         if (recInfo._currency != null && recInfo._currency == coverage.currency.currencyPK.currencyId) {
            return Number(recInfo.text);
         }
         return 0;
      }
   },
   scope: function(args) {
      return PublicConstants.TARGET_SCOPE.RIDER_COVERAGE;
   },
   validate: function(args) {
      var coverage = args["coverage"];
      var productId = _PV(coverage, 'product.productKey.primaryProduct.productPK.productId');

      var catalog = coverage.catalog.call("getCatalog", null);
      var schema = coverage.schema.call("getSchema", null);

      if ((!Utils.isNothing(coverage.options)) && !(Utils.isNothing(coverage.options.IPO)) && (coverage.options.IPO == "Y")) {
         if (!coverage.schema.call("hasSupportOption", {
               option: SchemaConstants.SUPPORT_OPTION.IPO
            })) {
            return {
               //"IPO is not supported."
               code: "ERRC0033",
               arguments: {"%PRODUCT_ID%" : productId}
            };
         } else {
            var insureds = _PV( coverage, 'parties.party' );
            if (Utils.isNothing(insureds)) {
                return {
                   code: "ERRC0213",
                   arguments: {"%PRODUCT_ID%" : productId}
                };
            }
            var insuredList = Utils.iterator( insureds );
            for (insuredIdx in insuredList) {
               var insured = insuredList[insuredIdx];
               var insuredAge = insured.insuredAge;
               _DB("insuredAge("+ insuredIdx + ")", insuredAge);

               var variables = {"%INSURED%" : insured, "%PRODUCT_ID%" : productId};
               variables[PublicConstants.MESSAGE_FIELD.MAXIMUM_BASIC_IPO_ISSUE_AGE] = "" + Number(schema.ProductSchema.BasicParticular.MaxBasicIPOIssueAge.text);
               variables[PublicConstants.MESSAGE_FIELD.MINIMUM_BASIC_IPO_ISSUE_AGE] = "" + Number(schema.ProductSchema.BasicParticular.MinBasicIPOIssueAge.text);
               if (insuredAge > Number(schema.ProductSchema.BasicParticular.MaxBasicIPOIssueAge.text)) {
                  // "IPO is not supported for age over " + psVO.getBasicParticular().getMaxBasicIPOIssueAge() + "."
                  return {
                     code: "ERRC0034",
                     arguments: variables
                  };
               } else if (insuredAge < Number(schema.ProductSchema.BasicParticular.MinBasicIPOIssueAge.text)) {
                  //"IPO is not supported for age below " + psVO.getBasicParticular().getMaxBasicIPOIssueAge() + ".
                  return {
                     code: "ERRC0034",
                     arguments: variables
                  };
               }
            }

            if (coverage.schema.call("hasExtraRating", {
                  coverage: coverage
               })) {
               return {
                  //IPO is not supported due to extra rating.
                  code: "ERRC0036",
                  arguments: {"%PRODUCT_ID%" : productId}
               };
            }

            var minBasicLayerFA = this.getMinBasicLayerFA({coverage: coverage, schema: schema});
            var basicFaceAmount = Utils.isNothing(coverage.faceAmount) ? 0 : Number(coverage.faceAmount);
            if (basicFaceAmount < minBasicLayerFA) {
               var variables = {"%PRODUCT_ID%" : productId};
               variables[PublicConstants.MESSAGE_FIELD.AMOUNT] = _V( _PV( coverage, 'currency.currencyPK.currencyId' ), "" ) + " " + minBasicLayerFA;
               //message = "Error: IPO cannot be selected if the initial face amount is less than $_"
               return {
                  code: "ERRC0175",
                  arguments: variables
               };
            }

         }
      }
   }
});

var IPOWithRidersValidationRule = Class.define({
   ruleName: function(args) {
      return "IPOWithRidersValidationRule";
   },
   shouldTest: function(args) {
      return true;
   },
   scope: function(args) {
      return PublicConstants.TARGET_SCOPE.BASE_COVERAGE;
   },
   validate: function(args) {
      var coverage = args["coverage"];
      var productId = _PV(coverage, 'product.productKey.primaryProduct.productPK.productId');

      var catalog = coverage.catalog.call("getCatalog", null);
      var schema = coverage.schema.call("getSchema", null);

      if (!((!Utils.isNothing(coverage.options)) && !(Utils.isNothing(coverage.options.IPO)) && (coverage.options.IPO == "Y"))) {
         if (!Utils.isNothing(coverage.proposal.riders)) {
            var ridersTable = Utils.iterator(coverage.proposal.riders.coverageInfo);
            for (riderIndex in ridersTable) {
               var riderCov = coverage.proposal.riders.coverageInfo[riderIndex];
               var riderCatalog = riderCov.catalog.call("getCatalog", null);
               var riderSchema = riderCov.schema.call("getSchema", null);
               if ((!Utils.isNothing(riderCov.options)) && !(Utils.isNothing(riderCov.options.IPO)) && (riderCov.options.IPO == "Y")) {
                  if (!Utils.isNothing(riderSchema)) {
                     if (riderCov.schema.call("hasSupportOption", {
                           option: SchemaConstants.SUPPORT_OPTION.IPO
                        })) {

                        if (riderCov.schema.call("hasSupportOption", {
                              option: SchemaConstants.SUPPORT_OPTION.IPO_WITH_BASIC_IPO
                           })) {
                           var variables = {"%PRODUCT_ID%" : productId};
                           variables[PublicConstants.MESSAGE_FIELD.PRODUCT_ID] = riderCov.product.productKey.primaryProduct.productPK.productId;
                           return {
                              // 610 - Error: The basic plan IPO must be selected if $_ IPO is selected.
                              code: "ERRC0176",
                              arguments: variables
                           };
                        }
                     }

                  }
               }
            }
         }
      }
   }
});

var DeathBenefitValidationRule = Class.define({
   ruleName: function(args) {
      return "DeathBenefitValidationRule";
   },
   shouldTest: function(args) {
      return true;
   },
   scope: function(args) {
      return PublicConstants.TARGET_SCOPE.BASE_COVERAGE | PublicConstants.TARGET_SCOPE.RIDER_COVERAGE;
   },
   validate: function(args) {
      var coverage = args["coverage"];
      var productId = _PV(coverage, 'product.productKey.primaryProduct.productPK.productId');

      var schema = coverage.schema.call("getSchema", null);

      var dbLevel = _PV(coverage, ['options', 'dbLevel']);
      var dbOptions = _PV(schema, ['ProductSchema','BasicParticular','SupportDeathBenefit','DeathBenefit']);

      if (dbOptions && dbOptions.length > 0) {
         if (Utils.isNothing( _PV(coverage, ['options', 'dbLevel']) )) {
            return {
               // Error: The death benefit option is not set.
               code: "ERRC0078",
               arguments: {"%PRODUCT_ID%" : productId}
            };
         }

         if (!coverage.schema.call("isDBOptionSupported", {dbOption: coverage.options.dbLevel})) {
            if (coverage.options.dbLevel == SchemaConstants.DB_OPTION.LEVEL) {
               return {
                  //message = "Error: The level death benefit option is not supported.";
                  code: "ERRC0081",
                  arguments: {"%PRODUCT_ID%" : productId}
               };
            } else if (coverage.options.dbLevel == SchemaConstants.DB_OPTION.INCREASE) {
               return {
                  //message = "Error: The increase death benefit option is not supported.";
                  code: "ERRC0082",
                  arguments: {"%PRODUCT_ID%" : productId}
               };
            } else if (coverage.options.dbLevel == SchemaConstants.DB_OPTION.INDEXED) {
               return {
                  //message = "Error: The indexed death benefit option is not supported.";
                  code: "ERRC0083",
                  arguments: {"%PRODUCT_ID%" : productId}
               };
            } else if (coverage.options.dbLevel == SchemaConstants.DB_OPTION.ROP) {
               return {
                  //message = "Error: The ROP death benefit option is not supported.";
                  code: "ERRC0084",
                  arguments: {"%PRODUCT_ID%" : productId}
               };
            }
         }
      } else {
         if (!Utils.isNothing( _PV(coverage, ['options', 'dbLevel']) )) {
            return {
               code: "ERRC0211",
               arguments: {"%PRODUCT_ID%" : productId}
            };
         }
      }
   }
});

var ExtraWithIPOValidationRule = Class.define({
   ruleName: function(args) {
      return "ExtraWithIPOValidationRule";
   },
   shouldTest: function(args) {
      return true;
   },
   scope: function(args) {
      return PublicConstants.TARGET_SCOPE.RIDER_COVERAGE;
   },
   validate: function(args) {
      var coverage = args["coverage"];
      var productId = _PV(coverage, 'product.productKey.primaryProduct.productPK.productId');

      var schema = coverage.schema.call("getSchema", null);
      var basePlan = coverage.proposal.coverageInfo;
      //To DO Clarification of logic
      if ((!Utils.isNothing(basePlan.options)) && !(Utils.isNothing(basePlan.options.IPO)) && (basePlan.options.IPO == "Y")) {
         if (!coverage.schema.call("hasSupportOption", {
               option: SchemaConstants.SUPPORT_OPTION.EXTRA_RATING_WITH_IPO
            })) {
            if (coverage.schema.call("hasExtraRating", {
                  coverage: coverage
               })) {
               return {
                  //IPO is not supported due to extra rating.
                  code: "ERRC0036",
                  arguments: {"%PRODUCT_ID%" : productId}
               };
            }
         }
      }
   }
});

var SupportRCCValidationRule = Class.define({
   ruleName: function(args) {
      return "SupportRCCValidationRule";
   },
   shouldTest: function(args) {
      return true;
   },
   scope: function(args) {
      return PublicConstants.TARGET_SCOPE.BASE_COVERAGE | PublicConstants.TARGET_SCOPE.RIDER_COVERAGE;
   },
   validate: function(args) {
      var coverage = args["coverage"];
      var productId = _PV(coverage, 'product.productKey.primaryProduct.productPK.productId');

      var schema = coverage.schema.call("getSchema", null);
      var basePlan = coverage.proposal.coverageInfo;
      if (!coverage.schema.call("hasSupportOption", {
            option: SchemaConstants.SUPPORT_OPTION.RCC
         })) {

         _DB("rcc", coverage.rcc);

         if (!Utils.isNothing(coverage.rcc) && coverage.rcc == "Y") {
            return {
               //"Error: It does not support RCC."
               code: "ERRC0051",
               arguments: {"%PRODUCT_ID%" : productId}
            };
         }
      }
   }
});

var NoOfPersonLimitsValidationRule = Class.define({
   ruleName: function(args) {
      return "NoOfPersonLimitsValidationRule";
   },
   shouldTest: function(args) {
      return true;
   },
   scope: function(args) {
      return PublicConstants.TARGET_SCOPE.RIDER_COVERAGE;
   },
   validate: function(args) {
      var coverage = args["coverage"];
      var productId = _PV(coverage, 'product.productKey.primaryProduct.productPK.productId');

      var schema = coverage.schema.call("getSchema", null);
      var basePlan = coverage.proposal.coverageInfo;
      var personsLimit;
      var noOfPerson = 0;
      if (coverage.schema.call("hasSupportOption", {
            option: SchemaConstants.SUPPORT_OPTION.PERSONS_LIMIT
         })) {
         //if (!(Utils.isNothing(schema.ProductSchema.BasicParticular.SupportNoOfPersons))) {
         //   personsLimit = Number(schema.ProductSchema.BasicParticular.SupportNoOfPersons.PersonsLimit.text);
         //}
         personsLimit = Utils.iterator( _PV( schema, "ProductSchema.BasicParticular.SupportNoOfPersons.PersonsLimit" ) );
         if (personsLimit.length > 0) {
            //if ((!Utils.isNothing(coverage.otherOptions)) && !(Utils.isNothing(coverage.otherOptions.noOfPerson))) {
            //   noOfPerson = Number(coverage.otherOptions.noOfPerson);
            //}

            noOfPerson = _V( _PV( coverage, "otherOptions.noOfPerson" ), 0 );
            var maxPersonLimits = 0;
            for( personsLimitIdx in personsLimit ) {
               var personsLimitNo = _V( personsLimit[personsLimitIdx] );
               maxPersonLimits = Math.max( maxPersonLimits, Number(personsLimitNo) );
            }

            if ( noOfPerson > maxPersonLimits ) {
               var variables = {"%PRODUCT_ID%" : productId};
               variables[PublicConstants.MESSAGE_FIELD.COUNT] = "" + maxPersonLimits;
               return {
                  // Error: It does not support more than "+ limit +" person(s).
                  code: "ERRC0177",
                  arguments: variables
               };
            }
         }
      }
   }
});

var NoOfPersonValidationRule = Class.define({
   ruleName: function(args) {
      return "NoOfPersonValidationRule";
   },
   shouldTest: function(args) {
      return true;
   },
   scope: function(args) {
      return PublicConstants.TARGET_SCOPE.RIDER_COVERAGE;
   },
   validate: function(args) {
      var coverage = args["coverage"];
      var productId = _PV(coverage, 'product.productKey.primaryProduct.productPK.productId');

      var schema = coverage.schema.call("getSchema", null);
      var basePlan = coverage.proposal.coverageInfo;
      var personsLimit = 0;
      var noOfPerson = 0;
      var found = false;
      var messageCode = null;
      // HP Series
      if (coverage.schema.call("hasSupportOption", {
            option: SchemaConstants.SUPPORT_OPTION.PERSONS_LIMIT
         })) {
         //personsLimit = Number( _V( _PV( schema, 'ProductSchema.BasicParticular.SupportNoOfPersons.PersonsLimit'), 0) );
         personsLimit = Utils.iterator( _PV( schema, 'ProductSchema.BasicParticular.SupportNoOfPersons.PersonsLimit') );
         if (personsLimit.length > 0) {
            //if ((!Utils.isNothing(coverage.otherOptions)) && !(Utils.isNothing(coverage.otherOptions.noOfPerson))) {
            //   noOfPerson = Number(coverage.otherOptions.noOfPerson);
            //}
            noOfPerson = _V( _PV(coverage, "otherOptions.noOfPerson") );
            var variables = {"%PRODUCT_ID%" : productId};
            //variables[PublicConstants.MESSAGE_FIELD.COUNT] = personsLimit;
            if (noOfPerson == Number(SchemaConstants.NO_OF_PERSONS.PERSONS_1)) {
               found = true;
               if (!coverage.schema.call("isNoOfPersonSupported", {
                     noOfPersonOption: SchemaConstants.NO_OF_PERSONS.PERSONS_1
                  })) {
                  //message = "Error: it does not support single person.";
                  messageCode = "ERRC0178";
               }
            }
            if (noOfPerson == Number(SchemaConstants.NO_OF_PERSONS.PERSONS_2)) {
               found = true;
               if (!coverage.schema.call("isNoOfPersonSupported", {
                     noOfPersonOption: SchemaConstants.NO_OF_PERSONS.PERSONS_2
                  })) {
                  //message = "Error: it does not support double person.";
                  messageCode = "ERRC0179";
               }
            }
            if (noOfPerson == Number(SchemaConstants.NO_OF_PERSONS.PERSONS_3)) {
               found = true;
               if (!coverage.schema.call("isNoOfPersonSupported", {
                     noOfPersonOption: SchemaConstants.NO_OF_PERSONS.PERSONS_3
                  })) {
                  //message = "Error: it does not support 3 person.";
                  messageCode = "ERRC0180";
               }
            }
            if (noOfPerson == Number(SchemaConstants.NO_OF_PERSONS.PERSONS_4)) {
               found = true;
               if (!coverage.schema.call("isNoOfPersonSupported", {
                     noOfPersonOption: SchemaConstants.NO_OF_PERSONS.PERSONS_4
                  })) {
                  //message = "Error: it does not support 4 person.";
                  messageCode = "ERRC0181";
               }
            }
            if (!found) {
               return {
                  // Error: No person number is entered.
                  code: "ERRC0182",
                  arguments: {"%PRODUCT_ID%" : productId}
               };
            } else {
               if (!(Utils.isNothing(messageCode))) {
                  return {
                     code: messageCode,
                     arguments: {"%PRODUCT_ID%" : productId}
                  };
               }
            }
         }

         /*
         if (found) {
            if (noOfPerson != Number(SchemaConstants.NO_OF_PERSONS.PERSONS_1) && basePlan.parties.party.insuredAge <= Number(InterfaceConstants.SINGLEPLAN_AGE)) {
               // Error: Only single plan (1 person) supports age 17 or below.
               return {

                  code: "ERRC0184",
                  arguments: {"%PRODUCT_ID%" : productId}
               };
            }
         } else {
            if ((noOfPerson == Number(SchemaConstants.NO_OF_PERSONS.PERSONS_1)) || (noOfPerson == Number(SchemaConstants.NO_OF_PERSONS.PERSONS_2)) || (noOfPerson == Number(SchemaConstants.NO_OF_PERSONS.PERSONS_3)) || (noOfPerson == Number(SchemaConstants.NO_OF_PERSONS.PERSONS_4))) {
               return {
                  //"Error: No. of person is not required."
                  code: "ERRC0183",
                  arguments: {"%PRODUCT_ID%" : productId}
               };
            }
         }
         */
      }
   }
});


var MajorMedicalValidationRule = Class.define({
   ruleName: function(args) {
      return "MajorMedicalValidationRule";
   },
   shouldTest: function(args) {
      return true;
   },
   scope: function(args) {
      return PublicConstants.TARGET_SCOPE.RIDER_COVERAGE;
   },
   validate: function(args) {
      var coverage = args["coverage"];
      var productId = _PV(coverage, 'product.productKey.primaryProduct.productPK.productId');

      var schema = coverage.schema.call("getSchema", null);
      var basePlan = coverage.proposal.coverageInfo;
      var majorMedical = null;
      // HP Series
      if (coverage.schema.call("hasSupportOption", {
            option: SchemaConstants.SUPPORT_OPTION.PERSONS_LIMIT
         })) {
         //if ((!Utils.isNothing(coverage.otherOptions)) && !(Utils.isNothing(coverage.otherOptions.majorMedical))) {
         //   majorMedical = (coverage.otherOptions.majorMedical);
         //}
         majorMedical = _PV( coverage, "otherOptions.majorMedical" );
         var isMajorMedicalSupportedY = (coverage.schema.call("isMajorMedicalOptionSupported", {
            majorMedicalOption: SchemaConstants.MAJOR_MEDICAL.Y
         }));
         var isMajorMedicalSupportedP = (coverage.schema.call("isMajorMedicalOptionSupported", {
            majorMedicalOption: SchemaConstants.MAJOR_MEDICAL.P
         }));
         var isMajorMedicalSupportedN = (coverage.schema.call("isMajorMedicalOptionSupported", {
            majorMedicalOption: SchemaConstants.MAJOR_MEDICAL.N
         }));

         if (majorMedical == 'Y' && !isMajorMedicalSupportedY) {
            return {
               //"Error: It does not support major medical."
               code: "ERRC0185",
               arguments: {"%PRODUCT_ID%" : productId}
            };
         }
         if (majorMedical == 'P' && !isMajorMedicalSupportedP) {
            return {
               //"Error: It does not support major medical (P)."
               code: "ERRC0223",
               arguments: {"%PRODUCT_ID%" : productId}
            };
         }
         if ((majorMedical != 'Y' && majorMedical != 'P') && !isMajorMedicalSupportedN && (isMajorMedicalSupportedY || isMajorMedicalSupportedP)) {
            return {
               // Error: The major medical option is not set.
               code: "ERRC0186",
               arguments: {"%PRODUCT_ID%" : productId}
            };
         }
      }
   }
});

var CoverageClassValidationRule = Class.define({
   ruleName: function(args) {
      return "CoverageClassValidationRule";
   },
   shouldTest: function(args) {
      return true;
   },
   scope: function(args) {
      return PublicConstants.TARGET_SCOPE.RIDER_COVERAGE;
   },
   validate: function(args) {
      var coverage = args["coverage"];
      var productId = _PV(coverage, 'product.productKey.primaryProduct.productPK.productId');

      var schema = coverage.schema.call("getSchema", null);
      var basePlan = coverage.proposal.coverageInfo;
      var coverageClassSupported = null;
      var coverageClass = null;
      var found = false;
      var messageCode = null;
      // HP Series
      if (coverage.schema.call("hasSupportOption", {
            option: SchemaConstants.SUPPORT_OPTION.PERSONS_LIMIT
         })) {

         //if (!(Utils.isNothing(schema.ProductSchema.BasicParticular.SupportOtherOptions)) && !(Utils.isNothing(schema.ProductSchema.BasicParticular.CoverageClass))) {
         //   coverageClassSupported = (schema.ProductSchema.BasicParticular.SupportOtherOptions.CoverageClass.text);
         //}
         coverageClassSupported = Utils.iterator( _PV( schema, "ProductSchema.BasicParticular.SupportOtherOptions.CoverageClass" ) );
         if (!Utils.isNothing(coverageClassSupported)) {
            //if ((!Utils.isNothing(coverage.otherOptions)) && !(Utils.isNothing(coverage.otherOptions.coverageClass))) {
            //   coverageClass = (coverage.otherOptions.coverageClass);
            //}
            coverageClass = _V(_PV(coverage, "otherOptions.coverageClass"));
            if (coverageClass == (SchemaConstants.COVERAGE_CLASS.CLASS_A)) {
               found = true;
               if (!coverage.schema.call("isClassOtherOptionSupported", {
                     classOtherOption: SchemaConstants.COVERAGE_CLASS.CLASS_A
                  })) {
                  //message = "Error: Coverage Class A is not supported.";
                  messageCode = "ERRC0187";
               }
            }
            if (coverageClass == (SchemaConstants.COVERAGE_CLASS.CLASS_B)) {
               found = true;
               if (!coverage.schema.call("isClassOtherOptionSupported", {
                     classOtherOption: SchemaConstants.COVERAGE_CLASS.CLASS_B
                  })) {
                  //message = "Error: Coverage Class B is not supported.";
                  messageCode = "ERRC0188";
               }
            }
            if (coverageClass == (SchemaConstants.COVERAGE_CLASS.CLASS_C)) {
               found = true;
               if (!coverage.schema.call("isClassOtherOptionSupported", {
                     classOtherOption: SchemaConstants.COVERAGE_CLASS.CLASS_C
                  })) {
                  //message = "Error: Coverage Class C is not supported.";
                  messageCode = "ERRC0189";
               }
            }
            if (coverageClass == (SchemaConstants.COVERAGE_CLASS.CLASS_D)) {
               found = true;
               if (!coverage.schema.call("isClassOtherOptionSupported", {
                     classOtherOption: SchemaConstants.COVERAGE_CLASS.CLASS_D
                  })) {
                  //message = "Error: Coverage Class D is not supported.";
                  messageCode = "ERRC0190";
               }
            }
            if (coverageClass == SchemaConstants.COVERAGE_CLASS.CLASS_S || coverageClass == SchemaConstants.COVERAGE_CLASS.CLASS_E ||
                coverageClass == SchemaConstants.COVERAGE_CLASS.CLASS_F || coverageClass == SchemaConstants.COVERAGE_CLASS.CLASS_G ||
                coverageClass == SchemaConstants.COVERAGE_CLASS.CLASS_H) {
               found = true;
               if (!coverage.schema.call("isClassOtherOptionSupported", {
                     classOtherOption: coverageClass
                  })) {
                  //message = "Error: Coverage Class D is not supported.";
                  messageCode = "ERRC0224";
               }
            }

            if (!found) {
               return {
                  //"Error: No coverage class is set.";
                  code: "ERRC0191",
                  arguments: {"%PRODUCT_ID%" : productId}
               };
            } else {
               if (!(Utils.isNothing(messageCode))) {
                  return {
                     code: messageCode,
                     arguments: {"%PRODUCT_ID%" : productId, "%COVERAGE_CLASS%" : coverageClass}
                  };
               }
            }
         }
      }
   }
});


var NonHpSeriesValidationRule = Class.define({
   ruleName: function(args) {
      return "NonHpSeriesValidationRule";
   },
   shouldTest: function(args) {
      return true;
   },
   scope: function(args) {
      return PublicConstants.TARGET_SCOPE.BASE_COVERAGE | PublicConstants.TARGET_SCOPE.RIDER_COVERAGE;
   },
   validate: function(args) {
      var coverage = args["coverage"];
      var productId = _PV(coverage, 'product.productKey.primaryProduct.productPK.productId');

      var schema = coverage.schema.call("getSchema", null);
      var basePlan = coverage.proposal.coverageInfo;
      var coverageClassSupported = null;
      var coverageClass = null;
      var majorMedical = null;
      var found = false;
      var messageCode = null;
      var noOfPerson = 0;
      var partyLength = 0;
      // HP Series
      if (!coverage.schema.call("hasSupportOption", {
            option: SchemaConstants.SUPPORT_OPTION.PERSONS_LIMIT
         })) {
         if ((!Utils.isNothing(coverage.otherOptions)) && !(Utils.isNothing(coverage.otherOptions.coverageClass))) {
            coverageClass = (coverage.otherOptions.coverageClass);
         }
         if ((!Utils.isNothing(coverage.otherOptions)) && !(Utils.isNothing(coverage.otherOptions.noOfPerson))) {
            noOfPerson = Number(coverage.otherOptions.noOfPerson);
         }

         if (!Utils.isNothing(coverage.parties) && !Utils.isNothing(coverage.parties.party)) {
            var partyTable = Utils.iterator(coverage.parties.party);
            partyLength = partyTable.length;
         }

         if ((!Utils.isNothing(coverage.otherOptions)) && !(Utils.isNothing(coverage.otherOptions.majorMedical))) {
            majorMedical = (coverage.otherOptions.majorMedical);
         }

         if ((noOfPerson == Number(SchemaConstants.NO_OF_PERSONS.PERSONS_1)) || (noOfPerson == Number(SchemaConstants.NO_OF_PERSONS.PERSONS_2)) || (noOfPerson == Number(SchemaConstants.NO_OF_PERSONS.PERSONS_3)) || (noOfPerson == Number(SchemaConstants.NO_OF_PERSONS.PERSONS_4)) || partyLength > 1) {
            return {
               //"Error: It does not support multiple person."
               code: "ERRC0199",
               arguments: {"%PRODUCT_ID%" : productId}
            };
         }

         if (coverageClass == SchemaConstants.COVERAGE_CLASS.CLASS_A || coverageClass == SchemaConstants.COVERAGE_CLASS.CLASS_B || coverageClass == SchemaConstants.COVERAGE_CLASS.CLASS_C || coverageClass == SchemaConstants.COVERAGE_CLASS.CLASS_D) {
            return {
               //"Error: It does not support coverage class.";
               code: "ERRC0198",
               arguments: {"%PRODUCT_ID%" : productId}
            };
         }
         if (majorMedical == SchemaConstants.MAJOR_MEDICAL.Y) {
            return {
               //"Error: It does not support major medical.";
               code: "ERRC0185",
               arguments: {"%PRODUCT_ID%" : productId}
            };
         }
      }
   }
});

var BenefitOptionValidationRule = Class.define({
   ruleName: function(args) {
      return "BenefitOptionValidationRule";
   },
   shouldTest: function(args) {
      return true;
   },
   scope: function(args) {
      return PublicConstants.TARGET_SCOPE.BASE_COVERAGE | PublicConstants.TARGET_SCOPE.RIDER_COVERAGE;
   },
   validate: function(args) {
      var coverage = args["coverage"];
      var productId = _PV(coverage, 'product.productKey.primaryProduct.productPK.productId');

      var schema = coverage.schema.call("getSchema", null);
      var basePlan = coverage.proposal.coverageInfo;
      var baseSchema = coverage.proposal.coverageInfo.schema.call("getSchema", null);
      var baseCatalog = coverage.proposal.coverageInfo.catalog.call("getCatalog", null);
      var hasBenefitOptionSupport = coverage.schema.call("hasSupportOption", {
         option: SchemaConstants.SUPPORT_OPTION.HAS_BENEFIT_OPTION
      })

      if (Utils.isNothing(coverage.benefitOption)) {
         if (hasBenefitOptionSupport) {
            // Error: Benefit Option is missing.
            return {
               code: "ERRC0202",
               arguments: {"%PRODUCT_ID%" : productId}
            };
         }
      } else {
         if (hasBenefitOptionSupport) {
            benefitOptionRec = getBenefitOptionRecord({
               coverage: coverage,
               schema: schema,
               benefitOptionType: coverage.benefitOption
            });
            if (benefitOptionRec != null) {
               var insureds = _PV( coverage, 'parties.party' );
               if (Utils.isNothing(insureds)) {
                   return {
                      code: "ERRC0213",
                      arguments: {"%PRODUCT_ID%" : productId}
                   };
               }
               var insuredList = Utils.iterator( insureds );
               for (insuredIdx in insuredList) {
                  var insured = insuredList[insuredIdx];
                  var age = insured.insuredAge;
                  _DB("insuredAge("+ insuredIdx + ")", age);

                  var basicFaceAmount = Utils.isNothing(coverage.faceAmount) ? 0 : Number(coverage.faceAmount);

                  var minFA = Number(benefitOption.minFaceAmount);
                  var maxFA = Number(benefitOption.maxFaceAmount);

                  var minAge = Number(benefitOption.minAge);
                  var maxAge = Number(benefitOption.maxAge);

                  if (!(age >= minAge && age <= maxAge)) {
                     // Error: Invalid insured age for ??. (name of Benefit Option)
                     var variables = {"%INSURED%" : insured, "%PRODUCT_ID%" : productId};
                     // TO DO BenefitOption Name
                     variables[PublicConstants.MESSAGE_FIELD.BENEFIT_OPTION_NAME] = coverage.benefitOption;
                     return {
                        code: "ERRC0200",
                        arguments: variables
                     };
                  }

                  if (!(basicFaceAmount >= minFA && basicFaceAmount <= maxFA)) {
                     if (basicFaceAmount < minFA) {
                        //The face amount below the minimum for $_.
                        var msgCode = "ERRC0201"; //248
                        if (coverage.catalog.call("isRegularSaving") || coverage.catalog.call("isUVL")) {
                           //M325", "Error: The annualized Base Saving premium below the minimum for $_.
                           msgCode = "ERRC0203";
                        }
                        var variables = {"%INSURED%" : insured, "%PRODUCT_ID%" : productId};
                        // TO DO BenefitOption Name
                        variables[PublicConstants.MESSAGE_FIELD.BENEFIT_OPTION_NAME] = coverage.benefitOption;
                        return {
                           code: msgCode,
                           arguments: variables
                        };
                     } else {
                        var msgCode = "ERRC0204"; //249
                        if (coverage.catalog.call("isRegularSaving") || coverage.catalog.call("isUVL")) {
                           //M326", "Error: The annualized Base Saving premium below the minimum for $_.
                           msgCode = "ERRC0205";
                        }
                        var variables = {"%INSURED%" : insured, "%PRODUCT_ID%" : productId};
                        // TO DO BenefitOption Name
                        variables[PublicConstants.MESSAGE_FIELD.BENEFIT_OPTION_NAME] = coverage.benefitOption;
                        return {
                           code: msgCode,
                           arguments: variables
                        };
                     }
                  }
               }
            }
         } else {
            // Error: Benefit Option not matched with Base Plan.
            return {
               code: "ERRC0206",
               arguments: {"%PRODUCT_ID%" : productId}
            };
         }
      }
   }
});

var FundActivityValidationRule = Class.define({
   ruleName: function(args) {
      return "FundActivityValidationRule";
   },
   shouldTest: function(args) {
      return true;
   },
   scope: function(args) {
      return PublicConstants.TARGET_SCOPE.BASE_COVERAGE;
   },
   getMinSubscription: function(args) {
      var coverage = args['coverage'];

   },
   getMaxSubscription: function(args) {
      var coverage = args['coverage'];
      var currency = _PV( coverage, "currency.currencyPK.currencyId" );

      var maxSubcription = 0;
      var schema = coverage.schema.call("getSchema", {});
      var maxSubscriptionList = _PV(schema, "ProductSchema.BasicParticular.MaxSubscription");
      if (!Utils.isNothing(maxSubscriptionList)) {
         for(var idx in maxSubscriptionList) {
            var maxSubcriptionItem = maxSubscriptionList[idx];
            var currencyCode = _PV(maxSubcriptionItem, "currency");
            if (currencyCode == currency) {
               var maxSubcript = _PV(maxSubcriptionItem, "text");
               if (!Utils.isNothing(maxSubcript)) {
                  maxSubcription = Math.max(Number(maxSubcript), maxSubcription);
                  break;
               }
            }
         }
      }

      /* new Max/Min Limits */
      var currencyBaseLimits = _PV(schema, "ProductSchema.CurrencyBaseLimits.CurrencyLimitRecord");
      if (!Utils.isNothing(currencyBaseLimits)) {
         for(var idx in currencyBaseLimits) {
            var currencyBaseLimitItem = currencyBaseLimits[idx];
            var currencyCode = _PV(currencyBaseLimitItem, "CurrencyPK.CurrencyId");
            var nature = _PV(currencyBaseLimitItem, "LimitNature");
            if (currencyCode == currency && nature == "Max") {
               var maxSubcript = _PV(currencyBaseLimitItem, "TotalSubscription");
               if (!Utils.isNothing(maxSubcript)) {
                  maxSubcription = Math.max(Number(maxSubcript), maxSubcription);
                  break;
               }
            }
         }
      }
      return maxSubcription;
   },

   getLimits : function(args) {
      // duration is policy year.
      var coverage = args['coverage'];
      var duration = args['duration'];
      var changeType = args['changeType'];

      var schema = coverage.schema.call('getSchema');
      var fundChangeRec = getFundChangeRecord({
         fundChange: changeType,
         coverage: coverage,
         duration: duration,
         schema: schema
      });

      var minLimit = 0;
      var maxLimit = 999999999;
      if (!Utils.isNothing(fundChangeRec)) {
         minLimit = Number( _PV( fundChangeRec, "MinIncrease" ) );
         maxLimit = Number( _PV( fundChangeRec, "MaxIncrease" ) );
      }

      return {"minLimit":minLimit, "maxLimit":maxLimit};
   },

   getDumpinLimits : function(args) {
      return this.self.getLimits({
         coverage: args['coverage'],
         duration: args['duration'],
         changeType: SchemaConstants.FUND_CHANGE_TYPE.DUMPIN
      });
   },

   getWithdrawalLimits : function(args) {
      return this.self.getLimits({
         coverage: args['coverage'],
         duration: args['duration'],
         changeType: SchemaConstants.FUND_CHANGE_TYPE.WITHDRAWAL
      });
   },

   getPremiumLimits : function(args) {
      var coverage = args['coverage'];
      var premiumType = args['premiumType'];

      var schema = coverage.schema.call("getSchema");
      var premiumRec = getPremiumRecord({
         premiumType: premiumType,
         coverage: coverage,
         schema: schema
      });

      var minPremium = 0;
      var maxPremium = 999999999;
      if (!Utils.isNothing(premiumRec)) {
         minPremium = Number( _PV( premiumRec, 'MinPremium' ) );
         maxPremium = Number( _PV( premiumRec, 'MaxPremium' ) );
      }
      return {minPremium: minPremium, maxPremium: maxPremium};
   },

   getPlannedPremiumLimits : function(args) {
      return this.self.getPremiumLimits({
         premiumType: SchemaConstants.PREMIUM_RANGE_TYPE.PREMIUMTYPE_PLANNEDPREMIUM,
         coverage: args['coverage']
      });
   },

   getFaceAmountLimits : function(args) {
      var coverage = args['coverage'];
      var schema = coverage.schema.call("getSchema", null);
      var primary = getPrimaryInsured({coverage: coverage});
      if (Utils.isNothing(primary)) {
         return {
            code: "ERRC0213",
            arguments: {"%PRODUCT_ID%" : productId}
         };
      }
      var insuredAge = primary.insuredAge;

      var minFA = 99989898989898.999;
      var maxFA = -99989898989898.999;
      var result = {};
      for (var bandKey in schema.ProductSchema.BandInformation.BandRecord) {
         var bandRec = schema.ProductSchema.BandInformation.BandRecord[bandKey];
         if (!Utils.isNothing(bandRec.CurrencyPK)) {
            //console.log("productRules.length = " + bandRec.CurrencyPK.CurrencyId.text);
            if (coverage.currency.currencyPK.currencyId == bandRec.CurrencyPK.CurrencyId.text) {
               if (insuredAge >= Number(bandRec.MinIssueAge.text) && insuredAge <= Number(bandRec.MaxIssueAge.text)) {
                  minFA = Math.min(minFA, Number(bandRec.MinFaceAmount.text));
                  maxFA = Math.max(maxFA, Number(bandRec.MaxFaceAmount.text));
               }
            }
         }
      }
      _DB("Min/Max", minFA+"/"+maxFA, "FundActivitiesValidationRule->");

      return {minLimit: minFA, maxLimit: maxFA};
   },

   getFaceAmountChangeLimit: function(args) {
      var coverage = args['coverage'];
      var schema = coverage.schema.call("getSchema", null);
      var primary = getPrimaryInsured({coverage: coverage});
      if (Utils.isNothing(primary)) {
         return {
            code: "ERRC0213",
            arguments: {"%PRODUCT_ID%" : productId}
         };
      }
      var insuredAge = primary.insuredAge;

      var minFA = -99989898989898.999;
      var maxFA = 99989898989898.999;
      var result = {};
      // Fund activity change limits
      var fundChangeLimit = getFundChangeRecord({
          coverage: coverage,
          fundChange: SchemaConstants.FUND_CHANGE_TYPE.FACEAMOUNT,
          duration: 0,
          schema: schema
      });
      if (!Utils.isNothing(fundChangeLimit)) {
          _DB("Fund change limt", fundChangeLimit, "FundActivitiesValidationRule->");
          if (!Utils.isNothing(fundChangeLimit.MinIncrease)) {
              minFA = Math.max( minFA, Number(_V(fundChangeLimit.MinIncrease)) );
          }
          if (!Utils.isNothing(fundChangeLimit.MaxIncrease)) {
              maxFA = Math.min( maxFA, Number(_V(fundChangeLimit.MaxIncrease)) );
          }
          _DB("Face amount change limit (Min/Max)", minFA+"/"+maxFA, "FundActivitiesValidationRule->");
      } else {
          _DB("Face amount change limit", "nil" , "FundActivitiesValidationRule->");
      }

      return {minLimit: minFA, maxLimit: maxFA};
   },

   validate: function(args) {
      var coverage = args["coverage"];
      var productId = _PV(coverage, 'product.productKey.primaryProduct.productPK.productId');

      var schema = coverage.schema.call("getSchema", null);
      var productId = _PV( coverage, "product.productKey.primaryProduct.productPK.productId" );
      var catalog = coverage.catalog.call("getCatalog", null);
      if (!(coverage.catalog.call("isUVL"))) {
         return;
      }

      var isCurrencySupported = (coverage.schema.call("isCurrencySupported", {
         currencyId: _PV( coverage, "currency.currencyPK.currencyId" )
      }));

      var insured = getPrimaryInsured({coverage: coverage});
      if (Utils.isNothing(insured)) {
         return {
            code: "ERRC0213",
            arguments: {"%PRODUCT_ID%" : productId}
         };
      }
      var issueAge = insured.insuredAge;

      var maxSubscriptionHit = false;
      var totalSubscription = 0;
      var maxSubscription = this.self.getMaxSubscription({coverage : coverage});

      _DB("maxSubscription(" + productId + ")", maxSubscription);

      totalSubscription += coverage.initialDumpIn;
      if (totalSubscription > maxSubscription) {
         // 267 Error: The total subscription is over the maximum limit ($_ $_) at age $_.
         maxSubscriptionHit = true;
         var variables = {"%INSURED%" : insured, "%PRODUCT_ID%" : productId};
         variables[PublicConstants.MESSAGE_FIELD.AGE] = "" + issueAge;
         variables[PublicConstants.MESSAGE_FIELD.MAX_SUBSCRIPTION] = "" + maxSubscription;
         variables[PublicConstants.MESSAGE_FIELD.CURRENCY] = "" + coverage.currency.currencyPK.currencyId;
         return {
            code: "ERRC0125",
            arguments: variables
         };

      }

      var runningFaceAmount = _V( coverage.faceAmount, 0 );
      var fundActivities = _PV( coverage, "proposal.fundActivities.fundActivity" );
      if (!Utils.isNothing(fundActivities)) {
         var fundActivityTable = Utils.iterator(fundActivities);
         if (fundActivityTable.length > 0 && isCurrencySupported == true) {
            var maxDumpInAge = schema.ProductSchema.BasicParticular.MaxDumpInAge;
            var maxDumpInDuration = schema.ProductSchema.BasicParticular.MaxDumpInDuration;
            if (issueAge + maxDumpInDuration < maxDumpInAge) {
               maxDumpInAge = issueAge + maxDumpInDuration;
            }
            var premiumPayingPeriod = (coverage.schema.call("calculatePremiumPayingPeriod", {
               coverage: coverage
            }))

            _DB("maxDumpInAge", maxDumpInAge);
            _DB("premiumPayingPeriod", premiumPayingPeriod);

            for (var fundActivityi in fundActivityTable) {
               var fundActivityRec = fundActivityTable[fundActivityi];
               var duration = (fundActivityRec.attainAge) - issueAge;
               var maxPP = 0;
               var minPP = 99999999999;
               var minDumpin = 0;
               var maxDumpin = 99999999999;
               var minFA = 0;
               var maxFA = 99999999999;
               var minWd = 0;
               var maxWd = 99999999999;
               var minFAdiff = 0;
               var maxFAdiff = 99999999999;

               var faLimits = this.self.getFaceAmountLimits({
                  coverage: coverage,
                  duration: duration,
               });
               minFA = faLimits.minLimit;
               maxFA = faLimits.maxLimit;

               // -------------------------------------
               // Dump in limits
               // -------------------------------------
               var limits = this.self.getDumpinLimits({
                  coverage: coverage,
                  duration: duration,
               });
               minDumpin = limits.minLimit;
               maxDumpin = limits.maxLimit;

               _DB("minDumpin(" + productId + ")", minDumpin);
               _DB("maxDumpin(" + productId + ")", maxDumpin);

               // -------------------------------------
               // Dump in limits
               // -------------------------------------
               limits = this.self.getPlannedPremiumLimits({ coverage: coverage });
               minPP = limits.minPremium;
               maxPP = limits.maxPremium;

               _DB("minPP(" + productId + ")", minPP);
               _DB("maxPP(" + productId + ")", maxPP);

               // -------------------------------------
               // Dump in limits
               // -------------------------------------
               limits = this.self.getWithdrawalLimits({
                  coverage: coverage,
                  duration: duration,
               });
               minWd = limits.minLimit;
               maxWd = limits.maxLimit;

               _DB("minWd(" + productId + ")", minWd);
               _DB("maxWd(" + productId + ")", maxWd);

               // -------------------------------------
               // Face amount change limits
               // -------------------------------------
               limits = this.self.getFaceAmountChangeLimit({ coverage: coverage });
               minFAdiff = limits.minLimit;
               maxFAdiff = limits.maxLimit;

               _DB("minFAdiff(" + productId + ")", minFAdiff);
               _DB("maxFAdiff(" + productId + ")", maxFAdiff);

               // -------------------------------------
               // Check activities
               // -------------------------------------
               if (issueAge > fundActivityRec.attainAge) {
                  // Error: The attain age ($_) is below issue age.
                  var variables = {"%INSURED%" : insured, "%PRODUCT_ID%" : productId};
                  variables[PublicConstants.MESSAGE_FIELD.AGE] = "" + fundActivityRec.attainAge;
                  return {
                     code: "ERRC0126",
                     arguments: variables
                  };
               } else {
                  if (fundActivityRec.plannedPremium >= 0) {
                     if (coverage.catalog.call("isSinglePremium") && coverage.catalog.call("isUVL")) {
                        if ((fundActivityRec.plannedPremium > 0) && (maxPP < fundActivityRec.plannedPremium)) {
                           //message = "Error: Regular Subscription (Planned Premium) is above the maximal requirement at age "+ fc.getAttainAge();
                           var variables = {"%INSURED%" : insured, "%PRODUCT_ID%" : productId};
                           variables[PublicConstants.MESSAGE_FIELD.AGE] = fundActivityRec.attainAge;
                           variables["%MAXIMUM_LIMIT%"] = "" + maxPP;
                           variables["%POLICY_YEAR%"] = "" + (fundActivityRec.attainAge - issueAge + 1);
                           return {
                              code: "ERRC0127",
                              arguments: variables
                           };
                        }
                        if ((fundActivityRec.plannedPremium > 0) && (minPP > fundActivityRec.plannedPremium)) {
                           //message = Error: Regular Subscription (Planned Premium) is below the minimal requirement at age "+ fc.getAttainAge();
                           var variables = {"%INSURED%" : insured, "%PRODUCT_ID%" : productId};
                           variables[PublicConstants.MESSAGE_FIELD.AGE] = fundActivityRec.attainAge;
                           variables["%MAXIMUM_LIMIT%"] = "" + maxPP;
                           variables["%POLICY_YEAR%"] = "" + (fundActivityRec.attainAge - issueAge + 1);
                           return {
                              code: "ERRC0128",
                              arguments: variables
                           };
                        }
                     } else {
                        if (maxPP < fundActivityRec.plannedPremium) {
                           if (coverage.catalog.call("isRegularSaving") || coverage.catalog.call("isUVL")) {
                              //M327", "Error: New Base Saving premium is above the maximum at age $_.
                              var variables = {"%INSURED%" : insured, "%PRODUCT_ID%" : productId};
                              variables[PublicConstants.MESSAGE_FIELD.AGE] = fundActivityRec.attainAge;
                              variables["%MAXIMUM_LIMIT%"] = "" + maxPP;
                              variables["%POLICY_YEAR%"] = "" + (fundActivityRec.attainAge - issueAge + 1);
                              return {
                                 code: "ERRC0129",
                                 arguments: variables
                              };
                           } else {
                              //message = "Error: New Planned Premium is above the maximum at age "+ fc.getAttainAge();
                              var variables = {"%INSURED%" : insured, "%PRODUCT_ID%" : productId};
                              variables[PublicConstants.MESSAGE_FIELD.AGE] = fundActivityRec.attainAge;
                              variables["%MAXIMUM_LIMIT%"] = "" + maxPP;
                              variables["%POLICY_YEAR%"] = "" + (fundActivityRec.attainAge - issueAge + 1);
                              return {
                                 code: "ERRC0130",
                                 arguments: variables
                              };
                           }
                        }
                        if (minPP > fundActivityRec.plannedPremium) {
                           if (coverage.catalog.call("isRegularSaving") || coverage.catalog.call("isUVL")) {
                              //M327", "Error: New Base Saving premium is above the maximum at age $_.
                              var variables = {"%INSURED%" : insured, "%PRODUCT_ID%" : productId};
                              variables[PublicConstants.MESSAGE_FIELD.AGE] = fundActivityRec.attainAge;
                              variables["%MINIMUM_LIMIT%"] = "" + minPP;
                              variables["%POLICY_YEAR%"] = "" + (fundActivityRec.attainAge - issueAge + 1);
                              return {
                                 code: "ERRC0215",
                                 arguments: variables
                              };
                           } else {
                              //message = "Error: New Planned Premium is above the maximum at age "+ fc.getAttainAge();
                              var variables = {"%INSURED%" : insured, "%PRODUCT_ID%" : productId};
                              variables[PublicConstants.MESSAGE_FIELD.AGE] = fundActivityRec.attainAge;
                              variables["%MINIMUM_LIMIT%"] = "" + minPP;
                              variables["%POLICY_YEAR%"] = "" + (fundActivityRec.attainAge - issueAge + 1);
                              return {
                                 code: "ERRC0216",
                                 arguments: variables
                              };
                           }
                        }
                     }
                  } else {
                     if (issueAge > fundActivityRec.attainAge) {
                        //message = "Error: The attain age (" + fc.getAttainAge()+") must be above issue age.";
                        var variables = {"%INSURED%" : insured, "%PRODUCT_ID%" : productId};
                        variables[PublicConstants.MESSAGE_FIELD.AGE] = fundActivityRec.attainAge;
                        return {
                           code: "ERRC0131",
                           arguments: variables
                        };
                     }
                  }

                  var dumpinAmount = 0;
                  if (fundActivityRec.dumpin) dumpinAmount += Number( fundActivityRec.dumpin );
                  if (fundActivityRec.topupPremium) dumpinAmount += Number( fundActivityRec.topupPremium);

                  var withdrawal = 0;
                  if (fundActivityRec.withdrawal) withdrawal = Number( fundActivityRec.withdrawal );

                  var doGWA = _PV( fundActivityRec, 'doGWA');

                  _DB("dumpinAmount",dumpinAmount)
                  _DB("withdrawal",withdrawal)
                  _DB("doGWA",doGWA)

                  if (coverage.iflAge) {
                      var startIFLAge = -1;
                      if (coverage.iflAge != null || coverage.iflAge != 0)
                         startIFLAge = coverage.iflAge;

                      if ((startIFLAge >= 0) && (startIFLAge <= fundActivityRec.attainAge)) {
                         //Error: Subsequent subscription cannot be done after IFL payment started.
                         return {
                            code: "ERRC0132",
                            arguments: {"%INSURED%" : insured, "%PRODUCT_ID%" : productId}
                         };
                      }
                  }

                  if (dumpinAmount > 0) {
                     if (minDumpin > dumpinAmount) {
                        if (coverage.catalog.call("isRegularSaving") || coverage.catalog.call("isUVL")) {
                           //M321", "Error: Top-up premium is below minimum at age $_.
                           var variables = {"%INSURED%" : insured, "%PRODUCT_ID%" : productId};
                           variables[PublicConstants.MESSAGE_FIELD.AGE] = fundActivityRec.attainAge;
                           variables["%MINIMUM_LIMIT%"] = "" + minDumpin;
                           variables["%POLICY_YEAR%"] = "" + (fundActivityRec.attainAge - issueAge + 1);
                           return {
                              code: "ERRC0133",
                              arguments: variables
                           };
                        } else {
                           //message 218, Top-up Premium is below minimum at age $_.
                           var variables = {"%INSURED%" : insured, "%PRODUCT_ID%" : productId};
                           variables[PublicConstants.MESSAGE_FIELD.AGE] = fundActivityRec.attainAge;
                           variables["%MINIMUM_LIMIT%"] = "" + minDumpin;
                           variables["%POLICY_YEAR%"] = "" + (fundActivityRec.attainAge - issueAge + 1);
                           return {
                              code: "ERRC0134",
                              arguments: variables
                           };
                        }

                     } else {
                        if (maxDumpin < dumpinAmount) {
                           if (coverage.catalog.call("isRegularSaving") || coverage.catalog.call("isUVL")) {
                              //M322", "Error: Top-up premium is above maximum at age $_.
                              var variables = {"%INSURED%" : insured, "%PRODUCT_ID%" : productId};
                              variables[PublicConstants.MESSAGE_FIELD.AGE] = fundActivityRec.attainAge;
                              variables["%MAXIMUM_LIMIT%"] = "" + maxDumpin;
                              variables["%POLICY_YEAR%"] = "" + (fundActivityRec.attainAge - issueAge + 1);
                              return {
                                 code: "ERRC0135",
                                 arguments: variables
                              };
                           } else {
                              //message 219,"Error: Top-up premium is above maximum at age $_.
                              var variables = {"%INSURED%" : insured, "%PRODUCT_ID%" : productId};
                              variables[PublicConstants.MESSAGE_FIELD.AGE] = fundActivityRec.attainAge;
                              variables["%MAXIMUM_LIMIT%"] = "" + maxDumpin;
                              variables["%POLICY_YEAR%"] = "" + (fundActivityRec.attainAge - issueAge + 1);
                              return {
                                 code: "ERRC0136",
                                 arguments: variables
                              };
                           }
                        }
                     }

                     if (issueAge < fundActivityRec.attainAge) {
                        if ((withdrawal > 0 && dumpinAmount > 0) || (withdrawal > 0 && doGWA)) {
                           var msgCode = "";
                           var variables = {"%INSURED%" : insured, "%PRODUCT_ID%" : productId};
                           variables[PublicConstants.MESSAGE_FIELD.AGE] = fundActivityRec.attainAge;
                           if (coverage.catalog.call("isRegularSaving") || coverage.catalog.call("isUVL")) {
                              //M323", "Error: Top-up premium and Withdrawal cannot be applied at the same time at age $_.
                              msgCode = "ERRC0137";
                           }
                           if (coverage.catalog.call("isSinglePremium") || coverage.catalog.call("isUVL")) {
                               if (((fundActivityRec.doGWA != null) && fundActivityRec.doGWA)) {
                                  //Error: Subsequent subscription and GWA payment cannot be applied at the same time at age $_.
                                  msgCode = "ERRC0138";
                               }
                               if (withdrawal > 0 && doGWA) {
                                  //Error: Subsequent subscription, GWA payment and withdrawal cannot be applied at the same time at age $_.
                                  msgCode = "ERRC0139";
                               }
                           }
                           if (msgCode == "") {
                              //"Error: Dump-in and Withdrawal cannot be applied at the same time at age " + fundActivityRec.gttainAge();
                              msgCode = "ERRC0140";
                           }
                           return {
                              code: msgCode,
                              arguments: variables
                           };
                        }
                     }

                     // 20061026 2007JanRelease
                     totalSubscription += dumpinAmount;
                     if (totalSubscription > maxSubscription) {
                        // 267 Error: The total subscription is over the maximum limit ($_ $_) at age $_.
                        maxSubscriptionHit = true;
                        var variables = {"%INSURED%" : insured, "%PRODUCT_ID%" : productId};
                        variables[PublicConstants.MESSAGE_FIELD.AGE] = issueAge;
                        variables[PublicConstants.MESSAGE_FIELD.MAX_SUBSCRIPTION] = maxSubscription;
                        variables[PublicConstants.MESSAGE_FIELD.CURRENCY] = coverage.currency.currencyPK.currencyId;
                        return {
                           code: "ERRC0125",
                           arguments: variables
                        };

                     }

                     if (dumpinAmount > 0 && ((fundActivityRec.attainAge > maxDumpInAge) || (fundActivityRec.attainAge >= issueAge + premiumPayingPeriod))) {
                        // 271 Error: No subscription is allowed after the age $_.
                        var variables = {"%INSURED%" : insured, "%PRODUCT_ID%" : productId};
                        var maxAge = 999;
                        if (!Utils.isNothing(maxDumpInAge)) {
                           maxAge = Math.min(maxAge, Number(maxDumpInAge));
                        }
                        if (!Utils.isNothing(premiumPayingPeriod)) {
                           maxAge = Math.min(maxAge, Number(issueAge + premiumPayingPeriod));
                        }
                        variables[PublicConstants.MESSAGE_FIELD.AGE] = "" + maxAge;
                        return {
                           code: "ERRC0142",
                           arguments: variables
                        };
                     }

                     // 20071210
                     if (coverage.stopPaymentAfterYear > 0) {
                        // <<20160919
                        var hasExtendPremiumPaidPeriod = (coverage.schema.call("hasSupportOption", {
                           option: SchemaConstants.SUPPORT_OPTION.EXTEND_PREMIUM_PAID_PERIOD
                        }));
                        if (hasExtendPremiumPaidPeriod) {
                           if (coverage.stopPaymentAfterYear <= premiumPayingPeriod) {
                              if (dumpinAmount > 0 && fundActivityRec.attainAge >= issueAge + coverage.stopPaymentAfterYear) {
                                 // 284 Warning: The top-up selected during premium deferment period won't be considered in the Premium Deferment Page
                                 var variables = {"%INSURED%" : insured, "%PRODUCT_ID%" : productId};
                                 variables[PublicConstants.MESSAGE_FIELD.AGE] = fundActivityRec.attainAge;
                                 return {
                                    code: "ERRC0143",
                                    arguments: variables
                                 };
                              }
                           }

                        }

                     }

                  }

                  if (fundActivityRec.faceAmount > 0) {
                     if (issueAge == fundActivityRec.attainAge) {
                        // Error: New Face Amount is not allowed at issue age.
                        return {
                           code: "ERRC0145",
                           arguments: {"%INSURED%" : insured, "%PRODUCT_ID%" : productId}
                        };
                     } else {
                        if (minFA > fundActivityRec.faceAmount) {
                           //message = "Error: New Face Amount is below the minimum at age "+ fc.getAttainAge();
                           var variables = {"%INSURED%" : insured, "%PRODUCT_ID%" : productId};
                           variables[PublicConstants.MESSAGE_FIELD.AGE] = fundActivityRec.attainAge;
                           variables["%MINIMUM_LIMIT%"] = "" + minFA;
                           variables["%POLICY_YEAR%"] = "" + (fundActivityRec.attainAge - issueAge + 1);
                           return {
                              code: "ERRC0146",
                              arguments: variables
                           };
                        }
                        if (maxFA < fundActivityRec.faceAmount) {
                           //message = "Error: New Face Amount is over the maximum at age "+ fc.getAttainAge();
                           var variables = {"%INSURED%" : insured, "%PRODUCT_ID%" : productId};
                           variables[PublicConstants.MESSAGE_FIELD.AGE] = fundActivityRec.attainAge;
                           variables["%MAXIMUM_LIMIT%"] = "" + maxFA;
                           variables["%POLICY_YEAR%"] = "" + (fundActivityRec.attainAge - issueAge + 1);
                           return {
                              code: "ERRC0217",
                              arguments: variables
                           };
                        }

                        var toFA = Number( _V(fundActivityRec.faceAmount), 0 );  // ensure it is number
                        var delta = Math.abs( toFA - runningFaceAmount );
                        if (delta < minFAdiff) {
                           //message = "Error: New Face Amount is over the maximum at age "+ fc.getAttainAge();
                           var variables = {"%INSURED%" : insured, "%PRODUCT_ID%" : productId};
                           variables[PublicConstants.MESSAGE_FIELD.AGE] = fundActivityRec.attainAge;
                           variables["%MIN_FA_CHANGE%"] = "" + minFAdiff;
                           variables["%POLICY_YEAR%"] = "" + (fundActivityRec.attainAge - issueAge + 1);
                           return {
                              code: "ERRC0221",
                              arguments: variables
                           };
                        }

                        if (delta > maxFAdiff) {
                           //message = "Error: New Face Amount is over the maximum at age "+ fc.getAttainAge();
                           var variables = {"%INSURED%" : insured, "%PRODUCT_ID%" : productId};
                           variables[PublicConstants.MESSAGE_FIELD.AGE] = fundActivityRec.attainAge;
                           variables["%MAX_FA_CHANGE%"] = "" + maxFAdiff;
                           variables["%POLICY_YEAR%"] = "" + (fundActivityRec.attainAge - issueAge + 1);
                           return {
                              code: "ERRC0222",
                              arguments: variables
                           };
                        }

                        runningFaceAmount = fundActivityRec.faceAmount;
                     }
                  }

                  if (withdrawal > 0) {
                     if (!(coverage.catalog.call("isSinglePremium") || coverage.catalog.call("isUVL")) &&
                        issueAge == fundActivityRec.attainAge) {
                        // Error: Withdrawal is not allowed at issue age.
                        return {
                           code: "ERRC0147",
                           arguments: {"%INSURED%" : insured, "%PRODUCT_ID%" : productId}
                        };
                     } else {
                        if (schema.ProductSchema.BasicParticular.CommitmentPeriod != null &&
                           fundActivityRec.attainAge - issueAge < schema.ProductSchema.BasicParticular.CommitmentPeriod) {
                           // 276 Error: Withdrawal before the end of minimum Premium Payment Period ($_) is not illustrated.
                           var variables = {"%INSURED%" : insured, "%PRODUCT_ID%" : productId};
                           variables[PublicConstants.MESSAGE_FIELD.YEAR] = schema.ProductSchema.BasicParticular.CommitmentPeriod + " years";
                           return {
                              code: "ERRC0148",
                              arguments: variables
                           };
                        } else {
                           if (minWd > withdrawal) {
                             //228
                             var variables = {"%INSURED%" : insured, "%PRODUCT_ID%" : productId};
                             variables[PublicConstants.MESSAGE_FIELD.AGE] = fundActivityRec.attainAge;
                             variables["%MINIMUM_LIMIT%"] = "" + minWd;
                             variables["%POLICY_YEAR%"] = "" + (fundActivityRec.attainAge - issueAge + 1);
                             return {
                                code: "ERRC0150",
                                arguments: variables
                             };

                              //}
                           }
                           if (maxWd < withdrawal) {
                             //228
                             var variables = {"%INSURED%" : insured, "%PRODUCT_ID%" : productId};
                             variables[PublicConstants.MESSAGE_FIELD.AGE] = fundActivityRec.attainAge;
                             variables["%MAXIMUM_LIMIT%"] = "" + maxWd;
                             variables["%POLICY_YEAR%"] = "" + (fundActivityRec.attainAge - issueAge + 1);
                             return {
                                code: "ERRC0218",
                                arguments: variables
                             };

                              //}
                           }
                        }
                     }
                     // 20061026 2007JanRelease
                     totalSubscription -= fundActivityRec.withdrawal;
                     //
                  }

               }
            }
         }
      }
   }
});

var RegularPremiumValidationRule = Class.define({
    ruleName: function(args) {
        return "RegularPremiumValidationRule";
    },
    shouldTest: function(args) {
        return true;
    },
    scope: function(args) {
        return PublicConstants.TARGET_SCOPE.BASE_COVERAGE;
    },
    validate: function(args) {
        var coverage = args["coverage"];
        var productId = _PV(coverage, 'product.productKey.primaryProduct.productPK.productId');

        var schema = coverage.schema.call("getSchema", null);
        var catalog = coverage.catalog.call("getCatalog", null);
        var regularBasicPrem = 0;
        var minPremium = 999999999;
        var maxPremium = 0;
        if (coverage.catalog.call("isRegularSaving")) {
            regularBasicPrem = coverage.plannedPremium;
            if (!Utils.isNothing(regularBasicPrem) && regularBasicPrem > 0) {
                var premiumRec = getPremiumRecord({
                    premiumType: SchemaConstants.PREMIUM_RANGE_TYPE.PREMIUMTYPE_PLANNEDPREMIUM,
                    coverage: coverage,
                    schema: schema
                });
                if (Utils.isNothing(premiumRec)) {
                    premiumRec = getPremiumRecord({
                        premiumType: SchemaConstants.PREMIUM_RANGE_TYPE.PREMIUMTYPE_BASICPREMIUM,
                        coverage: coverage,
                        schema: schema
                    });
                }

                _DB("premiumRec", premiumRec);

                if (!Utils.isNothing(premiumRec)) {
                    minPremium = Math.min(minPremium, Number(_PV(premiumRec, ['MinPremium'])));
                    maxPremium = Math.max(maxPremium, Number(_PV(premiumRec, ['MaxPremium'])));
                }

                _DB("minPremium (Regular)", minPremium, "RegularPremiumValidationRule.validate()->");
                _DB("maxPremium (Regular)", maxPremium, "RegularPremiumValidationRule.validate()->");

                if (regularBasicPrem < minPremium) {
                    // Error: Regular Basic Premium is below the minimum.
                    var vars = {"%PRODUCT_ID%" : productId};
                    vars[PublicConstants.MESSAGE_FIELD.MINIMUM_PLANNEDPREMIUM] = minPremium;
                    return {
                        code: "ERRC0116",
                        arguments: vars
                    };
                } else
                if (regularBasicPrem > maxPremium) {
                    // Error: Regular Basic Premium is above the maximum.
                    var vars = {"%PRODUCT_ID%" : productId};
                    vars[PublicConstants.MESSAGE_FIELD.MAXIMUM_PLANNEDPREMIUM] = minPremium;
                    return {
                        code: "ERRC0117",
                        arguments: vars
                    };
                }
            } else {
                // Error: Regular Basic Premium is not set.
                return {
                    code: "ERRC0118",
                    arguments: {"%PRODUCT_ID%" : productId}
                };
            }
        }
    }
});

var IsBasePlanValidationRule = Class.define({
   ruleName: function(args) {
      return "IsBasePlanValidationRule";
   },
   shouldTest: function(args) {
      return true;
   },
   scope: function(args) {
      return PublicConstants.TARGET_SCOPE.BASE_COVERAGE;
   },
   validate: function(args) {
      var coverage = args["coverage"];
      var productId = _PV(coverage, 'product.productKey.primaryProduct.productPK.productId');

      var catalog = coverage.catalog.call("getCatalog", null);

      var isBasePlan = false;
      var productTypes = _PV( catalog, ['ProductCatalog', 'ProductType', 'ProductTypeCode'] );
      if (productTypes) {
          isBasePlan = Utils.matchInList(CatalogConstants.PRODUCT_TYPE.BASEPLAN, productTypes, false);
      }

      if (!isBasePlan) {
          var variables = {"%PRODUCT_ID%" : productId};
          var productId =  _PV( coverage, 'product.productKey.primaryProduct.productPK.productId' );
          variables[PublicConstants.MESSAGE_FIELD.PLAN_CODE] = productId;
          //Error: {%PLAN_CODE%} is not base plan.
          return {
            code: "ERRC0212",
            arguments: variables
          };
      }
   }
});

var ProductDependencyValidationRule = Class.define({
    ruleName: function(args) {
        return "ProductDependencyValidationRule";
    },
    shouldTest: function(args) {
        var coverage = args["coverage"];
        var deps = this.self.dependencyRules(args);
        return (deps.length > 0);
    },
    scope: function(args) {
        var s = 0;
        s = s + PublicConstants.TARGET_SCOPE.BASE_COVERAGE;
        s = s + PublicConstants.TARGET_SCOPE.RIDER_COVERAGE;
        return s;
    },
    validate: function(args) {
        var coverage = args["coverage"];
        var riderList = Utils.iterator(_V(_PV(coverage, "proposal.riders.coverageInfo"), []));

        var insured = getPrimaryInsured({
            coverage: coverage
        });

        var variables = {};
        variables["%SUB_PRODUCT_ID%"] = _PV(coverage, "product.productKey.primaryProduct.productPK.productId");
        variables["%INSURED%"] = insured;

        var inclusions = this.self.inclusiveProductList(args);
        for (inclusionIdx in inclusions) {
            var inclusion = inclusions[inclusionIdx];
            variables["%OBJ_PRODUCT_ID%"] = _V(inclusion.ProductPK);

            var found = false;
            for (riderIdx in riderList) {
                var rider = riderList[riderIdx];

                found = this.self.matchDepRule({
                    rule: inclusion,
                    subject: coverage,
                    object: rider
                });
                if (found) break;
            }

            if (!found) {
                return {
                    code: "ERRC0220",
                    arguments: variables
                };
            }

        }

        var exclusions = this.self.exclusiveProductList(args);
        for (exclusionIdx in exclusions) {
            var exclusion = exclusions[exclusionIdx];
            variables["%OBJ_PRODUCT_ID%"] = _V(exclusion.ProductPK);

            var found = false;
            for (riderIdx in riderList) {
                var rider = riderList[riderIdx];

                found = this.self.matchDepRule({
                    rule: exclusion,
                    subject: coverage,
                    object: rider
                });
                if (found) break;
            }

            if (found) {
                return {
                    code: "ERRC0219",
                    arguments: variables
                };
            }

        }

        return;
    },
    isInclusiveDependencyRule: function(args) {
        var rule = args["rule"];
        var ruleType = _V(rule.Type);
        return ((ruleType == SchemaConstants.DEPENDENCY_RULE_TYPE.INCLUSIVE) || (ruleType == SchemaConstants.DEPENDENCY_RULE_TYPE.INCLUSION));
    },
    isEqualsParty: function(args) {
        var party1 = args['party1'];
        var party2 = args['party2'];

        if (Utils.isNothing(party1) || Utils.isNothing(party2)) return false;
        var result = (party1.type == party2.type) &&
            (party1.smokingStatus == party2.smokingStatus) &&
            (party1.insuredSex == party2.insuredSex) &&
            (party1.insuredAge == party2.insuredAge) &&
            (party1.insuredId == party2.insuredId)
        return result;
    },
    matchDepRule: function(args) {
        var rule = args['rule'];
        var subCov = args['subject'];
        var objCov = args['object'];

        // subject rider
        var subInsured = getPrimaryInsured({
            coverage: subCov
        });

        // object rider
        var objInsured = getPrimaryInsured({
            coverage: objCov
        });
        var objProductId = _PV(objCov, "product.productKey.primaryProduct.productPK.productId");

        // rule information
        var ruleProductId = _V(rule.ProductPK);
        var currency = _V(rule.DepCurrencyCode);
        var minAge = Number(_V(rule.MinAge, 0));
        var maxAge = Number(_V(rule.MaxAge, 99999));
        var minFA = Number(_V(_PV(rule, "FaceAmountRange.MinFaceAmount"), 0));
        var maxFA = Number(_V(_PV(rule, "FaceAmountRange.MaxFaceAmount"), 999999999));

        // rule checking
        var meet = true;
        meet = meet && (ruleProductId == objProductId);
        if (!meet) return false;
        meet = meet && this.self.isEqualsParty({
            party1: subInsured,
            party2: objInsured
        });
        if (!meet) return false;
        meet = meet && (currency == _PV(objCov, "currency.currencyPK.currencyId"));
        if (!meet) return false;
        meet = meet && (minFA <= _V(objCov.faceAmount, 0));
        if (!meet) return false;
        meet = meet && (maxFA >= _V(objCov.faceAmount, 0));
        if (!meet) return false;
        meet = meet && (minAge <= _V(objInsured.insuredAge, 0));
        if (!meet) return false;
        meet = meet && (maxAge >= _V(objInsured.insuredAge, 0));
        if (!meet) return false;
        return meet;
    },
    dependencyRules: function(args) {
        var coverage = args["coverage"];
        var schema = coverage.schema.call("getSchema");
        var dependencyList = Utils.iterator(_V(_PV(schema, "ProductSchema.Dependency.DependencyRuleRecord"), []));
        return dependencyList;
    },
    exclusiveProductList: function(args) {
        var dependencyList = this.self.dependencyRules(args);
        var exclusionList = [];
        for (depIdx in dependencyList) {
            var depRec = dependencyList[depIdx];
            var meet = this.self.isExclusiveDependencyRule({
                rule: depRec
            });
            if (meet) {
                exclusionList.push(depRec);
            }
        }
        return exclusionList;
    },
    inclusiveProductList: function(args) {
        var dependencyList = this.self.dependencyRules(args);
        var inclusionList = [];
        for (depIdx in dependencyList) {
            var depRec = dependencyList[depIdx];
            var meet = this.self.isInclusiveDependencyRule({
                rule: depRec
            });
            if (meet) {
                inclusionList.push(depRec);
            }
        }
        return inclusionList;
    },
    isExclusiveDependencyRule: function(args) {
        var rule = args["rule"];
        var ruleType = _V(rule.Type);
        return ((ruleType == SchemaConstants.DEPENDENCY_RULE_TYPE.EXCLUSIVE) || (ruleType == SchemaConstants.DEPENDENCY_RULE_TYPE.EXCLUSION));
    }
});

var PlanAvailabilityValidationRule = Class.define({
    ruleName: function(args) {
        return "PlanAvailabilityValidationRule";
    },
    shouldTest: function(args) {
        var proposal = args["proposal"];
        var coverage = args["coverage"];
        return true;
    },
    scope: function(args) {
        var s = 0;
        //s = s + PublicConstants.TARGET_SCOPE.PROPOSAL;
        s = s + PublicConstants.TARGET_SCOPE.BASE_COVERAGE;
        s = s + PublicConstants.TARGET_SCOPE.RIDER_COVERAGE;
        return s;
    },
    validate: function(args) {
        var coverage = args["coverage"];
        //if error,
        //e.g. return { code: "ERR00010", arguments: variables };
        //e.g. variables[PublicConstants.MESSAGE_FIELD.CURRENCY] = coverage.currency.currencyPK.currencyId;
        //if no error, just return
        var productId = _PV( coverage, "product.productKey.primaryProduct.productPK.productId" );
        var associateProductId = _PV( coverage, "product.productKey.associateProduct.productPK.productId" );
        var catalog = coverage.catalog;
        var schema = coverage.schema;
        var banding = coverage.banding;
        if (Utils.isNothing(catalog.call("getCatalog"))){
            return { code: "ERRC9000", arguments: { "%PRODUCT_ID%": productId, "%ASSOCIATE_PRODUCT_ID%": associateProductId } };
        }
        if (Utils.isNothing(schema.call("getSchema"))){
            return { code: "ERRC9001", arguments: { "%PRODUCT_ID%": productId, "%ASSOCIATE_PRODUCT_ID%": associateProductId } };
        }
        if (Utils.isNothing(banding)){
            return { code: "ERRC9002", arguments: { "%PRODUCT_ID%": productId, "%ASSOCIATE_PRODUCT_ID%": associateProductId } };
        }
        return;
    }
});
var CORE_VALIDATION_RULES_BASE = Class.define({
   rules: function() {
      // default - empty rules
      return [];
   },
   create: function() {
      var rulesArray = [];
      var rules = this.self.rules();
      for (var ruleIdx in rules) {
         var rule = rules[ruleIdx];
         rulesArray.push(IValidationRule.implementBy(rule));
      }
      return rulesArray;
   }
});

var CORE_VALIDATION_RULES_BASE = CORE_VALIDATION_RULES_BASE.extend({
   rules: function() {
      return [
         IssueAgeValidationRule.create(),
         FaceAmountValidationRule.create(),
         CurrencyValidationRule.create(),
         PaymentModeValidationRule.create(),
         IssuedCountValidationRule.create(),
         InsuredSexValidationRule.create(),
         InsuredSmokingStatusValidationRule.create(),
         WaitingPeriodValidationRule.create(),
         BenefitPeriodValidationRule.create(),
         InitialDumpInValidationRule.create(),
         CouponValidationRule.create(),
         POValidationRule.create(),
         IPOValidationRule.create(),
         OccupationClassValidationRule.create(),
         PremiumDiscountValidationRule.create(),
         PayorAgeValidationRule.create(),
         BillingMethodValidationRule.create(),
         DividendOptionValidationRule.create(),
         UVDeathBenefitValidationRule.create(),
         IFLStartingAgeValidationRule.create(),
         FundCodeValidationRule.create(),
         FundInterestValidationRule.create(),
         SupportSOSByPolicyValidationRule.create(),
         AnnuityOptionValidationRule.create(),
         IIOValidationRule.create(),
         CommencementYearValidationRule.create(),
         HookSubscriptionWithFAValidationRule.create(),
         DisallowRiderWithGuaranteedIssueValidationRule.create(),
         TopUpPremiumValidationRule.create(),
         TotalPremiumValidationRule.create(),
         MPREPremiumValidationRule.create(),
         FaceAmountLimitBySmokingStatusValidationRule.create(),
         JuvenileRiderTypeValidationRule.create(),
         IIOWithIPOValidationRule.create(),
         DBWithIPOValidationRule.create(),
         RiderIPOValidationRule.create(),
         IPOWithRidersValidationRule.create(),
         DeathBenefitValidationRule.create(),
         ExtraWithIPOValidationRule.create(),
         SupportRCCValidationRule.create(),
         NoOfPersonLimitsValidationRule.create(),
         NoOfPersonValidationRule.create(),
         MajorMedicalValidationRule.create(),
         CoverageClassValidationRule.create(),
         NonHpSeriesValidationRule.create(),
         BenefitOptionValidationRule.create(),
         FundActivityValidationRule.create(),
         RegularPremiumValidationRule.create(),
         IsBasePlanValidationRule.create(),
         ProductDependencyValidationRule.create(),
         PlanAvailabilityValidationRule.create()
      ];
   }
});

var CORE_DEFAULT_INITIAL_VALIDATION_RULES = CORE_VALIDATION_RULES_BASE.extend({
   rules: function() {
      return [];
   }
});

var CORE_DEFAULT_PRE_VALIDATION_RULES = CORE_VALIDATION_RULES_BASE.extend({
   rules: function() {
      return [
         IssueAgeValidationRule.create(),
         FaceAmountValidationRule.create(),
         CurrencyValidationRule.create(),
         PaymentModeValidationRule.create(),
         IssuedCountValidationRule.create(),
         InsuredSexValidationRule.create(),
         InsuredSmokingStatusValidationRule.create(),
         BillingMethodValidationRule.create(),
         BenefitPeriodValidationRule.create(),
         WaitingPeriodValidationRule.create(),
         POValidationRule.create(),
         IPOValidationRule.create(),
         SupportSOSByPolicyValidationRule.create(),
         CouponValidationRule.create(),
         OccupationClassValidationRule.create(),
         CommencementYearValidationRule.create(),
         PremiumDiscountValidationRule.create(),
         RegularPremiumValidationRule.create(),
         HookSubscriptionWithFAValidationRule.create(),
         FundCodeValidationRule.create(),
         DividendOptionValidationRule.create(),
         UVDeathBenefitValidationRule.create(),
         IFLStartingAgeValidationRule.create(),
         AnnuityOptionValidationRule.create(),
         FundActivityValidationRule.create(),
         PayorAgeValidationRule.create(),
         FaceAmountLimitBySmokingStatusValidationRule.create(),
         IIOWithIPOValidationRule.create(),
         DBWithIPOValidationRule.create(),
         RiderIPOValidationRule.create(),
         IPOWithRidersValidationRule.create(),
         DeathBenefitValidationRule.create(),
         ExtraWithIPOValidationRule.create(),
         SupportRCCValidationRule.create(),
         NoOfPersonLimitsValidationRule.create(),
         NoOfPersonValidationRule.create(),
         CoverageClassValidationRule.create(),
         MajorMedicalValidationRule.create(),
         NonHpSeriesValidationRule.create(),
         BenefitOptionValidationRule.create(),
         InitialDumpInValidationRule.create(),
         JuvenileRiderTypeValidationRule.create(),
         IsBasePlanValidationRule.create(),
         ProductDependencyValidationRule.create()
      ];
   }
});

var CORE_DEFAULT_POST_VALIDATION_RULES = CORE_VALIDATION_RULES_BASE.extend({
   rules: function() {
      return [
         TotalPremiumValidationRule.create(), MPREPremiumValidationRule.create()
      ];
   }
});

var CORE_DEFAULT_POST_PROJECTION_VALIDATION_RULES = CORE_VALIDATION_RULES_BASE.extend({
   rules: function() {
      return [];
   }
});

// Validation Builder / Director
var ValidatorBuilder = Class.define({

   init: function(args) {
      this.self.errors = [];
      this.self.errorJsons = [];
      this.self.proposalRules = [];
      this.self.basePlanRules = [];
      this.self.riderRules = [];
      this.self.exclusion = null;
      this.self.validationMapping = null;
      this.self.languageCode = null;
      //this.self.initialized = false;

      if (args) {
         var productRules = args["rules"];

         //console.log("productRules.length = " + productRules.length);

         //if (this.self.initialized == false) {
         for (var ruleIdx in productRules) {
            var rule = productRules[ruleIdx];
            var scope = IValidationRule.appliedTo(rule.implementation).call("scope");

            //console.log("scope = " + scope);

            if (Utils.compareBits(scope, PublicConstants.TARGET_SCOPE.PROPOSAL)) {
               this.self.proposalRules.push(rule);
            }
            if (Utils.compareBits(scope, PublicConstants.TARGET_SCOPE.BASE_COVERAGE)) {
               this.self.basePlanRules.push(rule);
            }
            if (Utils.compareBits(scope, PublicConstants.TARGET_SCOPE.RIDER_COVERAGE)) {
               this.self.riderRules.push(rule);
            }
         }

         //console.log("this.self.proposalRules.length = " + this.self.proposalRules.length);
         //console.log("this.self.basePlanRules.length = " + this.self.basePlanRules.length);
         //console.log("this.self.riderRules.length = " + this.self.riderRules.length);
         //this.self.initialized = true;
         //}

         var validationMapping = args["validationMapping"];
         if (validationMapping) {
            this.self.validationMapping = validationMapping;
         }

         var exclusion = args["exclusion"];
         if (exclusion) {
            this.self.exclusion = exclusion;
         }
      }
   },

   getErrors: function(args) {
      var mm = Repository.getManager(SystemComponents.MANAGER.MESSAGE_MANAGER);

      var language = args["language"];
      var errors = []
      for (var i in this.self.errors) {
         var message = mm.call("getMessage", {
            error: this.self.errors[i],
            language: language
         });
         if (message != undefined && message != null) {
            errors.push(message);
         }
      }
      return errors;
   },

   proceedValidation: function(productId, debugMode, testData, validationRules, globalProductMapping, productSpecificMapping) {
      //console.log("validationBuilder.proceedValidation.validationRules.length = " + validationRules.length);

      for (var ruleIndex in validationRules) {
         var rule = validationRules[ruleIndex];
         var ruleName = rule.call("ruleName");
        //console.log("rule name = " + rule.call("ruleName", {}));

         var rulesIsExcluded = false;
         var rulesIsApplied = false;
         if (Utils.isNothing(globalProductMapping) && Utils.isNothing(productSpecificMapping)) {
            // not applied in country, assume all rules are applied
            rulesIsApplied = false;
         } else {
            var found = false;
            if (globalProductMapping) {
               found = (Utils.contains(ruleName, globalProductMapping));
            }
            if (!found) {
               if (productSpecificMapping) {
                  found = (Utils.contains(ruleName, productSpecificMapping));
               }
            }
            if (found) {
               if (!Utils.isNothing( this.self.exclusion ) && !Utils.isNothing(productId) ) {
                  var exclusionItems = this.self.exclusion[productId];
                  if (exclusionItems) {
                     var excludeFound = (exclusionItems.indexOf(ruleName) >= 0);
                     if (excludeFound) {
                        rulesIsExcluded = true;
                        found = false;
                     }
                  }
               }
            }
            rulesIsApplied = found;
         }
         if (rulesIsApplied) {
            if (debugMode) {
               if (rule.call("shouldTest", testData)) {
                  console.log("Rule (" + ruleName + ") --> START VALIDATE ... ");
                  var result = rule.call("validate", testData);
                  //console.log("result = " + result);
                  if (result) {
                      console.log(">>>>> --> " + JSON.stringify(result));
                  } else {
                      console.log(">>>>> --> PASS");
                  }
                  if (!Utils.isNothing(result)) {
                     var ii = this.self.errorJsons.indexOf( JSON.stringify(result) );
                     if (ii < 0) {
                         this.self.errors.push(result);
                         this.self.errorJsons.push( JSON.stringify(result) );
                     }
                  }
               } else {
                  console.log("Rule (" + ruleName + ") SKIPPED");
               }
            } else {
               try {
                  if (rule.call("shouldTest", testData)) {
                     console.log("Rule (" + ruleName + ") --> START VALIDATE ... ");
                     var result = rule.call("validate", testData);
                     //console.log("result = " + result);
                     if (result) {
                         console.log(">>>>> --> " + JSON.stringify(result));
                     } else {
                         console.log(">>>>> --> PASS");
                     }
                     if (!Utils.isNothing(result)) {
                        var ii = this.self.errorJsons.indexOf( JSON.stringify(result) );
                        if (ii < 0) {
                            this.self.errors.push(result);
                            this.self.errorJsons.push( JSON.stringify(result) );
                        }
                     }
                  } else {
                     console.log("Rule (" + ruleName + ") SKIPPED");
                  }
               } catch (e) {
                  _D(">>>>> Exception", e);
                  console.log("Rule (" + ruleName + ") EXCEPTION OCCURRED - SKIPPED");
               }
            }
         } else {
            if (rulesIsExcluded) {
               console.log("Rule (" + ruleName + ") EXCLUDED");
            } else {
               console.log("Rule (" + ruleName + ") NOT APPLICABLE");
            }
         }
      }
   },

   validateProposal: function(args) {
      var proposal = args['proposal'];
      var context = args['context'];
      var projectionResult = args['projectionResult'];
      var productId = _PV( proposal, 'coverageInfo.product.productKey.primaryProduct.productPK.productId' );
      var testData = {
         proposal: proposal,
         context: context,
         projectionResult: projectionResult
      };
      var globalProductMapping = null;
      if (this.self.validationMapping) {
         globalProductMapping = this.self.validationMapping[PublicConstants.VALIDATION_RULES_MAPPING.GLOBAL_RULES];
      }
      var productSpecificMapping = null;
      if (this.self.validationMapping) {
         if (!Utils.isNothing(productId)) {
            productSpecificMapping = this.self.validationMapping[productId];
         }
      }
      this.self.proceedValidation(productId, proposal.enableDebug, testData, this.self.proposalRules, globalProductMapping, productSpecificMapping);
   },

   validateBasePlan: function(args) {
      var basePlan = args['basePlan'];
      var context = args['context'];
      var projectionResult = args['projectionResult'];
      var productId = _PV( basePlan, 'product.productKey.primaryProduct.productPK.productId' );
      var testData = {
         coverage: basePlan,
         context: context,
         projectionResult: projectionResult
      };
      var globalProductMapping = null;
      if (this.self.validationMapping) {
         globalProductMapping = this.self.validationMapping[PublicConstants.VALIDATION_RULES_MAPPING.GLOBAL_RULES];
      }
      var productSpecificMapping = null;
      if (this.self.validationMapping) {
         if (!Utils.isNothing(productId)) {
            productSpecificMapping = this.self.validationMapping[productId];
         }
      }
      this.self.proceedValidation(productId, basePlan.proposal.enableDebug, testData, this.self.basePlanRules, globalProductMapping, productSpecificMapping);
   },

   validateRider: function(args) {
      var rider = args['rider'];
      var context = args['context'];
      var projectionResult = args['projectionResult'];
      var productId = _PV( rider, 'product.productKey.primaryProduct.productPK.productId' );
      var testData = {
         coverage: rider,
         context: context,
         projectionResult: projectionResult
      };
      var globalProductMapping = null;
      if (this.self.validationMapping) {
         globalProductMapping = this.self.validationMapping[PublicConstants.VALIDATION_RULES_MAPPING.GLOBAL_RULES];
      }
      var productSpecificMapping = null;
      if (this.self.validationMapping) {
         if (!Utils.isNothing(productId)) {
            productSpecificMapping = this.self.validationMapping[productId];
         }
      }
      this.self.proceedValidation(productId, rider.proposal.enableDebug, testData, this.self.riderRules, globalProductMapping, productSpecificMapping);
   }
});

var ValidationDirector = Class.define({
   execute: function(args) {
      var proposal = args["proposal"];
      var validateBuilder = args["builder"];
      var context = args["context"];
      var projectionResult = args["projectionResult"];

      //console.log("validateBuilder.proposalRules.length = " + validateBuilder.proposalRules.length);
      //console.log("validateBuilder.basePlanRules.length = " + validateBuilder.basePlanRules.length);
      //console.log("validateBuilder.riderRules.length = " + validateBuilder.riderRules.length);

      var builder = IValidationBuilder.appliedTo(validateBuilder);

      //builder.call("init");
      builder.call("validateProposal", {
         proposal: proposal, context: context, projectionResult: projectionResult
      });
      builder.call("validateBasePlan", {
         basePlan: proposal.coverageInfo, context: context, projectionResult: projectionResult
      });
      if (!Utils.isNothing(proposal.riders)) {
        var ridersTable = Utils.iterator(proposal.riders.coverageInfo);
        for (var riderIndex in ridersTable) {
            builder.call("validateRider", {
               rider: proposal.riders.coverageInfo[riderIndex], context: context, projectionResult: projectionResult
            });
         }
      }
      return builder.call("getErrors", {
         language: proposal.language
      });
   }
});

var ValidatorImpl = Class.define({

   init: function(args) {
      this.self['initialValidationRules'] = [];
      this.self['preValidationRules'] = [];
      this.self['postValidationRules'] = [];
      this.self['postProjectionValidationRules'] = [];
      this.self['productValidationMapping'] = [];

      if (args == undefined) {
         args = {};
      }

      var initialValidationRules = args['initialValidationRules'];
      var preValidationRules = args['preValidationRules'];
      var postValidationRules = args['postValidationRules'];
      var postProjectionValidationRules = args['postProjectionValidationRules']
      var productValidationMapping = args['productValidationMapping'];

      //console.log("(parameter) preValidationRules = " + JSON.stringify(preValidationRules));
      //console.log("(parameter) postValidationRules = " + JSON.stringify(postValidationRules));
      //console.log("(parameter) postProjectionValidationRules = " + JSON.stringify(postProjectionValidationRules));
      //console.log("(parameter) productValidationMapping = " + JSON.stringify(productValidationMapping));

      //var initialRules = (ICoreRules.implementBy(CORE_DEFAULT_INITIAL_VALIDATION_RULES.create())).call("create");
      //var initialRules = [];
      var initialRules = (ICoreRules.appliedTo(CORE_VALIDATION_RULES_BASE.create())).call("create");
      if (Utils.isNothing(initialValidationRules) == false) {
         for (var key in initialValidationRules) {
            initialRules.push(initialValidationRules[key]);
         }
      }
      this.self.initialValidationRules = initialRules;

      //var preRules = (ICoreRules.implementBy(CORE_DEFAULT_PRE_VALIDATION_RULES.create())).call("create");
      //var preRules = [];
      var preRules = (ICoreRules.appliedTo(CORE_VALIDATION_RULES_BASE.create())).call("create");
      if (Utils.isNothing(preValidationRules) == false) {
         for (var key in preValidationRules) {
            preRules.push(preValidationRules[key]);
         }
      }
      this.self.preValidationRules = preRules;

      //var postRules = (ICoreRules.implementBy(CORE_DEFAULT_POST_VALIDATION_RULES.create())).call("create");
      //var postRules = [];
      var postRules = (ICoreRules.appliedTo(CORE_VALIDATION_RULES_BASE.create())).call("create");
      if (Utils.isNothing(preValidationRules) == false) {
         for (var key in postValidationRules) {
            postRules.push(postValidationRules[key]);
         }
      }
      this.self.postValidationRules = postRules;

      //var preProjRules = (ICoreRules.implementBy(CORE_DEFAULT_POST_PROJECTION_VALIDATION_RULES.create())).call("create");
      //var preProjRules = [];
      var preProjRules = (ICoreRules.appliedTo(CORE_VALIDATION_RULES_BASE.create())).call("create");
      if (Utils.isNothing(postProjectionValidationRules) == false) {
         for (var key in postProjectionValidationRules) {
            preProjRules.push(postProjectionValidationRules[key]);
         }
      }
      this.self.postProjectionValidationRules = preProjRules;

      //console.log("# of this.self.preValidationRules = " + this.self.preValidationRules.length);
      //console.log("# of this.self.postValidationRules = " + this.self.postValidationRules.length);
      //console.log("# of this.self.postProjectionValidationRules = " + this.self.postProjectionValidationRules.length);

      _D("validation mapping", productValidationMapping);
      if (!(Utils.isNothing(productValidationMapping))) {
         this.self.productValidationMapping = productValidationMapping;
         //if (Utils.isNothing(this.self.productValidationMapping.exclusion)) {
         //   this.self.productValidationMapping['exclusion'] = {};
         //}
      }
   },

   addValidationRule: function(args) {
      var rule = args['rule'];
      var ruleElement = IValidationRule.implementBy(rule);

      this.self.initialValidationRules.push(ruleElement);
      this.self.preValidationRules.push(ruleElement);
      this.self.postValidationRules.push(ruleElement);
      this.self.postProjectionValidationRules.push(ruleElement);
   },

   showRuleNames: function(args) {
      _D("", "[ Validation Map - PRIMARY ]", "");
      _D("", JSON.stringify(this.self.productValidationMapping, null, 2), "");
      _D("", "", "");
      _D("", "[ initialValidationRules ]", "");
      for(var ri in this.self.initialValidationRules) {
         var r = this.self.initialValidationRules[ri]
         _D("", "rule: " + r.call("ruleName", {}), "");
      }
      _D("", "[ preValidationRules ]", "");
      for(var ri in this.self.preValidationRules) {
         var r = this.self.preValidationRules[ri]
         _D("", "rule: " + r.call("ruleName", {}), "");
      }
      _D("", "[ postValidationRules ]", "");
      for(var ri in this.self.postValidationRules) {
         var r = this.self.postValidationRules[ri]
         _D("", "rule: " + r.call("ruleName", {}), "");
      }
      _D("", "[ postProjectionValidationRules ]", "");
      for(var ri in this.self.postProjectionValidationRules) {
         var r = this.self.postProjectionValidationRules[ri]
         _D("", "rule: " + r.call("ruleName", {}), "");
      }
   },

   validate: function(args) {
      var proposal = args["proposal"];

      var errors = [];
      var canContinue = true;

      // initial validation rules
      if (proposal.enableDebug) {
         _DB("","","");
         _DB("","@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@","");
         _DB("","@@@@            I N I T I A L   V A L I D A T I O N             @@@","");
         _DB("","@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@","");
      }

      var initialErrors = this.self.initialValidate({
         proposal: proposal
      });
      if (!Utils.isNothing(initialErrors)) {
         for (var i in initialErrors) {
            errors.push(initialErrors[i]);
            if (!initialErrors[i].warning) canContinue = false;
         }
      }
      // pre-calculation validation
      if (canContinue) {
         if (proposal.enableDebug) {
            _DB("","","");
            _DB("","@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@","");
            _DB("","@@@@            P R E C A L C   V A L I D A T I O N             @@@","");
            _DB("","@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@","");
         }

         var preErrors = this.self.preCalculationValidate({
            proposal: proposal
         });
         if (!Utils.isNothing(preErrors)) {
            for (var i in preErrors) {
               errors.push(preErrors[i]);
               if (!preErrors[i].warning) canContinue = false;
            }
         }
      }
      //if (errors.length == 0) {
      if (canContinue) {
         if (proposal.enableDebug) {
            _DB("","","");
            _DB("","@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@","");
            _DB("","@@@@            P R E M I U M   C A L C U L A T I O N           @@@","");
            _DB("","@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@","");
         }

         // premium calculation
         var _pe = Repository.getManager(SystemComponents.MANAGER.PRODUCT_ENGINE_INSTANCE);
         _pe.call("calculatePremiums");


         if (proposal.enableDebug) {
            _DB("","","");
            _DB("","@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@","");
            _DB("","@@@@           P O S T C A L C   V A L I D A T I O N            @@@","");
            _DB("","@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@","");
         }
         // post-calculation validation
         var postErrors = this.self.postCalculationValidate({
            proposal: proposal
         });
         if (!Utils.isNothing(postErrors)) {
            for (var i in postErrors) {
               errors.push(postErrors[i]);
            }
         }
      }
      return errors;
   },

   initialValidate: function(args) {
      var proposal = args["proposal"];

      var validationBuilder = ValidatorBuilder.create({
         rules: this.self.initialValidationRules,
         validationMapping: this.self.productValidationMapping.initialValidationRules,
         exclusion: this.self.productValidationMapping.exclusion
      });
      var validationDirector = IExecutable.implementBy(ValidationDirector.create());
      return validationDirector.call("execute", {
         proposal: proposal,
         builder: validationBuilder
      });
   },

   preCalculationValidate: function(args) {
      var proposal = args["proposal"];

      var validationBuilder = ValidatorBuilder.create({
         rules: this.self.preValidationRules,
         validationMapping: this.self.productValidationMapping.preCalculationValidationRules,
         exclusion: this.self.productValidationMapping.exclusion
      });
      var validationDirector = IExecutable.implementBy(ValidationDirector.create());
      return validationDirector.call("execute", {
         proposal: proposal,
         builder: validationBuilder
      });
   },

   postCalculationValidate: function(args) {
      var proposal = args["proposal"];
      var validationBuilder = ValidatorBuilder.create({
         rules: this.self.postValidationRules,
         validationMapping: this.self.productValidationMapping.postCalculationValidationRules,
         exclusion: this.self.productValidationMapping.exclusion
      });
      var validationDirector = IExecutable.implementBy(ValidationDirector.create());
      return validationDirector.call("execute", {
         proposal: proposal,
         builder: validationBuilder
      });
   },

   postProjectionValidate: function(args) {
      var proposal = args["proposal"];
      var context = args["context"];
      var projectionResult = args["projectionResult"];

      var validationBuilder = ValidatorBuilder.create({
         rules: this.self.postProjectionValidationRules,
         validationMapping: this.self.productValidationMapping.postProjectionValidationRules,
         exclusion: this.self.productValidationMapping.exclusion
      });
      var validationDirector = IExecutable.implementBy(ValidationDirector.create());
      return validationDirector.call("execute", {
         proposal: proposal,
         context: context,
         projectionResult: projectionResult,
         builder: validationBuilder
      });
   }

});
var ProductEngineImpl = Class.define({

    init: function(args) {
        this.self.context = {};
        this.self.context.proposal = null;

        var managers = args['managers'];

        var validator = managers[SystemComponents.MANAGER.VALIDATOR];
        var premiumCalculator = managers[SystemComponents.MANAGER.PREMIUM_CALCULATOR];
        var policyProjector = managers[SystemComponents.MANAGER.POLICY_VALUE_PROJECTOR];
        var catalogManager = managers[SystemComponents.MANAGER.CATALOG_HELPER];
        var catalogFactory = managers[SystemComponents.MANAGER.CATALOG_FACTORY];
        var schemaManager = managers[SystemComponents.MANAGER.SCHEMA_HELPER];
        var schemaFactory = managers[SystemComponents.MANAGER.SCHEMA_FACTORY];
        var messageManager = managers[SystemComponents.MANAGER.MESSAGE_MANAGER];
        var dataService = managers[SystemComponents.MANAGER.DATA_SERVICE];
        var rateManager = managers[SystemComponents.MANAGER.RATE_MANAGER];
        var inputTransformer = managers[SystemComponents.MANAGER.INPUT_TRANSFORMER];
        var eventsManager = managers[SystemComponents.MANAGER.EVENTS_MANAGER];
        var functionManager = managers[SystemComponents.MANAGER.FUNCTION_MANAGER];
        try {
            if (Utils.isNothing(validator)) {
                console.log("create a new validator");
                validator = Repository.getManager(SystemComponents.MANAGER.VALIDATOR);
                if (!validator) {
                    validator = IValidator.implementBy(ValidatorImpl.create( { productValidationMapping: mapping } ));
                }
            }
            if (Utils.isNothing(premiumCalculator)) {
                premiumCalculator = Repository.getManager(SystemComponents.MANAGER.PREMIUM_CALCULATOR);
                if (!premiumCalculator) {
                    var methods = [
                        CommonBpm.create({formula: BPM1.create()}),
                        CommonBpm.create({formula: SPSM.create()})
                    ];
                    premiumCalculator = IPremiumCalculator.implementBy(PremiumCalculatorImpl.create({
                        methods: methods
                    }));
                }
            }
            if (Utils.isNothing(functionManager)) {
                functionManager = Repository.getManager(SystemComponents.MANAGER.FUNCTION_MANAGER);
                if (!functionManager) {
                    var functions = [
                        PlusFunction.create()
                    ];
                    functionManager = IFunctionManager.implementBy(FunctionManagerImpl.create({
                        functions: functions
                    }));
                }
            }
            if (Utils.isNothing(policyProjector)) {
               policyProjector = Repository.getManager(SystemComponents.MANAGER.POLICY_VALUE_PROJECTOR);
               if (!policyProjector) {
                   policyProjector = IProjectionManager.implementBy(ProjectionManagerImpl.create());
               }
            }
            if (Utils.isNothing(catalogManager)) {
               catalogManager = Repository.getManager(SystemComponents.MANAGER.CATALOG_HELPER);
               if (!catalogManager) {
                  catalogManager = ICatalogManager.implementBy(CatalogManagerImpl.create());
               }
            }
            if (Utils.isNothing(catalogFactory)) {
               catalogFactory = Repository.getManager(SystemComponents.MANAGER.CATALOG_FACTORY);
               if (!catalogFactory) {
                  catalogFactory = Factory.define(ICatalog, CatalogImpl);
               }
            }
            if (Utils.isNothing(schemaManager)) {
                schemaManager = Repository.getManager(SystemComponents.MANAGER.SCHEMA_HELPER);
                if (!schemaManager) {
                   schemaManager = ISchemaManager.implementBy(SchemaManagerImpl.create());
                }
            }
            if (Utils.isNothing(schemaFactory)) {
                schemaFactory = Repository.getManager(SystemComponents.MANAGER.SCHEMA_FACTORY);
                if (!schemaFactory) {
                   schemaFactory = Factory.define(ISchema, SchemaImpl);
                }
            }
            if (Utils.isNothing(messageManager)) {
                // no message by default
                messageManager = Repository.getManager(SystemComponents.MANAGER.MESSAGE_MANAGER);
                if (!messageManager) {
                   messageManager = IMessageManager.implementBy(MessageManagerImpl.create([]));
                }
            }
            if (!Utils.isNothing(dataService)) {
                peServiceLocator.register(SystemComponents.DATA_SERVICE.CUSTOM_DATA_SERVICE, dataService);
                PEservice.dataSource = SystemComponents.DATA_SERVICE.CUSTOM_DATA_SERVICE;
            }
            if (Utils.isNothing(rateManager)) {
                rateManager = Repository.getManager(SystemComponents.MANAGER.RATE_MANAGER);
                if (!rateManager) {
                   rateManager = PERateManager.create();
                }
            }
            if (Utils.isNothing(inputTransformer)) {
                inputTransformer = Repository.getManager(SystemComponents.MANAGER.INPUT_TRANSFORMER);
                if (!inputTransformer) {
                   inputTransformer = IInputTransformer.implementBy(InputTransformerImpl.create());
                }
            }
            if (Utils.isNothing(eventsManager)) {
                eventsManager = Repository.getManager(SystemComponents.MANAGER.EVENTS_MANAGER);
                if (!eventsManager) {
                   eventsManager = IEventsManager.implementBy(EventsManagerImpl.create());
                }
            }

            Repository.addManager(SystemComponents.MANAGER.VALIDATOR, validator);
            Repository.addManager(SystemComponents.MANAGER.PREMIUM_CALCULATOR, premiumCalculator);
            Repository.addManager(SystemComponents.MANAGER.POLICY_VALUE_PROJECTOR, policyProjector);
            Repository.addManager(SystemComponents.MANAGER.CATALOG_HELPER, catalogManager);
            Repository.addManager(SystemComponents.MANAGER.CATALOG_FACTORY, catalogFactory);
            Repository.addManager(SystemComponents.MANAGER.SCHEMA_HELPER, schemaManager);
            Repository.addManager(SystemComponents.MANAGER.SCHEMA_FACTORY, schemaFactory);
            Repository.addManager(SystemComponents.MANAGER.MESSAGE_MANAGER, messageManager);
            Repository.addManager(SystemComponents.MANAGER.PRODUCT_ENGINE_INSTANCE, IProductEngine.appliedTo(this.self));
            Repository.addManager(SystemComponents.MANAGER.RATE_MANAGER, rateManager);
            Repository.addManager(SystemComponents.MANAGER.INPUT_TRANSFORMER, inputTransformer);
            Repository.addManager(SystemComponents.MANAGER.EVENTS_MANAGER, eventsManager);
            Repository.addManager(SystemComponents.MANAGER.POLICY_VALUE_PROJECTOR, policyProjector);
            Repository.addManager(SystemComponents.MANAGER.FUNCTION_MANAGER, functionManager);
        } catch (e) {
            console.log("@@@@@ INIT ENGINE ERROR: " + e);
            //console.trace();
        }
    },

    setProposal: function(args) {
        // this is a function to load all necessary configurations
        // into the current context of engine. Actually, it must be called before
        // other functions called.
        var proposal = args['proposal'];

        console.log("");
        console.log("**************************************");
        _D("proposal (input)", proposal, "PE_core.setProposal()");
        console.log("");

        // backward compatible with Comprop and New PE on _code reserve word in fundRecord
        // proposal.funds.fundRecord & .proposal.topupFunds.fundRecord
        var fundSectionIdx = 0;
        var fundSections = [ ['funds','fundRecord'], ['topupFunds','fundRecord'] ];
        for(fundSectionI in fundSections) {
            var fs = fundSections[ fundSectionI ];
            var fundRecords = _PV(proposal, fs);

            console.log("*** Proposal Funds " + ( (fundSectionIdx==0) ? "(Funds)" : "(Topup Funds)" ) + " ***" );
            _D("fs", fs, "PE_core->setProposal->");
            _D("fundRecords (BEFORE)", fundRecords, "PE_core->setProposal->");

            if (!Utils.isNothing(fundRecords)) {
                var fundRecordsIter = Utils.iterator(fundRecords);

                for(fri in fundRecordsIter) {
                    var fundRec = fundRecordsIter[fri];
                    if (Utils.isNothing(fundRec._code) && !Utils.isNothing(fundRec.code)) {
                        fundRec['_code'] = fundRec.code;
                    } else
                    if (!Utils.isNothing(fundRec._code) && Utils.isNothing(fundRec.code)) {
                        fundRec['code'] = fundRec._code;
                    }
                }
            }

            _D("fundRecords (AFTER)", fundRecords, "PE_core->setProposal->");
            fundSectionIdx ++;
        }
        console.log("");
        console.log("**************************************");

        var cm = Repository.getManager(SystemComponents.MANAGER.CATALOG_HELPER);
        var sm = Repository.getManager(SystemComponents.MANAGER.SCHEMA_HELPER);
        if (Utils.isNothing(proposal.language)) {
            // default language is EN
            proposal.language = "en";
        }

        // the transformation can be replaced by builder pattern in later stage
        var translator = Repository.getManager(SystemComponents.MANAGER.INPUT_TRANSFORMER);
        proposal.coverageInfo = translator.call("transform", {
            coverage: proposal.coverageInfo
        });
        // translator.call("setReturnRatesByCurrency", {proposal: proposal});
        // ---

        proposal.coverageInfo = Utils.extend(proposal.coverageInfo, {
            proposal: proposal
        });

        // ****** BASE PLAN CATALOG ******
        var catalog = cm.call("lookup", {
            productCode: proposal.coverageInfo.product.productKey.primaryProduct.productPK.productId
        });
        var catalogObj = catalog.call('getCatalog');

        var schema;
        var banding;
        if (!Utils.isNothing(catalog) && !Utils.isNothing(catalogObj)) {
            // ****** BASE PLAN SCHEMA ******
            schema = sm.call("lookup", {
                coverage: proposal.coverageInfo
            });
            var schemaObj = schema.call('getSchema');
            var rateHandler = _V( _PV(schemaObj, ['ProductSchema','BasicParticular','CalcMethods','RateHandler']), defaultSystemModules.rateHandler + " (default)" );
            var planCode = _V( _PV( proposal, 'coverageInfo.product.productKey.primaryProduct.productPK.productId' ) );
            _DB("rateHandler (" + planCode + ")", rateHandler);

            //if (proposal.enableDebug) {
            //    _D("", "", "");
            //    _D("", "[ Schema Content ]", "");
            //    var sch = schema.call("getSchema");
            //    _SS( sch, 10 );
            //    _D("", "", "");
            //}

             if (!Utils.isNothing(schema) && !Utils.isNothing(schemaObj)) {
               // ****** CALCULATE AND UPDATE BANDING ******
               banding = schema.call("calculateBanding", {
                   coverage: proposal.coverageInfo
               });
            }
        }

        _DB("after calculateBanding - banding = ", banding);
        console.log("");

        if (!Utils.isNothing(banding)) {
            proposal.band = banding.Band.text;
        }

        // ****** Update indicators for calculation use ****
        //proposal.indicators = {};
        //proposal.indicators.hasDividendWithdrawal = false;
        //if (!Utils.isNothing(proposal.coverageInfo.dividendWithdrawnStartYear)) {
        //   if (Number(proposal.coverageInfo.dividendWithdrawnStartYear) > 0) {
        //      proposal.indicators.hasDividendWithdrawal = true;
        //   }
        //}
        //proposal.indicators.hasFundActivities = false;
        //if (!Utils.isNothing(proposal.fundActivities) && !Utils.isNothing(proposal.fundActivities.fundActivity)) {
        //   var activities = Utils.iterator( proposal.fundActivities.fundActivity );
        //   if (activities.length > 0) {
        //      proposal.indicators.hasFundActivities = true;
        //   }
        //}

        // Update coverage record with catalog, schema and banding information
        proposal.coverageInfo = Utils.extend(proposal.coverageInfo, {
            coverageId: 'B0',
            catalog: catalog,
            schema: schema,
            banding: banding
        });

        // ****** REQUEST ******
        this.self.context.proposal = proposal;

        if (!Utils.isNothing(proposal.riders)) {
           for (riderIndex in proposal.riders.coverageInfo) {

              proposal.riders.coverageInfo[riderIndex] = translator.call("transform", {
                  coverage: proposal.riders.coverageInfo[riderIndex]
              });

              proposal.riders.coverageInfo[riderIndex] = Utils.extend(proposal.riders.coverageInfo[riderIndex], {
                  proposal: proposal
              });

              if (Utils.isNothing(proposal.riders.coverageInfo[riderIndex].options)) {
                 proposal.riders.coverageInfo[riderIndex]['options'] = {};
              }
              proposal.riders.coverageInfo[riderIndex]['options']['paymentMode'] = proposal.coverageInfo['options']['paymentMode']

              // ****** Rider CATALOG ******
              var catalog = cm.call("lookup", {
                  productCode: proposal.riders.coverageInfo[riderIndex].product.productKey.primaryProduct.productPK.productId
              });
              var catalogObj = catalog.call('getCatalog');

              var schema;
              var banding;
              if (!Utils.isNothing(catalog) && !Utils.isNothing(catalogObj)) {
                 // ****** Rider SCHEMA ******
                 schema = sm.call("lookup", {
                     coverage: proposal.riders.coverageInfo[riderIndex]
                 });
                 var schemaObj = schema.call('getSchema');
                 var rateHandler = _V( _PV(schemaObj, ['ProductSchema','BasicParticular','CalcMethods','RateHandler']), defaultSystemModules.rateHandler + " (default)" );
                 var planCode = proposal.riders.coverageInfo[riderIndex].product.productKey.primaryProduct.productPK.productId;
                 _DB("rateHandler (" + planCode + ")", rateHandler);

                 if (!Utils.isNothing(schema) && !Utils.isNothing(schemaObj)) {
                    banding = schema.call("calculateBanding", {
                        coverage: proposal.riders.coverageInfo[riderIndex]
                    });
                 }
              }

              proposal.riders.coverageInfo[riderIndex] = Utils.extend(proposal.riders.coverageInfo[riderIndex], {
                  coverageId: ('R' + riderIndex),
                  catalog: catalog,
                  schema: schema,
                  banding: banding,
                  proposal: proposal
              });
           }
        }

        //if (proposal.enableDebug) {
        //   // ****** show context ******
        //   _DB("Product Engine Context: ", this.self.context);
        //}

    },

    getContext: function() {
        return this.self.context;
    },

    listCustomFunctions: function(args) {
        var funcMgr = Repository.getManager(SystemComponents.MANAGER.FUNCTION_MANAGER);
        return funcMgr.call("listFunctions", args);
    },

    callCustomFunction: function(args) {
        var funcMgr = Repository.getManager(SystemComponents.MANAGER.FUNCTION_MANAGER);
        return funcMgr.call("execute", args);
    },

    validate: function() {
        // this is a function to check if the calcRequest is valid
        // based on the loaded configuration. error will be returned if it is
        // not correct or null if no problem
        var vm = Repository.getManager(SystemComponents.MANAGER.VALIDATOR);
        return vm.call("validate", {
            proposal: this.self.context.proposal
        });
    },

    calculatePremiums: function() {
        // this is a function to calculate all premiums in all available payment modes.
        // null will be returned if error found.
        var pc = Repository.getManager(SystemComponents.MANAGER.PREMIUM_CALCULATOR);
        return pc.call("calculate", {
            proposal: this.self.context.proposal
        });
    },

    listBaseProducts: function(args) {
        var planCodes = args["planCodes"];
        var language = args["language"];
        var effectiveDate = args["effectiveDate"];
        var location = args["location"];
        return PEservice.listBaseProducts(planCodes, language, effectiveDate, location);
    },

    calculateInsuredAge: function(args) {
        var calculator = args['ageCalculator'];
        var ageCalc = _V(calculator, defaultSystemModules.ageCalculator);
        console.log('Age Calculator: ' + ageCalc);
        var funcManager = Repository.getManager(SystemComponents.MANAGER.FUNCTION_MANAGER);
        var result = funcManager.call('execute', {
           function: ageCalc,
           args: args
        });
        return result;

/* replace by custom function */
//        var dateOfBirth = args["dateOfBirth"];
//        var policyYearDate = args["policyYearDate"];
//        var language = args["language"];
//
//        var dob = null;
//        if (typeof dateOfBirth === 'string' || dateOfBirth instanceof String) {
//            console.log("dob string is received - " + dateOfBirth);
//            dob = dateOfBirth.date();
//        } else
//        if (typeof dateOfBirth === 'date' || dateOfBirth instanceof Date) {
//            console.log("dob date is received - " + dateOfBirth);
//            dob = dateOfBirth;
//        }
//
//        var pyd = null;
//        if (typeof policyYearDate === 'string' || policyYearDate instanceof String) {
//            console.log("pyd string is received - " + policyYearDate);
//            pyd = policyYearDate.date();
//        } else
//        if (typeof policyYearDate === 'date' || policyYearDate instanceof Date) {
//            console.log("pyd date is received - " + policyYearDate);
//            pyd = policyYearDate;
//        }
//
//        if (Utils.isNothing(language)) {
//            language = "en";
//        }
//
//        console.log("calculateInsuredAge - begin")
//        console.log("dateOfBirth = " + dateOfBirth);
//        console.log("policyYearDate = " + policyYearDate);
//        console.log("dob = " + dob);
//        console.log("pyd = " + pyd);
//
//        var result = {};
//        if (dob == null || pyd == null) {
//            result["error"] = this.getErrors({
//                language: "en",
//                errorCode: "ERRC0000",
//                variables: []
//            });
//            result["age"] = -1;
//        } else {
//            try {
//                if (Utils.isNothing(pyd)) {
//                    pyd = Utils.now();
//                }
//
//                /**
//                 * LAST calculation
//                 */
//                var age = pyd.getFullYear() - dob.getFullYear();
//                var dtLstBirth = new Date(dob.getFullYear() + age, dob.getMonth(), dob.getDate());
//                /**
//                 * If it is a leap year, then do not shift to next day (AddDate function of VB.NET)
//                 * for example if DOB=29/2/2016, then DOB + 1YEAR is expected as 28/02/2017
//                 */
//                var lstDateOfMonth = new Date(dob.getFullYear() + age, dob.getMonth() + 1, 0);
//                if( dtLstBirth > lstDateOfMonth){
//                  dtLstBirth = lstDateOfMonth;
//                }
//
//                if( pyd < dtLstBirth){
//                  age = age - 1;
//                }
//
//                /*
//                 * NEAREST calculation
//                var julianDayDob = dob.julianDay();
//                var julianDayPyd = pyd.julianDay();
//
//                if (dob.daysInYear() > 365 && julianDayDob > 59) {
//                    julianDayDob--;
//                }
//
//                if (pyd.daysInYear() > 365 && julianDayPyd > 59) {
//                    julianDayPyd--;
//                }
//
//                var age = pyd.getFullYear() - dob.getFullYear();
//                if (julianDayDob > julianDayPyd) {
//                    age--;
//                    julianDayPyd += 365;
//                }
//
//                if ((julianDayPyd - julianDayDob) > 183) {
//                    age++;
//                }
//                */
//
//                result["age"] = age;
//                result["error"] = "";
//            } catch (e) {
//                result["age"] = null;
//                result["error"] = e;
//            }
//        }
//        return result;
    },

    getErrors: function(args) {
        var mm = Repository.getManager(SystemComponents.MANAGER.MESSAGE_MANAGER);

        var language = args["language"];
        var errorCode = args["errorCode"];
        var variables = args["variables"];
        var message = mm.call("getMessage", {
            error: {
                code: errorCode,
                arguments: variables
            },
            language: language
        });
        return message;
    },

    listRiders: function(args) {
        var planCodes = args["planCodes"];
        var language = args["language"];
        var effectiveDate = args["effectiveDate"];
        var location = args["location"];

        console.log("step 2 - begin");
        console.log(planCodes);
        console.log("step 2 - end");
        return PEservice.listRiders(planCodes, language, effectiveDate, location);
    },

    runProjection: function(args) {
        // it accept the options of assumption and run a projection and return the
        // result to calling application. null will be returned if error happen.
        var proposal = this.self.context.proposal;

        var schemaObj =  this.self.context.proposal.coverageInfo.schema.call('getSchema', {});
        var policyOptionsX = _V( _PV( schemaObj, "ProductSchema.CompropOption.PolOpt" ), { } );
        var projectionOptionsX = _V( _PV( schemaObj, "ProductSchema.CompropOption.ProjOpt" ), { BasePlanWithRiders: true } );
        _DB("", "", "");
        _DB("", "[ Policy Options - Schema ]", "");
        _SS(policyOptionsX, 2);
        _DB("", "", "");
        _DB("", "[ Projection Options - Schema ]", "");
        _SS(projectionOptionsX, 2);

        var projectionOptionsXX = [];
        for(projOptKey in projectionOptionsX) {
            var projOptVal = projectionOptionsX[projOptKey];
            if (projOptVal) {
                projectionOptionsXX.push(projOptKey);
            }
        }

        var policyOptionsXX = [];
        for(polOptKey1 in policyOptionsX) {
            var newDimension = [];
            var polOptObj = policyOptionsX[polOptKey1]; // Y, N or YN
            var polOptVal = _V( polOptObj )
            if (polOptVal == 'Y' || polOptVal == 'YN') {
                newDimension.push( polOptKey1 );
            }
            if (polOptVal == 'N' || polOptVal == 'YN') {
                newDimension.push( '**EMPTY**' );
            }
            policyOptionsXX = Utils.expand(policyOptionsXX, newDimension);
        }

        var policyOptionsXXX = [];
        for (polOptsIdx in policyOptionsXX) {
            var options = [];
            for (optIdx in policyOptionsXX[polOptsIdx]) {
                var opt = policyOptionsXX[polOptsIdx][optIdx];
                if (opt != '**EMPTY**') {
                    options.push(opt);
                }
            }
            policyOptionsXXX.push(options);

        }

        _DB("", "", "");
        _DB("", "*** Policy Options - Result ***", "");
        _DB("", JSON.stringify(policyOptionsXXX, null, 2), "");
        _DB("", "", "");
        _DB("", "*** Projection Options - Result ***", "");
        _DB("", JSON.stringify(projectionOptionsXX, null, 2), "");

        var data = [];
        if (policyOptionsXXX.length > 0) {
            for(projIdx in projectionOptionsXX) {
                for(polIdx in policyOptionsXXX) {
                    data.push( {
                       proposal: proposal,
                       projectionOptions: [ projectionOptionsXX[projIdx] ],
                       policyOptions: policyOptionsXXX[polIdx]
                    } );
                }
            }
        } else {
            for(projIdx in projectionOptionsXX) {
                data.push( {
                   proposal: proposal,
                   projectionOptions: [ projectionOptionsXX[projIdx] ],
                   policyOptions: []
                } );
            }
        }

        _DB("", "", "");
        _DB("", "*** Scenarios ***", "");
        for(datai in data) {
            var dataVal = data[datai];
            _DB("", "ProjOpt:" + JSON.stringify(dataVal.projectionOptions) + " / PolOpt:" + JSON.stringify(dataVal.policyOptions), "");
        }

        /*
        //console.log("- BasePlanOnly");
        var data = [
           {
              proposal: proposal,
              projectionOptions: [InterfaceConstants.PROJECTION_OPTIONS.BASE_PLAN_ONLY],
              policyOptions: []
           }
        ];
        if (proposal.indicators.hasFundActivities) {
           //console.log("- BasePlanOnly/fundActivity");
           data.push(
              {
                 proposal: proposal,
                 projectionOptions: [InterfaceConstants.PROJECTION_OPTIONS.BASE_PLAN_ONLY],
                 policyOptions: [InterfaceConstants.POLICY_OPTIONS.FUND_ACTIVITIES_OPTION]
              }
           );
        }
        if (proposal.indicators.hasDividendWithdrawal) {
           //console.log("- BasePlanOnly/cashOutOption");
           data.push(
             {
                 proposal: proposal,
                 projectionOptions: [InterfaceConstants.PROJECTION_OPTIONS.BASE_PLAN_ONLY],
                 policyOptions: [InterfaceConstants.POLICY_OPTIONS.CASH_OUT_OPTION]
             }
           );
           if (proposal.indicators.hasFundActivities) {
              //console.log("- BasePlanOnly/cashOutOption+fundActivity");
              data.push(
                 {
                    proposal: proposal,
                    projectionOptions: [InterfaceConstants.PROJECTION_OPTIONS.BASE_PLAN_ONLY],
                    policyOptions: [InterfaceConstants.POLICY_OPTIONS.FUND_ACTIVITIES_OPTION, InterfaceConstants.POLICY_OPTIONS.CASH_OUT_OPTION]
                 }
              );
           }
        }
        */

        var product = {
           name: this.self.context.proposal.coverageInfo.catalog.call("getCatalog", {}).ProductCatalog.ProductName.Name.text,
           code: this.self.context.proposal.coverageInfo.product.productKey.primaryProduct.productPK.productId
        };
        var result = {
           product: product,
           projections: []
        }

        //for(d in data) {
        //  console.log("projection options: " + JSON.stringify(data[d].projectionOptions) + " / " + JSON.stringify(data[d].policyOptions));
        //}

        var projector = Repository.getManager(SystemComponents.MANAGER.POLICY_VALUE_PROJECTOR);
        for(d in data) {
           var r = projector.call("runProjection", data[d]);
           result.projections.push(r);
        }
        // console.log(JSON.stringify(results));
        return result;
    }

});
var InputTransformerImpl = Class.define({

   map: function(v, valueMap) {
      var o = v;
      if (v) {
         for (k in valueMap) {
            var vp = valueMap[k];
            if (v.equalsIgnoreCase(vp.key)) {
               o = vp.value;
               break;
            }
         }
      }
      return o;
   },

   transformLocation: function(location) {
      //var location = args['location'];
      var _location = this.map(location, [{
            key: InterfaceConstants.LOCATION.HONGKONG,
            value: CatalogConstants.LOCATION.HONGKONG
         },
         {
            key: InterfaceConstants.LOCATION.MACAU,
            value: CatalogConstants.LOCATION.MACAU
         },
         {
            key: InterfaceConstants.LOCATION.SINGAPORE,
            value: CatalogConstants.LOCATION.SINGAPORE
         },
         {
            key: InterfaceConstants.LOCATION.CHINA,
            value: CatalogConstants.LOCATION.CHINA
         },
         {
            key: InterfaceConstants.LOCATION.PHILIPPINE,
            value: CatalogConstants.LOCATION.PHILIPPINE
         },
         {
            key: InterfaceConstants.LOCATION.VIETNAM,
            value: CatalogConstants.LOCATION.VIETNAM
         }      ]);
      return _location;
   },

   transformPaymentMode: function(paymentMode) {
      //var paymentMode = args['paymentMode'];
      var _paymentMode = this.map(paymentMode, [{
            key: InterfaceConstants.PAYMENT_MODE.ANNUAL,
            value: SchemaConstants.PAYMENT_MODE.ANNUAL
         },
         {
            key: InterfaceConstants.PAYMENT_MODE.SEMIANNUAL,
            value: SchemaConstants.PAYMENT_MODE.SEMIANNUAL
         },
         {
            key: InterfaceConstants.PAYMENT_MODE.QUARTERLY,
            value: SchemaConstants.PAYMENT_MODE.QUARTERLY
         },
         {
            key: InterfaceConstants.PAYMENT_MODE.MONTHLY,
            value: SchemaConstants.PAYMENT_MODE.MONTHLY
         }
      ]);
      return _paymentMode;
   },

   transformGender: function(gender) {
      //var gender = args['gender'];
      var _gender = this.map(gender, [{
            key: SchemaConstants.GENDER.MALE,
            value: SchemaConstants.GENDER_FULL.MALE
         },
         {
            key: SchemaConstants.GENDER.FEMALE,
            value: SchemaConstants.GENDER_FULL.FEMALE
         }
      ]);
      return _gender;
   },

   transformSmokingStatus: function(smokingStatus) {
      //var smokingStatus = args['smokingStatus'];
      var _smokingStatus = this.map(smokingStatus, [{
            key: InterfaceConstants.SMOKING_STATUS.SMOKER,
            value: SchemaConstants.SMOKING_STATUS.SMOKER
         },
         {
            key: InterfaceConstants.SMOKING_STATUS.NONSMOKER,
            value: SchemaConstants.SMOKING_STATUS.NONSMOKER
         },
         {
            key: InterfaceConstants.SMOKING_STATUS.AGGREGATE,
            value: SchemaConstants.SMOKING_STATUS.AGGREGATE
         },
         {
            key: InterfaceConstants.SMOKING_STATUS.PREFERRED_LIVES,
            value: SchemaConstants.SMOKING_STATUS.PREFERRED_LIVES
         },
         {
            key: InterfaceConstants.SMOKING_STATUS.PREFERRED_NONSMOKER,
            value: SchemaConstants.SMOKING_STATUS.PREFERRED_NONSMOKER
         },
         {
            key: InterfaceConstants.SMOKING_STATUS.PREFERRED_SMOKER,
            value: SchemaConstants.SMOKING_STATUS.PREFERRED_SMOKER
         },
         {
            key: InterfaceConstants.SMOKING_STATUS.SUPER_PREFERRED_NONSMOKER,
            value: SchemaConstants.SMOKING_STATUS.SUPER_PREFERRED_NONSMOKER
         },
         {
            key: InterfaceConstants.SMOKING_STATUS.STANDARD_PLUS_NONSMOKER,
            value: SchemaConstants.SMOKING_STATUS.STANDARD_PLUS_NONSMOKER
         }
      ]);
      return _smokingStatus;
   },
   transformBillingMode: function(billingMode) {
      //var smokingStatus = args['smokingStatus'];
      var _billingMode = this.map(billingMode, [{
            key: InterfaceConstants.BILLING_MODE.DIRECTBILLING,
            value: SchemaConstants.BILLING_MODE.DIRECTBILLING
         },
         {
            key: InterfaceConstants.BILLING_MODE.AUTOPAY,
            value: SchemaConstants.BILLING_MODE.AUTOPAY
         },
         {
            key: InterfaceConstants.BILLING_MODE.PDF,
            value: SchemaConstants.BILLING_MODE.PDF
         },
         {
            key: InterfaceConstants.BILLING_MODE.CREDIT_CARD,
            value: SchemaConstants.BILLING_MODE.CREDIT_CARD
         },
         {
            key: InterfaceConstants.BILLING_MODE.MANUCARD,
            value: SchemaConstants.BILLING_MODE.MANUCARD
         },
         {
            key: InterfaceConstants.BILLING_MODE.SINGLE,
            value: SchemaConstants.BILLING_MODE.SINGLE
         }
      ]);
      return _billingMode;
   },

   transformDividentOption: function(dividentOption) {
      //var smokingStatus = args['smokingStatus'];
      var _dividentOption = this.map(dividentOption, [{
            key: InterfaceConstants.OPTION_DIVIDEND.DVD_CASH_DIVIDEND,
            value: SchemaConstants.DIVIDEND_OPTION.CASH_DIVIDEND
         },
         {
            key: InterfaceConstants.OPTION_DIVIDEND.DVD_ACCUMULATED_DIVIDEND,
            value: SchemaConstants.DIVIDEND_OPTION.ACCUMULATE
         },
         {
            key: InterfaceConstants.OPTION_DIVIDEND.DVD_PAID_UP_ADDITION,
            value: SchemaConstants.DIVIDEND_OPTION.PAID_UP_ADDITION
         },
         {
            key: InterfaceConstants.OPTION_DIVIDEND.DVD_BONUS_PROTECTION,
            value: SchemaConstants.DIVIDEND_OPTION.BONUS_PROTECTION
         }
      ]);
      return _dividentOption;
   },

   transformBenefitOption: function(benefitOption) {
      var _benefitOption = this.map(benefitOption, [{
            key: InterfaceConstants.BENEFIT_OPTION_TYPE.HEALTH_MAX_PROGRAM,
            value: SchemaConstants.BENEFIT_OPTION_TYPE.HEALTH_MAX_PROGRAM
         },
         {
            key: InterfaceConstants.BENEFIT_OPTION_TYPE.ADDITIONAL_LIFE_COVERAGE,
            value: SchemaConstants.BENEFIT_OPTION_TYPE.ADDITIONAL_LIFE_COVERAGE
         },
         {
            key: InterfaceConstants.BENEFIT_OPTION_TYPE.NO_VALUE,
            value: SchemaConstants.BENEFIT_OPTION_TYPE.NO_VALUE
         }
      ]);
      return _benefitOption;
   },

   setReturnRatesByCurrency: function(args) {
       var proposal = args['proposal'];
       //console.log(JSON.stringify(proposal));
       if (!Utils.isNothing(proposal) && !Utils.isNothing(proposal.funds)) {
          var policyCurrency = proposal.coverageInfo.currency.currencyPK.currencyId;
          var fundRecords = proposal.funds.fundRecord;
          //console.log(JSON.stringify(fundRecords));
          if (!Utils.isNothing(fundRecords)) {
             var funds = Utils.iterator(fundRecords);
             for(idx in funds) {
                var fundRecord = funds[idx];
                if (policyCurrency == CURRENCY.USD) {
                   fundRecord.returnRate = 3;
                   fundRecord.returnRateMedium = 6;
                   fundRecord.returnRateHigh = 8;
                   if (Number(fundRecord.targetPayoutRate) > Number(0)) {
                      fundRecord.targetPayoutRate = 0.3958333333333334;
                   }
                }
                if (policyCurrency == CURRENCY.PHP) {
                   fundRecord.returnRate = 4;
                   fundRecord.returnRateMedium = 8;
                   fundRecord.returnRateHigh = 10;
                   if (Number(fundRecord.targetPayoutRate) > Number(0)) {
                      fundRecord.targetPayoutRate = 0.250;
                   }
                }
             }
          }
       }
   },
   transform: function(args) {
      var _coverage = args['coverage'];
      _coverage.product.productKey.location_original = _coverage.product.productKey.location;
      _coverage.product.productKey.location = this.self.transformLocation(_coverage.product.productKey.location);
      /*var partyTable = Utils.iterator(_coverage.parties.party);
      for (partyi in partyTable) {
          var partyRec = partyTable[partyi];
          partyRec.insuredSex_original = partyRec.insuredSex;
          partyRec.insuredSex = this.transformGender(partyRec.insuredSex);
          partyRec.smokingStatus_original = partyRec.smokingStatus;
          partyRec.smokingStatus = this.transformSmokingStatus(partyRec.smokingStatus);
      }
      _coverage.parties.party=partyTable;*/

      var insured = getPrimaryInsured({coverage: _coverage});
      insured["insuredSex_original"] = insured.insuredSex;
      insured.insuredSex = this.self.transformGender(insured.insuredSex);
      insured["smokingStatus_original"] = insured.smokingStatus;
      insured.smokingStatus = this.self.transformSmokingStatus(insured.smokingStatus);

      _coverage.benefitOption_original = _coverage.benefitOption;
      _coverage.benefitOption = this.self.transformBenefitOption(_coverage.benefitOption);
      if (!Utils.isNothing(_coverage.options)) {
          _coverage.options.paymentMode_original = _coverage.options.paymentMode;
          _coverage.options.paymentMode = this.self.transformPaymentMode(_coverage.options.paymentMode);
          _coverage.options.billingMethod_original = _coverage.options.billingMethod;
          _coverage.options.billingMethod = this.self.transformBillingMode(_coverage.options.billingMethod);
          _coverage.options.dividendOption_original = _coverage.options.dividendOption;
          _coverage.options.dividendOption = this.self.transformDividentOption(_coverage.options.dividendOption);
      }
      return _coverage;
   },
});
/*

	ProductEngine (PE) - Primary JS class

	attributes:
	-----------
	context :          it is the memory space to store all working variables and reference
					   data. Inside context, the following objects can be referred.

					   calcRequest :      it is the request object from call application for validation,
				   						  premium calculation and/or projection
					   catalogs :         catalog of coverage
					   schema :           schema of coverage
					   error:			  last error among function call

	methods:
	--------
	init:              function to load all necessary configurations of products and plans
	validate:          perform validation and return error
	calculatePremiums: perform premium calculations for base plan and all riders
	runProjection:     perform projection for calcRequest

*/

// Default core settings
// PE core module
var PE = function( engine ) {
   return {
      _PE: engine,
      setProposal: function( proposal ) {
         var _proposal = JSON.parse(JSON.stringify(proposal));
         //if (proposal.enableDebug) {
         //    console.log("proposal (input): \n");
         //    console.log(JSON.stringify(_proposal, null, 2));
         //    console.log("---------------");
         //}
         this._PE.call("setProposal", {proposal: _proposal});
      },
      context: function() {
         return this._PE.call("getContext");
      },
      listCustomFunctions: function(args) {
         return this._PE.call("listCustomFunctions", args);
      },
      callCustomFunction: function(args) {
         return this._PE.call("callCustomFunction", args);
      },
      validate: function() {
         return this._PE.call("validate");
      },
      listBaseProducts: function(planCodes, language, effectiveDate, location) {
         return this._PE.call("listBaseProducts", {planCodes: planCodes, language: language, effectiveDate: effectiveDate, location: location});
      },
      listRiders: function(planCodes, language, effectiveDate, location) {
         console.log('Plan Codes: ' + planCodes);
         return this._PE.call("listRiders", {planCodes: planCodes, language: language, effectiveDate: effectiveDate, location: location});
      },
      calculateInsuredAge: function(dateOfBirth, policyYearDate) {
         return this._PE.call("calculateInsuredAge", dateOfBirth, policyYearDate);
      },
      calculatePremiums: function() {
         return this._PE.call("calculatePremiums");
      },
      runProjection: function( projectionOptions ) {
         return this._PE.call("runProjection", {projectionOptions: projectionOptions});
      }
   };
}

    var CalcEventCashValueCVM01 = Class.define({
            functionName: function(args) {
    return "CalcEventCashValueCVM01";
},
            execute: function(args) {
    var coverage = args['coverage'];
    var args2 = args['args'];
    
    var context = args2["context"];
    var running = context.runningPolicyValues;
    
    var productId = coverage.product.productKey.primaryProduct.productPK.productId;
    var rates = context.rates;
    if (coverage.coverageId.startsWith("R")) {
        rates = context.rates[coverage.coverageId];
    }
    var csvRates = rates[productId][SchemaConstants.POLICY_VALUE.CASHVALUE];
    var csvRate = _R(csvRates.rates[running.year],1);
    
    var csv = _R( coverage.faceAmount * csvRate / 1000, 0);
    return { value: csv };
}
    });
    var CalcEventDeathBenefitTrad = Class.define({
            functionName: function(args) {
    return "CalcEventDeathBenefitTrad";
},
            execute: function(args) {
    var context = args["context"];
    var year = context.runningPolicyValues.year;
    var proposal = context.proposal;
    var basePlan = proposal.coverageInfo;

    var lienRate = this.self.getLienRate(args);
    var deathBenefit = basePlan.faceAmount * lienRate;

    return { value: deathBenefit };
},
            getLienRate: function(args) {
    var context = args["context"];
    var running = context.runningPolicyValues;
    var proposal = context.proposal;
    var basePlan = proposal.coverageInfo;
    var productId = basePlan.product.productKey.primaryProduct.productPK.productId;
    var year = running.year;

    var lienRates = context.rates[productId][SchemaConstants.POLICY_VALUE.PROTECTION];
    var lienRate = 1;

    if (!Utils.isNothing(lienRates)) {
        if (year < lienRates.rates.length)
          lienRate = lienRates.rates[year];
    }

    return lienRate;
}
    });
    var CalcEventDeathBenefitUVL_UL007 = Class.define({
            functionName: function(args) {
    return "CalcEventDeathBenefitUVL_UL007";
},
            execute: function(args) {
    var context = args["context"];
    var proposal = context.proposal;
    var basePlan = proposal.coverageInfo;
    var running = context.runningPolicyValues;

    // Calculate lienForJuveniles value base on age
    var lien = this.self.getLienRate(args);

    var narCalc = DataDrivenCalculatorImpl.create({
      drivenKeys: PublicConstants.FUND_RETURN,
      drivenDatas: [IFund.appliedTo(running.fundPool).call("fundBalances", {}), 
                   IFund.appliedTo(running.cashoutAccount).call("fundBalances", {}), 
                   running.lapseAtYearBeginning,
                   context.runningPolicyValues.faceAmount]
    });

    var deathBenefits = IDataDrivenCalculator.appliedTo(narCalc).call("calculate", {
      calculateBlock: function(data) {
        var db = 0;
        //var faceAmount = basePlan.faceAmount;
        var fundBalance = data[0];
        var cashOutAccountBalance = data[1];
        var faceAmount = data[3];
        
        var totalFundBalance = Number(fundBalance) + Number(cashOutAccountBalance);
        var isLapse = data[2] === 'Y';
        
        var isUVL = basePlan.catalog.call("isUVL");
        var isRegularSaving = basePlan.catalog.call("isRegularSaving");

        // if (basePlan.options.dbLevel == SchemaConstants.DB_OPTION.LEVEL) {
        //  db = isLapse ? 0 : Math.max(_R2(fundBalance), _R2(faceAmount)) * lien;
        // } else {
        //  db = isLapse ? 0 : _R2(Number(faceAmount) * lien + Number(totalFundBalance));
        // }
        
        if (basePlan.options.dbLevel == SchemaConstants.DB_OPTION.LEVEL) {
            if (isUVL && isRegularSaving) {
                db = isLapse ? 0 : Math.max(_R2(fundBalance), _R2(faceAmount)) * lien;
            } else if (isUVL && !isRegularSaving) {
                db = Math.max(_R2(fundBalance), _R2(faceAmount)) * lien;
            }
        } else {
            if (isUVL && isRegularSaving) {
                db = isLapse ? 0 : _R2(Number(faceAmount) * lien + Number(totalFundBalance));
            } else if (isUVL && !isRegularSaving) {
                db = _R2(Number(faceAmount) * lien + Number(totalFundBalance));
            }
        }
        
        return db;
      }
    });

    return { value: deathBenefits };
},
            init: function(args) {
    this.self['context'] = {};
    this.self.context['lienRates'] = [.2, .4, .6, .8, 1];
},
            getLienRate: function(args) {
    var context = args["context"];
    var running = context.runningPolicyValues;
    var age = Number(context.insuredAge) + Number(running.year);

    var lienRate = (age < this.self.context.lienRates.length) ? this.self.context.lienRates[age] : 1;
    return lienRate;
}
    });
    var CalcEventMinFaceAmountByMinPrem = Class.define({
            functionName: function(args) {
    return "CalcEventMinFaceAmountByMinPrem";
},
            execute: function(args) {
    var context = args['context'];
    var running = context.runningPolicyValues;
    var coverage = args['coverage'];        // that can be base plan / rider
    var productId = coverage.product.productKey.primaryProduct.productPK.productId;
    var premiumRates = context.rates[productId][SchemaConstants.PREMIUM_TYPE.BASICPREMIUM];
    
    _DBR("premiumRates", _PV( premiumRates, "rates" ), "CalcEventMinFaceAmountByMinPrem", running.months);
    
    var insured = getPrimaryInsured({coverage: coverage});
    //e.g. return { errors: { code: "00000", message: "sample error message" } };
    //or return { value: XXXX };
    var premiumRate = premiumRates.rates[0];    // rate at issue age
    var premiumRange = getPremiumRecord({
        coverage: coverage, 
        schema: coverage.schema.call('getSchema'),
        premiumType: SchemaConstants.PREMIUM_RANGE_TYPE.PREMIUMTYPE_BASICPREMIUM,
        issueAge: insured.insuredAge
    });

    _DBR("premiumRange", premiumRange, "CalcEventMinFaceAmountByMinPrem", running.months);

    var faceAmount;
    try {
        faceAmount = _V( premiumRange.MinPremium ) * 1000 / premiumRate;
    } catch (e) { _DB("CalcEventMinFaceAmountByMinPrem.Exception", e, ""); }
    return { value: faceAmount };
}
    });
    var CalcEventProtection = Class.define({
            functionName: function(args) {
    return "CalcEventProtection";
},
            execute: function(args) {
    //Intended for Riders as FA here is not from runningPolicyValue
    var context = args["context"];
    var coverage = args["coverage"];
    var year = context.runningPolicyValues.year;
    var faceAmount = _V(coverage.faceAmount, 0);
    var benefitPeriod = coverage.schema.call("calculateBenefitPeriod", {
            coverage: coverage
        });
    var protection = 0; 
    //Based on benefit period
    if (year < benefitPeriod) {
        protection = faceAmount;
    }

    return { value: protection };
}
    });
    var CalculateAgeEnoughOneMonth = Class.define({
            functionName: function(args) {
    return "CalculateAgeEnoughOneMonth";
},
            execute: function(args) {
    var dateOfBirth = args["dateOfBirth"];
    var policyYearDate = args["policyYearDate"];
    var language = args["language"];

    var dob = this.self.toDate({date: dateOfBirth});
    var pyd = this.self.toDate({date: policyYearDate});

    if (Utils.isNothing(language)) {
        language = "en";
    }

    console.log("calculateInsuredAge - begin")
    console.log("dateOfBirth = " + dateOfBirth);
    console.log("policyYearDate = " + policyYearDate);
    console.log("dob = " + dob);
    console.log("pyd = " + pyd);
    var result = {};
    if (dob == null || pyd == null) {
        result["error"] = this.getErrors({
            language: "en",
            errorCode: "ERRC0000",
            variables: []
        });
        result["age"] = -1;
    } else {
        try {
            if (Utils.isNothing(pyd)) {
                pyd = Utils.now();
            }

            /**
             * LAST calculation
             */
            var age = pyd.getFullYear() - dob.getFullYear();
            var moreOneMonth = 0;
            var dtLstBirth = new Date(dob.getFullYear() + age, dob.getMonth(), dob.getDate());
            /**
             * If it is a leap year, then do not shift to next day (AddDate function of VB.NET)
             * for example if DOB=29/2/2016, then DOB + 1YEAR is expected as 28/02/2017
             */
            var lstDateOfMonth = new Date(dob.getFullYear() + age, dob.getMonth() + 1, 0);
            if( dtLstBirth > lstDateOfMonth){
              dtLstBirth = lstDateOfMonth;
            }

            if( pyd < dtLstBirth){
              age = age - 1;
            }

            //check enough one month
            var oneMonthAfter = new Date(dob.getFullYear(), dob.getMonth() + 1, dob.getDate());
            var lastDayOneMonthAfter = new Date(dob.getFullYear(), dob.getMonth() + 2, 0);
            if(oneMonthAfter > lastDayOneMonthAfter){
                oneMonthAfter = lastDayOneMonthAfter;
            }
            pyd.setHours(0);
            pyd.setMinutes(0);
            pyd.setSeconds(0);
            if(oneMonthAfter <= pyd){
                moreOneMonth = 1;
            }
            result["ageByDays"] = this.self.dateDiffInDays({
                dateOfBirth: dob, 
                policyYearDate: pyd
            });
            result["ageByWeeks"] = this.self.dateDiffInWeeks({
                dateOfBirth: dob, 
                policyYearDate: pyd
            }); 
            result["age"] = age;
            result["moreOneMonth"] = moreOneMonth;
            result["error"] = "";
        } catch (e) {
            result["ageByDays"] = null;
            result["ageByWeeks"] = null;
            result["age"] = null;
            result["moreOneMonth"] = null;
            result["error"] = e;
        }
    }
    return result;
},
            toDate: function(args) {
    var d = args['date'];
    var o;
    if (typeof d === 'string' || d instanceof String) {
        console.log("a string date is received - " + d);
        o = d.date();
    } else
    if (typeof d === 'date' || d instanceof Date) {
        console.log("a date value is received - " + d);
        o = d;
    }
    return o;
},
            getErrors: function(args) {
    var mm = Repository.getManager(SystemComponents.MANAGER.MESSAGE_MANAGER);

    var language = args["language"];
    var errorCode = args["errorCode"];
    var variables = args["variables"];
    var message = mm.call("getMessage", {
        error: {
            code: errorCode,
            arguments: variables
        },
        language: language
    });
    return message;
},
            dateDiffInDays: function(args) {
    var a = args["dateOfBirth"];
    var b = args["policyYearDate"];
    var utc1 = Date.UTC(a.getFullYear(), a.getMonth(), a.getDate());
    var utc2 = Date.UTC(b.getFullYear(), b.getMonth(), b.getDate());
    return Math.floor((utc2 - utc1) / (1000 * 60 * 60 * 24));
},
            dateDiffInWeeks: function(args) {
    return Math.floor(this.self.dateDiffInDays(args) / 7);
}
    });
    var CalculateCoveragePremiumLocal = Class.define({
            functionName: function(args) {
    return "CalculateCoveragePremiumLocal";
},
            execute: function(args) {
    var coverage = args["coverage"];
    var year = args['year'];
    var months = args['months'];
    var paymentMode = args['paymentMode'];
    var debug = args['debug']
    var context = args['context'];  // projection context

    if (Utils.isNothing(paymentMode)) {
        paymentMode = coverage.proposal.coverageInfo.options.paymentMode;
    }
    if (Utils.isNothing(paymentMode)) {
        paymentMode = SchemaConstants.PAYMENT_MODE.ANNUAL;
    }

    var covPremium = 0;
    var ppp = coverage.schema.call("calculatePremiumPayingPeriod", {
        coverage: coverage
    });

    var debugBackup = _V( coverage.proposal.enableDebug, false );
    if (debug) {
        // follow proposal.enableDebug
    } else {
        coverage.proposal.enableDebug = false;
    }
    if (year < ppp) {
        var premiumCalculator = Repository.getManager(SystemComponents.MANAGER.PREMIUM_CALCULATOR);
        var calculator = premiumCalculator.call("lookupCalculator", {
            coverage: coverage
        });
        if (!Utils.isNothing(calculator)) {
            var rateObj = {};
            if (year === 0 && coverage.proposal.reference == 'PROP-000000179') {
                /*
                var rm = Repository.getManager(SystemComponents.MANAGER.RATE_MANAGER);
                
                //_SS(rm.handlers, 7);
                //_SS(calculator, 7);
                var rateList = IBasicPremiumFormula.appliedTo( calculator.implementation.formula ).call('rateList', args);
                //_SS(rateList, 7);
                var rates = context.rates;
                //_SS(rates, 7);
                var productId = _PV(coverage, 'product.productKey.primaryProduct.productPK.productId');
                for(var i in rateList) {
                    var rateRequired = rateList[i];
                    
                    var handler;
                    for(var handlerIdx in rm.handlers) {
                        handler = rm.handlers[handlerIdx];
                        if (handler.rateType == rateRequired.rateType) break;    
                    }

                    if (handler) {
                        var req = {};
                        req['rates'] = _PV( rates, [ productId, handler.resourceKey ] );
                        req['year'] = year;
                        var rateValue = IFunction.appliedTo(GetRateByPolicyYear.create()).call("execute", req);
                        rateObj[handler.resourceKey] = rateValue.value;
                    }
                }
                
                */
                rateObj = this.self.readCurrentYearRate({ calculator: calculator, context: context, coverage:coverage, year:year});
                _SS( rateObj, 7 );
            }
            
            var result = calculator.call("calculate", {
                coverage: coverage,
                ipo: _V(coverage.ipo, 0),
                context: context,
                policyYear: year
            });

            //_SS(result, 10);

            for (var i in result.totalPremiums) {
                var totalPremiumRec = result.totalPremiums[i];
                if (totalPremiumRec.paymentMode == paymentMode) {
                    covPremium = totalPremiumRec.totalPremium;
                    break;
                }
            }
        }
    }
    coverage.proposal.enableDebug = debugBackup;

    return {
        value: covPremium
    };
},
            readCurrentYearRate: function(args) {
    var calculator = args['calculator'];
    var context = args['context'];
    var coverage = args['coverage'];
    var year = args['year'];
    
    var rateObj = {};
    
    var rm = Repository.getManager(SystemComponents.MANAGER.RATE_MANAGER);
    var rateList = IBasicPremiumFormula.appliedTo( calculator.implementation.formula ).call('rateList', args);
    var rates = context.rates;
    
    //_SS(rates, 7);

    var productId = _PV(coverage, 'product.productKey.primaryProduct.productPK.productId');
    for(var i in rateList) {
        var rateRequired = rateList[i];
        
        var handler;
        for(var handlerIdx in rm.handlers) {
            handler = rm.handlers[handlerIdx];
            if (handler.rateType == rateRequired.rateType) break;    
        }

        if (handler) {
            var req = {};
            req['rates'] = _PV( rates, [ productId, handler.resourceKey ] );
            req['year'] = year;
            var rateValue = IFunction.appliedTo(GetRateByPolicyYear.create()).call("execute", req);
            rateObj[handler.resourceKey] = rateValue.value;
        }
    }
    
    return rateObj;
}
    });
    var CalculateFaceAmountRange = Class.define({
            functionName: function(args) {
    return "CalculateFaceAmountRange";
},
            execute: function(args) {
    // Sample Input
    // {
    // 	"productId": "UL007", 
    // 	"location": "Vietnam",
    // 	"channel": "Agency",
    // 	"insuredAge": 18,
    // 	"plannedPremium": 10000,
    // 	"paymentMode": "Annual",
    // 	"currencyId": "VND"
    // }
    //
    // Optional Input
    // extraRating e.g. { tempFlat: 0, flatExtra: 0 }
    //
    // Rider Situation
    // associateProductId e.g. "UL007"
    // bpFaceAmount e.g. xxxx - base plan face amount


    var productId = args['productId'];
    var coverage = this.self.createCoverage(args);
    var cm = Repository.getManager(SystemComponents.MANAGER.CATALOG_HELPER);
    var sm = Repository.getManager(SystemComponents.MANAGER.SCHEMA_HELPER);
    
    var catalog = cm.call("lookup", {
        productCode: productId
    });    
    var schema = sm.call("lookup", {
        coverage: coverage
    });
    args['schema'] = schema;
    args['catalog'] = catalog;
    args['coverage'] = coverage;
    var multiplier = this.self.getMultiplier(args);
    var multiplierLimits = this.self.getMultiplierLimits(args);
    var faLimits = this.self.getFaceAmountLimits(args);
    
    //_SS(faLimits, 10);
    //_SS(multiplierLimits, 10);
    
    var limits = { 
        minFixLimit: faLimits.minLimit,
        maxFixLimit: faLimits.maxLimit,
        minLimit: Math.max(faLimits.minLimit, multiplierLimits.minLimit), 
        maxLimit: Math.min(faLimits.maxLimit, multiplierLimits.maxLimit),
        defLimit: multiplierLimits.defLimit
    };
    limits.maxLimit = this.self.getTermRiderFaceAmountLimits({
        'catalog': catalog,
        'maxLimit': limits.maxLimit
    });
    if (!Utils.isNothing(multiplier)) {
        limits['minMultiplier'] = multiplier.min;
        limits['maxMutliplier'] = multiplier.max;
    }

    return { value: limits };
},
            getMultiplier: function(args) {
    var insuredAge = args['insuredAge'];
    var schemaObj = args['schema'];

    var schema = schemaObj.call("getSchema", null);
    if (!Utils.isNothing(schema.ProductSchema.FaceAmountMultiplier) && !Utils.isNothing(schema.ProductSchema.FaceAmountMultiplier.MultiplierRecord)) {
      var multiplierTable = Utils.iterator(schema.ProductSchema.FaceAmountMultiplier.MultiplierRecord);
      var result;
      for (var i in multiplierTable) {
        var multiplier = multiplierTable[i];
        if (!Utils.isNothing(multiplier)) {
          var minAge = _V(multiplier.MinIssueAge);
          var maxAge = _V(multiplier.MaxIssueAge);
          var minFAMultiplier = _V(multiplier.MinFAMultiplier, 0);
          var maxFAMultiplier = _V(multiplier.MaxFAMultiplier, 0);
          var defFAMutliplier = _V(multiplier.DefaultFAMultiplier, 0);

          _DB("minAge[" + i + "]", minAge);
          _DB("maxAge[" + i + "]", maxAge);
          _DB("minFAMultiplier[" + i + "]", minFAMultiplier);
          _DB("maxFAMultiplier[" + i + "]", maxFAMultiplier);

          if (minAge <= insuredAge && insuredAge <= maxAge) {
            _DB("", "Multiplier is matched");
            result = {
                min: minFAMultiplier,
                max: maxFAMultiplier,
                def: defFAMutliplier
            };
            break;
          }
        }
      }
    }
    if (Utils.isNothing(result)) {
      _DB("", "@@@@@ Multiplier cannot be found");
    }
    return result;
},
            getMultiplierLimits: function(args) {
    var plannedPremium = args['plannedPremium'];
    var extraRating = args['extraRating'];
    
    if (Utils.isNothing(extraRating)) {
        extraRating = {tempFlat: 0, flatExtra: 0};
    }
    extraRating['tempFlat'] = _V( extraRating.tempFlat, 0 );
    extraRating['flatExtra'] = _V( extraRating.flatExtra, 0 );

    var plannedPremium = this.self.getTotalPremium(args);
    _DB("plannedPremium", plannedPremium);

    var minFA;
    var maxFA;
    var defFA;
    var multipliers = this.self.getMultiplier(args);
    if (!Utils.isNothing(multipliers)) {
        var minFactor = (1000 / multipliers.max) + (extraRating.tempFlat + extraRating.flatExtra) / 0.4;
        var maxFactor = (1000 / multipliers.min) + (extraRating.tempFlat + extraRating.flatExtra) / 0.4;
    
        minFA = _R(plannedPremium / maxFactor * 1000, 0);
        maxFA = _R(plannedPremium / minFactor * 1000, 0);
        defFA = plannedPremium * multipliers.def;
    } else {
        minFA = 0;
        maxFA = 9999999999;
        defFA = 0;
    }
    _DB("Min multiplier limit", minFA);
    _DB("Max multiplier limit", maxFA);
    _DB("Def multiplier limit", defFA);

    return {
        minLimit: minFA,
        maxLimit: maxFA,
        defLimit: defFA
    };
},
            getTotalPremium: function(args) {
    var pp = _V(args["plannedPremium"], 0);
    var paymentMode = args["paymentMode"];
    var ppfreq = 1;
    if (paymentMode == SchemaConstants.PAYMENT_MODE.ANNUAL) {
        ppfreq = 1;
    } else if (paymentMode == SchemaConstants.PAYMENT_MODE.SEMIANNUAL) {
        ppfreq = 2;
    } else if (paymentMode == SchemaConstants.PAYMENT_MODE.QUARTERLY) {
        ppfreq = 4;
    } else if (paymentMode == SchemaConstants.PAYMENT_MODE.MONTHLY) {
        ppfreq = 12;
    }
    return (ppfreq * pp);
},
            createCoverage: function(args) {
    var channel = args['channel'];
    var _location = args['location'];
    
    var productId = args['productId'];
    var associateProductId = _V( args['associateProductId'], "--" );
    
    var currencyId = args['currencyId'];
    var paymentMode = args['paymentMode'];
    var insuredAge = args['insuredAge'];
    var insuredSex = args['insuredSex'];
    var smokingStatus = args['smokingStatus'];
    var coverage = {};
    coverage['proposal']={}; 
    coverage.proposal['channel']=channel;
    coverage.proposal['policyYearDate']=(new Date()).formatString();
    //coverage.proposal['coverageInfo'] = {};

    coverage['product']={}; coverage.product['productKey']={}; 
    coverage.product.productKey['location']=_location;
    
    coverage.product.productKey['primaryProduct']={}; 
    coverage.product.productKey.primaryProduct['productPK']={}; 
    coverage.product.productKey.primaryProduct.productPK['productId']=productId;

    coverage.product.productKey['associateProduct']={}; 
    coverage.product.productKey.associateProduct['productPK']={}; 
    coverage.product.productKey.associateProduct.productPK['productId']=associateProductId;
    
    coverage.product.productKey['basicProduct']={}; 
    coverage.product.productKey.basicProduct['productPK']={}; 
    coverage.product.productKey.basicProduct.productPK['productId']="--";
    coverage.product.productKey['valueDate'] = (new Date()).formatString();
    
    coverage['currency'] = {};
    coverage['currency']['currencyPK'] = {};
    coverage['currency']['currencyPK']['currencyId'] = currencyId;
    
    coverage['options'] = {};
    coverage['options']['paymentMode'] = args['paymentMode'] || 'paymentMode';
    //Create primary insured
    coverage['parties'] = {};
    coverage.parties['party'] = {};
    coverage.parties.party['insuredAge'] = insuredAge;
    coverage.parties.party['insuredSex'] = insuredSex || "M";
    coverage.parties.party['smokingStatus'] = smokingStatus || "NS";
    //transform coverage
    var translator = Repository.getManager(SystemComponents.MANAGER.INPUT_TRANSFORMER);
    coverage = translator.call("transform", {
        coverage: coverage
    });
    return coverage;
},
            getFaceAmountLimits: function(args) {
    var coverage = args['coverage'];
    var insuredAge = args['insuredAge'];
    var productId = args['productId'];
    var schemaObj = args['schema'];
    var catalogObj = args['catalog'];
    var currencyId = args['currencyId'];
    var bpFaceAmount = args['bpFaceAmount'];
    var faceAmount = args['faceAmount'];
    
    var schema = schemaObj.call("getSchema", null);
    var minFA = 99989898989898.999;
    var maxFA = -99989898989898.999;
    var result = {};
    for (var bandKey in schema.ProductSchema.BandInformation.BandRecord) {
        var bandRec = schema.ProductSchema.BandInformation.BandRecord[bandKey];
        if (!Utils.isNothing(bandRec.CurrencyPK)) {
            //console.log("productRules.length = " + bandRec.CurrencyPK.CurrencyId.text);
            if (currencyId == bandRec.CurrencyPK.CurrencyId.text) {
                coverage['banding'] = {};
                coverage.banding['Band'] = {};
                coverage.banding.Band['text'] = bandRec.Band.text;
                if (insuredAge >= Number(bandRec.MinIssueAge.text) && insuredAge <= Number(bandRec.MaxIssueAge.text)) {
                    minFA = Math.min(minFA, Number(bandRec.MinFaceAmount.text));
                    maxFA = Math.max(maxFA, Number(bandRec.MaxFaceAmount.text));
                }
            }
        }
    }

    var currencyBasedLimits = Utils.iterator(_V(_PV(schema, "ProductSchema.CurrencyBaseLimits.CurrencyLimitRecord"), []));
    //var bpFaceAmount = _V(_PV(coverage, "proposal.coverageInfo.faceAmount"));
    var bpFaceAmount = _V(bpFaceAmount, faceAmount);
    //var currencyId = _PV(coverage, "currency.currencyPK.currencyId");
    _DB("currencyBasedLimits(" + productId + ")", currencyBasedLimits, "FaceAmountValidationRule->");
    _DB("currencyId", currencyId, "FaceAmountValidationRule->");
    if (!Utils.isNothing(bpFaceAmount)) {
        var minBpRatio;
        var maxBpRatio;
        var bpFA = Number(bpFaceAmount);
        for (var limitRecIdx in currencyBasedLimits) {
            var limitRec = currencyBasedLimits[limitRecIdx];
            var limitRecCurrency = _V(_PV(limitRec, "CurrencyPK.CurrencyId"));
            var limitNature = _V(limitRec.LimitNature);

            _DB("limitRecCurrency", limitRecCurrency, "FaceAmountValidationRule->");
            _DB("limitNature", limitNature, "FaceAmountValidationRule->");

            if (currencyId == limitRecCurrency) {
                if (limitNature == "Min") {
                    minBpRatio = _V(limitRec.BpFaRatio);
                }
                if (limitNature == "Max") {
                    maxBpRatio = _V(limitRec.BpFaRatio);
                }
            }
        }
        _DB("", "Face amount ratio logic", "")
        _DB("bpFA", bpFA, "FaceAmountValidationRule->");
        _DB("minBpRatio", minBpRatio, "FaceAmountValidationRule->");
        _DB("maxBpRatio", maxBpRatio, "FaceAmountValidationRule->");
        if (!Utils.isNothing(minBpRatio)) {
            minFA = Math.max(minFA, (bpFA * Number(minBpRatio)));
        }
        if (!Utils.isNothing(maxBpRatio)) {
            maxFA = Math.min(maxFA, (bpFA * Number(maxBpRatio)));
        }
        //Calculate min FA for Unit Link
        catalog = catalogObj.call("getCatalog");
        var catalogAlias = _V( _PV( catalog, "ProductCatalog.Alias" ) );
        if(catalogAlias == "RUV"){
            var premRange = this.self.getPremiumRange({
                coverage: coverage,
                insuredAge: insuredAge,
                schema: schema
            });
            if(!Utils.isNothing(premRange)){
                var minFAByPrem = this.self.getMinFaceAmountByMinPremium({
                    minPremium: premRange.minLimit,
                    coverage: coverage,
                    schema: schemaObj,
                    catalog: catalogObj,
                    insuredAge: insuredAge
                });
                minFA = Math.max(minFA, minFAByPrem);
            }
        }
        _DB("minFA", minFA, "FaceAmountValidationRule->");
        _DB("maxFA", maxFA, "FaceAmountValidationRule->");
    }

    return {
        minLimit: minFA,
        maxLimit: maxFA
    };
},
            getTermRiderFaceAmountLimits: function(args) {
    var catalog = args["catalog"];
    var maxLimit = args["maxLimit"];
    catalog = catalog.call("getCatalog");
    var catalogAlias = _V( _PV( catalog, "ProductCatalog.Alias" ) );
    if(catalogAlias == "TRI"){
        maxLimit = 10000000;
    }
    return maxLimit;
},
            getPremiumRange: function(args) {
    var coverage = args['coverage'];
    var schema = args['schema'];
    var insuredAge = args['insuredAge'];
    var premiumRec = getPremiumRecord({
        premiumType: SchemaConstants.PREMIUM_RANGE_TYPE.PREMIUMTYPE_BASICPREMIUM,
        coverage: coverage,
        schema: schema,
        issueAge: insuredAge
    });
    if (Utils.isNothing(premiumRec)) {
    premiumRec = getPremiumRecord({
        premiumType: SchemaConstants.PREMIUM_RANGE_TYPE.PREMIUMTYPE_PLANNEDPREMIUM,
        coverage: coverage,
        schema: schema,
        issueAge: insuredAge
    });
    }

    var minPP;
    var maxPP;
    if (!Utils.isNothing(premiumRec)) {
        minPP = Number( _PV( premiumRec, ['MinPremium'] ) );
        maxPP = Number( _PV( premiumRec, ['MaxPremium'] ) );
    }
    return {minLimit: minPP, maxLimit: maxPP};
},
            getMinFaceAmountByMinPremium: function(args) {
    var minPP = args['minPremium'];
    var minFA = 0;
    var rateHelper = IFunction.appliedTo( GetRateValueByPolicyYear.create() );
    var coverage = args['coverage'];
    var schema = args['schema'];
    var catalog = args['catalog'];
    var insuredAge = args['insuredAge'];
    coverage.schema = schema;
    coverage.catalog = catalog;
    var result = rateHelper.call('execute', {
        coverage: coverage,
        year: 0,
        paymentMode: coverage.options.paymentMode,
        insuredAge: insuredAge
    });
    if(!Utils.isNothing(result)){
        minFA = _R(minPP * 1000 / result.modalRates.modalFactor.modalFactor / result.rates.premiumRate, 0);
    } 
    return minFA;
}
    });
    var CalculatePlannedPremiumRangeUL007 = Class.define({
            functionName: function(args) {
    return "CalculatePlannedPremiumRangeUL007";
},
            execute: function(args) {
    // productId
    // channel
    // location
    // insuredAge
    // schema
    // faceAmount
    // paymentMode e.g. Annual, Semi-Annual, Quarterly, Monthly
    // extraRating e.g. { tempFlat: 0, flatExtra: 0 }
    // currencyId

    //var p1 = "OK";
    //e.g. return { errors: { code: "00000", message: "sample error message" } };
    //or return { value: XXXX };

    var productId = args['productId'];
    var coverage = this.self.createCoverage(args);
    var cm = Repository.getManager(SystemComponents.MANAGER.CATALOG_HELPER);
    var sm = Repository.getManager(SystemComponents.MANAGER.SCHEMA_HELPER);
    
    var catalog = cm.call("lookup", {
        productCode: productId
    });    
    var schema = sm.call("lookup", {
        coverage: coverage
    });
    //_SS(schema, 10);
    
    args['schema'] = schema;
    args['coverage'] = coverage;
    var multiplier = this.self.getMultiplier(args);
    var multiplierLimits = this.self.getMultiplierLimits(args);
    var ppLimits = this.self.getPlannedPremiumLimits(args);
    
    _SS(ppLimits, 10);
    _SS(multiplierLimits, 10);
    
    var limits = { 
        minLimit: Math.max(ppLimits.minLimit, multiplierLimits.minLimit), 
        maxLimit: Math.min(ppLimits.maxLimit, multiplierLimits.maxLimit),
        defPremium: multiplierLimits.defPremium
    };
    if (!Utils.isNothing(multiplier)) {
        limits['minMultiplier'] = multiplier.min;
        limits['maxMutliplier'] = multiplier.max;
    }    
    return { value: limits };
},
            getMultiplier: function(args) {
    var insuredAge = args['insuredAge'];
    var schemaObj = args['schema'];

    var schema = schemaObj.call("getSchema", null);
    if (!Utils.isNothing(schema.ProductSchema.FaceAmountMultiplier) && !Utils.isNothing(schema.ProductSchema.FaceAmountMultiplier.MultiplierRecord)) {
        var multiplierTable = Utils.iterator(schema.ProductSchema.FaceAmountMultiplier.MultiplierRecord);
        var result;
        for (var i in multiplierTable) {
            var multiplier = multiplierTable[i];
            if (!Utils.isNothing(multiplier)) {
                var minAge = _V(multiplier.MinIssueAge);
                var maxAge = _V(multiplier.MaxIssueAge);
                var minFAMultiplier = _V(multiplier.MinFAMultiplier, 0);
                var maxFAMultiplier = _V(multiplier.MaxFAMultiplier, 0);
                var defFAMutliplier = _V(multiplier.DefaultFAMultiplier, 0);

                _DB("minAge[" + i + "]", minAge);
                _DB("maxAge[" + i + "]", maxAge);
                _DB("minFAMultiplier[" + i + "]", minFAMultiplier);
                _DB("maxFAMultiplier[" + i + "]", maxFAMultiplier);

                if (minAge <= insuredAge && insuredAge <= maxAge) {
                    _DB("", "Multiplier is matched");
                    result = {
                        min: minFAMultiplier,
                        max: maxFAMultiplier,
                        def: defFAMutliplier
                    };
                    break;
                }
            }
        }
    }
    if (Utils.isNothing(result)) {
        _DB("", "@@@@@ Multiplier cannot be found");
    }
    return result;
},
            createCoverage: function(args) {
    var channel = args['channel'];
    var _location = args['location'];
    var productId = args['productId'];
    var currencyId = args['currencyId'];
    var paymentMode = args['paymentMode'];
    
    var coverage = {};
    coverage['proposal']={}; 
    coverage.proposal['channel']=channel;
    coverage.proposal['policyYearDate']=(new Date()).formatString();
    
    coverage['product']={}; coverage.product['productKey']={}; 
    coverage.product.productKey['location']=_location;
    
    coverage.product.productKey['primaryProduct']={}; 
    coverage.product.productKey.primaryProduct['productPK']={}; 
    coverage.product.productKey.primaryProduct.productPK['productId']=productId;

    coverage.product.productKey['associateProduct']={}; 
    coverage.product.productKey.associateProduct['productPK']={}; 
    coverage.product.productKey.associateProduct.productPK['productId']="--";
    
    coverage.product.productKey['basicProduct']={}; 
    coverage.product.productKey.basicProduct['productPK']={}; 
    coverage.product.productKey.basicProduct.productPK['productId']="--";
    
    coverage['currency'] = {};
    coverage['currency']['currencyPK'] = {};
    coverage['currency']['currencyPK']['currencyId'] = currencyId;
    
    coverage['options'] = {};
    coverage['options']['paymentMode'] = paymentMode;

    return coverage;
},
            getMultiplierLimits: function(args) {
    var faceAmount = args['faceAmount'];
    var extraRating = args['extraRating'];
    var coverage = args['coverage'];
    
    if (Utils.isNothing(extraRating)) {
        extraRating = {tempFlat: 0, flatExtra: 0};
    }
    extraRating['tempFlat'] = _V( extraRating.tempFlat, 0 );
    extraRating['flatExtra'] = _V( extraRating.flatExtra, 0 );

    var faceAmount = _V(faceAmount, 0);
    //if (latestFaceAmount) {
    //    faceAmount = Number( latestFaceAmount );
    //}
    _DB("faceAmount", faceAmount);

    var minPP;
    var maxPP;
    var multipliers = this.self.getMultiplier(args);
    if (multipliers.max == 0 && multipliers.min == 0) {
        minPP = 0;
        maxPP = 9999999999;
        defPP = 0;
    } else {
        var minFactor = (1000 / multipliers.max) + (extraRating.tempFlat + extraRating.flatExtra) / 0.4;
        var maxFactor = (1000 / multipliers.min) + (extraRating.tempFlat + extraRating.flatExtra) / 0.4;
        var defFactor = (1000 / multipliers.def) + (extraRating.tempFlat + extraRating.flatExtra) / 0.4;
    
        maxPP = faceAmount / 1000 * maxFactor;
        minPP = faceAmount / 1000 * minFactor;
        defPP = faceAmount / 1000 * defFactor;
    }
    
    var noOfPayments = this.self.getPaymentFrequency(args);
    minPP = minPP / noOfPayments;
    maxPP = maxPP / noOfPayments;
    defPP = defPP / noOfPayments;
  
    _DB("No. of payments", noOfPayments);
    _DB("Min multiplier limit", minPP);
    _DB("Max multiplier limit", maxPP);
    _DB("Def multiplier FA", defPP);

    return {
        minLimit: minPP,
        maxLimit: maxPP,
        defPremium: defPP
    };
},
            getPremiumLimits: function(args) {
      var coverage = args['coverage'];
      var premiumType = args['premiumType'];
      var schemaObj = args['schema'];
      var issueAge = args['issueAge'];
      var schema = schemaObj.call("getSchema", null);

      var premiumRec = getPremiumRecord({
         premiumType: premiumType,
         coverage: coverage,
         schema: schema,
         issueAge: issueAge
      });

      var minPremium = 0;
      var maxPremium = 999999999;
      if (!Utils.isNothing(premiumRec)) {
         minPremium = Number( _PV( premiumRec, 'MinPremium' ) );
         maxPremium = Number( _PV( premiumRec, 'MaxPremium' ) );
      }
      return {minLimit: minPremium, maxLimit: maxPremium};
},
            getPlannedPremiumLimits: function(args) {
      return this.self.getPremiumLimits({
         premiumType: SchemaConstants.PREMIUM_RANGE_TYPE.PREMIUMTYPE_PLANNEDPREMIUM,
         coverage: args['coverage'],
         schema: args['schema'],
         issueAge: args['insuredAge']
      });
},
            getPaymentFrequency: function(args) {
    var coverage = args['coverage'];
    var paymentMode = coverage.options.paymentMode;
    
    var noOfPayments = 1;
    if (paymentMode == SchemaConstants.PAYMENT_MODE.SEMIANNUAL) noOfPayments = 2;
    if (paymentMode == SchemaConstants.PAYMENT_MODE.QUARTERLY) noOfPayments = 4;
    if (paymentMode == SchemaConstants.PAYMENT_MODE.MONTHLY) noOfPayments = 12;
    return noOfPayments;
}
    });
    var CalculatePolicyTerm = Class.define({
            functionName: function(args) {
    return "CalculatePolicyTerm";
},
            execute: function(args) {
    // Sample Input
        // {
        // 	"productId": "UL007", 
        // 	"location": "Vietnam",
        // 	"channel": "Agency",
        // 	"insuredAge": 18,
        // 	"plannedPremium": 10000,
        // 	"paymentMode": "Annual",
        // 	"currencyId": "VND"
        // }
        //
        // Optional Input
        // extraRating e.g. { tempFlat: 0, flatExtra: 0 }
        //
        // Rider Situation
        // associateProductId e.g. "UL007"
        // bpFaceAmount e.g. xxxx - base plan face amount

        var coverageBasePlan = this.self.createCoverage(args.basePlan);
        var smBasePlan = Repository.getManager(SystemComponents.MANAGER.SCHEMA_HELPER);
        var schemaBasePlan = smBasePlan.call("lookup", { coverage: coverageBasePlan });
        var maxBenefitAgeBasePlan = Number(schemaBasePlan.call("getSchema", null).ProductSchema.BasicParticular.BenefitPeriod.MaxBenefitAge.text);
        var policyTermBasePlan = Number(maxBenefitAgeBasePlan) - Number(args.basePlan.insuredAge);
        var policyTermRiders = [];
        for (var i = 0; i < args.riders.length; i++) {
            var insuredAge = args.basePlan.insuredAge
            var riderInsuredAge = args.riders[i].insuredAge;
            var coverageRider = this.self.createCoverage(args.riders[i]);
            var smRider = Repository.getManager(SystemComponents.MANAGER.SCHEMA_HELPER);
            var schemaRider = smRider.call("lookup", { coverage: coverageRider });
            // var maxBenefitAgeRider = Number(schemaRider.call("getSchema", null).ProductSchema.BasicParticular.BenefitPeriod.MaxBenefitAge.text) + 1;
            var maxBenefitAgeRider = Number(schemaRider.call("getSchema", null).ProductSchema.BasicParticular.BenefitPeriod.MaxBenefitAge.text);
            var policyTerm = Math.min(Number(maxBenefitAgeBasePlan) - Number(insuredAge), Number(maxBenefitAgeRider) - Number(riderInsuredAge));
            var objResult = {
                riderId: args.riders[i].riderId,
                productId: args.riders[i].productId,
                policyTerm: policyTerm
            };
            policyTermRiders.push(objResult);
        }
        return {
            policyTermBasePlan: policyTermBasePlan,
            policyTermRiders: policyTermRiders
        }
},
            createCoverage: function(args) {
    var channel = args['channel'];
        var _location = args['location'];

        var productId = args['productId'];
        var associateProductId = _V(args['associateProductId'], "--");

        var currencyId = args['currencyId'];
        var paymentMode = args['paymentMode'];

        var coverage = {};
        coverage['proposal'] = {};
        coverage.proposal['channel'] = channel;
        coverage.proposal['policyYearDate'] = (new Date()).formatString();

        coverage['product'] = {}; coverage.product['productKey'] = {};
        coverage.product.productKey['location'] = _location;

        coverage.product.productKey['primaryProduct'] = {};
        coverage.product.productKey.primaryProduct['productPK'] = {};
        coverage.product.productKey.primaryProduct.productPK['productId'] = productId;

        coverage.product.productKey['associateProduct'] = {};
        coverage.product.productKey.associateProduct['productPK'] = {};
        coverage.product.productKey.associateProduct.productPK['productId'] = associateProductId;

        coverage.product.productKey['basicProduct'] = {};
        coverage.product.productKey.basicProduct['productPK'] = {};
        coverage.product.productKey.basicProduct.productPK['productId'] = "--";

        coverage['currency'] = {};
        coverage['currency']['currencyPK'] = {};
        coverage['currency']['currencyPK']['currencyId'] = currencyId;

        coverage['options'] = {};
        coverage['options']['paymentMode'] = 'paymentMode';

        return coverage;
}
    });
    var ExampleCustomFunction = Class.define({
            functionName: function(args) {
    return "ExampleCustomFunction";
},
            execute: function(args) {
    var p1 = args["p1"];
    //e.g. return { errors: { code: "00000", message: "sample error message" } };
    //or return { value: XXXX };
    return { value: p1 };
},
            customMethod: function(args) {
    return null;
   }
    });
    var FormatCurrency = Class.define({
            functionName: function(args) {
    return "FormatCurrency";
},
            execute: function(args) {
        var cur = args["cur"] || 'VND';
        var language = args[language];
        var amount = args["amount"];
        var context = args["context"];
        if (Utils.isNothing(language) && !Utils.isNothing(context) && !Utils.isNothing(context.proposal) && !Utils.isNothing(context.proposal.language)) {
            language = context.proposal.language;
        }
        language = language || 'vn';
        amount = IFunction.appliedTo(FormatNumber.create()).call('execute', { n: amount, language:language })
        if( language === 'vn' || language === 'vi'){
            return amount + ' ' + cur;
        }
        return cur + ' ' + amount;
}
    });
    var FormatNumber = Class.define({
            functionName: function(args) {
    return "FormatNumber";
},
            execute: function(args) {
        var n = args["n"];
        var language = args["language"];
        var context = args["context"];
        if (Utils.isNothing(language) && !Utils.isNothing(context) && !Utils.isNothing(context.proposal) && !Utils.isNothing(context.proposal.language)) {
            language = context.proposal.language;
        }
        language = language || 'vn';
        if (!Utils.isNothing(n) && !isNaN(parseFloat(n))) {
            if (language === 'vn' || language === 'vi') {
                var s = n.toString();
                var x = s.split('.');
                var x1 = x[0];
                var x2 = x.length > 1 ? ',' + x[1] : '';
                var rgx = /(\d+)(\d{3})/;
                while (rgx.test(x1)) {
                    x1 = x1.replace(rgx, '$1' + '.' + '$2');
                }
                return x1 + x2;
            }
            return n.toLocaleString();
        }
        return n;
}
    });
    var GetRatesByInsuredAge = Class.define({
            functionName: function(args) {
    return "GetRatesByInsuredAge";
},
            execute: function(args) {
  var coverage = args["coverage"];
  var rateType = args["rateType"];
  var unbornInsuredAge = args["insuredAge"];

  var insuredAge = coverage.parties.party.insuredAge;

  // swap insured/unborn Insured Age insured to get rate
  coverage.parties.party.insuredAge = unbornInsuredAge;


  // get rate for unborn Insured Age
  var PEratemanager = Repository.getManager(SystemComponents.MANAGER.RATE_MANAGER);
  var rates = IRateManager.appliedTo(PEratemanager).call("lookupRates",
    {coverage: coverage, rateType: rateType, ipo: 0});

  // reset insured info
  coverage.parties.party.insuredAge = insuredAge;

  return rates;
}
    });
    var GetRateValueByPolicyYear = Class.define({
            functionName: function(args) {
    return "GetRateValueByPolicyYear";
},
            execute: function(args) {
    var coverage = args["coverage"];
    var year = args['year'];
    var paymentMode = args['paymentMode'];
    var debug = args['debug'];
    var issueAge = args['insuredAge'];
    var result;
    if (Utils.isNothing(paymentMode)) {
        paymentMode = coverage.proposal.coverageInfo.options.paymentMode;
    }
    if (Utils.isNothing(paymentMode)) {
        paymentMode = SchemaConstants.PAYMENT_MODE.ANNUAL;
    }

    var covPremium = 0;
    var ppp = coverage.schema.call("calculatePremiumPayingPeriod", {
        coverage: coverage,
        issueAge: issueAge
    });

    var debugBackup = _V( coverage.proposal.enableDebug, false );
    if (debug) {
        // follow proposal.enableDebug
    } else {
        coverage.proposal.enableDebug = false;
    }
    if (year < ppp) {
        var premiumCalculator = Repository.getManager(SystemComponents.MANAGER.PREMIUM_CALCULATOR);
        var calculator = premiumCalculator.call("lookupCalculator", {
            coverage: coverage
        });
        if (!Utils.isNothing(calculator)) {
            var rates = calculator.implementation.prepareRates({
                coverage: coverage,
                ipo: _V(coverage.ipo, 0),
                policyYear: year
            });
            var modalRates = calculator.implementation.prepareModalRates({
                coverage: coverage,
                ipo: _V(coverage.ipo, 0),
                policyYear: year
            });
            result = {};
            result['rates'] = rates;
            result['modalRates'] = modalRates;
        }
    }
    coverage.proposal.enableDebug = debugBackup;

    return result;
}
    });
    var GetSchemaIds = Class.define({
            functionName: function(args) {
    return "GetSchemaIds";
},
            execute: function(args) {
// sample args:     
//           {
// basePlan: {
//   productId: 'ENC12',
//   location: 'Vietnam',
//   channel: 'Agency',
//   paymentMode: 'Annual',
//   currencyId: 'VND'
// },
// riders: [
//   {
//     riderId: '1',
//     productId: 'ADD10',
//     location: 'Vietnam',
//     channel: 'Agency',
//     paymentMode: 'Annual',
//     currencyId: 'VND',
//     associateProductId: 'ENC12'
//  }
// ]}

    var coverageBasePlan = this.self.createCoverage(args.basePlan);
    var smBasePlan = Repository.getManager(SystemComponents.MANAGER.SCHEMA_HELPER);
    var schemaBasePlan = smBasePlan.call("lookup", { coverage: coverageBasePlan });
    var basePlanSchemaId = schemaBasePlan.call("getSchema", null).ProductSchema.ProductSchemaPK.SchemaId.text;
    var riderSchemaIds = [];
    for (var i = 0; i < args.riders.length; i++) {
        var coverageRider = this.self.createCoverage(args.riders[i]);
        var smRider = Repository.getManager(SystemComponents.MANAGER.SCHEMA_HELPER);
        var schemaRider = smRider.call("lookup", { coverage: coverageRider });
        var riderSchemaId = schemaRider.call("getSchema", null).ProductSchema.ProductSchemaPK.SchemaId.text;
        var objResult = {
            riderId: args.riders[i].riderId,
            productId: args.riders[i].productId,
            schemaId: riderSchemaId
        };
        riderSchemaIds.push(objResult);
    }
    return {
        basePlanSchemaId: basePlanSchemaId,
        riderSchemaIds: riderSchemaIds
    }

},
            createCoverage: function(args) {
    var channel = args['channel'];
    var _location = args['location'];

    var productId = args['productId'];
    var associateProductId = _V(args['associateProductId'], "--");

    var currencyId = args['currencyId'];
    var paymentMode = args['paymentMode'];

    var coverage = {};
    coverage['proposal'] = {};
    coverage.proposal['channel'] = channel;
    coverage.proposal['policyYearDate'] = (new Date()).formatString();

    coverage['product'] = {}; coverage.product['productKey'] = {};
    coverage.product.productKey['location'] = _location;

    coverage.product.productKey['primaryProduct'] = {};
    coverage.product.productKey.primaryProduct['productPK'] = {};
    coverage.product.productKey.primaryProduct.productPK['productId'] = productId;

    coverage.product.productKey['associateProduct'] = {};
    coverage.product.productKey.associateProduct['productPK'] = {};
    coverage.product.productKey.associateProduct.productPK['productId'] = associateProductId;

    coverage.product.productKey['basicProduct'] = {};
    coverage.product.productKey.basicProduct['productPK'] = {};
    coverage.product.productKey.basicProduct.productPK['productId'] = "--";

    coverage['currency'] = {};
    coverage['currency']['currencyPK'] = {};
    coverage['currency']['currencyPK']['currencyId'] = currencyId;

    coverage['options'] = {};
    coverage['options']['paymentMode'] = 'paymentMode';

    return coverage;

}
    });
    var GetSecondInsuredRates = Class.define({
            functionName: function(args) {
    return "GetSecondInsuredRates";
},
            execute: function(args) {
      var coverage = args["coverage"];
      var rateType = args["rateType"];

      var insuredAge = coverage.parties.party.insuredAge;
      var insuredSex = coverage.parties.party.insuredSex;
      var smokingStatus = coverage.parties.party.smokingStatus

      // this will be move to trasnform later
      // transform gender/smokingStatus
      coverage.parties.secondInsured.insuredSex = this.self.transformGender({gender: coverage.parties.secondInsured.insuredSex});
      coverage.parties.secondInsured.smokingStatus = this.self.transformSmokingStatus({smokingStatus:coverage.parties.secondInsured.smokingStatus});

      // swap insured/second insured to get rate
      coverage.parties.party.insuredAge = coverage.parties.secondInsured.insuredAge;
      coverage.parties.party.insuredSex = coverage.parties.secondInsured.insuredSex;
      coverage.parties.party.smokingStatus = coverage.parties.secondInsured.smokingStatus;

      // get rate for second insured
      var PEratemanager = Repository.getManager(SystemComponents.MANAGER.RATE_MANAGER);
      var rates = IRateManager.appliedTo(PEratemanager).call("lookupRates",
         {coverage: coverage, rateType: rateType, ipo: 0});

     // reset insured info
     coverage.parties.party.insuredAge = insuredAge;
     coverage.parties.party.insuredSex = insuredSex;
     coverage.parties.party.smokingStatus = smokingStatus;

     return rates;
},
            map: function(args) {
    var v = args["v"];
    var valueMap = args["valueMap"];

    var o = v;
    if (v) {
      for (k in valueMap) {
         var vp = valueMap[k];
         if (v.equalsIgnoreCase(vp.key)) {
            o = vp.value;
            break;
         }
      }
    }
    return o;
},
            transformGender: function(args) {
   var gender = args['gender'];
   var _gender = this.map({v: gender, valueMap: [{
         key: SchemaConstants.GENDER.MALE,
         value: SchemaConstants.GENDER_FULL.MALE
      },
      {
         key: SchemaConstants.GENDER.FEMALE,
         value: SchemaConstants.GENDER_FULL.FEMALE
      }
   ]});
   return _gender;
},
            transformSmokingStatus: function(args) {
   var smokingStatus = args['smokingStatus'];
   var _smokingStatus = this.map({v: smokingStatus, valueMap: [{
         key: InterfaceConstants.SMOKING_STATUS.SMOKER,
         value: SchemaConstants.SMOKING_STATUS.SMOKER
      },
      {
         key: InterfaceConstants.SMOKING_STATUS.NONSMOKER,
         value: SchemaConstants.SMOKING_STATUS.NONSMOKER
      }
   ]});
   return _smokingStatus;
}
    });
    var MinusNumber = Class.define({
            functionName: function(args) {
        return "MinusNumber";
},
            execute: function(args) {
        var a = args['a'];
        var b = args['b'];
        // hello

        var result = {};
        if (Utils.isNothing(a) || Utils.isNothing(b)) {
            // error can be json or actual value (depending on function)
            result['errors'] = { code:"00000", message:"Missing input parameters." };
        }

        // value can be json or actual value (depending on function)
        result['value'] = Number(a) - Number(b);
        return result;
}
    });
    var RateHandlerENX = Class.define({
            functionName: function(args) {
    return "RateHandlerENX";
},
            execute: function(args) {
    // new one
    // hasRate, rateType, variableName, policyYear, callback
    var coverage = args['coverage'];
    var ipo = args['ipo'];
    var rateType = args['rateType'];
    var callback = args['callback'];
    var paymentMode = args['paymentMode'];
    //var hasRate = args['hasRate'];
    //var variableName = args['variableName'];
    //var policyYear = args['policyYear'];
    
    var rateKey = this.self.createRateKey(args);
    _D('rateKey', rateKey);
    
    if (!Utils.isNothing(this.self.cache[rateKey])) {
        return this.self.cache[rateKey];
    }
    
    var _paymentMode = coverage.options.paymentMode;
    if (paymentMode) {
        coverage.options.paymentMode = paymentMode;
    }
    
    var PEratemanager = Repository.getManager(SystemComponents.MANAGER.RATE_MANAGER);
    var _rates = IRateManager.appliedTo(PEratemanager).call("lookupRates",
    {coverage: coverage, rateType: rateType, ipo: ipo});
    
    if (paymentMode) {
        coverage.options.paymentMode = _paymentMode;
    }
    
    this.self.cache[rateKey] = _rates;

    if (callback) callback(_rates);
    return {value: _rates};
},
            init: function(args) {
    this.self['cache'] = {};
},
            createRateKey: function(args) {
    var coverage = args['coverage'];
    var ipo = args['ipo'];
    var rateType = args['rateType'];
    var paymentMode = args['paymentMode'];
    var insured = getPrimaryInsured({coverage:coverage});
    
    var insuredAge = insured.insuredAge;
    var smokingStatus = insured.smokingStatus;
    var insuredSex = insured.insuredSex;
    var productId = _V( _PV( coverage, 'product.productKey.primaryProduct.productPK.productId' ), '--' );
    var assProductId = _V( _PV( coverage, 'product.productKey.associateProduct.productPK.productId' ), '--' );
    var basProductId = _V( _PV( coverage, 'product.productKey.basicProduct.productPK.productId' ), '--' );
    
    var basicKey = rateType + ',' + ipo + ',' + productId + ',' + assProductId + ',' + basProductId + ',' + 
                   insuredAge + ',' + smokingStatus + ',' + insuredSex;
    if (!Utils.isNothing(paymentMode)) {
        basicKey = basicKey + ',' + paymentMode;
    }
    return basicKey;
}
    });
    var SortArray = Class.define({
            functionName: function(args) {
    return "SortArray";
},
            execute: function(args) {
    var arrayItem = args["arrayItem"]; //this is the array
    var sortItem = args["sortItem"]; //value which is used to compare
    
    arrayItem.sort(function(a,b) {
        return (a[sortItem] > b[sortItem]) ? 1 : ((b[sortItem] > a[sortItem]) ? -1 : 0);
    });
    
    return arrayItem;
}
    });
    var CalcEventDeathBenefitUVL_RUVXX = CalcEventDeathBenefitUVL_UL007.extend({
            functionName: function(args) {
    return "CalcEventDeathBenefitUVL_RUVXX";
},
            execute: function(args) {
    var context = args["context"];
    var proposal = context.proposal;
    var basePlan = proposal.coverageInfo;
    var running = context.runningPolicyValues;

    var result = this.parent.execute(args);
    if (result.error) {
        return result;
    }
    
    var calc = DataDrivenCalculatorImpl.create({
        drivenKeys: PublicConstants.FUND_RETURN,
        drivenDatas: [result.value, IFund.appliedTo(running.topupFundPool).call("fundBalances", {})]
    });

    var deathBenefits = IDataDrivenCalculator.appliedTo(calc).call("calculate", {
        calculateBlock: function(data) {
            var db = data[0];
            var tav = data[1];
            var tdb = db + tav;
            return tdb;
        }
    });

    return { value: deathBenefits };
}
    });
    var CalcEventProtectionECI01 = CalcEventProtection.extend({
            functionName: function(args) {
    return "CalcEventProtectionECI01";
},
            execute: function(args) {
    var context = args["context"];
    var coverage = args["coverage"];
    var year = context.runningPolicyValues.year;
    var faceAmount = _V(coverage.faceAmount, 0);
    var benefitPeriod = coverage.schema.call("calculateBenefitPeriod", {
            coverage: coverage
        });
    var protection = 0; 
    //Based on benefit period
    if (year < benefitPeriod) {
        // protection = faceAmount * 1.2;
        // For ECI the projection is 125% CI
        protection = faceAmount * 1.25;
    }

    return { value: protection };
}
    });
    var CalcEventProtectionUL007 = CalcEventProtection.extend({
            functionName: function(args) {
    return "CalcEventProtectionUL007";
},
            execute: function(args) {
    var context = args["context"];
    var coverage = args["coverage"];
    var running = context.runningPolicyValues;
    var year = running.year;
    var fundReturn = args["fundReturn"];
    
    var benefitPeriod = coverage.schema.call("calculateBenefitPeriod", {
            coverage: coverage
        });
        
    var protection = 0; 
    
    var deathBenefit = running.totalDeathBenefits[fundReturn];
    
    //Based on benefit period
    if (year < benefitPeriod) {
        protection = deathBenefit;
    }

    return { value: protection };
}
    });

var fnmgr = Repository.getManager(SystemComponents.MANAGER.FUNCTION_MANAGER);
if (!fnmgr) {
   console.log(''); console.log('++++ Create new Function Manager for setting local custom functions into engine. ++++');
   fnmgr = IFunctionManager.implementBy(FunctionManagerImpl.create());
   Repository.addManager(SystemComponents.MANAGER.FUNCTION_MANAGER, fnmgr);
}
console.log(''); console.log('++++ Loading core custom function now ... ++++');
fnmgr.call('addFunction', {'function' : PlusFunction.create()});
fnmgr.call('addFunction', {'function' : CalculateCoveragePremium.create()});
fnmgr.call('addFunction', {'function' : GetRateByPolicyYear.create()});
fnmgr.call('addFunction', {'function' : LoadProductRates.create()});
fnmgr.call('addFunction', {'function' : AgeCalculator.create()});
console.log(''); console.log('++++ Loading custom function now ... ++++');
fnmgr.call('addFunction', {'function' : CalcEventCashValueCVM01.create()});
fnmgr.call('addFunction', {'function' : CalcEventDeathBenefitTrad.create()});
fnmgr.call('addFunction', {'function' : CalcEventDeathBenefitUVL_UL007.create()});
fnmgr.call('addFunction', {'function' : CalcEventMinFaceAmountByMinPrem.create()});
fnmgr.call('addFunction', {'function' : CalcEventProtection.create()});
fnmgr.call('addFunction', {'function' : CalculateAgeEnoughOneMonth.create()});
fnmgr.call('addFunction', {'function' : CalculateCoveragePremiumLocal.create()});
fnmgr.call('addFunction', {'function' : CalculateFaceAmountRange.create()});
fnmgr.call('addFunction', {'function' : CalculatePlannedPremiumRangeUL007.create()});
fnmgr.call('addFunction', {'function' : CalculatePolicyTerm.create()});
fnmgr.call('addFunction', {'function' : ExampleCustomFunction.create()});
fnmgr.call('addFunction', {'function' : FormatCurrency.create()});
fnmgr.call('addFunction', {'function' : FormatNumber.create()});
fnmgr.call('addFunction', {'function' : GetRatesByInsuredAge.create()});
fnmgr.call('addFunction', {'function' : GetRateValueByPolicyYear.create()});
fnmgr.call('addFunction', {'function' : GetSchemaIds.create()});
fnmgr.call('addFunction', {'function' : GetSecondInsuredRates.create()});
fnmgr.call('addFunction', {'function' : MinusNumber.create()});
fnmgr.call('addFunction', {'function' : RateHandlerENX.create()});
fnmgr.call('addFunction', {'function' : SortArray.create()});
fnmgr.call('addFunction', {'function' : CalcEventDeathBenefitUVL_RUVXX.create()});
fnmgr.call('addFunction', {'function' : CalcEventProtectionECI01.create()});
fnmgr.call('addFunction', {'function' : CalcEventProtectionUL007.create()});
console.log(''); console.log('++++ List custom functions installed ++++');
fnmgr.call('listFunctions', {});

var eventAccumulateBasePremiumsRUVXX = Class.define({
   eventName: function(args) {
    // it is used for calculating the outstanding premium by comparing premium paid
    return "eventAccumulateBasePremiumsRUVXX";
},
   shouldBeRun: function(args) {
    var context = args["context"];
    return true;
},
   run: function(args) {
    var context = args["context"];
    var runningPolicyValues = context.runningPolicyValues;
    var basePlan = context.proposal.coverageInfo;
    var months = runningPolicyValues.months;
    var year = runningPolicyValues.year;
    var month = runningPolicyValues.months % 12;
    var proposal = context.proposal;
    var currentAge = Number(basePlan.parties.party.insuredAge) + Number(year);
    var attainAge = 0;
    var newPlannedPremium = 0;

    /* --- remarked by Ben ---
    if (!Utils.isNothing(proposal.fundActivities) && !Utils.isNothing(proposal.fundActivities.fundActivity)) {
        var activities = Utils.iterator(proposal.fundActivities.fundActivity);
        for (var idx in activities) {
            var activity = activities[idx];
            if (!Utils.isNothing(activity.plannedPremium) && !Utils.isNothing(activity.attainAge)) {
                attainAge = activity.attainAge;
                newPlannedPremium = activity.plannedPremium;
                break;
            }
        }
    }
    */
    
    for(var i in PublicConstants.FUND_RETURN) {
        _DBR("contractPlannedPremium[" + i + "]", runningPolicyValues['contractPlannedPremium'][i], "eventAccumulatePolicyValues->", months);
        
        var plannedPremiumValue = runningPolicyValues.plannedPremium[i];
        if (runningPolicyValues.lapse[i] == "Y") {
            plannedPremiumValue = 0;
        }
        
        if (month===0 && basePlan.options.paymentMode==SchemaConstants.PAYMENT_MODE.ANNUAL) {
            runningPolicyValues.accumPremiumRequested[i] += runningPolicyValues.contractPlannedPremium[i];
            //Fixing the issue 3349
            //runningPolicyValues.accumBasePremiums[i] += (currentAge < attainAge  || attainAge == 0) ?  basePlan.plannedPremium : newPlannedPremium;
            // runningPolicyValues.accumBasePremiums[i] += runningPolicyValues.plannedPremium[i];
            runningPolicyValues.accumBasePremiums[i] += plannedPremiumValue;
        } else
        if ((month===0 || month===6) && basePlan.options.paymentMode==SchemaConstants.PAYMENT_MODE.SEMIANNUAL) {
            runningPolicyValues.accumPremiumRequested[i] += runningPolicyValues.contractPlannedPremium[i];
            //Fixing the issue 3349
            //runningPolicyValues.accumBasePremiums[i] += (currentAge < attainAge  || attainAge == 0) ?  basePlan.plannedPremium : newPlannedPremium;
            // runningPolicyValues.accumBasePremiums[i] += runningPolicyValues.plannedPremium[i];
            runningPolicyValues.accumBasePremiums[i] += plannedPremiumValue;
        } else
        if ((month===0 || month===3 || month===6 || month===9) && basePlan.options.paymentMode==SchemaConstants.PAYMENT_MODE.QUARTERLY) {
            runningPolicyValues.accumPremiumRequested[i] += runningPolicyValues.contractPlannedPremium[i];
             //Fixing the issue 3349
            //runningPolicyValues.accumBasePremiums[i] += (currentAge < attainAge  || attainAge == 0) ?  basePlan.plannedPremium : newPlannedPremium;
            // runningPolicyValues.accumBasePremiums[i] += runningPolicyValues.plannedPremium[i];
            runningPolicyValues.accumBasePremiums[i] += plannedPremiumValue;
        } else
        if (basePlan.options.paymentMode==SchemaConstants.PAYMENT_MODE.MONTHLY) {
            runningPolicyValues.accumPremiumRequested[i] += runningPolicyValues.contractPlannedPremium[i];
            //Fixing the issue 3349
            //runningPolicyValues.accumBasePremiums[i] += (currentAge < attainAge  || attainAge == 0) ?  basePlan.plannedPremium : newPlannedPremium;
            // runningPolicyValues.accumBasePremiums[i] += runningPolicyValues.plannedPremium[i];
            runningPolicyValues.accumBasePremiums[i] += plannedPremiumValue;
        }
        
        if (month == 11)
          runningPolicyValues.accumulateTotalPlannedPremiums[i] += Math.max(0, Number(context.runningPolicyValues.totalPremiums[i] + _V(context.runningPolicyValues.riderPremiums, 0)));
        _DBR("accumPremiumRequested[" + i + "]", runningPolicyValues['accumPremiumRequested'][i], "eventAccumulatePolicyValues->", months);    
    }
}
});
var eventAccumulateCOILocal = Class.define({
   eventName: function(args) {
    return "eventAccumulateCOILocal";
},
   shouldBeRun: function(args) {
      var context = args["context"];

      var metadata = context.events.metadata;
      var proposal = context.proposal;
      var basePlan = proposal.coverageInfo;
      var productId = basePlan.product.productKey.primaryProduct.productPK.productId;
      var runningPolicyValues = context.runningPolicyValues;
      var year = runningPolicyValues.year;
      var month = runningPolicyValues.months;

      var accumCalc = DataDrivenCalculatorImpl.create({
         drivenKeys: PublicConstants.FUND_RETURN,
         drivenDatas: [runningPolicyValues.cois, runningPolicyValues.cors, runningPolicyValues.annualCois]
      });

      var annualCois = IDataDrivenCalculator.appliedTo(accumCalc).call("calculate", {
         calculateBlock: function(args) {
            var coi = args[0];
            var cor = args[1];
            var annualCoi = args[2];
            // var accumCoi = _R(Number(annualCoi) + Number(coi) + Number(cor), 15);
            var value = Math.round((Number(annualCoi) + Number(coi) + Number(cor)) * 1e7) / 1e7;
            var accumCoi = _R(value, 15);
            _DBR("accumCoi = annualCoi(" + annualCoi + ") + coi(" + coi + ") + cor(" + cor + ")", accumCoi, "eventCalculateCOI->", context.runningPolicyValues.months);
            return accumCoi;
         }
      });
      
      var isUVL = basePlan.catalog.call("isUVL");
      var isRegularSaving = basePlan.catalog.call("isRegularSaving");
      if (isUVL && isRegularSaving) {
          for(var i in PublicConstants.FUND_RETURN) {
              if (runningPolicyValues.withdrawalOverMaximum[i]) {
                annualCois[i] = 0;
              }
          }
      }
      
      runningPolicyValues['annualCois'] = annualCois;
},
   run: function(args) {
    var context = args["context"];
    return;
}
});
var eventAccumulatePolicyValues = Class.define({
   eventName: function(args) {
    return "Accumulate Policy Values (Local)";
},
   shouldBeRun: function(args) {
    var context = args["context"];
    return true;
},
   run: function(args) {
    var context = args["context"];
    var runningPolicyValues = context.runningPolicyValues;
    var basePlan = context.proposal.coverageInfo;
    var months = runningPolicyValues.months;
    var year = runningPolicyValues.year;
    var month = runningPolicyValues.months % 12;

    var accFunds = DataDrivenCalculatorImpl.create({
        drivenKeys: PublicConstants.FUND_RETURN,
        drivenDatas: [runningPolicyValues["annualTotalFundBalances"], IFund.appliedTo(runningPolicyValues.fundPool).call("fundBalances", {}), IFund.appliedTo(runningPolicyValues.cashoutAccount).call("fundBalances", {})]
    });
    var accBalances = IDataDrivenCalculator.appliedTo(accFunds).call("calculate", {
        calculateBlock: function(funds) {
            var accumFund = funds[0];
            var poolFund = funds[1];
            var cashFund = funds[2];
            //var balance = Number(Number(Number(accumFund) + Number(poolFund) + Number(cashFund)).toFixed(context.precision)).valueOf();
   
            var balance = _R(Number(accumFund) + Number(poolFund) + Number(cashFund), context.precision);

            _DBR("balance = accumFund(" + accumFund + ") + poolFund(" + poolFund + ") + cashFund(" + cashFund + ")", balance, "eventAccumulateFundBalances->", runningPolicyValues.months);
            return balance;
        }
    });

    runningPolicyValues["annualTotalFundBalances"] = accBalances;

    if (month==0 && basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.ANNUAL) {
        runningPolicyValues.totalPremiumRequested += basePlan.plannedPremium;
    } else
    if ((month==0 || month==6) && basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.SEMIANNUAL) {
        runningPolicyValues.totalPremiumRequested += basePlan.plannedPremium;
    } else
    if ((month==0 || month==3 || month==6 || month==9) && basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.QUARTERLY) {
        runningPolicyValues.totalPremiumRequested += basePlan.plannedPremium;
    } else
    if (basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.MONTHLY) {
        runningPolicyValues.totalPremiumRequested += basePlan.plannedPremium;
    }
    _DBR("annualTotalFundBalances", runningPolicyValues['annualTotalFundBalances'], "eventAccumulatePolicyValues->", months);
    _DBR("totalPremiumRequested", runningPolicyValues['totalPremiumRequested'], "eventAccumulatePolicyValues->", months);
}
});
var eventAccumulatePolicyValuesRUVXX = Class.define({
   eventName: function(args) {
    return "eventAccumulatePolicyValuesRUVXX";
},
   shouldBeRun: function(args) {
    var context = args["context"];
    return true;
},
   run: function(args) {
    var context = args["context"];
    var runningPolicyValues = context.runningPolicyValues;
    var basePlan = context.proposal.coverageInfo;
    var months = runningPolicyValues.months;
    var year = runningPolicyValues.year;
    var month = runningPolicyValues.months % 12;

    if (this.self.context.bonusStartYear.indexOf(year) > -1 && month === 0) {
        _DBR("@@@@ Reset accumulate fund balance", "", "eventAccumulatePolicyValuesRUVXX", months);
        for(var i in PublicConstants.FUND_RETURN) {
            runningPolicyValues["accumFundBalancesForBonus"][i] = 0;
        }
    }

    var accFunds = DataDrivenCalculatorImpl.create({
        drivenKeys: PublicConstants.FUND_RETURN,
        drivenDatas: [
            runningPolicyValues["accumFundBalancesForBonus"], 
            IFund.appliedTo(runningPolicyValues.fundPool).call("fundBalances", {}), 
            IFund.appliedTo(runningPolicyValues.cashoutAccount).call("fundBalances", {})
        ]
    });
    var accBalances = IDataDrivenCalculator.appliedTo(accFunds).call("calculate", {
        calculateBlock: function(funds) {
            var accumFund = funds[0];
            var poolFund = funds[1];
            var cashFund = funds[2];
            var balance = _R(Number(accumFund) + Number(poolFund) + Number(cashFund), context.precision);

            _DBR("balance = accumFund(" + accumFund + ") + poolFund(" + poolFund + ") + cashFund(" + cashFund + ")", balance, "eventAccumulateFundBalances->", runningPolicyValues.months);
            return balance;
        }
    });
    runningPolicyValues["accumFundBalancesForBonus"] = accBalances;
    
    if (month == 11 && year <= 2) {
        for(var i in PublicConstants.FUND_RETURN) {
            runningPolicyValues['firstThreeYearPremiumLoad'][i] += (runningPolicyValues.premiumLoad[i] - runningPolicyValues.topupPremiumLoad[i]);
        }
    }

    _DBR("accumFundBalancesForBonus(BAV)", runningPolicyValues['accumFundBalancesForBonus'], "eventAccumulatePolicyValues->", months);
    _DBR("firstThreeYearPremiumLoad", runningPolicyValues['firstThreeYearPremiumLoad'], "eventAccumulatePolicyValues->", months);
},
   init: function(args) {
    this.self.context = {};
    this.self.context['bonusStartYear'] = [0, 3, 6, 9, 12, 15];
}
});
var eventAccumulatePremiumReceivedUVL = Class.define({
   eventName: function(args) {
    return "eventAccumulatePremiumReceivedUVL";
},
   shouldBeRun: function(args) {
    var context = args["context"];
    var month = context.runningPolicyValues.months % 12;
    return (month === 11);
},
   run: function(args) {
    var context = args["context"];
    var running = context.runningPolicyValues;
    for(var i in PublicConstants.FUND_RETURN) {
        running.accPremiums[i] = running.accPremiums[i] + running.newPremium[i];
        //for colCumulativePremium
        running.cumulativePremium[i] += running.newPremium[i];
    }
    return;
}
});
var eventAccumulateUvlPremiumsLocal = Class.define({
   eventName: function(args) {
    return "eventAccumulateUvlPremiumsLocal";
},
   shouldBeRun: function(args) {
    var context = args["context"];
    var month = context.runningPolicyValues.months % 12;
    return (month === 11);
},
   run: function(args) {
    var context = args["context"];
    var running = context.runningPolicyValues;
    running.accPremiums = running.accPremiums + running.totalPremiums;
    return;
}
});
var eventApplyPolicyChangePlannedPremium = Class.define({
   eventName: function(args) {
    return "Apply New Planned Premium";
},
   shouldBeRun: function(args) {
    var context = args["context"];
    var month = context.runningPolicyValues.months % 12;
    return (month === 0);
},
   run: function(args) {
    var context = args["context"];
    var running = context.runningPolicyValues;
    var year = running.year;
    var months = running.months;
    var proposal = context.proposal;
    var basePlan = proposal.coverageInfo;
    var primary = getPrimaryInsured( {coverage: basePlan} );
    var activities = _V( _PV( proposal, "fundActivities.fundActivity" ), [ ] );
    for(var actIdx in activities) {
        var activity = activities[actIdx];
        if (activity.attainAge == (primary.insuredAge + year)) {
            this.self.applyPolicyChange( {args:args, activity:activity} );
        }
    }
    return;
},
   applyPolicyChange: function(args) {
    var vargs = args['args'];
    var activity = args['activity'];
    
    var context = vargs["context"];
    var running = context.runningPolicyValues;
    var proposal = context.proposal;
    var basePlan = proposal.coverageInfo;
    
    if (!Utils.isNothing(activity.plannedPremium)) {
        _DBR("new planned premium", activity.plannedPremium, "eventApplyPolicyChangePlannedPremium", running.months);
        basePlan.plannedPremium = activity.plannedPremium;
    }
}
});
var eventApplyPolicyPremiumHolidayRUVXX = Class.define({
   eventName: function(args) {
    return "Apply Policy Premium Holiday RUVXX";
},
   shouldBeRun: function(args) {
    var context = args["context"];
    return true;
},
   run: function(args) {
     var context = args["context"];
     var running = context.runningPolicyValues;
     var proposal = context.proposal;
     var basePlan = proposal.coverageInfo;
     var year = running.year;

     if (running.months % 12 == 0) {

       // calc premiumMultiplier
       if (running.phActivities.isPremiumHoliday) {
        running.phActivities.premiumMultiplier = running.phActivities.premiumMultiplier + 1;
        }

       if (!Utils.isNothing(proposal.fundActivities) &&
       !Utils.isNothing(proposal.fundActivities.fundActivity)) {
         var activities = Utils.iterator(proposal.fundActivities.fundActivity);
         var parties = Utils.iterator(basePlan.parties.party);

         for (var idx in activities) {
           var activity = activities[idx];

           if (Number(activity.attainAge) == Number(parties[0].insuredAge) + Number(year)){
             // Change planned premium
             if (!Utils.isNothing(activity.plannedPremium) && Number(activity.plannedPremium) == 0) {

               running.phActivities.isPremiumHoliday = true;
               running.phActivities.isResumePremiumHoliday = false;
               running.phActivities.premiumMultiplier = 0;

               break;
             }

             // No premium value (as limit premium term)
             else if (!Utils.isNothing(activity.plannedPremium) && Number(activity.plannedPremium) > 0) {

               running.phActivities.isPremiumHoliday = false;
               running.phActivities.isResumePremiumHoliday = true;
               running.phActivities.resumeModalBasePremium = (running.phActivities.premiumMultiplier + 1) * context.runningPolicyValues.modalBasePremium;

               break;
             }
           }
         }
       }

     }

}
});
var eventAvyInitializationLocal = Class.define({
   eventName: function(args) {
    return "AVY Initialization (Local)";
},
   shouldBeRun: function(args) {
    var context = args["context"];
    return true;
},
   run: function(args) {
    var context = args['context'];
    var proposal = context.proposal;
    var basePlan = proposal.coverageInfo;
    var metadata = context.events.metadata;
    var productId = basePlan.product.productKey.primaryProduct.productPK.productId;
    var runningPolicyValues = context.runningPolicyValues;
    // var regularPremium = basePlan.plannedPremium;

    context['precision'] = 2;
    context['interestRatePrecision'] = 7;

    var year = runningPolicyValues.year;
    var months = runningPolicyValues.months;
    var month = months % 12;
    var fundConfig;
    fundConfig = {
        fundId: "Cash"
    };
    fundConfig['annualInterestRate'] = {};
    fundConfig[PublicConstants.FUND_RETURN.LOW] = Number(0);
    fundConfig[PublicConstants.FUND_RETURN.MEDIUM] = Number(0);
    fundConfig[PublicConstants.FUND_RETURN.HIGH] = Number(0);
    fundConfig.annualInterestRate[PublicConstants.FUND_RETURN.LOW] = Number(0);
    fundConfig.annualInterestRate[PublicConstants.FUND_RETURN.MEDIUM] = Number(0);
    fundConfig.annualInterestRate[PublicConstants.FUND_RETURN.HIGH] = Number(0);
    fundConfig['policyOptions'] = context.policyOptions;

    runningPolicyValues['cors'] = {};
    for (var returnTypeKey in PublicConstants.FUND_RETURN) {
        runningPolicyValues['cors'][returnTypeKey] = Number(0);
    }

    if (months === 0) {
        
        runningPolicyValues['fullLapse'] = false;
        runningPolicyValues['lapseAtYearBeginning'] = {};
        runningPolicyValues['lapse'] = {};
        runningPolicyValues['faceAmount'] = {};
        runningPolicyValues['initialFaceAmount'] = {};
        
        runningPolicyValues['withdrawalOverMaximum'] = {};
        
        // For support validation
        runningPolicyValues['avBeforeBonusAndWithdrawal'] = {};
        for (var returnTypeKey in PublicConstants.FUND_RETURN) {
            runningPolicyValues['lapseAtYearBeginning'][returnTypeKey] = "N";
            runningPolicyValues['lapse'][returnTypeKey] = "N";
            runningPolicyValues['faceAmount'][returnTypeKey] = basePlan.faceAmount;
            runningPolicyValues['initialFaceAmount'][returnTypeKey] = basePlan.faceAmount;
            runningPolicyValues['avBeforeBonusAndWithdrawal'][returnTypeKey] = 0;
            runningPolicyValues['withdrawalOverMaximum'][returnTypeKey] = false;
        }

        /* message manager -> */
        //var mm = Repository.getManager(SystemComponents.MANAGER.MESSAGE_MANAGER);
        //_SS(mm.implementation.messages[0],2);

        /* create fund accounts */
        if (!Utils.isNothing(proposal.funds.fundRecord)) {
            runningPolicyValues['fundPool'] = FundPoolImpl.create({
                context: context
            });

            //_SS(runningPolicyValues['fundPool'], 10)
            // unremark if profolio is used.
            // this.self.context.runningPolicyValues['fundPool'] = PortfolioImpl.create({
            //    context: context
            // });
        }

        runningPolicyValues['cashoutAccount'] = FundImpl.create({
            fundConfig: fundConfig,
            context: context
        });

        /* list available rates */
        _DB("rates", context.rates, "@@@@@@@@");

        /* initialize accumulated policy values */
        runningPolicyValues['accPremiums'] = 0;
        runningPolicyValues['totalWithdrawal'] = 0;
        runningPolicyValues['totalTopup'] = 0;
        runningPolicyValues['totalPremiumRequested'] = 0;
        runningPolicyValues['wocTargetPremium'] = 0;
        /* initialize product type factors */
        var isRegularSaving = Utils.matchInList(CatalogConstants.PRODUCT_TYPE.REGULAR_SAVING, basePlan.catalog.call("getCatalog", {}).ProductCatalog.ProductType.ProductTypeCode, false);
        var isSinglePremium = Utils.matchInList(CatalogConstants.PRODUCT_TYPE.SINGLE_PREMIUM, basePlan.catalog.call("getCatalog", {}).ProductCatalog.ProductType.ProductTypeCode, false);
        var isUVL = Utils.matchInList(CatalogConstants.PRODUCT_TYPE.UVLIFE, basePlan.catalog.call("getCatalog", {}).ProductCatalog.ProductType.ProductTypeCode, false);

        if (isUVL) {
            if (isRegularSaving) {
                runningPolicyValues['initialFaceAmountRatio'] = Number(basePlan.faceAmount / basePlan.plannedPremium).toFixed(2);
                console.log("initialFaceAmountRatio (RS) = " + runningPolicyValues.initialFaceAmountRatio);
            }
            if (isSinglePremium) {
                runningPolicyValues['initialFaceAmountRatio'] = Number(basePlan.faceAmount / basePlan.initialDumpIn).toFixed(2);
                console.log("initialFaceAmountRatio (SP) = " + runningPolicyValues.initialFaceAmountRatio);
            }
        }

        if (isUVL) {
            IFund.appliedTo(runningPolicyValues.fundPool).call("dumpin", {
                amount: 0
            });
            IFund.appliedTo(runningPolicyValues.cashoutAccount).call("dumpin", {
                amount: 0
            });
        }

        /* calculate planned premiums */
        var regularPremium;
        if (Utils.isNothing( basePlan.regularPayment)) {
            if (basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.ANNUAL) {
                regularPremium = Number(basePlan.plannedPremium);
                _DBR("regularPremium", regularPremium, "eventReceivePremiumsLocal->", months);
            } else
            if (basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.SEMIANNUAL) {
                regularPremium = Number(basePlan.plannedPremium) * 2;
                _DBR("regularPremium", regularPremium, "eventReceivePremiumsLocal->", months);
            } else
            if (basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.QUARTERLY) {
                regularPremium = Number(basePlan.plannedPremium) * 4;
                _DBR("regularPremium", regularPremium, "eventReceivePremiumsLocal->", months);
            } else
            if (basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.MONTHLY) {
                regularPremium = Number(basePlan.plannedPremium) * 12;
                _DBR("regularPremium", regularPremium, "eventReceivePremiumsLocal->", months);
            }
            // Set regularPremium only for UL007
             if (isUVL) {
                basePlan.regularPayment = basePlan.plannedPremium;
             }
        } else {
            regularPremium = basePlan.regularPayment;
        }
        runningPolicyValues["regularPremium"] = 0;
    }

    if (month === 0) {
        runningPolicyValues['totalPremiums'] = 0;
        runningPolicyValues['initialDumpIn'] = 0;
        runningPolicyValues['newPremium'] = 0;
        runningPolicyValues['netPremium'] = 0;
        runningPolicyValues['withdrawal'] = 0;
        runningPolicyValues['withdrawalNoCharge'] = 0;
        runningPolicyValues['firstMonthCoi'] = Number(0);
        runningPolicyValues['cashOutPayments'] = {};
        runningPolicyValues['cois'] = {};
        runningPolicyValues['annualCois'] = {};
        runningPolicyValues['accumulatedcashOutPayments'] = {};
        runningPolicyValues["annualTotalFundBalances"] = {};
        runningPolicyValues['topup'] = 0;
        runningPolicyValues["surrenderValues"] = {};
        runningPolicyValues['deathBenefits'] = {};              // base plan death benefit
        runningPolicyValues['basePlanPremiums'] = 0;
        runningPolicyValues['riderPremiums'] = 0;
        runningPolicyValues['ridersDeathBenefit'] = 0;          // death benefit of all riders
        runningPolicyValues['totalDeathBenefits'] = {};
        runningPolicyValues['totalProtections'] = {};
        runningPolicyValues['surrenderValueBeforeWithdrawal'] = {};
        
        // Set default premiumLoad
         runningPolicyValues['premiumLoad'] = 0;
         runningPolicyValues['totalAnnualRegularPremium'] = 0;
         runningPolicyValues["regularPremiumIsLapse"] = 0;
         runningPolicyValues["totalModalBasePremium"] = 0;
         runningPolicyValues["totalModalBaseRiderPremium"] = 0;

        // ATP-500
        // Set default policyFee
        runningPolicyValues['policyFee'] = 0;
        runningPolicyValues['maxWithdrawal'] = {};
        runningPolicyValues['error'] = {};

        for (var returnTypeKey in PublicConstants.FUND_RETURN) {
            runningPolicyValues["annualTotalFundBalances"][returnTypeKey] = Number(0);
            runningPolicyValues['cashOutPayments'][returnTypeKey] = Number(0);
            runningPolicyValues['cois'][returnTypeKey] = Number(0);
            runningPolicyValues['annualCois'][returnTypeKey] = Number(0);
            runningPolicyValues['accumulatedcashOutPayments'][returnTypeKey] = Number(0);
            runningPolicyValues['surrenderValues'][returnTypeKey] = Number(0);
            runningPolicyValues['deathBenefits'][returnTypeKey] = Number(0);
            runningPolicyValues['totalDeathBenefits'][returnTypeKey] = Number(0);
            runningPolicyValues['totalProtections'][returnTypeKey] = Number(0);
            runningPolicyValues['surrenderValueBeforeWithdrawal'][returnTypeKey] = Number(0);
            runningPolicyValues['maxWithdrawal'][returnTypeKey] = 0;
            runningPolicyValues['error'][returnTypeKey] = "";
       }
    }
}
});
var eventCalcBuiltIn1FinancialSupport_EDX = Class.define({
   eventName: function(args) {
    return "eventCalcBuiltIn1FinancialSupport_EDX";
},
   shouldBeRun: function(args) {
     var context = args["context"];
     var proposal = context.proposal;
     var basePlan = proposal.coverageInfo;
     var running = context.runningPolicyValues;
     var year = running.year;

     var ppp = proposal.coverageInfo.schema.call("calculatePremiumPayingPeriod", {
        coverage: basePlan
     });

     return year <= ppp;
},
   run: function(args) {
     var context = args["context"];
     var proposal = context.proposal;
     var basePlan = proposal.coverageInfo;
     var running = context.runningPolicyValues;
     var year = running.year;

     var ppp = proposal.coverageInfo.schema.call("calculatePremiumPayingPeriod", {
        coverage: basePlan
     });
     var financialSF = basePlan.faceAmount * this.self.getFinancialSFRate(args) * (ppp - year);
     running.financialSF = financialSF;

     return;
},
   getFinancialSFRate: function(args) {
    return 0.15;
}
});
var eventCalcBuiltIn2WoP_EDX = Class.define({
   eventName: function(args) {
    return "eventCalcBuiltIn2WoP_EDX";
},
   shouldBeRun: function(args) {
    var context = args["context"];
    return true;
},
   run: function(args) {
     var context = args["context"];
     var context = args["context"];
     var proposal = context.proposal;
     var basePlan = proposal.coverageInfo;
     var running = context.runningPolicyValues;
     var year = running.year;

     var ppp = proposal.coverageInfo.schema.call("calculatePremiumPayingPeriod", {
        coverage: basePlan
     });
     
     running.accPremiums = running.accPremiums + running.basePlanPremiums;
     var wop = running.basePlanPremiums * ppp - running.accPremiums;
     if(wop <= 0){
        return running.wop = 0;
     }
     running.wop = wop;
     return;
}
});
var eventCalcBuiltIn4JCI_EDX = Class.define({
   eventName: function(args) {
    return "eventCalcBuiltIn4JCI_EDX";
},
   shouldBeRun: function(args) {
    var context = args["context"];
    return true;
},
   run: function(args) {
     var context = args["context"];
     var context = args["context"];
     var proposal = context.proposal;
     var basePlan = proposal.coverageInfo;
     var running = context.runningPolicyValues;
     var year = running.year;
     var age = year + proposal.coverageInfo.parties.party.insuredAge;

     var ppp = proposal.coverageInfo.schema.call("calculatePremiumPayingPeriod", {
        coverage: basePlan
     });
     

     if(year <= ppp && ppp <= age){
        var jci = basePlan.faceAmount * this.self.getLienRate(args) ;
     }else{
        var jci = 0;  
     }
     running.jci = jci;
     return;
},
   getLienRate: function(args) {
    var context = args["context"];
        var running = context.runningPolicyValues;
        var proposal = context.proposal;
        var basePlan = proposal.coverageInfo;
        var productId = basePlan.product.productKey.primaryProduct.productPK.productId;
        var year = running.year;

        var lienRates = context.rates[productId][SchemaConstants.POLICY_VALUE.PROTECTION];
        var lienRate = 1;

        if (!Utils.isNothing(lienRates)) {
            if (year < lienRates.rates.length)
            lienRate = lienRates.rates[year];
        }

        return lienRate;
}
});
var eventCalcCouponBenefitEOY_EDX = Class.define({
   eventName: function(args) {
    return "eventCalcCouponBenefitEOY_EDX";
},
   shouldBeRun: function(args) {
    var context = args["context"];
    var proposal = context.proposal;
    var basePlan = proposal.coverageInfo;
    var running = context.runningPolicyValues;
    var year = running.year +1;

    var ppp = proposal.coverageInfo.schema.call("calculatePremiumPayingPeriod", {
        coverage: basePlan
    });
    var getSchema = basePlan.schema.call("getSchema");
    var policyTerm = getSchema.ProductSchema.BasicParticular.BenefitPeriod.MinBenefitPeriod.text;
    
    return (running.year) <= policyTerm;
},
   run: function(args) {
    var context = args["context"];
    var running = context.runningPolicyValues;
    running.coupon = _R(context.proposal.coverageInfo.faceAmount * _V(this.self.getCouponTable(args),0),0);

    return;
},
   getCouponTable: function(args) {
    var context = args["context"];
    var proposal = context.proposal;
    var basePlan = proposal.coverageInfo;
    var running = context.runningPolicyValues;
    var year = running.year +1;

    var paymentMode = basePlan.options.paymentMode;
    var ppp = basePlan.schema.call("calculatePremiumPayingPeriod", {
        coverage: basePlan
        });
    
    var getSchema = basePlan.schema.call("getSchema");
    var policyTerm = getSchema.ProductSchema.BasicParticular.BenefitPeriod.MinBenefitPeriod.text;

    if(year >= ppp && year <= policyTerm){
        return 0.3;
    }else{
        return 0;
    }
}
});
var eventCalcDeathBenefit = Class.define({
   eventName: function(args) {
    return "Calculate Death Benefit by Method";
},
   shouldBeRun: function(args) {
    var context = args["context"];
    return true;
},
   run: function(args) {
    var context = args["context"];
    var proposal = context.proposal;
    var basePlan = proposal.coverageInfo;
    var running = context.runningPolicyValues;
    var isUVL = basePlan.catalog.call("isUVL");
    var isRegularSaving = basePlan.catalog.call("isRegularSaving");
    var catalogBasePlan = basePlan.catalog.implementation;
    
    var basePlanDeathBenefit = this.self.calcDeathBenefit({coverage: basePlan, args:args});
    
    for (dbIdx in basePlanDeathBenefit) {

        var isLapse = 'N';
        if (isUVL)
          isLapse = running.lapse[dbIdx];
          
        var db = basePlanDeathBenefit[dbIdx];

        // if (isLapse == 'Y') {
        //     db = 0;
        // } else {
        //     db = db;
        // }
        
        if (isUVL && isRegularSaving) {
            if (isLapse == 'Y') {
                db = 0;
            } else {
                db = db;
            }
        }
        
        basePlanDeathBenefit[dbIdx] = db;
    }

    _DBR("basePlanDeathBenefit", basePlanDeathBenefit, "eventCalcDeathBenefit->", running.months);
    // running.deathBenefits = basePlanDeathBenefit;
    if(catalogBasePlan.isParticipate()){
        if(!running.couponNotReceive){     
            running.newBaseDeathBenefit = basePlanDeathBenefit * this.self.getDeathBenefitPerMille(args);
        }else{
            running.newBaseDeathBenefit = basePlanDeathBenefit;
        }
    }
    running.deathBenefits = basePlanDeathBenefit;
},
   calcDeathBenefit: function(args) {
    var coverage = args['coverage'];
    var args2 = args.args;
    var context = args2['context'];
    var running = context.runningPolicyValues;
    
    var productId = coverage.product.productKey.primaryProduct.productPK.productId;
    
    var deathBenefit;
    var isUVL = coverage.catalog.call("isUVL");
    if (isUVL) {
        deathBenefit = { HIGH: 0, MEDIUM: 0, LOW: 0 };    
    } else {
        deathBenefit = 0;
    }
    var bp = coverage.schema.call("calculateBenefitPeriod", {coverage: coverage});
    if (running.year < bp) {    
        var catalog = coverage.catalog.call('getCatalog');
        var hasDeathBenefit = Utils.matchInList("HasDeathBenefit", catalog.ProductCatalog.ProductType.ProductTypeCode, false);
        if (hasDeathBenefit) {
            // default death benefit = face amount (if no formula defined, it will return default)
            if (isUVL) {
                deathBenefit = { HIGH: coverage.faceAmount, MEDIUM: coverage.faceAmount, LOW: coverage.faceAmount };    
            } else {
                deathBenefit = coverage.faceAmount;
            }
            _DBR("default death benefit (" + productId + ")", deathBenefit, "eventCalcDeathBenefit->", running.months);
                  
            var schema = coverage.schema.call('getSchema');
            var method = _V(_PV(schema, "ProductSchema.BasicParticular.CalcMethods.DeathBenefit"));
            if (!Utils.isNothing(method)) {
                _DBR("calculate method (" + productId + ")", method, "eventCalcDeathBenefit->", running.months);
    
                // formula defined
                var functionManager = Repository.getManager(SystemComponents.MANAGER.FUNCTION_MANAGER);
                if (!Utils.isNothing(functionManager)) {
                    var result = functionManager.call("execute", {
                        function: method,
                        args: args2
                    });
                    
                    if ( Utils.isNothing( result.errors ) ) {
                        var resultIsFundDriven = !Utils.isNothing(result.value.HIGH) && 
                            !Utils.isNothing(result.value.MEDIUM) && 
                            !Utils.isNothing(result.value.LOW);
                        
                        if (isUVL) {
                            if (resultIsFundDriven) {
                                deathBenefit = result.value;
                            } else {
                                deathBenefit = { HIGH: result.value, MEDIUM: result.value, LOW: result.value }
                            }
                        } else {
                            if (resultIsFundDriven) {
                                deathBenefit = result.value.MEDIUM;
                            } else {
                                deathBenefit = result.value;
                            }
                        }
                    } else {
                        throw result.errors;
                    }
                }
            } else {
                _DBR("calculate method (" + productId + ")", "--", "eventCalcDeathBenefit->", running.months);
            }
        }
    }
    return deathBenefit;
},
   getDeathBenefitPerMille: function(args) {
    return 2.0;
}
});
var eventCalcDeathBenefit_EDX = Class.define({
   eventName: function(args) {
    return "eventCalcDeathBenefit_EDX";
},
   shouldBeRun: function(args) {
    var context = args["context"];
    return true;
},
   run: function(args) {
    var context = args["context"];
    var proposal = context.proposal;
    var basePlan = proposal.coverageInfo;
    var running = context.runningPolicyValues;
    
    var benefitRate = this.self.getBenefitSharing(args); 
    var basePlanDeathBenefit = this.self.calcDeathBenefit({coverage: basePlan, args:args});
     _DBR("basePlanDeathBenefit", basePlanDeathBenefit, "eventCalcDeathBenefit->", running.months);
    running.deathBenefit = basePlanDeathBenefit * benefitRate;
    running.lowerDeathBenefit = basePlanDeathBenefit;
    running.higherDeathBenefit = basePlanDeathBenefit;
},
   calcDeathBenefit: function(args) {
    var coverage = args['coverage']; 
    var args2 = args.args;
    var context = args2['context'];
    var proposal = context.proposal;
    var basePlan = proposal.coverageInfo;
    var running = context.runningPolicyValues;
    var productId = coverage.product.productKey.primaryProduct.productPK.productId;
    var year = running.year;
    var lien = this.self.getLienRate(args);
    var deathBenefit;
     
    var bp = coverage.schema.call("calculateBenefitPeriod", {coverage: coverage});
  
    if(year <= bp){
        deathBenefit = coverage.faceAmount * lien;
        _DBR("default death benefit (" + productId + ")", deathBenefit, "eventCalcDeathBenefit->", running.months);
    }else{
        deathBenefit = 0;
    }
    return deathBenefit;
},
   getLienRate: function(args) {
    var args2 = args.args;
    var context = args2["context"];
    var running = context.runningPolicyValues;
    var proposal = context.proposal;
    var basePlan = proposal.coverageInfo;
    var productId = basePlan.product.productKey.primaryProduct.productPK.productId;
    var year = running.year;
    
    var unbornInsuredAge = 0;
    var isUnbornChild = running.isUnbornChild;
    if(isUnbornChild){
        var age = unbornInsuredAge;
        var lienRates = this.self.getUnbornInsuredLienRates(args);
    }else{
        var age = year + proposal.coverageInfo.parties.party.insuredAge;
        var lienRates = context.rates[productId][SchemaConstants.POLICY_VALUE.PROTECTION];
    }

    var lienRate = 1;

    if (!Utils.isNothing(lienRates)) {
         if (age < lienRates.rates.length){
            if (isUnbornChild){
                lienRate = lienRates.rates[ Math.max(year - 1, 0) ];
            }else{
                lienRate = lienRates.rates[year];
            }
         }  
    }

    return lienRate;
},
   getBenefitSharing: function(args) {
    return 1.50;
},
   getUnbornInsuredLienRates: function(args) {
    var args2 = args.args;   
    var context = args2["context"];
    var proposal = context.proposal;
    var basePlan = proposal.coverageInfo;
    var productId = basePlan.product.productKey.primaryProduct.productPK.productId;
    var unbornInsuredAge = 0;
    var ratesByInsuredAge = basePlan.parties.party.insuredId + "_"  + unbornInsuredRate;

    if (Utils.isNothing(context.rates[productId][ratesByInsuredAge])){
      context.rates[productId][ratesByInsuredAge] = {};
    }



    if (Utils.isNothing(context.rates[productId][ratesByInsuredAge][SchemaConstants.POLICY_VALUE.PROTECTION])){
        var funcManager = Repository.getManager(SystemComponents.MANAGER.FUNCTION_MANAGER);
        var unbornInsuredRate = funcManager.call('execute', {
            function: 'GetRatesByInsuredAge',
                args: {
                    coverage: basePlan,
                rateType: RateConstants.RATETYPE.PROTECTION,
                insuredAge: unbornInsuredAge
            }
        });

        context.rates[productId][ratesByInsuredAge][SchemaConstants.POLICY_VALUE.PROTECTION] = unbornInsuredRate;
    }
    

    return context.rates[productId][ratesByInsuredAge][SchemaConstants.POLICY_VALUE.PROTECTION];
}
});
var eventCalcExcellentReward_EDX = Class.define({
   eventName: function(args) {
    return "eventCalcExcellentReward_EDX";
},
   shouldBeRun: function(args) {
    var context = args["context"];
    return true;
},
   run: function(args) {
     var context = args["context"];
     var proposal = context.proposal;
     var basePlan = proposal.coverageInfo;
     var running = context.runningPolicyValues;
     var year = running.year;
     var insuredAge = proposal.coverageInfo.parties.party.insuredAge;
     var age = year + insuredAge;

     
     if(this.self.getAgeExcellentReward(args) == age + 1 && insuredAge <= this.self.getMaxAgeExcellentReward(args)){
        running.excellentReward = basePlan.faceAmount * this.self.getPercentFAExcellentReward(args);
     }
     running.excellentReward = Math.min(running.excellentReward, this.self.getMaxFAExcellentReward(args));

     return;
},
   getPercentFAExcellentReward: function(args) {
    return 0.3;
},
   getAgeExcellentReward: function(args) {
    return 22;
},
   getMaxFAExcellentReward: function(args) {
    return 100000;
},
   getMaxAgeExcellentReward: function(args) {
    return 17;
}
});
var eventCalcFundAllocationRUVXX = Class.define({
   eventName: function(args) {
    return "eventCalcFundAllocationRUVXX";
},
   shouldBeRun: function(args) {
    var context = args["context"];
    return true;
},
   run: function(args) {
   var context = args["context"];
   var runningPolicyValues = context.runningPolicyValues;

   // BAV
   var poolFunds = runningPolicyValues.fundPool.self.context.fundPools;
   for(var fundCode in poolFunds) {
       var fundBalance = IFund.appliedTo(poolFunds[fundCode]).call('fundBalances');
       runningPolicyValues['BAVFundAllocations'][fundCode] = {};
       for (var fundReturn in PublicConstants.FUND_RETURN){
          runningPolicyValues['BAVFundAllocations'][fundCode][fundReturn] = fundBalance[fundReturn];
       }
   }

   // TAV
   if (!Utils.isNothing(runningPolicyValues.topupFundPool)){
      var topupFunds = runningPolicyValues.topupFundPool.self.context.fundPools;
      for(var fundCode in topupFunds) {
          var fundBalance = IFund.appliedTo(topupFunds[fundCode]).call('fundBalances');
          runningPolicyValues['TAVFundAllocations'][fundCode] = {};
          for (var fundReturn in PublicConstants.FUND_RETURN){
             runningPolicyValues['TAVFundAllocations'][fundCode][fundReturn] = fundBalance[fundReturn];
          }
      }
   }

   return;
}
});
var eventCalcFundBonusUL007 = Class.define({
   eventName: function(args) {
    return "Calculate Fund Bonus (UL007)";
},
   shouldBeRun: function(args) {
    var context = args["context"];
    var runningPolicyValues = context.runningPolicyValues;
    var year = runningPolicyValues.year;
    var month = runningPolicyValues.months % 12;
    
    return (year >= 4 && month == 11);
},
   run: function(args) {
    var context = args["context"];
    var running = context.runningPolicyValues;
    var proposal = context.proposal;
    var basePlan = proposal.coverageInfo;

    // test eligibility of bonus
    var totalPremiumPaid = running.newPremium;
    var withdrawalAmount = running.withdrawal;
    var requestPremiumPaid = running.regularPremium;
    //var requestPremiumPaid = running.regularPremium;
    if (running.months == 59) {
        totalPremiumPaid =  running.accPremiums;
        withdrawalAmount  = running.totalWithdrawal;
        requestPremiumPaid = running.totalPremiumRequested;
    }
    var fundBonusCalc = DataDrivenCalculatorImpl.create({
        drivenKeys: PublicConstants.FUND_RETURN,
        drivenDatas: [running.annualTotalFundBalances, running.lapse, running.initialFaceAmount, running.faceAmount ]
    });
    var eligible = (totalPremiumPaid >= requestPremiumPaid && withdrawalAmount == 0);
    _DBR("totalPremiumPaid(" + totalPremiumPaid + ") >= requestPremiumPaid(" + requestPremiumPaid + ") && withdrawalAmount(" + withdrawalAmount + ") == 0", eligible, "eventCalculateFundBonusUL007->", running.months);
    var bonus = IDataDrivenCalculator.appliedTo(fundBonusCalc).call("calculate", {
        calculateBlock: function(args) {
            var fundBalance = args[0];
            var lapse = args[1];
            var initialFaceAmount = args[2];
            var faceAmount = args[3];

            if (lapse == "Y") return 0;
            
            if (faceAmount < initialFaceAmount) return 0;

            if (eligible) {
                var annualBalance = fundBalance;
                fundBonus = _R2(Number(0.005) * Number(annualBalance) / 12);
                _DBR("fundBonus = R2(0.5% * annualBalance(" + annualBalance + ")/12)", fundBonus, "eventCalculateFundBonusUL007->", running.months);
                return fundBonus;
            } else {
                return 0;
            }
        }
    });
    running['fundBonus'] = bonus;
}
});
var eventCalcLoyaltyBonusRUVXX = Class.define({
   eventName: function(args) {
    return "eventCalcLoyaltyBonusRUVXX";
},
   shouldBeRun: function(args) {
    var context = args["context"];
    var running = context.runningPolicyValues;
    var month = running.months % 12;
    return (month === 11);
},
   run: function(args) {
    var context = args["context"];
    var running = context.runningPolicyValues;
    var year = running.year;
    
    if (this.self.context.bonusStartYear.indexOf(year) > -1) {
        _DBR('@@@@ Bonus rule reset', '', 'eventCalcXxxxxxxBonusRUVXX', running.months);
        for(var j in this.self.context.conditions) {
            var cond = this.self.context.conditions[j];
            
            _DBR( 'Rule', cond.call('name', args), 'eventCalcXxxxxxxBonusRUVXX', running.months );
            var result = cond.call('resetState', args);
        }
        for(var i in PublicConstants.FUND_RETURN) {
            running['loyalBonus'][i] = 0;
        }
    }
    
    for(var j in this.self.context.conditions) {
        var cond = this.self.context.conditions[j];
        _DBR( 'rule', cond.call('name', args), 'eventCalcXxxxxxxBonusRUVXX', running.months );
        var result = cond.call('process', args);
        _DBR( 'result', result, 'eventCalcXxxxxxxBonusRUVXX', running.months );
    }

    if (this.self.context.bonusReleaseYear.indexOf(year) > -1) {
        _DBR('@@@@ calculate bonus', '', 'eventCalcXxxxxxxBonusRUVXX', running.months);
        var pass = {};
        //var rule = this.self.context.eligibilityRule;
        for(var i in PublicConstants.FUND_RETURN) {
            pass[i] = true;        
        }
        for(var j in this.self.context.conditions) {
            var cond = this.self.context.conditions[j];
            _DBR( 'Rule', cond.call('name', args), 'eventCalcXxxxxxxBonusRUVXX', running.months );
            var result = cond.call('isPass', args);
            //_DBR( 'Result', result, 'eventCalcXxxxxxxBonusRUVXX', running.months );
            
            for(var i in PublicConstants.FUND_RETURN) {
                pass[i] = pass[i] && result[i];
            }
        }
        
        var bonusResult = {};
        for(var i in PublicConstants.FUND_RETURN) {
            if (pass[i]) {
                bonusResult[i] = this.self.calcBonus({args: args, returnType: i});
            } else {
                bonusResult[i] = 0;
            }
        }
        _DBR( 'bonusResult', bonusResult, 'eventCalcXxxxxxxBonusRUVXX', running.months );
        this.self.saveBonus({args: args, bonus: bonusResult});
    }
    return;
},
   init: function(args) {
    this.self.context = {};
    this.self.context['bonusStartYear'] = [0, 3, 6, 9, 12, 15, 18];
    this.self.context['bonusReleaseYear'] = [2, 5, 8, 11, 14, 17];
    this.self.context['bonusPerentage'] = 0.03;
    this.self.context['faceAmountAtStartYear'] = null;

    this.self.context['conditions'] = [];
    var IEligibilityRule = Interface.define({
        name: Interface.METHOD,
        resetState: Interface.METHOD,
        process: Interface.METHOD,
        isPass: Interface.METHOD
    });
    
    var cond0 = Class.define({
        init: function(args) {
            this.self['context'] = {};
            this.self.context['pass'] = {};
        },
        isPass: function(args) {
            return this.self.context.pass;
        },
        resetState: function(args) {
            for(var i in PublicConstants.FUND_RETURN) {
                this.self.context.pass[i] = true;
            }
        }
    });
    
    // premium paid on time
    var cond1 = cond0.extend({
        name: function(args) {
            return 'check if regular premium paid';  
        },
        process: function(args) {
            var context = args['context'];
            var running = context.runningPolicyValues;
            
            for(var i in PublicConstants.FUND_RETURN) {
                var plannedPremium = running.plannedPremium[i];
                var newPremium = running.newPremium[i];
                var pass = newPremium >= plannedPremium && newPremium > 0 && plannedPremium > 0;
                this.self.context.pass[i] = this.self.context.pass[i] && pass;
            }
            
            /*
            var plannedPremium = context.proposal.coverageInfo.plannedPremium;
            var newPremium = running.newPremium;
            var pass = newPremium >= plannedPremium && newPremium > 0 && plannedPremium > 0;
            for(var i in PublicConstants.FUND_RETURN) {
                this.self.context.pass[i] = this.self.context.pass[i] && pass;
            }
            */
            return this.self.context.pass;
        }
    });
    
    // no partial withdrawal
    var cond2 = cond0.extend({
        name: function(args) {
            return 'check if withdrawal performed';  
        },
        process: function(args) {
            var context = args['context'];
            var running = context.runningPolicyValues;
            var withdrawal = running.withdrawal;
            var pass = (withdrawal === 0);
            for(var i in PublicConstants.FUND_RETURN) {
                this.self.context.pass[i] = this.self.context.pass[i] && pass;
            }
            return this.self.context.pass;
        }
    });
    
    var cond3 = cond0.extend({
        init: function(args) {
            //this.parent.init(args);
            this.self.context['faceAmountAtStartYear'] = {};
        },
        name: function(args) {
            return 'check if decreasing face amount performed';  
        },
        process: function(args) {
            var context = args['context'];
            var running = context.runningPolicyValues;
            var faceAmounts = running.faceAmount;
            for(var i in PublicConstants.FUND_RETURN) {
                var pass = (faceAmounts[i] >= this.self.context.faceAmountAtStartYear[i]);
                this.self.context.pass[i] = this.self.context.pass[i] && pass;
            }
            return this.self.context.pass;
        },
        resetState: function(args) {
            this.parent.resetState(args);

            var context = args['context'];
            var running = context.runningPolicyValues;
            for(var i in PublicConstants.FUND_RETURN) {
                this.self.context.faceAmountAtStartYear[i] = running.faceAmount[i];
            }
        } 
    });
    
    this.self.context.conditions.push(IEligibilityRule.implementBy(cond1.create()));
    this.self.context.conditions.push(IEligibilityRule.implementBy(cond2.create()));
    this.self.context.conditions.push(IEligibilityRule.implementBy(cond3.create()));

    return null;
},
   calcBonus: function(args) {
    var args2 = args['args'];
    var returnType = args['returnType'];
    var context = args2['context'];
    var running = context.runningPolicyValues;
    
    var totalFundBalances = running.accumFundBalancesForBonus[returnType];
    var bonus = _R2( totalFundBalances * this.self.context.bonusPerentage / 36 );
    return bonus;
},
   saveBonus: function(args) {
    var args2 = args['args'];
    var bonus = args['bonus'];
    var context = args2["context"];
    var running = context.runningPolicyValues;
    for(var i in PublicConstants.FUND_RETURN) {
        running['loyalBonus'][i] += bonus[i];
    }
    _DBR( 'loyalBonus', running['loyalBonus'], 'eventCalcLoyaltyBonusRUVXX', running.months );
}
});
var eventCalcMaxTopupWithdrawalLocal = Class.define({
   eventName: function(args) {
    return "eventCalcMaxTopupWithdrawalLocal";
},
   shouldBeRun: function(args) {
    var context = args["context"];
    var month = context.runningPolicyValues.months % 12;
    if (month == 11) {
        var shouldRun = false;
        var running = context.runningPolicyValues;
        for(var idx in PublicConstants.FUND_RETURN) {
            shouldRun = (shouldRun || running.lapse[idx] == "N");
        }
        return shouldRun;
    } else {
        return false;
    }
},
   run: function(args) {
    var context = args["context"];
    var metadata = context.events.metadata;
    var proposal = context.proposal;
    var basePlan = proposal.coverageInfo;
    var primary = getPrimaryInsured({
        coverage: basePlan
    });
    var runningPolicyValues = context.runningPolicyValues;
    var year = context.runningPolicyValues.year;
    var months = context.runningPolicyValues.months;
    var month = context.runningPolicyValues.months % 12;

    var productId = basePlan.product.productKey.primaryProduct.productPK.productId;
    var location = basePlan.product.productKey.location;
    var channel = proposal.channel;
    //var attainAge = Number(primary.insuredAge) + Number(year);
    var plannedPremium = basePlan.plannedPremium;
    var paymentMode = basePlan.options.paymentMode;
    var currencyId = basePlan.currency.currencyPK.currencyId;
    
    var debug = proposal.enableDebug; 
    proposal.enableDebug = false;
    var faRangeCalculator = IFunction.implementBy( CalculateFaceAmountRange.create() );
    var faRange = faRangeCalculator.call('execute', {
                    productId: productId, 
                    location: location,
                    channel: channel,
                    insuredAge: Number(primary.insuredAge),
                    plannedPremium: plannedPremium,
                    paymentMode: paymentMode,
                    currencyId: currencyId
                });
    proposal.enableDebug = debug;
    
    var fundBalances = IFund.appliedTo(runningPolicyValues.topupFundPool).call("fundBalances", {});
    if(!Utils.isNothing(runningPolicyValues.topupFundBalancesBeforeWithdrawal)){
        fundBalances = this.self.calcFundBalancesAfterBonusBeforeWithdrawal({
            context: context
        });
    }
    // Support for validation
    runningPolicyValues.tavAfterBonusAndBeforeWithdrawal = fundBalances;
    var minFaLimit = faRange.value.minLimit; 
    
    _DBR("faRange", faRange, "eventCalcMaxTopupWithdrawalLocal->", months);
    for(var i in PublicConstants.FUND_RETURN) {
        var maxWD = this.self.maxWithdrawal( { returnType: i, context: context, minFA: minFaLimit } );
        var minAccount = this.self.minAccountValue( { returnType: i, context: context } );
        var fundBalance = fundBalances[i];
        _DBR("maxWithdrawal.fundBalance", fundBalance, "eventCalcMaxTopupWithdrawalLocal->", context.runningPolicyValues.months);
        
        runningPolicyValues.maxTopupWithdrawal[i] = Math.min( maxWD, Math.max(0, fundBalance - minAccount ) );
    }
    _DBR("Max Withdrawal", runningPolicyValues.maxTopupWithdrawal, "eventCalcMaxTopupWithdrawalLocal->", months);
    var withdrawalAmount;
    var totalWithdrawal;
    if (!Utils.isNothing(proposal.fundActivities) && !Utils.isNothing(proposal.fundActivities.fundActivity)) {
        var activities = Utils.iterator(proposal.fundActivities.fundActivity);
        //var parties = Utils.iterator(basePlan.parties.party);
        for (var idx in activities) {
            var activity = activities[idx];
            if (Number(activity.topupWithdrawal) > Number(0) && Number(activity.attainAge) == (Number(primary.insuredAge) + Number(year)) && (month == 11)) {
                var result = this.self.calcWithdrawalAmounts({
                    withdrawal: activity.topupWithdrawal,
                    year: year
                 });
                withdrawalAmount = result.withdrawalAmount;
                totalWithdrawal = result.totalWithdrawal;
                break;
            }
        }
    }
    if (totalWithdrawal) {
        this.self.checkMaximumWithdrawal({args: args, withdrawalAmount: withdrawalAmount, totalWithdrawal: totalWithdrawal});
    }
},
   maxWithdrawal: function(args) {
    var returnType = args['returnType'];
    var context = args['context'];
    var running = context.runningPolicyValues;
    var basePlan = context.proposal.coverageInfo;
    var minFA = args['minFA'];
    
    var minFAByPremium = IFunction.appliedTo(CalcEventMinFaceAmountByMinPrem.create()).call('execute', {context: context, coverage: context.proposal.coverageInfo});
    if (Utils.isNothing(minFAByPremium)) minFAByPremium = 0;
    _DBR("maxWithdrawal.minFAByPremium", minFAByPremium, "eventCalcMaxWithdrawalRUVXX->", context.runningPolicyValues.months);

    var maxWithdrawalByIndvidualFund = this.self.maxWithdrawalByIndividualFund(args);
    _DBR("maxWithdrawal.maxWithdrawalByIndvidualFund", maxWithdrawalByIndvidualFund, "eventCalcMaxWithdrawalRUVXX->", context.runningPolicyValues.months);

    var fa = context.runningPolicyValues.faceAmount[returnType];
    _DBR("maxWithdrawal.fa", fa, "eventCalcMaxWithdrawalRUVXX->", context.runningPolicyValues.months);

    var maxWD;
    if (basePlan.options.dbLevel == SchemaConstants.DB_OPTION.LEVEL) {
        maxWD = Math.min(fa - Math.max(minFA, minFAByPremium.value), maxWithdrawalByIndvidualFund);
        _DBR("DB Level Math.min(fa - Math.max(minFA, minFAByPremium)", maxWD, "eventCalcMaxWithdrawalRUVXX->", context.runningPolicyValues.months);
    } else {
        maxWD = maxWithdrawalByIndvidualFund;
        _DBR("DB Increase maxWithdrawalByIndvidualFund", maxWD, "eventCalcMaxWithdrawalRUVXX->", context.runningPolicyValues.months);
    }
    _DBR("maxWithdrawal.maxWD", maxWD, "eventCalcMaxWithdrawalRUVXX->", context.runningPolicyValues.months);
    return maxWD;
},
   minAccountValue: function(args) {
    return 0;
},
   minFundBalanceAfterWithdrawal: function(args) {
    return 2000;
},
   maxWithdrawalByIndividualFund: function(args) {
    var returnType = args['returnType'];
    var context = args['context'];
    var running = context.runningPolicyValues;
    var year = context.runningPolicyValues.year;
    var minAccountValue = this.self.minFundBalanceAfterWithdrawal({});
    _DBR("maxWithdrawal.minAccountValue", minAccountValue, "eventCalcMaxWithdrawalRUVXX->", context.runningPolicyValues.months);
    var lessestFundBalance;
    var poolFundBalances = {};
    var proportionFunds = {};
    if(Utils.isNothing(running.topupFundBalancesBeforeWithdrawal)){
        var poolFunds = running.topupFundPool.self.context.fundPools;
        proportionFunds = running.topupFundPool.allocations();
        for(var fundCode in poolFunds) {
            poolFundBalances[fundCode] = IFund.appliedTo(poolFunds[fundCode]).call('fundBalances');
            var allocationFund = proportionFunds[fundCode][PublicConstants.FUND_RETURN.LOW];
            var poolFundBalance = (poolFundBalances[fundCode][PublicConstants.FUND_RETURN.LOW] - minAccountValue) / allocationFund;
            if (Utils.isNothing(lessestFundBalance)) {
                lessestFundBalance = poolFundBalance;
            } else {
                lessestFundBalance = Math.min( lessestFundBalance, poolFundBalance );
            }
        }
    }
    else {
        poolFundBalances = this.self.dumpinSpecialBonus({
            context: context
        });
        proportionFunds = this.self.calcCurrentAllocations({
            context: context,
            poolFundBalances: poolFundBalances
        });
        for(var fundCode in proportionFunds) {
            var allocationFund = proportionFunds[fundCode][PublicConstants.FUND_RETURN.LOW];
            var poolFundBalance = (poolFundBalances[fundCode][PublicConstants.FUND_RETURN.LOW] - minAccountValue) / allocationFund;
            if (Utils.isNothing(lessestFundBalance)) {
                lessestFundBalance = poolFundBalance;
            } else {
                lessestFundBalance = Math.min( lessestFundBalance, poolFundBalance );
            }
        }
    }
    
    if (year >= context.proposal.startDebugYear && year <= context.proposal.stopDebugYear && context.proposal.enableDebug) {
        _SS(poolFundBalances, 5);
        _DBR("@@@@ Lessest Fund Balance", lessestFundBalance, "eventCalcMaxWithdrawalRUVXX", running.months);
    }
    //var maxWithdrawalByFund = Math.max(0, lessestFundBalance - minAccountValue);
    var maxWithdrawalByFund = lessestFundBalance;
    _DBR("@@@@ maxWithdrawalByFund", maxWithdrawalByFund, "eventCalcMaxWithdrawalRUVXX", running.months);
    return maxWithdrawalByFund;
},
   dumpinSpecialBonus: function(args) {
    var context = args["context"];
    var running = context.runningPolicyValues;
    var specialBonus = context.runningPolicyValues.specialBonus;
    var allocations = context.runningPolicyValues.fundPool.context.allocations;
    var poolFundBalances = {};
    for(var fundCode in allocations) {
        for(var fundReturn in PublicConstants.FUND_RETURN){
            if(Utils.isNothing(poolFundBalances[fundCode])){
                poolFundBalances[fundCode] = {};
            }
            poolFundBalances[fundCode][fundReturn] = running.topupFundBalancesBeforeWithdrawal[fundCode][fundReturn];
        }
    }
    var specialBonusFunds = {};
    for(var fundCode in allocations){
        for(var fundReturn in PublicConstants.FUND_RETURN){
            var specialBonusPerFund = Number(specialBonus[fundReturn]) * Number(allocations[fundCode]) / 100;
            if(Utils.isNothing(specialBonusFunds[fundCode])){
                specialBonusFunds[fundCode] = {};
            }
            specialBonusFunds[fundCode][fundReturn] = specialBonusPerFund;
        }
    }
    
    for(var fundCode in poolFundBalances) {
        for(var fundReturn in PublicConstants.FUND_RETURN){
            poolFundBalances[fundCode][fundReturn] += specialBonusFunds[fundCode][fundReturn];
        }
    }
    return poolFundBalances;
},
   calcCurrentAllocations: function(args) {
    var context = args["context"];
    var poolFundBalances = args["poolFundBalances"] || this.self.dumpinSpecialBonus({
        context: context
    });
    var balanceTotals = this.self.calcFundBalancesAfterBonusBeforeWithdrawal({
        context: context,
        poolFundBalances: poolFundBalances
    });
    var currentAllocations = {};
    for(var fundCode in poolFundBalances) {
        for(var fundReturn in PublicConstants.FUND_RETURN){
            if(Utils.isNothing(currentAllocations[fundCode])){
                currentAllocations[fundCode] = {};
            }
            currentAllocations[fundCode][fundReturn] = _R(poolFundBalances[fundCode][fundReturn] / balanceTotals[fundReturn], 15);
        }
    }
    return currentAllocations;
},
   calcFundBalancesAfterBonusBeforeWithdrawal: function(args) {
    var context = args['context'];
    var poolFundBalances = args['poolFundBalances'] || this.self.dumpinSpecialBonus({
        context: context
    });
    var balanceFunds = {};
    for(var fundCode in poolFundBalances) {
        for(var fundReturn in PublicConstants.FUND_RETURN){
            if(Utils.isNothing(balanceFunds[fundReturn])){
                balanceFunds[fundReturn] = 0;
            }
            balanceFunds[fundReturn] = Number(balanceFunds[fundReturn]) + Number(poolFundBalances[fundCode][fundReturn]);
        }
    }
    return balanceFunds;
},
   getPartialWithdrawSurcharges: function(args) {
    return 0;
},
   setErrorCode: function(args) {
    var dbLevel = args["dbLevel"];
    if(dbLevel == SchemaConstants.DB_OPTION.LEVEL) {
        return "ERR09012,";
    }
    return "ERR09012B,";
},
   calcWithdrawalAmounts: function(args) {
    var year = args['year'];
    var withdrawal = args['withdrawal'];    
    var partialWithdrawalSurcharge = this.self.getPartialWithdrawSurcharges({year: year});
    var partialWithdrawal = _R2(withdrawal * (1 + partialWithdrawalSurcharge));
    var partialWithdrawalCharge = partialWithdrawal - withdrawal;
    return {withdrawalAmount: withdrawal, totalWithdrawal: partialWithdrawal};
},
   checkMaximumWithdrawal: function(args) {
    var args2 = args.args;
    var totalWithdrawal = args.totalWithdrawal;
    var context = args2.context;
    var runningPolicyValues = context.runningPolicyValues;
    var months = runningPolicyValues.months;
    var basePlan = context.proposal.coverageInfo;
    
    var withdrawals = {};
    var maxWDs = runningPolicyValues.maxTopupWithdrawal;
    var avLowEqualZero = false;
    for(var i in maxWDs) {
        _DBR("run.maxWDs.i", i, "eventDeductTopupWithdrawalRUVXX->", months);
        var maxWD = maxWDs[i];
        _DBR("run.maxWD", maxWD, "eventDeductTopupWithdrawalRUVXX->", months);
        withdrawals[i] = totalWithdrawal;
        if(i == "LOW"){
            if(runningPolicyValues.tavBeforeBonusAndWithdrawal[i] == 0){
                avLowEqualZero = true;
            }
        }
        if (maxWD < totalWithdrawal) {
            if((avLowEqualZero && i != "LOW") || !avLowEqualZero) {
                var errorCode  = this.self.setErrorCode({"dbLevel": basePlan.options.dbLevel});
                runningPolicyValues.error[i] += errorCode;
            } 
        }
    }
    return withdrawals;
}
});
var eventCalcMaxWithdrawalUL007 = Class.define({
   eventName: function(args) {
    return "eventCalcMaxWithdrawalUL007";
},
   shouldBeRun: function(args) {
    var context = args["context"];
    var month = context.runningPolicyValues.months % 12;
    if (month == 11) {
        var shouldRun = false;
        var running = context.runningPolicyValues;
        for(var idx in PublicConstants.FUND_RETURN) {
            shouldRun = (shouldRun || running.lapse[idx] == "N");
        }
        return shouldRun;        
    } else {
        return false;
    }
},
   run: function(args) {
    var context = args["context"];
    var metadata = context.events.metadata;
    var proposal = context.proposal;
    var basePlan = proposal.coverageInfo;
    var primary = getPrimaryInsured({
        coverage: basePlan
    });
    var runningPolicyValues = context.runningPolicyValues;
    var year = context.runningPolicyValues.year;
    var months = context.runningPolicyValues.months;
    var month = context.runningPolicyValues.months % 12;

    var productId = basePlan.product.productKey.primaryProduct.productPK.productId;
    var location = basePlan.product.productKey.location;
    var channel = proposal.channel;
    //var attainAge = Number(primary.insuredAge) + Number(year);
    var plannedPremium = basePlan.plannedPremium;
    var paymentMode = basePlan.options.paymentMode;
    var currencyId = basePlan.currency.currencyPK.currencyId;
    
    var debug = proposal.enableDebug; 
    proposal.enableDebug = false;
    var faRangeCalculator = IFunction.implementBy( CalculateFaceAmountRange.create() );
    var faRange = faRangeCalculator.call('execute', {
                     productId: productId, 
                     location: location,
                     channel: channel,
                     insuredAge: Number(primary.insuredAge),
                     plannedPremium: plannedPremium,
                     paymentMode: paymentMode,
                     currencyId: currencyId            
                  });
    proposal.enableDebug = debug;
    
    var fundBalances = IFund.appliedTo(runningPolicyValues.fundPool).call("fundBalances", {});
    // Support for validation
    runningPolicyValues.avBeforeBonusAndWithdrawal = fundBalances;
    var minFaLimit = faRange.value.minLimit 

    _DBR("faRange", faRange, "eventCalcMaxWithdrawalUL007->", months);
    for(var i in PublicConstants.FUND_RETURN) {
        var maxWD = this.self.maxWithdrawal( { returnType: i, context: context, minFA: minFaLimit } );
        var minAccount = this.self.minAccountValue( { returnType: i, context: context } );
        var fundBalance = fundBalances[i];
        _DBR("maxWithdrawal.fundBalance", fundBalance, "eventCalcMaxWithdrawalUL007->", context.runningPolicyValues.months);
        
        runningPolicyValues.maxWithdrawal[i] = Math.min( maxWD, Math.max(0, fundBalance - minAccount ) );
    }
    _DBR("Max Withdrawal", runningPolicyValues.maxWithdrawal, "eventCalcMaxWithdrawalUL007->", months);
},
   maxWithdrawal: function(args) {
    var returnType = args['returnType'];
    var context = args['context'];
    var proposal = context.proposal;
    var basePlan = proposal.coverageInfo;
    var minFA = args['minFA'];
    
    var fa = context.runningPolicyValues.faceAmount[returnType];
    var sv = context.runningPolicyValues.surrenderValueBeforeWithdrawal[returnType];
    var av = context.runningPolicyValues.avBeforeBonusAndWithdrawal[returnType];

    _DBR("maxWithdrawal.fa", fa, "eventCalcMaxWithdrawalUL007->", context.runningPolicyValues.months);
    _DBR("maxWithdrawal.sv", sv, "eventCalcMaxWithdrawalUL007->", context.runningPolicyValues.months);
    _DBR("maxWithdrawal.minFA", minFA, "eventCalcMaxWithdrawalUL007->", context.runningPolicyValues.months);

    var maxWD;
    if (basePlan.options.dbLevel == SchemaConstants.DB_OPTION.LEVEL) {
        // maxWD = Math.min(fa - minFA, sv * 0.8);
        maxWD = Math.min(Math.max(av, fa) - Math.max(100000, minFA), sv * 0.8);
    } else {
        maxWD = sv * 0.8;
    }
    _DBR("maxWithdrawal.maxWD", maxWD, "eventCalcMaxWithdrawalUL007->", context.runningPolicyValues.months);

    return maxWD;
},
   minAccountValue: function(args) {
    var returnType = args['returnType'];
    var context = args['context'];
    var year = context.runningPolicyValues.year;
    var sv = context.runningPolicyValues.surrenderValueBeforeWithdrawal[returnType];
    
    var sv20 = sv * 0.2;
    var twoMonthPremiums = 0;
    if (year < 3) {
        twoMonthPremiums = context.runningPolicyValues.basePlanPremiums / 6;    // totalPremiums is annual and 2 month premium should be total premium / 6
    }
    var minFundBalance = this.self.minFundBalanceAfterWithdrawal(args);

    _DBR("minAccountValue.twoMonthPremiums", twoMonthPremiums, "eventCalcMaxWithdrawalUL007->", context.runningPolicyValues.months);
    _DBR("minAccountValue.sv20", sv20, "eventCalcMaxWithdrawalUL007->", context.runningPolicyValues.months);
    _DBR("maxWithdrawal.minFundBalance", minFundBalance, "eventCalcMaxWithdrawalUL007->", context.runningPolicyValues.months);

    var minAccountValue = Math.max( minFundBalance, twoMonthPremiums, sv20 );
    _DBR("maxWithdrawal.minAccountValue", minAccountValue, "eventCalcMaxWithdrawalUL007->", context.runningPolicyValues.months);

    return minAccountValue;
},
   minFundBalanceAfterWithdrawal: function(args) {
    return 5000;
}
});
var eventCalcNARLocal = Class.define({
   eventName: function(args) {
    return "eventCalculateNARLocal";
},
   shouldBeRun: function(args) {
    var context = args["context"];
    return true;
},
   run: function(args) {
    var context = args["context"];

    var metadata = context.events.metadata;
    var proposal = context.proposal;
    var basePlan = proposal.coverageInfo;
    var runningPolicyValues = context.runningPolicyValues;
    
    var isUVL = basePlan.catalog.call("isUVL");
    var isRegularSaving = basePlan.catalog.call("isRegularSaving");   

    // ---------- Caculate lienForJuveniles -------------------

    // Set lienForJuveniles rates
    var lienForJuvenilesRate = {
        "rates": [.2, .4, .6, .8, 1]
    };

    var age = Number(context.insuredAge) + Number(context.runningPolicyValues.year);

    // Calculate lienForJuveniles value base on age
    var lienForJuvenilesValue = lienForJuvenilesRate.rates[age] || 1;
    // --------------------------------------------------------

    var faceAmounts = {};
    for (var r in PublicConstants.FUND_RETURN) {
        faceAmounts[r] = this.self.getFaceAmountByReturnType( {args: args, returnType: r} );
    }
    var narCalc = DataDrivenCalculatorImpl.create({
        drivenKeys: PublicConstants.FUND_RETURN,
        drivenDatas: [
            IFund.appliedTo(runningPolicyValues.fundPool).call("fundBalances", {}),
            IFund.appliedTo(runningPolicyValues.cashoutAccount).call("fundBalances", {}),
            runningPolicyValues.lapse,
            faceAmounts
        ]
    });
    var nars = IDataDrivenCalculator.appliedTo(narCalc).call("calculate", {
        calculateBlock: function(args) {
            var isLapse = args[2];
            var bpFaceAmount = args[3];

            _DBR("dbLevel", basePlan.options.dbLevel, "eventCalculateNAR->", context.runningPolicyValues.months);
            _DBR("lapse", args[2], "eventCalculateNAR->", context.runningPolicyValues.months);
            _DBR("bpFaceAmount", bpFaceAmount, "eventCalculateNAR->", context.runningPolicyValues.months);

            // if (isLapse == 'Y') return 0;
            
            if(isUVL && isRegularSaving) {
                if (isLapse == 'Y') return 0;
            }

            if (basePlan.options.dbLevel == SchemaConstants.DB_OPTION.INCREASE) {
                if (basePlan.catalog.call("isSinglePremium", {})) {
                    //var nar = _R(runningPolicyValues.accPremiums * runningPolicyValues.initialFaceAmountRatio, 15);
                    var nar = _R(this.self.getTotalPremiumPaid(args) * runningPolicyValues.initialFaceAmountRatio, 15);
                    _DBR("fa = accPremiums(" + runningPolicyValues.accPremiums + ") * initialFaceAmountRatio(" + runningPolicyValues.initialFaceAmountRatio + ")", nar, "eventCalculateNAR->", context.runningPolicyValues.months);
                    
                    return nar;
                } else {

                    // Comment out this code for fixing issue age < 4
                    // var nar = Number(basePlan.faceAmount);

                    // Calculate nar with lienForJuvenilesValue
                    // var nar = Number(basePlan.faceAmount) * lienForJuvenilesValue;
                    //_DBR("fa = faceAmount(" + basePlan.faceAmount + ")", nar, "eventCalculateNAR->", context.runningPolicyValues.months);
                    var nar = Number( bpFaceAmount ) * lienForJuvenilesValue;
                    _DBR("fa = faceAmount(" + bpFaceAmount + ")", nar, "eventCalculateNAR->", context.runningPolicyValues.months);
                    
                    return nar;
                }
                _DBR("NAR", narValue, "eventCalculateNAR->", context.runningPolicyValues.months);
                return narValue
            }
            if (basePlan.options.dbLevel == SchemaConstants.DB_OPTION.LEVEL) {
                var fundBalance = args[0];
                var cashOutAccountBalance = args[1];
                var totalFundBalance = Number(fundBalance) + Number(cashOutAccountBalance);
                var narValue = 0;
                _DBR("fundBalance", fundBalance, "eventCalculateNAR->", context.runningPolicyValues.months);
                _DBR("cashOutAccountBalance", cashOutAccountBalance, "eventCalculateNAR->", context.runningPolicyValues.months);
                _DBR("totalFundBalance", totalFundBalance, "eventCalculateNAR->", context.runningPolicyValues.months);
                if (basePlan.catalog.call("isSinglePremium", {})) {
                    //var fa = _R(runningPolicyValues.accPremiums * runningPolicyValues.initialFaceAmountRatio, 15);
                    var fa = _R(this.self.getTotalPremiumPaid(args) * runningPolicyValues.initialFaceAmountRatio, 15);
                    var nar = Math.max(Number(0), _R(Number(fa) - Number(totalFundBalance), 15));
                    //console.log("months :" + runningPolicyValues.months + ", fundBalance :" + fundBalance + " ,cahoutAccountBalance :" + cahoutAccountBalance + " ,fa :" + fa + ", nar :" + nar);
                    _DBR("fa = Max(0, accPremiums(" + runningPolicyValues.accPremiums + ") * initialFaceAmountRatio(" + runningPolicyValues.initialFaceAmountRatio + ") - totalFundBalance(" + totalFundBalance + "))", nar, "eventCalculateNAR->", context.runningPolicyValues.months);

                    return nar;
                } else {
                    // Comment out this code for fixing issue age < 4
                    // var nar = _R(Math.max(Number(0), Number(basePlan.faceAmount) - Number(totalFundBalance)), 15);

                    // Calculate nar with lienForJuvenilesValue
                    // var nar = _R(Math.max(Number(0), Number(basePlan.faceAmount) * lienForJuvenilesValue - Number(totalFundBalance)), 15);
                    // _DBR("fa = Max(0, faceAmount(" + basePlan.faceAmount + ") - totalFundBalance(" + totalFundBalance + "))", nar, "eventCalculateNAR->", context.runningPolicyValues.months);
                    var nar = _R(Math.max(Number(0), Number(bpFaceAmount) * lienForJuvenilesValue - Number(totalFundBalance)), 15);
                    _DBR("fa = Max(0, faceAmount(" + bpFaceAmount + ") - totalFundBalance(" + totalFundBalance + "))", nar, "eventCalculateNAR->", context.runningPolicyValues.months);

                    return nar;
                }
            }
        }
    });
    runningPolicyValues['nars'] = nars;
},
   getTotalPremiumPaid: function(args) {
    var context = args["context"];
    var runningPolicyValues = context.runningPolicyValues;
    var month = runningPolicyValues.months % 12;
    
    var accPremiums = runningPolicyValues.accPremiums;
    if (month < 11) accPremiums += runningPolicyValues.totalPremiums;
    return accPremiums;
},
   getFaceAmountByReturnType: function(args) {
    var context = args.args.context;
    var returnType = args.returnType;
    var proposal = context.proposal;
    var basePlan = proposal.coverageInfo;
    return basePlan.faceAmount;
}
});
var eventCalcPolicyFeeUL007 = Class.define({
   eventName: function(args) {
    return "Calculate Monthly Policy Fee (UL007)";
},
   shouldBeRun: function(args) {
    var context = args["context"];
    return true;
},
   run: function(args) {
    var context = args["context"];
    var metadata = context.events.metadata;
    var proposal = context.proposal;
    var basePlan = proposal.coverageInfo;
    var year = context.runningPolicyValues.year;
    var months = context.runningPolicyValues.months;
    var runningPolicyValues = context.runningPolicyValues;

    var policyFees = context.rates[basePlan.product.productKey.primaryProduct.productPK.productId][SchemaConstants.CHARGE_TYPE.POLICYFEE];
    var effectiveDate = policyFees.header.effectiveDate;
    var issueDate = proposal.policyYearDate.date();
    
    var effectDate = new Date(effectiveDate);
    
    var orgYear = 2016;
    var currDate = issueDate; 
    currDate.setMonth(issueDate.getMonth() + months);
    var currYear  = currDate.getFullYear();

    // since the rate is from 20160101 and the rate should be increased by $2 for each year after 2016 and cap at $60
    var fee = Math.min(60, policyFees.rates[0] + (currYear - orgYear) * 2);
    _DBR("Policy Fee = Math.min(60, policyFees.rates[0] (" + policyFees.rates[0] +  ") + (currYear (" + currYear + ") - orgYear (" + orgYear + ")) * 2)", fee, "eventDeductMonthlyPolicyFeeUL007->", months);

    var fees = {};
    // for(fundIdx in PublicConstants.FUND_RETURN) {
    //     if (runningPolicyValues.lapse[fundIdx] == 'Y') {
    //         fees[fundIdx] = 0;
    //     } else {
    //         fees[fundIdx] = fee;
    //     }
    // }
    var isUVL = basePlan.catalog.call("isUVL");
    var isRegularSaving = basePlan.catalog.call("isRegularSaving");
    for (fundIdx in PublicConstants.FUND_RETURN) {
        if (isUVL && isRegularSaving) {
            if (runningPolicyValues.lapse[fundIdx] == 'Y') {
                fees[fundIdx] = 0;
            } else {
                fees[fundIdx] = fee;
            }
        } else {
            fees[fundIdx] = fee;
        }
    }

    runningPolicyValues['policyFees'] = fees;
}
});
var eventCalcProtectionByMethod = Class.define({
   eventName: function(args) {
    return "eventCalcProtectionByMethod";
},
   shouldBeRun: function(args) {
    var context = args["context"];
    return true;
},
   run: function(args) {
    var context = args["context"];
    var proposal = context.proposal;
    var coverage = proposal.coverageInfo;
    var running = context.runningPolicyValues;
    var basePlanPK = coverage.product.productKey.primaryProduct.productPK.productId;
    var totalRiderProtection = 0;
    var riderProtectionArray = [];
    
    running.protection = {};
    running.totalProtections = {};
    
    var ridersProtection = 0;
    for (var i in running.riderProtections) {
        if (running.riderProtections[i].isInsured && (running.riderProtections[i].isAccidentalDeath || running.riderProtections[i].isMajorDiseaseBenefit)) {
            ridersProtection += running.riderProtections[i].protection;
        }
    }
    
    for(var i in PublicConstants.FUND_RETURN) {
        var basePlanProtection = this.self.calcProtection({coverage: coverage, args: args, fundReturn: i });
        if('N' === running.lapse[i]){
            running.protection[i] = basePlanProtection + _V(running.additionalBasePlanProtection, 0);
            running.totalProtections[i] = running.totalDeathBenefits[i] + ridersProtection;
        } else{
            running.protection[i] = 0;
            running.totalProtections[i] = 0;
        }
    }
    
    return;
},
   calcProtection: function(args) {
    var coverage = args['coverage'];
    var args2 = args.args;
    var context = args2['context'];
    var running = context.runningPolicyValues;
    var productId = coverage.product.productKey.primaryProduct.productPK.productId;
    var fundReturn = args['fundReturn'];
    var protection = 0;
    var schema = coverage.schema.call('getSchema');
    var method = _V(_PV(schema, "ProductSchema.BasicParticular.CalcMethods.Protection"));
    if(!Utils.isNothing(method)){
        _DBR("calculate method (" + productId + ")", method, "eventCalcProtection->", running.months);
        
        // formula defined
        var functionManager = Repository.getManager(SystemComponents.MANAGER.FUNCTION_MANAGER);
        if(!Utils.isNothing(functionManager)){
            var result = functionManager.call("execute", {
               function: method,
               args: { coverage: coverage, context: context, fundReturn: fundReturn}
            });
            _DBR("protection", result, "eventCalcProtection-->", running.months);
            if( Utils.isNothing( result.errors)) {
                protection = result.value;
            } else {
                    throw result.errors;
            }
        }
    } else {
        _DBR("Not able to calculate method, method not found for (" + productId + ")", "--", "eventCalcProtection->", running.months);
    }
    
    return protection;
}
});
var eventCalcRidersDeathBenefit = Class.define({
   eventName: function(args) {
    return "Calculate Riders Death Benefit by Method";
},
   shouldBeRun: function(args) {
    var context = args["context"];
    var projOptions = context.projectionOptions;
    return Utils.matchInList(InterfaceConstants.PROJECTION_OPTIONS.BASE_PLAN_WITH_RIDERS, projOptions, false);
},
   run: function(args) {
    var context = args["context"];
    var proposal = context.proposal;
    var running = context.runningPolicyValues;

    var ridersDb = 0;
    var riders = proposal.riders.coverageInfo;
    for(var i in riders) {
        var rider = riders[i];
        var catalog = rider.catalog.call('getCatalog');
        var hasDeathBenefit = Utils.matchInList("HasDeathBenefit", catalog.ProductCatalog.ProductType.ProductTypeCode, false);
        
        // Detect rider of insured
        if (this.self.isRiderInsured( {coverage: rider, args: args} ) && hasDeathBenefit)
            ridersDb +=  this.self.calcDeathBenefit( {coverage: rider, args: args} );
    }
    
    _DBR("ridersDb", ridersDb, "eventCalcRidersDeathBenefit->", running.months);
    running.ridersDeathBenefit = ridersDb;
},
   calcDeathBenefit: function(args) {
    var coverage = args['coverage'];
    var args2 = args.args;
    var context = args2['context'];
    var running = context.runningPolicyValues;

    var productId = coverage.product.productKey.primaryProduct.productPK.productId;
    
    // process Juveniles for rider
    var lienForJuvenilesRate = {
     "rates": [.2, .4, .6, .8, 1]
    };
    var ageRider = Number(coverage.parties.party.insuredAge) + Number(running.year);
    var lienForJuvenilesValue = lienForJuvenilesRate.rates[ageRider] || 1;

    var deathBenefit = 0;
    var bp = coverage.schema.call("calculateBenefitPeriod", {coverage: coverage});
    _DBR("benefit period (" + productId + ")", bp, "eventCalcRidersDeathBenefit->", running.months);
    
    if (running.year < bp) {
        var catalog = coverage.catalog.call('getCatalog');
        var hasDeathBenefit = Utils.matchInList("HasDeathBenefit", catalog.ProductCatalog.ProductType.ProductTypeCode, false);
        var hasAccidentalDeath = Utils.matchInList("AccidentalDeath", catalog.ProductCatalog.ProductType.ProductTypeCode, false);
        var hasMajorDiseaseBenefit = Utils.matchInList("MajorDiseaseBenefit", catalog.ProductCatalog.ProductType.ProductTypeCode, false);

        // Process for more rider protection
        if (hasDeathBenefit || hasAccidentalDeath || hasMajorDiseaseBenefit) {

            // default death benefit = face amount (if no formula defined, it will return default)
            deathBenefit = coverage.faceAmount * lienForJuvenilesValue;
            
            // Process CI additional benefits
            if (hasMajorDiseaseBenefit)
              deathBenefit = deathBenefit * this.self.getCIAdditionalBenefits();

            _DBR("default death benefit (" + productId + ")", deathBenefit, "eventCalcRidersDeathBenefit->", running.months);
                  
            var schema = coverage.schema.call('getSchema');
            var method = _V(_PV(schema, "ProductSchema.BasicParticular.CalcMethods.DeathBenefit"));
            if (!Utils.isNothing(method)) {
                _DBR("calculate method (" + productId + ")", method, "eventCalcRidersDeathBenefit->", running.months);
    
                // formula defined
                var functionManager = Repository.getManager(SystemComponents.MANAGER.FUNCTION_MANAGER);
                if (!Utils.isNothing(functionManager)) {
                    var result = functionManager.call("execute", {
                        function: method,
                        args: args2
                    });
                    
                    if ( Utils.isNothing( result.errors ) ) {
                        var resultIsFundDriven = !Utils.isNothing(result.value.HIGH) && 
                            !Utils.isNothing(result.value.MEDIUM) && 
                            !Utils.isNothing(result.value.LOW);
                        
                        if (resultIsFundDriven) {
                            deathBenefit = result.value.MEDIUM;
                        } else {
                            deathBenefit = result.value;
                        }
                    } else {
                        throw result.errors;
                    }
                }
            } else {
                _DBR("calculate method (" + productId + ")", "--", "eventCalcRidersDeathBenefit->", running.months);
            }
        } else {
            _DBR("rider (" + productId + ")", "has no death benefit", "eventCalcRidersDeathBenefit->", running.months);
        }
    }
    return deathBenefit;
},
   isRiderInsured: function(args) {
    var coverage = args['coverage'];
    var args2 = args.args;
    var context = args2['context'];

    var riderInsuredId = coverage.parties.party.insuredId;
    var basePlanInsuredId = context.proposal.coverageInfo.parties.party.insuredId;

    return (riderInsuredId == basePlanInsuredId);
},
   getCIAdditionalBenefits: function(args) {
    return 1.25;
}
});
var eventCalcSurrenderValuesRUVXX = Class.define({
   eventName: function(args) {
    return "Calculate Surrender Value (RUVXX)";
},
   shouldBeRun: function(args) {
    var context = args["context"];
    return true;
},
   run: function(args) {
    var context = args["context"];
    var proposal = context.proposal;
    var basePlan = proposal.coverageInfo;
    var productId = basePlan.product.productKey.primaryProduct.productPK.productId;
    var running = context.runningPolicyValues;
    var riderPremiums = running.riderPremiums;
    var year = running.year;

    var surrenderRates = context.rates[productId][SchemaConstants.CHARGE_TYPE.SURRENDER];

    // var fundBalances = IFund.appliedTo(running.fundPool).call("fundBalances", {});
    var fundBalances = IFund.appliedTo(context.runningPolicyValues.fundPool).call("fundBalances", {});
    var topupAccountValues = IFund.appliedTo(context.runningPolicyValues.topupFundPool).call("fundBalances", {});
    var cashoutAccounts = IFund.appliedTo(context.runningPolicyValues.cashoutAccount).call("fundBalances", {});
    
    var mpre = 0;
      if (basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.ANNUAL) {
         mpre = 1;
      } else if (basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.SEMIANNUAL) {
         mpre = 2;
      } else if (basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.QUARTERLY){
         mpre = 4;
      } else if (basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.MONTHLY) {
         mpre = 12;
      }
    
    var surrenderCharges = _R(Number(running.plannedPremiumAtInception * mpre) * Number(surrenderRates.rates[year]), context.precision);
    
    // Caculate surrenderCharges for premium holiday
     if (!Utils.isNothing(running.phActivities)) {
        if (running.phActivities.isPremiumHoliday) {
            surrenderCharges = _R(Number(running.plannedPremiumAtInception * mpre) * Number(surrenderRates.rates[year - (running.phActivities.premiumMultiplier + 1)]), context.precision);
        }
    }
    
    _DBR("surrenderCharges = plannedPremiumAtInception * surrenderRate(" + surrenderRates.rates[year] + ")", surrenderCharges, "eventCalculateSurrenderChargesUL007->", running.months);
    running["surrenderCharges"] = surrenderCharges;
    for(var returnTypeIdx in PublicConstants.FUND_RETURN) {
        var returnType = PublicConstants.FUND_RETURN[returnTypeIdx];
        // var surrenderCharges = _R(Number(running.regularPremium[returnType]) * Number(surrenderRates.rates[year]), context.precision);
        // Fixing the issue ATP-3179
        // var surrenderCharges = _R(Number(running.regularBasePremium[returnType]) * Number(surrenderRates.rates[year]), context.precision);
        // fix surrender calculation
        // var surrenderValue = fundBalances[returnType] - surrenderCharges;
        var surrenderValue = Math.max(0, fundBalances[returnType] + cashoutAccounts[returnType] - surrenderCharges) + topupAccountValues[returnType];
        running["surrenderValues"][returnType] = ((surrenderValue < 0) ? 0 : surrenderValue);
    }
    _DBR("surrenderValues[" + returnType + "]", running["surrenderValues"], "eventCalculateSurrenderChargesUL007->", running.months);
}
});
var eventCalcSurrenderValuesUL007 = Class.define({
   eventName: function(args) {
    return "Calculate Surrender Value (UL007)";
},
   shouldBeRun: function(args) {
    var context = args["context"];
    return true;
},
   run: function(args) {
    var context = args["context"];
    var proposal = context.proposal;
    var basePlan = proposal.coverageInfo;
    var productId = basePlan.product.productKey.primaryProduct.productPK.productId;
    var running = context.runningPolicyValues;
    var riderPremiums = running.riderPremiums;
    var year = running.year;

    var surrenderRates = context.rates[productId][SchemaConstants.CHARGE_TYPE.SURRENDER];
    //_D("surrenderRates", surrenderRates, "");
    
    /*
    var mpre = 0;
     if (basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.ANNUAL) {
        mpre = basePlan.plannedPremium + riderPremiums;
     } else if (basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.SEMIANNUAL) {
        mpre = basePlan.plannedPremium * 2 + riderPremiums;
     } else if (basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.QUARTERLY){
        mpre = basePlan.plannedPremium * 4 + riderPremiums;
     } else if (basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.MONTHLY) {
        mpre = basePlan.plannedPremium * 12 + riderPremiums;
     }
     */

    var surrenderCharges = _R(Number(running.regularPremium + running.regularPremiumIsLapse) * Number(surrenderRates.rates[year]), context.precision);
    _DBR("surrenderCharges = regularPremium(" + running.regularPremium + ") * surrenderRate(" + surrenderRates.rates[year] + ")", surrenderCharges, "eventCalculateSurrenderChargesUL007->", running.months);

    var fundBalances = IFund.appliedTo(running.fundPool).call("fundBalances", {});
    running["surrenderCharges"] = surrenderCharges;
    for(returnTypeIdx in PublicConstants.FUND_RETURN) {
        var returnType = PublicConstants.FUND_RETURN[returnTypeIdx];

        var surrenderValue = fundBalances[returnType] - surrenderCharges;
        running["surrenderValues"][returnType] = ((surrenderValue < 0) ? 0 : surrenderValue);
    }
    _DBR("surrenderValues", running["surrenderValues"], "eventCalculateSurrenderChargesUL007->", running.months);
}
});
var eventCalcTotalDeathBenefitLocal = Class.define({
   eventName: function(args) {
    //return "Calculate Total Death Benefit and Protection Local";
    return "Calculate Total Death Benefit Local";
},
   shouldBeRun: function(args) {
    var context = args["context"];
    return true;
},
   run: function(args) {
    var context = args["context"];

    var metadata = context.events.metadata;
    var proposal = context.proposal;
    var basePlan = proposal.coverageInfo;
    var runningPolicyValues = context.runningPolicyValues;
    var ridersDeathBenefit = runningPolicyValues.ridersDeathBenefit;
    var fundBalances = IFund.appliedTo(runningPolicyValues.fundPool).call("fundBalances", {});
    var isUVL = basePlan.catalog.call("isUVL");

    var narCalc = DataDrivenCalculatorImpl.create({
        drivenKeys: PublicConstants.FUND_RETURN,
        drivenDatas: [
            runningPolicyValues.deathBenefits, 
            fundBalances,
            IFund.appliedTo(runningPolicyValues.cashoutAccount).call("fundBalances", {})
        ]
    });

    var totalDeathBenefits = IDataDrivenCalculator.appliedTo(narCalc).call("calculate", {
      calculateBlock: function(data) {
        var db = data[0];
        var fundAccountBalance = data[1];
        var cashOutAccountBalance = data[2];
        // var tdb = db + cashOutAccountBalance + ridersDeathBenefit;
        // totalDeathBenefit = deathBenefit + Term Projection
        var tdb = db + cashOutAccountBalance;
        
        _DBR("TDB = DB(" + db + ") + cashOutAccountBalance(" + cashOutAccountBalance + 
             ") + ridersDeathBenefit(" + ridersDeathBenefit + ")", 
             tdb, "eventCalculateDeathBenefit->", runningPolicyValues.months);
             
        // fix issue decimal too large
        return _R5(tdb);
      }
    });
    /*
    // Update total protection as SPIS
    var totalProtections = IDataDrivenCalculator.appliedTo(narCalc).call("calculate", {
      calculateBlock: function(data) {
        var db = data[0];
        var fundAccountBalance = data[1];
        var cashOutAccountBalance = data[2];
        var tdb = db + cashOutAccountBalance + ridersDeathBenefit;

        _DBR("TDB = DB(" + db + ") + cashOutAccountBalance(" + cashOutAccountBalance +
             ") + ridersDeathBenefit(" + ridersDeathBenefit + ")",
             tdb, "eventCalculateDeathBenefit->", runningPolicyValues.months);
             
        // fix issue decimal too large
        return _R5(tdb);
      }
    });*/
    
    // process is Lapse
    if (isUVL) {
      for (var returnType in PublicConstants.FUND_RETURN){
          var isLapse = runningPolicyValues.lapse[returnType];
          if (isLapse == 'Y') {
            totalDeathBenefits[returnType] = 0;
            //totalProtections[returnType] = 0;
          }
      }
    }
    
    // var totalProtections = {};
    // for(var i in totalDeathBenefits) {
    //     totalProtections[i] = Math.max(0, totalDeathBenefits[i] - fundBalances[i]);
    // }
    
    // var totalProtections = IDataDrivenCalculator.appliedTo(narCalc).call("calculate", {
    //   calculateBlock: function(data) {
    //     var db = data[0];
    //     var fundAccountBalance = data[1];
    //     var cashOutAccountBalance = data[2];
    //     var tp = db - fundAccountBalance + cashOutAccountBalance + ridersDeathBenefit;
        
    //     _DBR("TP = DB(" + db + ") - fundBalance(" + fundAccountBalance + 
    //          ") + cashOutAccountBalance(" + cashOutAccountBalance + 
    //          ") + ridersDeathBenefit(" + ridersDeathBenefit + ")", 
    //          tp, "eventCalculateDeathBenefit->", runningPolicyValues.months);
    //     return tp;
    //   }
    // });
    
    _DBR("totalDeathBenefits", totalDeathBenefits, ">>>>>", runningPolicyValues.months);
    //_DBR("totalProtections", totalProtections, ">>>>>", runningPolicyValues.months);
    
    runningPolicyValues['totalDeathBenefits'] = totalDeathBenefits;
    //runningPolicyValues['totalProtections'] = totalProtections;
}
});
var eventCalcTradCoreAccumulateBasePremiums = Class.define({
   eventName: function(args) {
    return "eventCalcTradCoreAccumulateBasePremiums";
},
   shouldBeRun: function(args) {
    var context = args["context"];
    return true;
},
   run: function(args) {
    var context = args["context"];
    var running = context.runningPolicyValues;
    running.accBasePlanPremiums += running.totalPremiums - running.riderPremiums;
    return;
}
});
var eventCalcTradPlanCashValue = Class.define({
   eventName: function(args) {
    return "Calculate Trad Plan Cash Value";
},
   shouldBeRun: function(args) {
    var context = args["context"];
    return true;
},
   run: function(args) {
    var context = args["context"];
    
    var running = context.runningPolicyValues;
    var proposal = context.proposal;
    var basePlan = proposal.coverageInfo;
    
    var csv = this.self.calcCashValue( {coverage:basePlan, args:args} )
    running.cashValue = csv;
    
    return;
},
   calcCashValue: function(args) {
    var coverage = args['coverage'];
    var args2 = args.args;
    var banding = coverage.banding;
    var type = SchemaConstants.POLICY_VALUE.CASHVALUE;
    var productId = coverage.product.productKey.primaryProduct.productPK.productId;
    var context = args2.context;
    var year = context.runningPolicyValues.year;
    
    var bp = coverage.schema.call("calculateBenefitPeriod", {coverage:coverage});
    var catalog = coverage.catalog.call('getCatalog');
    var hasDeathBenefit = Utils.matchInList("HasDeathBenefit", catalog.ProductCatalog.ProductType.ProductTypeCode, false);
    var term = Utils.matchInList("Term", catalog.ProductCatalog.ProductType.ProductTypeCode, false);
    if(hasDeathBenefit && term){
        if(year >= bp - 1)
            return 0;
     }else if(year >= bp){
      return 0;   
     }
    // if (year >= bp) {
    //     return 0;
    // }
    if (Utils.isNothing(banding)) {
        _DBR(">>>> Banding (" + type + ") cannot be found.", "(" + productId + ")", "", args2.context.runningPolicyValues.months);
        return 0;
    }
    
    var band = _V( banding.Band );
    _DBR(">>>> banding (" + productId + ")", band, "", args2.context.runningPolicyValues.months);

    var policyValueRec = coverage.schema.call('matchPolicyValueInfoRecord', {coverage:coverage, banding:band, policyValueType:type});
    if (Utils.isNothing(policyValueRec)) {
        _DBR(">>>> Cannot lookup (" + type + ") record.", "(" + productId + ")", "", args2.context.runningPolicyValues.months);
        return 0;
    }
    
    var method = _V( policyValueRec.method, "CVM01" );
    var funcName = "CalcEventCashValue" + method;
    
    _DBR(">>>> funcName (" + productId + ")", funcName, "", args2.context.runningPolicyValues.months);
    
    var funcManager = Repository.getManager(SystemComponents.MANAGER.FUNCTION_MANAGER);
    var result = funcManager.call("execute", {function:funcName, args:args});

    _DBR(">>>> result (" + productId + ")", result, "", args2.context.runningPolicyValues.months);

    if (Utils.isNothing(result.errors)) {
        return result.value;
    } else {
        throw result.errors;    
    }
}
});
var eventCalcTradPlanCIBenefit_ENCXXX = Class.define({
   eventName: function(args) {
    return "Calculate Trad Plan CI Benefit (ENCXXX)";
},
   shouldBeRun: function(args) {
    var context = args["context"];
    var running = context.runningPolicyValues;
    var insured = getPrimaryInsured( {coverage: context.proposal.coverageInfo} );
    return (( insured.insuredAge + running.year + 1 ) <= this.self.getMaxCIBenefitAge(args));
},
   run: function(args) {
    var context = args["context"];
    var running = context.runningPolicyValues;
    var proposal = context.proposal;
    var basePlan = proposal.coverageInfo;
    var year = running.year;
    var productId = basePlan.product.productKey.primaryProduct.productPK.productId;
    
    var lienRates = context.rates[productId][SchemaConstants.POLICY_VALUE.PROTECTION];
    var lienRate = 1;
    if (year < lienRates.rates.length)
      lienRate = lienRates.rates[year];

    var ciBenefit = basePlan.faceAmount * 1.25 * lienRate;
    //Gender CI Benefit
    var genderCiBenefit = basePlan.faceAmount * this.self.getPerMillePremium(args).gender * lienRate;
    //Late CI Benefit
    var lateCiBenefit = basePlan.faceAmount * this.self.getPerMillePremium(args).late * lienRate;
    //Early and mediate CI Benefit
    if(lateCiBenefit < this.self.getMaxCIBenefitPremium(args)){
        running.emCiBenefit = lateCiBenefit + lateCiBenefit;
    }else{
        running.emCiBenefit = this.self.getMaxCIBenefitPremium(args) * 2;
    }

    running.ciBenefit = ciBenefit;
    running.genderCiBenefit = genderCiBenefit;
    running.lateCiBenefit = lateCiBenefit;
    
    return;
},
   getMaxCIBenefitAge: function(args) {
    return 75;
},
   getPerMillePremium: function(args) {
    return {"gender": 0.25, "late": 1.0 };
},
   getMaxCIBenefitPremium: function(args) {
    return 2000000;
}
});
var eventCalcTradPlanCoupon_ENCXXX = Class.define({
   eventName: function(args) {
    return "Calculate Trad Plan Coupon (ENCXXX)";
},
   shouldBeRun: function(args) {
    var context = args["context"];
    var running = context.runningPolicyValues;
    var insured = getPrimaryInsured( {coverage: context.proposal.coverageInfo} );
    var targetBonusReleaseYear = this.self.getTargetBonusReleaseYear(args);
    var minBonusReleasePeriod = this.self.getMinBonusReleasePeriod(args);

    if (targetBonusReleaseYear - insured.insuredAge > minBonusReleasePeriod){
        return (running.year + 1) == targetBonusReleaseYear - insured.insuredAge ;
    }
    return (running.year + 1) == minBonusReleasePeriod;
},
   run: function(args) {
    var context = args["context"];
    var running = context.runningPolicyValues;
    running.coupon = context.proposal.coverageInfo.faceAmount;
    return;
},
   getTargetBonusReleaseYear: function(args) {
    return 75; //we will define later
},
   getMinBonusReleasePeriod: function(args) {
    return 20; //we will define later
}
});
var eventCalcTradPlanDividends = Class.define({
   eventName: function(args) {
    return "Calculate Trad Plan Dividends";
},
   shouldBeRun: function(args) {
    var context = args["context"];
    return true;
},
   run: function(args) {
    var context = args["context"];
    var running = context.runningPolicyValues;
    var proposal = context.proposal;
    var basePlan = proposal.coverageInfo;
    var productId = basePlan.product.productKey.primaryProduct.productPK.productId;
    var dividendRates = context.rates[productId][SchemaConstants.POLICY_VALUE.DIVIDEND];
    var schema = basePlan.schema.call("getSchema");
    var dividendSharing = Number(_V( schema.ProductSchema.BasicParticular.DividendSharing, 0));
    //_DBR("csvRates", csvRates, "eventCalculateTradPlanCashValue->", running.months)
    // var dividendRate = _R(dividendRates.rates[running.year],2);
    // var dividend = _R(_R((basePlan.faceAmount * dividendRate / 1000),0) * this.self.getDividendSharing(args),0);
    var dividendRate = _R(dividendRates.rates[running.year],2);
    var dividends = (dividendRate * basePlan.faceAmount/ 1000);
    dividends = Math.round((dividends) * 1e7) / 1e7;
    var dividend = _R(_R(dividends,0) * dividendSharing,0);
    
    running.dividends = dividend;
    return;
}
});
var eventCalcTradPlanDividends_EDX = Class.define({
   eventName: function(args) {
    return "Calculate Trad Plan Dividends EDX";
},
   shouldBeRun: function(args) {
    var context = args["context"];
    return true;
},
   run: function(args) {
    var context = args["context"];
    var running = context.runningPolicyValues;
    running.dividends = this.self.calculate(args);
    return;
},
   getSecondInsuredDividendRates: function(args) {
    var context = args["context"];
    var proposal = context.proposal;
    var basePlan = proposal.coverageInfo;
    var productId = basePlan.product.productKey.primaryProduct.productPK.productId;
    var secondInsuredId = basePlan.parties.secondInsured.insuredId;

    if (Utils.isNothing(context.rates[productId][secondInsuredId])){
      context.rates[productId][secondInsuredId] = {};
    }

    if (Utils.isNothing(context.rates[productId][secondInsuredId][SchemaConstants.POLICY_VALUE.DIVIDEND])){
        var funcManager = Repository.getManager(SystemComponents.MANAGER.FUNCTION_MANAGER);
        var secondInsuredRate = funcManager.call('execute', {
            function: 'GetSecondInsuredRates',
                args: {
                    coverage: basePlan,
                rateType: RateConstants.RATETYPE.DIVIDEND
            }
        });

        context.rates[productId][secondInsuredId][SchemaConstants.POLICY_VALUE.DIVIDEND] = secondInsuredRate;
    }
    

    return context.rates[productId][secondInsuredId][SchemaConstants.POLICY_VALUE.DIVIDEND];
},
   getDividendSharing: function(args) {
    return 1.00;
},
   calculate: function(args) {
    var context = args["context"];
    var running = context.runningPolicyValues;
    var proposal = context.proposal;
    var basePlan = proposal.coverageInfo;

    var dividendRates = this.self.getSecondInsuredDividendRates(args);
    var dividendRate = _R(dividendRates.rates[running.year], 2);
    var dividends = _R((Math.round((dividendRate * basePlan.faceAmount/ 1000) * 1e7) / 1e7),0);

    return _R(dividends * this.self.getDividendSharing(args), 0);
}
});
var eventCalcTradPlanDividendsHIGH = Class.define({
   eventName: function(args) {
    return "Calculate Trad Plan Dividends (HIGH)";
},
   shouldBeRun: function(args) {
    var context = args["context"];
    return true;
},
   run: function(args) {
    var context = args["context"];
    var running = context.runningPolicyValues;
    running.higherDividends = _R(running.dividends * 1.20, 0)
    return;
}
});
var eventCalcTradPlanDividendsHIGH_EDX = Class.define({
   eventName: function(args) {
    return "eventCalcTradPlanDividendsHIGH_EDX";
},
   shouldBeRun: function(args) {
    var context = args["context"];
    return true;
},
   run: function(args) {
    var context = args["context"];
    var running = context.runningPolicyValues;
    running.higherDividends  = _R(running.dividends * 1.2, 0)
    return;
}
});
var eventCalcTradPlanDividendsLOW = Class.define({
   eventName: function(args) {
    return "Calculate Trad Plan Dividends (LOW)";
},
   shouldBeRun: function(args) {
    var context = args["context"];
    return true;
},
   run: function(args) {
    var context = args["context"];
    var running = context.runningPolicyValues;
    running.lowerDividends  = _R(running.dividends * 0.8, 0)
    return;
}
});
var eventCalcTradPlanDividendsLOW_EDX = Class.define({
   eventName: function(args) {
    return "eventCalcTradPlanDividendsLOW_EDX";
},
   shouldBeRun: function(args) {
    var context = args["context"];
    return true;
},
   run: function(args) {
    var context = args["context"];
    var running = context.runningPolicyValues;
    running.lowerDividends  = _R(running.dividends * 0.8, 0)
    return;
}
});
var eventCalcTradPlanGratefulDiv_ENCXXX = Class.define({
   eventName: function(args) {
    return "Calculate Trad Plan Grateful Dividends (ENCXXX)";
},
   shouldBeRun: function(args) {
    var context = args["context"];
    return true;
},
   run: function(args) {
    var context = args["context"];
    var running = context.runningPolicyValues;
    var proposal = context.proposal;
    var basePlan = proposal.coverageInfo;
    var productId = basePlan.product.productKey.primaryProduct.productPK.productId;
    var dividendRates = context.rates[productId][SchemaConstants.POLICY_VALUE.SPECIAL_BONUS];
    var schema = basePlan.schema.call("getSchema");
    var dividendSharing = Number(_V( schema.ProductSchema.BasicParticular.DividendSharing, 0));
    //_DBR("csvRates", csvRates, "eventCalculateTradPlanCashValue->", running.months)
    // var dividendRate = _R(dividendRates.rates[running.year],2);
    // var dividend = _R(_R((basePlan.faceAmount * dividendRate / 1000),0) * this.self.getDividendSharing(args),0);
    var dividendRate = _R(dividendRates.rates[running.year],2);
    var dividends = (dividendRate * basePlan.faceAmount/ 1000);
    dividends = Math.round((dividends) * 1e7) / 1e7;
    var dividend = _R(_R(dividends,0) * dividendSharing,0);
    
    running.gratefulDividends = dividend;
    return;
}
});
var eventCalcTradPlanGratefulDivHIGH_ENCXXX = Class.define({
   eventName: function(args) {
    return "Calculate Trad Plan Grateful Dividends HIGH (ENCXXX)";
},
   shouldBeRun: function(args) {
    var context = args["context"];
    return true;
},
   run: function(args) {
    var context = args["context"];
    var running = context.runningPolicyValues;
    running.higherGratefulDividends = _R(running.gratefulDividends * 1.20, 0);
    return;
}
});
var eventCalcTradPlanGratefulDivLOW_ENCXXX = Class.define({
   eventName: function(args) {
    return "Calculate Trad Plan Grateful Dividends LOW (ENCXXX)";
},
   shouldBeRun: function(args) {
    var context = args["context"];
    return true;
},
   run: function(args) {
    var context = args["context"];
    var running = context.runningPolicyValues;
    running.lowerGratefulDividends = _R(running.gratefulDividends * 0.8, 0);
    return;
}
});
var eventCalcTradPlanSpecialDividendsHIGH_EDX = Class.define({
   eventName: function(args) {
    return "eventCalcTradPlanSpecialDividendsHIGH_EDX";
},
   shouldBeRun: function(args) {
    var context = args["context"];
    return true;
},
   run: function(args) {
    var context = args["context"];
    var running = context.runningPolicyValues;
    running.higherSpecialDividends  = _R(running.specialDividends * 1.2, 0)
    return;
}
});
var eventCalcTradPlanSpecialDividendsLOW_EDX = Class.define({
   eventName: function(args) {
    return "eventCalcTradPlanSpecialDividendsLOW_EDX";
},
   shouldBeRun: function(args) {
    var context = args["context"];
    return true;
},
   run: function(args) {
    var context = args["context"];
    var running = context.runningPolicyValues;
    running.lowerSpecialDividends  = _R(running.specialDividends * 0.8, 0)
    return;
}
});
var eventCalculateCOR_XXXXX = Class.define({
   eventName: function(args) {
    return "Calculate COR of Riders (BPM41)";
},
   shouldBeRun: function(args) {
    var context = args["context"];
    var projectionOptions = context.projectionOptions;
    return (projectionOptions.indexOf("BasePlanWithRiders") >= 0);
},
   run: function(args) {
    var context = args["context"];
    var running = context.runningPolicyValues;
    var month = running.months % 12;
    var months = running.months;
    var year = running.year;
    var proposal = context.proposal;

    var cor = {};
    for (var returnType in PublicConstants.FUND_RETURN) {
        cor[returnType] = {};
        for (run = 0; run < 2; run++) {
            for (var riderIdx in proposal.riders.coverageInfo) {
                var rider = proposal.riders.coverageInfo[riderIdx];
                var schema = rider.schema.call("getSchema", {});
    
                var isBenefit = rider.catalog.call("isBenefit", {});
                if ((run == 0 && !isBenefit) || (run == 1 && isBenefit)) {
                    // when run == 0, all riders will be calculated first
                    // when run == 1, only benefit riders will be calculated
                    for (var idx in schema.ProductSchema.PremiumInfo.PremiumTable) {
                        var premInfo = schema.ProductSchema.PremiumInfo.PremiumTable[idx];
                        if (premInfo.PremiumType.text == SchemaConstants.PREMIUM_TYPE.COSTOFINSURANCE) {
                            //if (months == 0 && returnType == PublicConstants.FUND_RETURN.LOW) {
                            //    _SS(premInfo, 5);
                            //}
                            var thisMethod = this.self.calculateMethod({
                                    context: context,
                                    rider: rider
                                });

                            //_DBR("premiumInfo", premInfo.Method.text, "", months);
                            //_DBR("thisMethod", thisMethod, "", months);
                            if (premInfo.Method.text == thisMethod) {
                                var riderId = schema.ProductSchema.ProductSchemaPK.ProductPK.ProductId.text;
                                var shouldPay = this.self.shouldPayCOR({
                                    context: context,
                                    rider: rider,
                                    returnType: returnType
                                }); 
                                _DBR( riderId + ".shouldPay", shouldPay, "eventCalculateCOR_XXXXX", months );
                                var corValue = 0;
                                if (shouldPay) {
                                    var corValue = this.self.calculateMonthlyCOR({
                                        context: context,
                                        rider: rider,
                                        returnType: returnType
                                    });
                                }
                                
                                //cor[returnType][schema.ProductSchema.ProductSchemaPK.ProductPK.ProductId.text] = corValue;

                                // Fix issue duplicate riders
                                var corId = schema.ProductSchema.ProductSchemaPK.ProductPK.ProductId.text + '_' + rider.coverageId;
                                cor[returnType][corId] = corValue;

                            }
                            break;
                        }
                    }
                }
            }
        }
    }

    for(var returnType in PublicConstants.FUND_RETURN) {
        for(var riderProductId in cor[returnType]) {
            running['cors'][returnType] += cor[returnType][riderProductId];
        }
    }

    //running['cors']
    running['corsDetails'] = cor;
 
    var showValue = proposal.enableDebug;
    if ( showValue && year < proposal.startDebugYear ) {
        showValue = false;
    }
    if ( showValue && year > proposal.stopDebugYear ) {
        showValue = false;
    }
    if (showValue) {
        console.log("[  CORs by Product  ]");  
        _SS(cor, 5);
        console.log("[  Total CORs  ]");  
        _SS(running['cors'], 5);
    }
    return;
},
   calculateMonthlyCOR: function(args) {
   // to be overrided by child class
   //
   var context = args['context'];
   var running = context.runningPolicyValues;
   var rider = args['rider'];
   var rates = context['rates'];
   var riderProductId = rider.product.productKey.primaryProduct.productPK.productId;
   var year = running.year;

   return 0.0;
},
   calculateMethod: function(args) {
    // calculation method e.g. COR01
    return "XXXXX";
},
   shouldPayCOR: function(args) {
    var context = args['context'];
    var running = context.runningPolicyValues;
    var rider = args['rider'];
    var returnType = args['returnType'];
    
    var year = context.runningPolicyValues.year;
    var months = context.runningPolicyValues.months;
    var proposal = context.proposal;

    var ppp = rider.schema.call('calculatePremiumPayingPeriod', { coverage: rider, debug: (proposal.startDebugYear <= year && year <= proposal.stopDebugYear) });
    var lapse = running.lapse[returnType];
    
    _DBR("ppp", ppp, "eventCalculateCOR_XXXXX.shouldPayCOR", months);
    _DBR("year", year, "eventCalculateCOR_XXXXX.shouldPayCOR", months);
    _DBR("year < ppp",(year < ppp), "eventCalculateCOR_XXXXX.shouldPayCOR", months);
    return (year < ppp) && (lapse != 'Y');
}
});
var eventCalculateTradPlanAccumulateDividends = Class.define({
   eventName: function(args) {
    return "Calculate Trad Plan Accumulate Dividends";
},
   shouldBeRun: function(args) {
    var context = args["context"];
    return true;
},
   run: function(args) {
    var context = args["context"];
    var running = context.runningPolicyValues;
    
    var dividends = running[ this.self.dividendName(args) ];
    var accDividends = running[ this.self.accDividendName(args) ];
    var intRate = this.self.getIntRate(args);
    
    var accDividendsBf = _R( _R(accDividends * (1 + intRate),7) + dividends, 0);
    running[ this.self.accDividendName(args) ] = accDividendsBf;
    return;
},
   getIntRate: function(args) {
    var context = args["context"];
    var proposal = context.proposal;
    var basePlan = proposal.coverageInfo;
    var schema = basePlan.schema.call("getSchema");
    var intRate = Number(_V( _PV( schema, "ProductSchema.BasicParticular.IntRates." + this.self.dividendIntFieldName(args) ), "0")) / 100;
    return intRate;
},
   dividendName: function(args) {
    return "dividends";
},
   accDividendName: function(args) {
    return "accDividends";
},
   dividendIntFieldName: function(args) {
    return "AODRate";
}
});
var eventCalculateTradPlanAccumulateDividends_EDX = Class.define({
   eventName: function(args) {
    return "eventCalculateTradPlanAccumulateDividends_EDX";
},
   shouldBeRun: function(args) {
    var context = args["context"];
    return true;
},
   run: function(args) {
    var context = args["context"];
    var running = context.runningPolicyValues;
     
    var dividends = running[ this.self.dividendName(args) ];
    var accDividends = running[ this.self.accDividendName(args) ];
    var intRate = this.self.getIntRate(args);
     
    var accDividendsBf = _R( _R(accDividends * (1 + intRate),7) + dividends, 0);
    running[ this.self.accDividendName(args) ] = accDividendsBf;
    return;
},
   getIntRate: function(args) {
    var context = args["context"];
    var proposal = context.proposal;
    var basePlan = proposal.coverageInfo;
    var schema = basePlan.schema.call("getSchema");
    var intRate = Number(_V( _PV( schema, "ProductSchema.BasicParticular.IntRates." + this.self.dividendIntFieldName(args) ), "0")) / 100;
    return intRate;
},
   dividendName: function(args) {
    return "dividends";
},
   accDividendName: function(args) {
    return "accDividends";
},
   dividendIntFieldName: function(args) {
    return "AODRate";
}
});
var eventDeductCOR = Class.define({
   eventName: function(args) {
    return "Deduct CORs from fund";
},
   shouldBeRun: function(args) {
    var context = args["context"];
    return true;
},
   run: function(args) {
    var context = args["context"];
    var proposal = context.proposal;
    var runningPolicyValues = context.runningPolicyValues;

    var fundBalances = IFund.appliedTo(runningPolicyValues.fundPool).call("fundBalances", {});
    var cors = {};
    for( corIdx in runningPolicyValues.cors ) {
        if (runningPolicyValues.lapse[corIdx] == 'Y') {
            cors[corIdx] = 0;
        } else {
            cors[corIdx] = Math.min(fundBalances[corIdx], runningPolicyValues.cors[corIdx]);
        }
    }

    IFund.appliedTo(runningPolicyValues.fundPool).call("withdraw", {
        amounts: cors
    });

}
});
var eventDeductMonthlyPolicyFeeUL007 = Class.define({
   eventName: function(args) {
    return "Deduct Monthly Policy Fee (UL007)";
},
   shouldBeRun: function(args) {
    var context = args["context"];
    return true;
},
   run: function(args) {
    var context = args["context"];
    var runningPolicyValues = context.runningPolicyValues;

    var policyFees = runningPolicyValues['policyFees'];

    // ATP-488
    // #1 - comment out this code - it seem raise issue gap data
    // var fee = policyFees[ PublicConstants.FUND_RETURN.HIGH ];

    // ATP-488  Replace this code for #1 for fixing issue gap data
    var fee = policyFees[PublicConstants.FUND_RETURN.LOW];

    var fees = {};
    
    var proposal = context.proposal;
    var basePlan = proposal.coverageInfo;
    var isUVL = basePlan.catalog.call("isUVL");
    var isRegularSaving = basePlan.catalog.call("isRegularSaving");
    if (isUVL && !isRegularSaving) {
        var topupBalance = IFund.appliedTo(runningPolicyValues.topupFundPool).call("fundBalances", {});
        var topupFees = { LOW: 0, MEDIUM: 0, HIGH: 0 };
    }
    
    var fundBalances = IFund.appliedTo(runningPolicyValues.fundPool).call("fundBalances", {});
    var cashOutBalances = IFund.appliedTo(runningPolicyValues.cashoutAccount).call("fundBalances", {});
    for(fundIdx in fundBalances) {
        var balance = fundBalances[fundIdx] + cashOutBalances[fundIdx];
        if (runningPolicyValues.lapse[fundIdx] == 'Y') {
            fees[fundIdx] = 0;
        } else {
            fees[fundIdx] = Math.min( policyFees[fundIdx], balance );
        }
        
        if (isUVL && !isRegularSaving) {
            if (runningPolicyValues.lapse[fundIdx] == 'Y') {
                fees[fundIdx] = 0;
                topupFees[fundIdx]  = 0;
            } else {
                fees[fundIdx] = Math.min(policyFees[fundIdx], _R2(runningPolicyValues.previousFundPool[fundIdx] - runningPolicyValues.cois[fundIdx]));
                topupFees[fundIdx] = policyFees[fundIdx] - fees[fundIdx];
            }
        }
    }
    
    if (isUVL && !isRegularSaving) {
      runningPolicyValues.isCalculatingPolicyFeeRUVXX = true;
    }

    IFund.appliedTo(runningPolicyValues.fundPool).call("withdraw", {
         amounts: fees
    });
    
    if (isUVL && !isRegularSaving) {
        runningPolicyValues.isCalculatingPolicyFeeRUVXX = true;
        runningPolicyValues.isCalculatingTopupRUVXX = true;
        IFund.appliedTo(runningPolicyValues.topupFundPool).call("withdraw", {
            amounts: topupFees
        });
    }

    /*
    * ATP-500
    * Calculate policy fee for each year.
    * Summary 12 months of policy fee and reset policy fee when month is 0
    */
    // runningPolicyValues['policyFee'] += fee;
    if (isUVL && isRegularSaving) {
        runningPolicyValues['policyFee'] += fee;
    } else if (isUVL && !isRegularSaving) {
        runningPolicyValues['policyFee'] += (fees.HIGH + topupFees.HIGH);
    }
}
});
var eventDeductTopupWithdrawalRUVXX = Class.define({
   eventName: function(args) {
    return "Deduct topup withdrawal from accounts (RUVXX)";
},
   shouldBeRun: function(args) {
    var context = args['context'];
    var shouldRun = (context.policyOptions.indexOf("FundActivitiesOption") >= 0);
    var running = context.runningPolicyValues;

    for(var idx in PublicConstants.FUND_RETURN) {
        shouldRun = (shouldRun || running.lapse[idx] == "N");
    }

    return shouldRun;
},
   run: function(args) {
    var context = args["context"];
    var metadata = context.events.metadata;
    var proposal = context.proposal;
    var basePlan = proposal.coverageInfo;
    var primary = getPrimaryInsured({
        coverage: basePlan
    });

    var runningPolicyValues = context.runningPolicyValues;
    var year = context.runningPolicyValues.year;
    var months = context.runningPolicyValues.months;
    var month = context.runningPolicyValues.months % 12;

    var withdrawalAmount;
    var totalWithdrawal;
    if (!Utils.isNothing(proposal.fundActivities) && !Utils.isNothing(proposal.fundActivities.fundActivity)) {
        var activities = Utils.iterator(proposal.fundActivities.fundActivity);
        //var parties = Utils.iterator(basePlan.parties.party);
        for (var idx in activities) {
            var activity = activities[idx];
            if (Number(activity.topupWithdrawal) > Number(0) && Number(activity.attainAge) == (Number(primary.insuredAge) + Number(year)) && (month == 11)) {
                var result = this.self.calcWithdrawalAmounts({
                    withdrawal: activity.topupWithdrawal,
                    year: year
                 });
                withdrawalAmount = result.withdrawalAmount;
                totalWithdrawal = result.totalWithdrawal;
                runningPolicyValues.topupWithdrawalNoCharge = totalWithdrawal;
                //totalWithdrawal = activity.topupWithdrawal; // if undefined, no withdrawal will be done.
                break;
            }
        }
    }
    runningPolicyValues.topupFundBalancesBeforeWithdrawal = null;
    if (totalWithdrawal) {
        //Keep topup funds before withdrawal to calculate max withdrawal
        runningPolicyValues.topupFundBalancesBeforeWithdrawal = {};
        var topupFundPool = runningPolicyValues.topupFundPool.self.context.fundPools;
        for(var fundCode in topupFundPool) {
            for(var fundReturn in PublicConstants.FUND_RETURN){
                if(Utils.isNothing(runningPolicyValues.topupFundBalancesBeforeWithdrawal[fundCode])){
                    runningPolicyValues.topupFundBalancesBeforeWithdrawal[fundCode] = {};
                }
                runningPolicyValues.topupFundBalancesBeforeWithdrawal[fundCode][fundReturn] = IFund.appliedTo(topupFundPool[fundCode]).call('fundBalances')[fundReturn];
            }
        }
        var withdrawals = {};
        withdrawals[PublicConstants.FUND_RETURN.LOW] = totalWithdrawal;
        withdrawals[PublicConstants.FUND_RETURN.HIGH] = totalWithdrawal;
        withdrawals[PublicConstants.FUND_RETURN.MEDIUM] = totalWithdrawal;
        runningPolicyValues.topupWithdrawal = totalWithdrawal;
        runningPolicyValues.totalWithdrawal += totalWithdrawal;
        IFund.appliedTo(runningPolicyValues.topupFundPool).call("withdraw", {
            amounts: withdrawals
        });
    } else {
        runningPolicyValues.topupWithdrawal = 0;
    }
},
   getPartialWithdrawSurcharges: function(args) {
    return 0;
},
   calcWithdrawalAmounts: function(args) {
    var year = args['year'];
    var withdrawal = args['withdrawal'];    
    var partialWithdrawalSurcharge = this.self.getPartialWithdrawSurcharges({year: year});
    var partialWithdrawal = _R2(withdrawal * (1 + partialWithdrawalSurcharge));
    var partialWithdrawalCharge = partialWithdrawal - withdrawal;
    return {withdrawalAmount: withdrawal, totalWithdrawal: partialWithdrawal};
}
});
var eventDeductWithdrawalUL007 = Class.define({
   eventName: function(args) {
    return "Deduct withdrawal from accounts (UL007)";
},
   shouldBeRun: function(args) {
    var context = args['context'];
    var shouldRun = (context.policyOptions.indexOf("FundActivitiesOption") >= 0);
    var running = context.runningPolicyValues;

    for(var idx in PublicConstants.FUND_RETURN) {
        shouldRun = (shouldRun || running.lapse[idx] == "N");
    }

    return shouldRun;
},
   run: function(args) {
    var context = args["context"];
    var metadata = context.events.metadata;
    var proposal = context.proposal;
    var basePlan = proposal.coverageInfo;
    var primary = getPrimaryInsured({
        coverage: basePlan
    });

    var runningPolicyValues = context.runningPolicyValues;
    var year = context.runningPolicyValues.year;
    var months = context.runningPolicyValues.months;
    var month = context.runningPolicyValues.months % 12;

    var withdrawalAmount;
    var totalWithdrawal;
    if (!Utils.isNothing(proposal.fundActivities) && !Utils.isNothing(proposal.fundActivities.fundActivity)) {
        var activities = Utils.iterator(proposal.fundActivities.fundActivity);
        //var parties = Utils.iterator(basePlan.parties.party);
        for (var idx in activities) {
            var activity = activities[idx];
            if (Number(activity.withdrawal) > Number(0) && Number(activity.attainAge) == (Number(primary.insuredAge) + Number(year)) && (month == 11)) {
                var result = this.self.calcWithdrawalAmounts({
                   withdrawal: activity.withdrawal,
                   year: year
                });
                withdrawalAmount = result.withdrawalAmount;
                totalWithdrawal = result.totalWithdrawal;
                runningPolicyValues.withdrawalNoCharge = totalWithdrawal;
                
                var isUVL = basePlan.catalog.call("isUVL");
                var isRegularSaving = basePlan.catalog.call("isRegularSaving");
                if (isUVL && isRegularSaving) {
                    for(var i in PublicConstants.FUND_RETURN) {
                        if (totalWithdrawal > runningPolicyValues.maxWithdrawal[i]) {
                            runningPolicyValues.withdrawalOverMaximum[i] = true;
                        }
                    }
                } else if (isUVL && !isRegularSaving) {
                    runningPolicyValues.withdrawalNoCharge = withdrawalAmount;
                    for(var i in PublicConstants.FUND_RETURN) {
                        runningPolicyValues.partialWithdrawalCharge = totalWithdrawal - withdrawalAmount;
                    }
                }
                
                break;
            }
        }
    }
    if (totalWithdrawal) {
        var withdrawals = this.self.checkMaximumWithdrawal({args: args, withdrawalAmount: withdrawalAmount, totalWithdrawal: totalWithdrawal});
        _DBR("run.withdrawals", withdrawals, "eventDeductWithdrawalUL007->", months);
        this.self.reduceFaceAmount({args: args, withdrawals: withdrawals, withdrawalAmount: withdrawalAmount, totalWithdrawal: totalWithdrawal});
        this.self.processWithdrawal({args: args, withdrawals: withdrawals, withdrawalAmount: withdrawalAmount, totalWithdrawal: totalWithdrawal});
    } else {
        runningPolicyValues.withdrawal = 0;
        runningPolicyValues.withdrawalNoCharge = 0;
        //runningPolicyValues.totalWithdrawal = 0;
    }
},
   getPartialWithdrawSurcharges: function(args) {
    var year = args['year'];
    var rate = [0, 0.2, 0.2, 0.18, 0.18, 0.1, 0.08, 0.06];
    if (rate.length > year) 
        return rate[year]; 
    else 
        return 0;
},
   maxWithdrawal: function(args) {
    var returnType = args['returnType'];
    var context = args['context'];
    var minFA = args['minFA'];
    
    var fa = context.runningPolicyValues.faceAmount[returnType];
    var sv = context.runningPolicyValues.surrenderValueBeforeWithdrawal[returnType];
    var maxWD = Math.min(fa - minFA, sv * 0.8);
    return maxWD;
},
   setErrorCode: function(args) {
    var dbLevel = args["dbLevel"];
    if(dbLevel == SchemaConstants.DB_OPTION.LEVEL) {
        return "ERR09008,";
    }
    return "ERR09008B,";
},
   calcWithdrawalAmounts: function(args) {
    var year = args['year'];
    var withdrawal = args['withdrawal'];
    
    var partialWithdrawalSurcharge = this.self.getPartialWithdrawSurcharges({year: year});
    var partialWithdrawal = _R2(withdrawal * (1 / (1 + partialWithdrawalSurcharge)));
    var partialWithdrawalCharge = withdrawal - partialWithdrawal;

    //withdrawalAmount = partialWithdrawal;
    //totalWithdrawal = activity.withdrawal;
    return {withdrawalAmount: partialWithdrawal, totalWithdrawal: withdrawal}
},
   checkMaximumWithdrawal: function(args) {
    var args2 = args.args;
    var totalWithdrawal = args.totalWithdrawal;

    var context = args2.context;
    var runningPolicyValues = context.runningPolicyValues;
    var months = runningPolicyValues.months;
    var basePlan = context.proposal.coverageInfo;
    
    var withdrawals = {};
    var maxWDs = runningPolicyValues.maxWithdrawal;
    var avLowEqualZero = false;
    for(var i in maxWDs) {
        _DBR("run.maxWDs.i", i, "eventDeductWithdrawalUL007->", months);
        var maxWD = maxWDs[i];
        _DBR("run.maxWD", maxWD, "eventDeductWithdrawalUL007->", months);
        withdrawals[i] = totalWithdrawal;
        if(i == "LOW"){
            if(runningPolicyValues.avBeforeBonusAndWithdrawal[i] == 0){
                avLowEqualZero = true;
            }
        }
        if (maxWD < totalWithdrawal) {
            if((avLowEqualZero && i != "LOW") || !avLowEqualZero) {
                var errorCode  = this.self.setErrorCode({"dbLevel": basePlan.options.dbLevel});
                runningPolicyValues.error[i] += errorCode;
            } 
        }
    }
    return withdrawals;
},
   processWithdrawal: function(args) {
    var args2 = args.args;
    var withdrawals = args.withdrawals;
    var totalWithdrawal = args.totalWithdrawal;
    var withdrawalAmount = args.withdrawalAmount;

    var context = args2.context;
    var runningPolicyValues = context.runningPolicyValues;
    var months = runningPolicyValues.months;
    var basePlan = context.proposal.coverageInfo;

    if (withdrawalAmount) {
        runningPolicyValues.withdrawal = runningPolicyValues.withdrawal + withdrawalAmount;
    }
    // runningPolicyValues.withdrawalNoCharge = totalWithdrawal;
    runningPolicyValues.totalWithdrawal += totalWithdrawal;
    IFund.appliedTo(runningPolicyValues.fundPool).call("withdraw", {
        amounts: withdrawals
    });
},
   reduceFaceAmount: function(args) {
    var args2 = args.args;
    var withdrawals = args.withdrawals;
    var totalWithdrawal = args.totalWithdrawal;
    var withdrawalAmount = args.withdrawalAmount;

    var context = args2.context;
    var runningPolicyValues = context.runningPolicyValues;
    var months = runningPolicyValues.months;
    var basePlan = context.proposal.coverageInfo;

    if (basePlan.options.dbLevel == SchemaConstants.DB_OPTION.LEVEL) {
        // level DB
        var fundBalances = IFund.appliedTo(runningPolicyValues.fundPool).call("fundBalances", {});
        for(var fi in fundBalances) {
            if (context.runningPolicyValues.lapse[fi] === 'N') {
                var fb = fundBalances[fi];
                
                var faceAmount = context.runningPolicyValues.faceAmount[fi];
                var newFaceAmount = faceAmount;
                if (faceAmount >= fb) {
                    newFaceAmount = faceAmount - totalWithdrawal;
                } else {
                    newFaceAmount = Math.min(faceAmount, fb - totalWithdrawal);
                }
                
                context.runningPolicyValues.faceAmount[fi] = newFaceAmount;
            }
        }
    }
}
});
var eventDumpinFundBonusUL007 = Class.define({
   eventName: function(args) {
    return "Dump in Fund Bonus (UL007)";
},
   shouldBeRun: function(args) {
    var context = args["context"];
    var runningPolicyValues = context.runningPolicyValues;
    var year = runningPolicyValues.year;
    var month = runningPolicyValues.months % 12;
    
    return (year >= 4 && month == 11);
},
   run: function(args) {
    var context = args["context"];
    var running = context.runningPolicyValues;
    var fundBonus = running.fundBonus;
    IFund.appliedTo(running.fundPool).call("dumpin", {
        amounts: fundBonus
    });
}
});
var eventDumpinLoyaltyBonusRUVXX = Class.define({
   eventName: function(args) {
    return "eventDumpinLoyaltyBonusRUVXX";
},
   shouldBeRun: function(args) {
    var context = args["context"];
    var month = context.runningPolicyValues.months % 12;
    return (month === 11);
},
   run: function(args) {
    var context = args["context"];
    var loyalBonus = context.runningPolicyValues.loyalBonus;
    var fundPool = context.runningPolicyValues.fundPool;
    IFund.appliedTo(fundPool).call("dumpin", {amounts: loyalBonus});
    
    // Support for validation
    var bavAfterBonusAndBeforeWithdrawalCalc = DataDrivenCalculatorImpl.create({
        drivenKeys: PublicConstants.FUND_RETURN,
        drivenDatas: [context.runningPolicyValues.bavBeforeBonusAndWithdrawal, context.runningPolicyValues.loyalBonus],
      });
      var bavAfterBonusAndBeforeWithdrawal = IDataDrivenCalculator.appliedTo(bavAfterBonusAndBeforeWithdrawalCalc).call("calculate", {
        calculateBlock: function (args) {
          var result = args[0] + args[1];
          return result;
        }
      });

    context.runningPolicyValues.bavAfterBonusAndBeforeWithdrawal = bavAfterBonusAndBeforeWithdrawal;
    return;
}
});
var eventDumpinSpecialBonusRUVXX = Class.define({
   eventName: function(args) {
    return "eventDumpinSpecialBonusRUVXX";
},
   shouldBeRun: function(args) {
    var context = args["context"];
    var month = context.runningPolicyValues.months % 12;
    return (month === 11);
},
   run: function(args) {
    var context = args["context"];
    var specialBonus = context.runningPolicyValues.specialBonus;
    var topupFundPool = context.runningPolicyValues.topupFundPool;
    IFund.appliedTo(topupFundPool).call("dumpin", {amounts: specialBonus});
    
    // Support for validation
    var tavAfterBonusAndBeforeWithdrawalCalc = DataDrivenCalculatorImpl.create({
        drivenKeys: PublicConstants.FUND_RETURN,
        drivenDatas: [context.runningPolicyValues.tavBeforeBonusAndWithdrawal, context.runningPolicyValues.specialBonus],
      });
      var tavAfterBonusAndBeforeWithdrawal = IDataDrivenCalculator.appliedTo(tavAfterBonusAndBeforeWithdrawalCalc).call("calculate", {
        calculateBlock: function (args) {
          var result = args[0] + args[1];
          return result;
        }
      });

    context.runningPolicyValues.tavAfterBonusAndBeforeWithdrawal = tavAfterBonusAndBeforeWithdrawal;
    
    return;
}
});
var eventInitPlannedPremiumByBasePremiumRUVXX = Class.define({
   eventName: function(args) {
    return "eventInitPlannedPremiumByBasePremiumRUVXX";
},
   shouldBeRun: function(args) {
    var context = args["context"];
    return (context.runningPolicyValues.months === 0);
},
   run: function(args) {
    var context = args["context"];
    var running = context.runningPolicyValues;
    var months = context.runningPolicyValues.months;
    var basePlan = context.proposal.coverageInfo;
    if (basePlan.plannedPremium === 0 || Utils.isNothing(basePlan.plannedPremium)) {
        //var payFreq = 1;
        //if (basePlan.options.paymentMode === SchemaConstants.PAYMENT_MODE.ANNUAL) payFreq = 1;
        //if (basePlan.options.paymentMode === SchemaConstants.PAYMENT_MODE.SEMIANNUAL) payFreq = 2;
        //if (basePlan.options.paymentMode === SchemaConstants.PAYMENT_MODE.QUARTERLY) payFreq = 4;
        //if (basePlan.options.paymentMode === SchemaConstants.PAYMENT_MODE.MONTHLY) payFreq = 12;
        
        //_DBR("InitializePlannedPremiumByBasePremiumRUV.payFreq", payFreq, "", months);
        basePlan.plannedPremium = running.basePlanPremiums; //* payFreq;
        running.plannedPremiumAtInception = running.basePlanPremiums;
        running.premiumMultiplier = 1;
        _DBR("InitializePlannedPremiumByBasePremiumRUV.plannedPremium", basePlan.plannedPremium, "", months);
        if (Utils.isNothing(running['contractPlannedPremium'])) {
            running['contractPlannedPremium'] = {};
            for(var i in PublicConstants.FUND_RETURN) {
                running['contractPlannedPremium'][i] = running.plannedPremium[i];
            }
        }
    }
    return;
}
});
var eventReceiveInitialPremiumLocal = Class.define({
   eventName: function(args) {
    return "Receive Initial Premium (Local)";
},
   shouldBeRun: function(args) {
    var context = args["context"];
    return true;
},
   run: function(args) {
    var context = args["context"];

    var metadata = context.events.metadata;
    var proposal = context.proposal;
    var basePlan = proposal.coverageInfo;
    var productId = basePlan.product.productKey.primaryProduct.productPK.productId;
    var runningPolicyValues = context.runningPolicyValues;

    var year = runningPolicyValues.year;
    var months = runningPolicyValues.months;
    var month = months % 12;

    var newPremium = Math.max(0, Number( _V( this.self.newPremiumReceived(args), 0) ));
    var netNewPremium = Math.max(0, Number( _V( this.self.netPremiumReceived({ args: args, newPremium: newPremium }), 0) ));
    
    runningPolicyValues.netPremium = Number(runningPolicyValues.netPremium) + netNewPremium;
    runningPolicyValues.newPremium = Number(runningPolicyValues.newPremium) + newPremium;
    runningPolicyValues.premiumLoad = Number(runningPolicyValues.premiumLoad) + ( newPremium - netNewPremium );
    runningPolicyValues.totalPremiums = Number(runningPolicyValues.totalPremiums) + newPremium;
    runningPolicyValues.modalBasePremium = Math.max(0, Number( _V( this.self.getModalBasePremium(args), 0) ));
    // runningPolicyValues.totalModalBasePremium = Math.max(0, runningPolicyValues.modalBasePremium + Number(this.self.getTotalModalBaseRiderPremium(args)));
    runningPolicyValues.totalModalBasePremium = Math.max(0, Number(_V(this.self.getTotalModalBaseRiderPremium(args), 0)));

    if (netNewPremium > 0) {
        this.self.dumpinPremium({args: args, netNewPremium: netNewPremium});
    }
    
    _DBR("newPremium", runningPolicyValues['newPremium'], "eventReceiveXXXXXPremiumLocal->", runningPolicyValues.months);
    _DBR("netPremium", runningPolicyValues['netPremium'], "eventReceiveXXXXXPremiumLocal->", runningPolicyValues.months);
    _DBR("totalPremiums", runningPolicyValues['totalPremiums'], "eventReceiveXXXXXPremiumLocal->", runningPolicyValues.months);
    _DBR("premiumLoad", runningPolicyValues['premiumLoad'], "eventReceiveXXXXXPremiumLocal->", runningPolicyValues.months);
},
   newPremiumReceived: function(args) {
    var context = args["context"];

    var metadata = context.events.metadata;
    var proposal = context.proposal;
    var basePlan = proposal.coverageInfo;
    var runningPolicyValues = context.runningPolicyValues;
    var months = runningPolicyValues.months;
    var newPremium = 0;

    if (months === 0) {
        if (!Utils.isNothing(basePlan.initialDumpIn)) {
            newPremium = Number(basePlan.initialDumpIn);
        }
        _DBR("initialPremium", newPremium, "eventReceiveXXXXXPremiumLocal->", months);
    }
    
    return newPremium;
},
   netPremiumReceived: function(args) {
    var vargs = args['args'];
    var newPremium = args['newPremium'];

    var context = vargs["context"];

    var metadata = context.events.metadata;
    var proposal = context.proposal;
    var basePlan = proposal.coverageInfo;
    var productId = basePlan.product.productKey.primaryProduct.productPK.productId;
    var runningPolicyValues = context.runningPolicyValues;

    var year = runningPolicyValues.year;
    var months = runningPolicyValues.months;
    //var month = months % 12;

    //var newPremium = this.self.newPremiumReceived(vargs);

    var allocationRate = this.self.lookupAllocationRate(vargs);
    var newPremiumRounding = proposal.coverageInfo.catalog.call("rounding", {
         coverage: basePlan
    });

    //var netNewPremium = Number(Number(newPremium * (1 - allocationRate).toFixed(4)).toFixed(newPremiumRounding));
    var netNewPremium = _R(newPremium * _R4(1 - allocationRate), newPremiumRounding);
    //if (netNewPremium > 0) {
    _DBR("netNewPremium", netNewPremium, "eventReceiveXXXXXPremiumLocal->", months);
    //}
    //runningPolicyValues['netPremium'] += netNewPremium;
    
    // Calculate Premium Load
    // var premiumLoad = Math.max(0, newPremium) * allocationRate;
    // runningPolicyValues['premiumLoad'] += premiumLoad;
    
    return netNewPremium;
},
   lookupAllocationRate: function(args) {
    var context = args["context"];

    var metadata = context.events.metadata;
    var proposal = context.proposal;
    var basePlan = proposal.coverageInfo;
    var productId = basePlan.product.productKey.primaryProduct.productPK.productId;
    var runningPolicyValues = context.runningPolicyValues;

    var year = runningPolicyValues.year;
    var months = runningPolicyValues.months;
    var allocationRate = 1;

    var allocationRates = context.rates[productId][SchemaConstants.PREMIUM_TYPE.ALLOCATION];
    if (!Utils.isNothing(allocationRates)) {
        allocationRate = allocationRates.rates[year];
    }
    _DBR("allocationRate", allocationRate, "eventReceiveXXXXXPremiumLocal->", months);

    return allocationRate;
},
   getFundPool: function(args) {
    var context = args["context"];
    return context.runningPolicyValues.fundPool;
},
   dumpinPremium: function(args) {
    var args2 = args['args'];
    var netNewPremium = args['netNewPremium'];
    
    var context = args2['context'];
    var runningPolicyValues = context.runningPolicyValues;
    
    
    var netNewPremiums = {};
    for(var returnTypeIdx in PublicConstants.FUND_RETURN) {
        var returnType = PublicConstants.FUND_RETURN[returnTypeIdx];

        var isLapse = runningPolicyValues.lapse[returnType];
        if (isLapse == 'Y') {
            netNewPremiums[returnType] = 0;
        } else {
            netNewPremiums[returnType] = netNewPremium;
        }
    }

    _DBR("netNewPremiums", netNewPremiums, "$$$$$ eventReceiveXXXXXXPremiumLocal->", runningPolicyValues.months);

    var fundPool = this.self.getFundPool(args2);
    IFund.appliedTo(fundPool).call("dumpins", {
        amounts: netNewPremiums
    });
},
   getModalBasePremium: function(args) {
    var context = args["context"];
    var proposal = context.proposal;
    var basePlan = proposal.coverageInfo;
    var runningPolicyValues = context.runningPolicyValues;
    var months = runningPolicyValues.months;
    var year = runningPolicyValues.year;
    var month = months % 12;
    var modalBasePremium = _V( runningPolicyValues['modalBasePremium'], basePlan.plannedPremium);

    // Process modal base premium at the first month, and follow up fund activities
    if (month == 0) {
       if (!Utils.isNothing(proposal.fundActivities) && !Utils.isNothing(proposal.fundActivities.fundActivity)) {
           var activities = Utils.iterator(proposal.fundActivities.fundActivity);
           var parties = Utils.iterator(basePlan.parties.party);
           for (var idx in activities) {
               var activity = activities[idx];

               if (Number(activity.attainAge) == Number(parties[0].insuredAge) + Number(year)){

                 // Change planned premium
                 if (!Utils.isNothing(activity.plannedPremium) && Number(activity.plannedPremium) > 0){
                    modalBasePremium = activity.plannedPremium;
                    break;
                 }

                 // No premium value (as limit premium term)
                 else if (!Utils.isNothing(activity.regularPayment) && Number(activity.regularPayment) == 0){
                   modalBasePremium = 0;
                   break;
                 }

                 // Only change regular premium
                 else if (!Utils.isNothing(activity.regularPayment)
                      && Utils.isNothing(activity.plannedPremium)
                      && Number(activity.regularPayment) > 0){
                    modalBasePremium = basePlan.plannedPremium;
                 }
               }
           }
       }
       else {

         // No fund activties
         modalBasePremium = basePlan.plannedPremium;

       }
    }

    return modalBasePremium;
},
   getTotalModalBaseRiderPremium: function(args) {
    // var context = args["context"];
    // var runningPolicyValues = context.runningPolicyValues;
    // var totalModalBaseRiderPremium = runningPolicyValues.totalModalBaseRiderPremium;
    // return totalModalBaseRiderPremium;
    var context = args["context"];
        var proposal = context.proposal;
        var basePlan = proposal.coverageInfo;
        var runningPolicyValues = context.runningPolicyValues;
        var months = runningPolicyValues.months;
        var year = runningPolicyValues.year;
        var month = months % 12;
        var totalModalBasePremium = basePlan.regularPayment;

        if (month == 0) {
            if (!Utils.isNothing(proposal.fundActivities) && !Utils.isNothing(proposal.fundActivities.fundActivity)) {
                var activities = Utils.iterator(proposal.fundActivities.fundActivity);
                var parties = Utils.iterator(basePlan.parties.party);
                for (var idx in activities) {
                    var activity = activities[idx];
                    if (Number(activity.attainAge) == Number(parties[0].insuredAge) + Number(year)) {
                        if (!Utils.isNothing(activity.regularPayment) && Number(activity.regularPayment) > 0) {
                            totalModalBasePremium = activity.regularPayment;
                            break;
                        }
                        else if (!Utils.isNothing(activity.regularPayment) && Number(activity.regularPayment) == 0) {
                            totalModalBasePremium = 0;
                            break;
                        }
                    }
                }
            }
            else {
                totalModalBasePremium = basePlan.regularPayment;
            }
        }

        return totalModalBasePremium;
}
});
var eventReceivePlannedPremiumsLocal = Class.define({
   eventName: function(args) {
    return "eventReceivePlannedPremiumsLocal";
},
   shouldBeRun: function(args) {
    var context = args["context"];
    var running = context.runningPolicyValues;

    var shouldRun = false;
    for(var idx in PublicConstants.FUND_RETURN) {
        shouldRun = (shouldRun || running.lapse[idx] == "N");
    }

    return shouldRun;
},
   run: function(args) {
    var context = args["context"];
    var proposal = context.proposal;
    var basePlan = proposal.coverageInfo;
    var productId = basePlan.product.productKey.primaryProduct.productPK.productId;
    var runningPolicyValues = context.runningPolicyValues;
    var year = runningPolicyValues.year;
    var months = runningPolicyValues.months;

    var deposit = this.self.depositPremium(args);
    var maxBasePremium = Math.max(0, runningPolicyValues.accumPremiumRequested + runningPolicyValues.accumTopup - runningPolicyValues.accumPremiumPaid);
    
    runningPolicyValues.accumPremiumPaid = runningPolicyValues.accumPremiumPaid + deposit;
    _DBR("maxBasePremium", maxBasePremium, "eventReceivePlannedPremiumsLocal->", months);
    
    var newPremium = Math.min( deposit, maxBasePremium );
    if (newPremium > 0) {
        var allocationRates = context.rates[productId][SchemaConstants.PREMIUM_TYPE.ALLOCATION];

        var netNewPremium = newPremium;
        var newPremiumRounding = proposal.coverageInfo.catalog.call("rounding", {
            coverage: basePlan
        });

        _DBR("allocation rates", allocationRates.rates, "", months);

        if (!Utils.isNothing(allocationRates)) {
            netNewPremium = Math.max(0, Number(Number(newPremium * (1 - allocationRates.rates[year]).toFixed(4)).toFixed(newPremiumRounding)));
        }
        
        _DBR("netNewPremium", netNewPremium, "eventReceivePlannedPremiumsLocal->", months);

        runningPolicyValues.premiumLoad = runningPolicyValues.premiumLoad + (newPremium - netNewPremium);
        runningPolicyValues.newPremium = runningPolicyValues.newPremium + newPremium;
        runningPolicyValues.netPremium = runningPolicyValues.netPremium + netNewPremium;
        runningPolicyValues.totalPremiums = runningPolicyValues.totalPremiums + newPremium;

        if (netNewPremium > 0) {
            IFund.appliedTo(runningPolicyValues.fundPool).call("dumpin", {
                amount: netNewPremium
            });
            _DBR("totalPremiums", runningPolicyValues['totalPremiums'], "eventReceivePlannedPremiumsLocal->", months);
        }
    }
},
   depositPremium: function(args) {
    var context = args["context"];
    var proposal = context.proposal;
    var basePlan = proposal.coverageInfo;
    var productId = basePlan.product.productKey.primaryProduct.productPK.productId;
    var runningPolicyValues = context.runningPolicyValues;
    var newPremium = 0;

    var year = runningPolicyValues.year;
    var months = runningPolicyValues.months;
    var month = months % 12;

    //if (month === 0) {
    //    newPremium += _V(basePlan.topUpPremium, 0);
    //}
    var annualTopupPremium = _V(basePlan.topUpPremium, 0);
    if (month === 0 && basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.ANNUAL) {
        newPremium += Number(basePlan.plannedPremium);
        newPremium += annualTopupPremium;
        _DBR("newPremium", newPremium, "eventReceivePlannedPremiumsLocal->", months);
    } else
    if ((month % 6) === 0 && basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.SEMIANNUAL) {
        newPremium += Number(basePlan.plannedPremium);
        newPremium += _R2( annualTopupPremium / 2 ) ;
        _DBR("newPremium", newPremium, "eventReceivePlannedPremiumsLocal->", months);
    } else
    if ((months % 3) === 0 && basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.QUARTERLY) {
        newPremium += Number(basePlan.plannedPremium);
        newPremium += _R2( annualTopupPremium / 4 ) ;
        _DBR("newPremium", newPremium, "eventReceivePlannedPremiumsLocal->", months);
    } else
    if (basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.MONTHLY) {
        newPremium += Number(basePlan.plannedPremium);
        newPremium += _R2( annualTopupPremium / 12 ) ;
        _DBR("newPremium", newPremium, "eventReceivePlannedPremiumsLocal->", months);
    }
    return newPremium;
}
});
var eventReceivePremiumsLocal = Class.define({
   eventName: function(args) {
    return "Receive All Premiums (Local)";
},
   shouldBeRun: function(args) {
    var context = args["context"];
    var running = context.runningPolicyValues;

    var shouldRun = false;
    for(idx in PublicConstants.FUND_RETURN) {
        shouldRun = (shouldRun || running.lapse[idx] == "N");
    }

    return shouldRun;
},
   run: function(args) {
    var context = args["context"];

    var metadata = context.events.metadata;
    var proposal = context.proposal;
    var basePlan = proposal.coverageInfo;
    var productId = basePlan.product.productKey.primaryProduct.productPK.productId;
    var runningPolicyValues = context.runningPolicyValues;
    var newPremium = 0;
    var topupPremium = 0;

    var year = runningPolicyValues.year;
    var months = runningPolicyValues.months;
    var month = months % 12;

    if (month == 0) {
        if (months == 0) {
            if (!Utils.isNothing(basePlan.initialDumpIn)) {
                newPremium = Number(newPremium) + Number(basePlan.initialDumpIn);
            }
        }

        if (!Utils.isNothing(proposal.fundActivities) && !Utils.isNothing(proposal.fundActivities.fundActivity)) {
            var activities = Utils.iterator(proposal.fundActivities.fundActivity);
            var parties = Utils.iterator(basePlan.parties.party);
            for (idx in activities) {
                var activity = activities[idx];
                if (Number(activity.topupPremium) > 0 && Number(activity.attainAge) == (Number(parties[0].insuredAge) + Number(year))) {
                    if (!Utils.isNothing(activity.topupPremium)) {
                        topupPremium = Number(topupPremium) + Number(activity.topupPremium);
                    }
                    break;
                }
            }
        }
        //_DBR("new fund received (topup / initial dumpIn)", newPremium, "eventReceivePremiumsLocal->", months);
    }
    if (month == 0 && basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.ANNUAL) {
        newPremium = Number(newPremium) + Number(basePlan.plannedPremium);
        _DBR("total fund received (include plannedPremium)", newPremium, "eventReceivePremiumsLocal->", months);
    } else
    if ((month % 6) == 0 && basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.SEMIANNUAL) {
        newPremium = Number(newPremium) + Number(basePlan.plannedPremium);
        _DBR("total fund received (include plannedPremium)", newPremium, "eventReceivePremiumsLocal->", months);
    } else
    if ((months % 3) == 0 && basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.QUARTERLY) {
        newPremium = Number(newPremium) + Number(basePlan.plannedPremium);
        _DBR("total fund received (include plannedPremium)", newPremium, "eventReceivePremiumsLocal->", months);
    } else
    if (basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.MONTHLY) {
        newPremium = Number(newPremium) + Number(basePlan.plannedPremium);
        _DBR("total fund received (include plannedPremium)", newPremium, "eventReceivePremiumsLocal->", months);
    }
    if (Number(newPremium) > 0) {
        var allocationRates = context.rates[productId][SchemaConstants.PREMIUM_TYPE.ALLOCATION];

        var netNewPremium = Number(newPremium);
        var newPremiumRounding = proposal.coverageInfo.catalog.call("rounding", {
            coverage: basePlan
        });
        if (!Utils.isNothing(allocationRates)) {
            netNewPremium = Number(Number(newPremium * (1 - allocationRates.rates[year]).toFixed(4)).toFixed(newPremiumRounding));
        }
        _DBR("netNewPremium", netNewPremium, "eventReceivePremiumsLocal->", months);

        if (Number(netNewPremium) > 0) {
            if (months == 0) {
                runningPolicyValues.initialDumpIn = Number(runningPolicyValues.initialDumpIn) + Number(basePlan.initialDumpIn);
            }
            runningPolicyValues.newPremium = Number(runningPolicyValues.newPremium) + Number(newPremium);
            runningPolicyValues.totalPremiums = Number(runningPolicyValues.totalPremiums) + Number(newPremium);
            IFund.appliedTo(runningPolicyValues.fundPool).call("dumpin", {
                amount: netNewPremium
            });
            _DBR("totalPremiums", runningPolicyValues['totalPremiums'], "eventAccumulatePolicyValues->", months);
        }
    }
    if (Number(topupPremium) > 0) {
        var topupAllocationRates = context.rates[productId][SchemaConstants.PREMIUM_TYPE.TOPUP_ALLOCATION];

        var netNewTopupPremium = Number(topupPremium);
        var newPremiumRounding = proposal.coverageInfo.catalog.call("rounding", {
            coverage: basePlan
        });
        if (!Utils.isNothing(topupAllocationRates)) {
            netNewTopupPremium = Number(Number(topupPremium * (1 - topupAllocationRates.rates[year]).toFixed(4)).toFixed(newPremiumRounding));
        }
        _DBR("netNewTopupPremium", netNewTopupPremium, "eventReceivePremiumsLocal->", months);

        if (Number(netNewTopupPremium) > 0) {
            if (months == 0) {
                runningPolicyValues.initialDumpIn = Number(runningPolicyValues.initialDumpIn) + Number(topupPremium);
            }
            runningPolicyValues.topup = Number(runningPolicyValues.topup) + Number(topupPremium);
            runningPolicyValues.totalTopup = Number(runningPolicyValues.totalTopup) + Number(topupPremium);
            IFund.appliedTo(runningPolicyValues.fundPool).call("dumpin", {
                amount: netNewTopupPremium
            });
            _DBR("totalTopup", runningPolicyValues['totalTopup'], "eventAccumulatePolicyValues->", months);
        }
    }
}
});
var eventReceivePremiumsRUVXX = Class.define({
   eventName: function(args) {
    return "eventReceivePremiumsRUVXX";
},
   shouldBeRun: function(args) {
    var context = args["context"];
    var running = context.runningPolicyValues;
    
    var shouldRun = false;
    for(var idx in PublicConstants.FUND_RETURN) {
        shouldRun = (shouldRun || running.lapse[idx] == "N");
    }
    // if multiplier of premium is zero, the step can be skipped
    shouldRun = shouldRun && (running.premiumMultiplier > 0);
    return shouldRun;
},
   run: function(args) {
    var context = args["context"];
    var proposal = context.proposal;
    var basePlan = proposal.coverageInfo;
    var productId = basePlan.product.productKey.primaryProduct.productPK.productId;
    var runningPolicyValues = context.runningPolicyValues;
    var year = runningPolicyValues.year;
    var months = runningPolicyValues.months;

    var allocationRates = context.rates[productId][SchemaConstants.PREMIUM_TYPE.ALLOCATION];
    //_DBR("allocation rates", allocationRates.rates, "", months);
    
    var topupAllocationRates = context.rates[productId][SchemaConstants.PREMIUM_TYPE.TOPUP_ALLOCATION];
    //_DBR("topup allocation rates", topupAllocationRates.rates, "", months);

    var newPremiumRounding = proposal.coverageInfo.catalog.call("rounding", {
        coverage: basePlan
    });

    var netNewTopupPremium = {};
    var netNewPremium = {};
    //for colModalBasePremium
    runningPolicyValues.modalBasePremium = _V( this.self.getModalBasePremium(args), this.self.getModalBasePremium(args).HIGH);
    
    for(var i in PublicConstants.FUND_RETURN) {
        _DBR("returnType", i, "eventReceivePlannedPremiumsLocal->", months);
        
        netNewPremium[i] = 0;
        netNewTopupPremium[i] = 0;
        
        var deposit = _R2(this.self.depositPremium({args:args, returnKey:i}));
        _DBR("deposit", deposit, "eventReceivePlannedPremiumsLocal->", months);

        var maxBasePremium = _R2(Math.max(0, runningPolicyValues.accumPremiumRequested[i] + 
            runningPolicyValues.accumTopup[i] - runningPolicyValues.accumPremiumPaid[i]));
        _DBR("maxBasePremium", maxBasePremium, "eventReceivePlannedPremiumsLocal->", months);
        
        runningPolicyValues.accumPremiumPaid[i] = runningPolicyValues.accumPremiumPaid[i] + deposit;
        var newPremium = Math.min( deposit, maxBasePremium );
        var newTopup = deposit - newPremium;
        
        // var fb = IFund.appliedTo(runningPolicyValues.fundPool).call("fundBalances", {})[i];
        // if (months > 0 && fb <= 0) {
        //     newPremium = 0;
        // }
        
        if (newPremium > 0) {
            netNewPremium[i] = newPremium;
            
            if (!Utils.isNothing(allocationRates)) {
                // netNewPremium[i] = Math.max(0, Number(Number(newPremium * (1 - allocationRates.rates[year]).toFixed(4)).toFixed(newPremiumRounding)));
                netNewPremium[i] = Math.max(0, _R(Number(newPremium) - _R(Number(newPremium * (allocationRates.rates[year])), newPremiumRounding), newPremiumRounding));
            }
            
            _DBR("netNewPremium[" + i + "]", netNewPremium[i], "eventReceivePlannedPremiumsLocal->", months);
            runningPolicyValues.premiumLoad[i] = runningPolicyValues.premiumLoad[i] + (newPremium - netNewPremium[i]);
            runningPolicyValues.newPremium[i] = runningPolicyValues.newPremium[i] + deposit;
            runningPolicyValues.netPremium[i] = runningPolicyValues.netPremium[i] + netNewPremium[i];
            runningPolicyValues.totalPremiums[i] = runningPolicyValues.totalPremiums[i] + newPremium;
            _DBR("totalPremiums[" + i + "]", runningPolicyValues['totalPremiums'][i], "eventReceivePlannedPremiumsLocal->", months);
        }
        
        if (newTopup > 0) {
            netNewTopupPremium[i] = newTopup;
            
            if (!Utils.isNothing(topupAllocationRates)) {
                netNewTopupPremium[i] = Math.max(0, Number(Number(newTopup * (1 - topupAllocationRates.rates[year]).toFixed(4)).toFixed(newPremiumRounding)));
            }
            
            _DBR("netNewTopupPremium[" + i + "]", netNewTopupPremium[i], "eventReceivePlannedPremiumsLocal->", months);
            runningPolicyValues.topup[i] = runningPolicyValues.topup[i] + newTopup;
            runningPolicyValues.accumTopup[i] = runningPolicyValues.accumTopup[i] + newTopup;
            runningPolicyValues.topupPremiumLoad[i] = runningPolicyValues.topupPremiumLoad[i] + (newTopup - netNewTopupPremium[i]);
            runningPolicyValues.premiumLoad[i] = runningPolicyValues.premiumLoad[i] + (newTopup - netNewTopupPremium[i]);
            runningPolicyValues.totalPremiums[i] = runningPolicyValues.totalPremiums[i] + newTopup;
            _DBR("accumTopup[" + i + "]", runningPolicyValues['accumTopup'][i], "eventReceivePlannedPremiumsLocal->", months);
        }
    }
    if (proposal.enableDebug && proposal.startDebugYear <= year && year <= proposal.stopDebugYear ) {
        _DBR("netNewPremium[" + i + "]", "", "eventReceivePlannedPremiumsLocal->", months);
        _SS(netNewPremium, 5);
        _DBR("runningPolicyValues.topup[" + i + "]", "", "eventReceivePlannedPremiumsLocal->", months);
        _SS(runningPolicyValues.topup, 5);
        _DBR("runningPolicyValues.accumTopup[" + i + "]", "", "eventReceivePlannedPremiumsLocal->", months);
        _SS(runningPolicyValues.accumTopup, 5);
        _DBR("runningPolicyValues.topupPremiumLoad[" + i + "]", "", "eventReceivePlannedPremiumsLocal->", months);
        _SS(runningPolicyValues.topupPremiumLoad, 5);
    }
    IFund.appliedTo(runningPolicyValues.fundPool).call("dumpin", {
        amounts: netNewPremium
    });
    if (proposal.enableDebug && proposal.startDebugYear <= year && year <= proposal.stopDebugYear ) {
        _DBR("netNewTopupPremium[" + i + "]", "", "eventReceivePlannedPremiumsLocal->", months);
        _SS(netNewTopupPremium, 5);
    }
    IFund.appliedTo(runningPolicyValues.topupFundPool).call("dumpin", {
        amounts: netNewTopupPremium
    });
    _DBR("Fund balance",IFund.appliedTo(runningPolicyValues.fundPool).call("fundBalances"),"eventReceivePlannedPremiumsRUVXX", months);
},
   depositPremium: function(args) {
    var args2 = args.args;
    var returnKey = args.returnKey;
    
    var context = args2["context"];
    var proposal = context.proposal;
    var basePlan = proposal.coverageInfo;
    var productId = basePlan.product.productKey.primaryProduct.productPK.productId;
    var runningPolicyValues = context.runningPolicyValues;
    var newPremium = 0;

    var year = runningPolicyValues.year;
    var months = runningPolicyValues.months;
    var month = months % 12;
    
    // Detect premium holoday
    var isResumePremiumHoliday = false;
    if (!Utils.isNothing(runningPolicyValues.phActivities)){
       isResumePremiumHoliday = runningPolicyValues.phActivities.isResumePremiumHoliday;
    }

    var annualTopupPremium = _V(basePlan.topUpPremium, 0);
    if (isResumePremiumHoliday)
        annualTopupPremium = 0;

    _DBR("annualTopupPremium", annualTopupPremium, "eventReceivePlannedPremiumsLocal->", months);
    if (month === 0 && basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.ANNUAL) {
        _DBR("runningPolicyValues.plannedPremium[" + returnKey + "]", runningPolicyValues.plannedPremium[returnKey], "eventReceivePlannedPremiumsLocal->", months);
        newPremium += Number(runningPolicyValues.plannedPremium[returnKey]);
        newPremium += annualTopupPremium;
        _DBR("newPremium", newPremium, "eventReceivePlannedPremiumsLocal->", months);
    } else
    if ((month % 6) === 0 && basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.SEMIANNUAL) {
        _DBR("runningPolicyValues.plannedPremium[" + returnKey + "]", runningPolicyValues.plannedPremium[returnKey], "eventReceivePlannedPremiumsLocal->", months);
        newPremium += Number(runningPolicyValues.plannedPremium[returnKey]);
        newPremium += _R8( annualTopupPremium / 2 ) ;
        _DBR("newPremium", newPremium, "eventReceivePlannedPremiumsLocal->", months);
    } else
    if ((months % 3) === 0 && basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.QUARTERLY) {
        _DBR("runningPolicyValues.plannedPremium[" + returnKey + "]", runningPolicyValues.plannedPremium[returnKey], "eventReceivePlannedPremiumsLocal->", months);
        newPremium += Number(runningPolicyValues.plannedPremium[returnKey]);
        newPremium += _R8( annualTopupPremium / 4 ) ;
        _DBR("newPremium", newPremium, "eventReceivePlannedPremiumsLocal->", months);
    } else
    if (basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.MONTHLY) {
        _DBR("runningPolicyValues.plannedPremium[" + returnKey + "]", runningPolicyValues.plannedPremium[returnKey], "eventReceivePlannedPremiumsLocal->", months);
        newPremium += Number(runningPolicyValues.plannedPremium[returnKey]);
        newPremium += _R8( annualTopupPremium / 12 ) ;
        _DBR("newPremium", newPremium, "eventReceivePlannedPremiumsLocal->", months);
    }
    return newPremium;
},
   getModalBasePremium: function(args) {
    var context = args["context"];
    var proposal = context.proposal;
    var basePlan = proposal.coverageInfo;
    var runningPolicyValues = context.runningPolicyValues;
    var months = runningPolicyValues.months;
    var year = runningPolicyValues.year;
    var month = months % 12;
    var modalBasePremium = _V( runningPolicyValues['modalBasePremium'], basePlan.plannedPremium);
    var basePlanPremium = _V(runningPolicyValues['basePlanPremiums'], basePlan.basePlanPremiums);

    var isRegularSaving = basePlan.catalog.call("isRegularSaving");
    // if (!isRegularSaving) {
    //   return modalBasePremium;
    // }
    
    if (!isRegularSaving) {
      modalBasePremium = basePlanPremium;
    }
    
    // Process modal base premium at the first month, and follow up fund activities
    if (month == 0) {
       if (!Utils.isNothing(proposal.fundActivities) && !Utils.isNothing(proposal.fundActivities.fundActivity)) {
           var activities = Utils.iterator(proposal.fundActivities.fundActivity);
           var parties = Utils.iterator(basePlan.parties.party);
           for (var idx in activities) {
               var activity = activities[idx];

               if (Number(activity.attainAge) == Number(parties[0].insuredAge) + Number(year)){

                 // Change planned premium
                 if (!Utils.isNothing(activity.plannedPremium) && Number(activity.plannedPremium) > 0){
                    modalBasePremium = activity.plannedPremium;
                    break;
                 }

                 // No premium value (as limit premium term)
                 else if (!Utils.isNothing(activity.regularPayment) && Number(activity.regularPayment) == 0){
                   modalBasePremium = 0;
                   break;
                 }

                 // Only change regular premium
                 else if (!Utils.isNothing(activity.regularPayment)
                      && Utils.isNothing(activity.plannedPremium)
                      && Number(activity.regularPayment) > 0){
                    modalBasePremium = basePlan.plannedPremium;
                 }
               }
           }
       }
       else {

         // No fund activties
         modalBasePremium = basePlan.plannedPremium;

       }
    }

    return modalBasePremium;
}
});
var eventSavePolicyLapseStatusAtYearBeginning = Class.define({
   eventName: function(args) {
    return "eventSavePolicyLapseStatusAtYearBeginning";
},
   shouldBeRun: function(args) {
    var context = args["context"];
    var month = context.runningPolicyValues.months % 12;
    return (month === 0);
},
   run: function(args) {
    var context = args["context"];
    for(var returnType in PublicConstants.FUND_RETURN) {
        context.runningPolicyValues.lapseAtYearBeginning[returnType] = context.runningPolicyValues.lapse[returnType];
    }
    return;
}
});
var eventTestLapsation = Class.define({
   eventName: function(args) {
    return "Test Policy Lapse (UVL & UL)";
},
   shouldBeRun: function(args) {
    var context = args["context"];
    return true;
},
   run: function(args) {
    var context = args["context"];
    var running = context.runningPolicyValues;
    
    var basePlan = context.proposal.coverageInfo;
    var isRegularSaving = basePlan.catalog.call("isRegularSaving");
    var isUVL = basePlan.catalog.call("isUVL");

    if(isUVL && isRegularSaving)
    {
    var fundBalances = IFund.appliedTo(running.fundPool).call("fundBalances", {});
    var lapseTester = running.lapse;
    for(returnTypeIdx in PublicConstants.FUND_RETURN) {
            var returnType = PublicConstants.FUND_RETURN[returnTypeIdx];
            var fb = fundBalances[returnType];
            if (fb <= 0 ||  lapseTester[returnType] == "Y") {
                lapseTester[returnType] = "Y";
            } else {
                lapseTester[returnType] = "N";
            }
    }
        
    }else if(isUVL && !isRegularSaving) {
    var fundBalances = IFund.appliedTo(running.fundPool).call("fundBalances", {});
    var topupFundBalances = IFund.appliedTo(running.topupFundPool).call("fundBalances", {});
    var lapseTester = running.lapse;
    for(returnTypeIdx in PublicConstants.FUND_RETURN) {
            var returnType = PublicConstants.FUND_RETURN[returnTypeIdx];
            var fb = fundBalances[returnType] + topupFundBalances[returnType];
            if (fb <= 0 ||  lapseTester[returnType] == "Y") {
                lapseTester[returnType] = "Y";
            } else {
                lapseTester[returnType] = "N";
            }
    }
    }

    running["lapse"] = lapseTester;
}
});
var eventTopupAllocatedPremiumRUVXX = Class.define({
   eventName: function(args) {
    return "eventTopupAllocatedPremiumRUVXX";
},
   shouldBeRun: function(args) {
    var context = args["context"];
    return true;
},
   run: function(args) {
    var context = args["context"];
    var running = context.runningPolicyValues;
    var topupRate = this.self.getTopupRate(args);

    var topupCalc = DataDrivenCalculatorImpl.create({
       drivenKeys: PublicConstants.FUND_RETURN,
       drivenDatas: running.topup,
    });
    var topupAllocatedPremiums = IDataDrivenCalculator.appliedTo(topupCalc).call("calculate", {
       calculateBlock: function(topup) {
          var topupAllocatedPremium = _R(topup * (1 - topupRate),2);

          return topupAllocatedPremium;
       }
    });
    running.topupAllocatedPremiums = topupAllocatedPremiums;
},
   getTopupRate: function(args) {
   var context = args["context"];
   var topupRate = 0.02;

   return topupRate;
}
});
var eventTradCouponNotReceive = Class.define({
   eventName: function(args) {
    return "eventTradCouponNotReceive";
},
   shouldBeRun: function(args) {
    var context = args["context"];
    return true;
},
   run: function(args) {
    var context = args["context"];
    var running = context.runningPolicyValues;
    
    running.couponNotReceive = running.couponNotReceive + running.coupon;
    return;
}
});
var eventUpdateGuaranteeReturnInFunds = Class.define({
   eventName: function(args) {
    return "Update Guarantee Return Rates in funds by rate defined";
},
   shouldBeRun: function(args) {
    var context = args["context"];
    var month = context.runningPolicyValues.months % 12;
    return (month == 0);
},
   run: function(args) {
    var context = args["context"];
    var running = context.runningPolicyValues;
    var year = running.year;    
    var proposal = context['proposal'];
    var basePlan = proposal.coverageInfo;
    var month = running.months % 12;

    var productId = proposal.coverageInfo.schema.implementation.schema.ProductSchema.ProductSchemaPK.ProductPK.ProductId.text;

    //if (running.months == 0) {
    //    _SS(running.fundPool.context.fundPools[productId], 10);
    //}

    var rates = context['rates'];
    var guarInterestRates = rates[productId][SchemaConstants.POLICY_VALUE.IRR].rates;
    var guarInterestRate = guarInterestRates[year];

    for(fundId in running.fundPool.context.fundPools) {
        running.fundPool.context.fundPools[fundId].context.annualInterestRate[PublicConstants.FUND_RETURN.LOW] =  _R(guarInterestRate * 100, 2); 
        running.fundPool.context.fundPools[fundId].context.interestRate[PublicConstants.FUND_RETURN.LOW] =  _R(Math.pow(1 + guarInterestRate, 1/12) - 1, context.interestRatePrecision); 
    }

    //_DB("LOW Pool Monthly Interest Rate", _R(Math.pow(1 + guarInterestRate, 1/12), context.interestRatePrecision) - 1);

    //if (month == 0) {
    //_DBR("year", year, "", running.months);
    //_DBR("guarInterestRate",guarInterestRate, "", running.months);
    //}

    return;
}
});
var eventUpdateRegularPremiumRUVXX = Class.define({
   eventName: function(args) {
    return "eventUpdateRegularPremiumRUVXX";
},
   shouldBeRun: function(args) {
    var context = args["context"];
    var month = (context.runningPolicyValues.months % 12)
    return (month === 0);
},
   run: function(args) {
    var context = args["context"];
    var running = context.runningPolicyValues;
    var basePlan = context.proposal.coverageInfo;
    var month = running.months % 12;
    var ppFreq = 1;
    if (basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.ANNUAL) {
        ppFreq = 1;
    }
    if (basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.SEMIANNUAL) {
        ppFreq = 2;
    }
    if (basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.QUARTERLY) {
        ppFreq = 4;
    }
    if (basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.MONTHLY) {
        ppFreq = 12;
    }
    for(var i in PublicConstants.FUND_RETURN) {
        running['regularPremium'][i] = running.plannedPremium[i] * ppFreq + running.riderPremiums;
        // Fixing the issue ATP-3149
        running['regularBasePremium'][i] = running.plannedPremium[i] * ppFreq;
    }
    return;
}
});
var eventUpdateRegularPremiumUL007 = Class.define({
   eventName: function(args) {
    return "eventUpdateRegularPremiumUL007";
},
   shouldBeRun: function(args) {
    var context = args["context"];
    var month = (context.runningPolicyValues.months % 12)
    return (month === 0);
},
   run: function(args) {
    var context = args["context"];
    var running = context.runningPolicyValues;
    var basePlan = context.proposal.coverageInfo;
    var month = running.months % 12;
    var ppFreq = 1;
    if (basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.ANNUAL) {
        ppFreq = 1;
    }
    if (basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.SEMIANNUAL) {
        ppFreq = 2;
    }
    if (basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.QUARTERLY) {
        ppFreq = 4;
    }
    if (basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.MONTHLY) {
        ppFreq = 12;
    }
    running['regularPremium'] = running.basePlanPremiums * ppFreq + running.riderPremiums;
    return;
}
});
var showMonthlyResults = Class.define({
   eventName: function(args) {
    return "Show Monthly Result for Verification";
},
   shouldBeRun: function(args) {
    var context = args["context"];
    var proposal = context.proposal;

    if (proposal.enableDebug) return proposal.enableDebug;
    return false;
},
   run: function(args) {
    var context = args["context"];
    var running = context.runningPolicyValues;
    var proposal = context.proposal;
    var year = running.year;
    var month = running.months % 12;

    var cors = running['cors']
    var cord = running['corsDetails'];
    var balances = IFund.appliedTo(running.fundPool).call("fundBalances", {});

    var showValue = proposal.enableDebug;
    if ( showValue && year < proposal.startDebugYear ) {
        showValue = false;
    }
    if ( showValue && year > proposal.stopDebugYear ) {
        showValue = false;
    }
    if (showValue) {
        console.log("***** Y E A R " + year + " / M O N T H " + month + " *****");
        console.log("[  Total COIs  ]");
        _SS(context.runningPolicyValues.annualCois, 5);
        console.log("[  Total CORs  ]");
        _SS(cors, 5);
        if (cord) {
            console.log("[  CORs by Product  ]");
            _SS(cord, 5);
        }
        console.log("[  Fund Balances  ]");
        _SS(balances, 5);
        if (context.runningPolicyValues.topupFundPool) {
            console.log("[  Topup Fund Balances  ]");
            var topupBalances = IFund.appliedTo(running.topupFundPool).call("fundBalances", {});
            _SS(topupBalances, 5);
        }
        console.log("[  Face Amounts  ]");
        _SS(context.runningPolicyValues.faceAmount, 5);
    }
}
});
var eventApplyPolicyChangeFaceAmount = eventApplyPolicyChangePlannedPremium.extend({
   eventName: function(args) {
    return "Apply New Face Amount";
},
   applyPolicyChange: function(args) {
    var vargs = args['args'];
    var activity = args['activity'];
    
    var context = vargs["context"];
    var proposal = context.proposal;
    var basePlan = proposal.coverageInfo;

    _DBR("activity", activity, "eventApplyPolicyChangeFaceAmount->", context.runningPolicyValues.months);
    
    if (!Utils.isNothing(activity.faceAmount)) {
        // basePlan.faceAmount = activity.faceAmount;
        //var limit = this.self.getFaceAmountChangeLimit({coverage: basePlan});
        for(var i in PublicConstants.FUND_RETURN) {
            if (this.self.checkMinimumChangeOfFaceAmount( {coverage: basePlan, 
                                                          returnKey: i, 
                                                          targetFaceAmount: activity.faceAmount, 
                                                          context: context } )) {
                context.runningPolicyValues.faceAmount[i] = activity.faceAmount;
            }
        }
    }
},
   getFaceAmountChangeLimit: function(args) {
    var coverage = args['coverage'];
    var schema = coverage.schema.call("getSchema", null);
    var primary = getPrimaryInsured({coverage: coverage});
    if (Utils.isNothing(primary)) {
        return {
            code: "ERRC0213",
            arguments: {"%PRODUCT_ID%" : productId}
        };
    }
    var insuredAge = primary.insuredAge;
    
    var minFA = -99989898989898.999;
    var maxFA = 99989898989898.999;
    var result = {};
    // Fund activity change limits
    var fundChangeLimit = getFundChangeRecord({
        coverage: coverage,
        fundChange: SchemaConstants.FUND_CHANGE_TYPE.FACEAMOUNT,
        duration: 0,
        schema: schema
    });
    if (!Utils.isNothing(fundChangeLimit)) {
        _DB("Fund change limt", fundChangeLimit, "FundActivitiesValidationRule->");
        if (!Utils.isNothing(fundChangeLimit.MinIncrease)) {
            minFA = Math.max( minFA, Number(_V(fundChangeLimit.MinIncrease)) );
        }
        if (!Utils.isNothing(fundChangeLimit.MaxIncrease)) {
            maxFA = Math.min( maxFA, Number(_V(fundChangeLimit.MaxIncrease)) );
        }
        _DB("Face amount change limit (Min/Max)", minFA+"/"+maxFA, "FundActivitiesValidationRule->");
    } else {
        _DB("Face amount change limit", "nil" , "FundActivitiesValidationRule->");
    }
    return {minLimit: minFA, maxLimit: maxFA};
},
   checkMinimumChangeOfFaceAmount: function(args) {
    var coverage = args['coverage'];
    var planCode = _PV( coverage, 'product.productKey.associateProduct.productPK.productId' );
    var returnKey = args['returnKey'];
    var targetFaceAmount = args['targetFaceAmount'];
    var context = args['context'];
    var limit = this.self.getFaceAmountChangeLimit( {coverage: coverage} );
    
    var currentFaceAmount = context.runningPolicyValues.faceAmount[returnKey];
    var delta = Math.abs( targetFaceAmount - currentFaceAmount );
    if(delta > 0){
        if (delta < limit.minLimit || limit.maxLimit < delta) {
            context.runningPolicyValues.error[returnKey] += 'ERRC0221,';
            return false;
        }
    }
    return true;
},
   shouldBeRun: function(args) {
    var context = args.context;
    var month = context.runningPolicyValues.months % 12;
    if (month === 0) {
        return this.parent.shouldBeRun(args);
    }
}
});
var eventApplyPolicyChangeFaceAmount_RUVXX = eventApplyPolicyChangeFaceAmount.extend({
   eventName: function(args) {
    return "Apply New Face Amount with layer feature (RUV)";
},
   applyPolicyChange: function(args) {
    var vargs = args['args'];
    var activity = args['activity'];
    
    var context = vargs["context"];
    var proposal = context.proposal;
    var basePlan = proposal.coverageInfo;

    _DBR("activity", activity, "eventApplyPolicyChangeFaceAmount->", context.runningPolicyValues.months);
    if (!Utils.isNothing(activity.faceAmount)) {
        var minPremium = this.self.minAnnualizedBasePremium({
            coverage: basePlan
        });
        var faLimits = this.self.getFaceAmountLimits({
            coverage: basePlan
        });
        for(var i in PublicConstants.FUND_RETURN) {
            if (this.self.checkMinimumChangeOfFaceAmount( {coverage: basePlan, 
                                                         returnKey: i, 
                                                         targetFaceAmount: activity.faceAmount, 
                                                         context: context } )) {
                context.runningPolicyValues.faceAmountLayers[i].call('changeFaceAmount', 
                    {year:context.runningPolicyValues.year, faceAmount:activity.faceAmount});
                context.runningPolicyValues.faceAmountLayers[i].call('debugLayers');
                context.runningPolicyValues['contractPlannedPremium'][i] = context.runningPolicyValues.faceAmountLayers[i].call('calculatePremium', {debug: false});
                
                _DBR("@@@@ contractPlannedPremium", context.runningPolicyValues['contractPlannedPremium'][i], "eventApplyPolicyChangeFaceAmount->", context.runningPolicyValues.months);
                this.self.checkNewFaceAmountInRange({
                    coverage: basePlan,
                    context: context,
                    returnKey: i,
                    plannedPremium: context.runningPolicyValues['contractPlannedPremium'][i],
                    minPremium: minPremium,
                    faLimits: faLimits
                });
            }
        }
    }
},
   getFaceAmountLimits: function(args) {
    var coverage = args['coverage'];
    var schema = coverage.schema.call("getSchema", null);
    var primary = getPrimaryInsured({coverage: coverage});
    var insuredAge = primary.insuredAge;

    var minFA = 99989898989898.999;
    var maxFA = -99989898989898.999;
    var result = {};
    for (var bandKey in schema.ProductSchema.BandInformation.BandRecord) {
    var bandRec = schema.ProductSchema.BandInformation.BandRecord[bandKey];
    if (!Utils.isNothing(bandRec.CurrencyPK)) {
        //console.log("productRules.length = " + bandRec.CurrencyPK.CurrencyId.text);
        if (coverage.currency.currencyPK.currencyId == bandRec.CurrencyPK.CurrencyId.text) {
            if (insuredAge >= Number(bandRec.MinIssueAge.text) && insuredAge <= Number(bandRec.MaxIssueAge.text)) {
                minFA = Math.min(minFA, Number(bandRec.MinFaceAmount.text));
                maxFA = Math.max(maxFA, Number(bandRec.MaxFaceAmount.text));
            }
        }
    }
    }
    _DB("Min/Max", minFA+"/"+maxFA, "FundActivitiesValidationRule->");

    return {minLimit: minFA, maxLimit: maxFA};
},
   checkNewFaceAmountInRange: function(args) {
    var context = args["context"];
    var coverage = args["coverage"];
    var rates = context["rates"];
    var returnKey = args["returnKey"];
    var plannedPremium = args["plannedPremium"];
    var minPremium = args["minPremium"];
    var faLimits = args["faLimits"];
    var year = context.runningPolicyValues.year;
    var planCode = _PV( coverage, 'product.productKey.primaryProduct.productPK.productId' );
    var premiumRates = rates[planCode][SchemaConstants.PREMIUM_TYPE.BASICPREMIUM];
    var premiumRate;
    if(!Utils.isNothing(premiumRates)){
        if(premiumRates.rates.length == 1){
            premiumRate = premiumRates.rates[0];
        } else {
            premiumRate = premiumRates.rates[coverage.parties.party.insuredAge + year];
        }
    }
    var minFA = _R(minPremium * 1000 / premiumRate, 0);
    minFA = Math.max(faLimits.minLimit, minFA);
    if(plannedPremium < minPremium){
        context.runningPolicyValues.minFaceAmount = minFA;
        context.runningPolicyValues.error[returnKey] += 'ERR03032F,';
    }
},
   minAnnualizedBasePremium: function(args) {
    var coverage = args["coverage"];
    var premiumRec = getPremiumRecord({
        premiumType: SchemaConstants.PREMIUM_RANGE_TYPE.PREMIUMTYPE_BASICPREMIUM,
        coverage: coverage,
        schema: coverage.schema.call('getSchema')
    });
    var minBasePremium = 0;
    if (!Utils.isNothing(premiumRec)) {
        minBasePremium = this.self.getTotalPremium({
            paymentMode: coverage.options.paymentMode,
            plannedPremium: Number( _PV( premiumRec, 'MinPremium' ) )
        });
    }
    return minBasePremium;
},
   getTotalPremium: function(args) {
    var pp = _V(args["plannedPremium"], 0);
    var paymentMode = args["paymentMode"];
    var ppfreq = 1;
    if (paymentMode == SchemaConstants.PAYMENT_MODE.ANNUAL) {
        ppfreq = 1;
    } else if (paymentMode == SchemaConstants.PAYMENT_MODE.SEMIANNUAL) {
        ppfreq = 2;
    } else if (paymentMode == SchemaConstants.PAYMENT_MODE.QUARTERLY) {
        ppfreq = 4;
    } else if (paymentMode == SchemaConstants.PAYMENT_MODE.MONTHLY) {
        ppfreq = 12;
    }
    return (ppfreq * pp);
}
});
var eventApplyPolicyChangePlannedPremiumRUVXX = eventApplyPolicyChangePlannedPremium.extend({
   eventName: function(args) {
    return "Apply New Planned Premium (RUVXX)";
},
   applyPolicyChange: function(args) {
    var vargs = args['args'];
    var activity = args['activity'];
    
    var context = vargs["context"];
    var running = context.runningPolicyValues;
    var proposal = context.proposal;
    var basePlan = proposal.coverageInfo;
    
    if (!Utils.isNothing(activity.plannedPremium)) {
        _DBR("new planned premium", activity.plannedPremium, "eventApplyPolicyChangePlannedPremium", running.months);
        // basePlan.plannedPremium = activity.plannedPremium;
        // Update premiumMultiplier
        
        // running.premiumMultiplier = _R( activity.plannedPremium / running.plannedPremiumAtInception, 0 );
        running.premiumMultiplier = this.self.getPremiumMultiplier(running);
        _DBR("premium multiplier _R( " + activity.plannedPremium + " / " + running.plannedPremiumAtInception + " )", running.premiumMultiplier , "eventApplyPolicyChangePlannedPremium", running.months);

        for(var i in PublicConstants.FUND_RETURN) {
            //running.plannedPremium[i] = activity.plannedPremium;
            running.plannedPremium[i] = running.plannedPremium[i] * running.premiumMultiplier;
        }
        // Adjust plannedPremium for calculation multiplier correctly
         activity.plannedPremium = running.plannedPremium.HIGH;
         basePlan.plannedPremium = running.plannedPremium.HIGH;
    }
},
   getPremiumMultiplier: function(args) {
    var running = args;
    var value = running.phActivities.premiumMultiplier;
    if (value > 0)
      value++;
    return value;
}
});
var eventApplyPolicyChangeRegularPremiumUL007 = eventApplyPolicyChangePlannedPremium.extend({
   eventName: function(args) {
    return "Apply New Regular Premium";
},
   applyPolicyChange: function(args) {
    var vargs = args['args'];
    var activity = args['activity'];
    
    var context = vargs["context"];
    var proposal = context.proposal;
    var basePlan = proposal.coverageInfo;
    
    if (!Utils.isNothing(activity.regularPayment)) {
       basePlan.regularPayment = activity.regularPayment;
    }
}
});
var eventApplyPolicyChangeRegularTopUp_RUVXX = eventApplyPolicyChangePlannedPremium.extend({
   eventName: function(args) {
    return "Apply Regular Topup Change";
},
   applyPolicyChange: function(args) {
    var vargs = args['args'];
    var activity = args['activity'];
    
    var context = vargs["context"];
    var proposal = context.proposal;
    var basePlan = proposal.coverageInfo;
    
    if (!Utils.isNothing(activity.topupPremium)) {
      basePlan.topUpPremium = activity.topupPremium;
    }
}
});
var eventAvyInitialization_EDX = eventCoreMvyAvyInitialization.extend({
   eventName: function(args) {
    return "eventAvyInitialization_EDX";
},
   MVY: function(args) {
     var context = args["context"];
     var runningPolicyValues = context.runningPolicyValues;
     var months = runningPolicyValues.months;
},
   AVY: function(args) {
     var context = args["context"];
     var runningPolicyValues = context.runningPolicyValues;
     var months = runningPolicyValues.months;
     var year = runningPolicyValues.year;
     var month = months % 12;
     
     runningPolicyValues['basePlanPremiums'] = 0;
     runningPolicyValues['riderPremiums'] = 0;
     runningPolicyValues['coupon'] = 0;
     runningPolicyValues['excellentReward'] = 0;
},
   initialSetup: function(args) {
     var context = args["context"];
     var proposal = context.proposal;
     var basePlan = proposal.coverageInfo;
     var productId = basePlan.product.productKey.primaryProduct.productPK.productId;
     var runningPolicyValues = context.runningPolicyValues;
     
     runningPolicyValues['accPremiums'] = 0;
     runningPolicyValues['accDividends'] = 0;
     runningPolicyValues['accLowerDividends'] = 0;
     runningPolicyValues['accHigherDividends'] = 0;
     runningPolicyValues['accSpecialDividends'] = 0;
     runningPolicyValues['lowerSpecialDividends'] = 0;
     runningPolicyValues['higherSpecialDividends'] = 0;
     runningPolicyValues['accLowerSpecialDividends'] = 0;
     runningPolicyValues['accHigherSpecialDividends'] = 0;
     runningPolicyValues['accCoupon'] = 0;
     runningPolicyValues['accLowerCoupon'] = 0;
     runningPolicyValues['accHigherCoupon'] = 0;
     runningPolicyValues['accExcellentReward'] = 0;
     runningPolicyValues['accLowerExcellentReward'] = 0;
     runningPolicyValues['accHigherExcellentReward'] = 0;
     runningPolicyValues['accPremiums'] = 0;
     runningPolicyValues['totalPremiums'] = 0;
     runningPolicyValues['isUnbornChild'] = this.self.isUnbornChild(args);
},
   shouldBeRun: function(args) {
    return true;
},
   isUnbornChild: function(args) {
    var context = args["context"];
    var running = context.runningPolicyValues;
    var proposal = context.proposal;
    var basePlan = proposal.coverageInfo;
    var productId = basePlan.product.productKey.primaryProduct.productPK.productId;
    var tempProductId = productId.split("");

      // modify when we have schema
    if(tempProductId[2] == "M"){
       return true;
    }
    return false;
}
});
var eventAvyInitialization_RUVXX = eventCoreMvyAvyInitialization.extend({
   eventName: function(args) {
    return "eventAvyInitialization_RUVXX";
},
   MVY: function(args) {
    var context = args["context"];
    var runningPolicyValues = context.runningPolicyValues;
    var months = runningPolicyValues.months;
},
   AVY: function(args) {
    var context = args["context"];
    var runningPolicyValues = context.runningPolicyValues;
    var months = runningPolicyValues.months;
    var year = runningPolicyValues.year;
    var month = months % 12;
    
    //if (year > 0) {
    //    // update base plan premium to contract planned premium 
    //    for(var i in PublicConstants.FUND_RETURN) {
    //        runningPolicyValues['contractPlannedPremium'][i] = runningPolicyValues['plannedPremium'][i];
    //    }
    //}
    
    runningPolicyValues['initialDumpIn'] = 0;
    runningPolicyValues['withdrawal'] = 0;
    runningPolicyValues['topupWithdrawal'] = 0;
    runningPolicyValues['withdrawalNoCharge'] = 0;
    runningPolicyValues['partialWithdrawalCharge'] = 0;
    runningPolicyValues['basePlanPremiums'] = 0;
    runningPolicyValues['riderPremiums'] = 0;
    runningPolicyValues['ridersDeathBenefit'] = 0;          // death benefit of all riders
    runningPolicyValues['totalAnnualRegularPremium'] = 0;
    runningPolicyValues['policyFee'] = 0;
    runningPolicyValues['regularPremium'] = {};
    runningPolicyValues['bavBeforeBonusAndWithdrawal'] = {};
    runningPolicyValues['tavBeforeBonusAndWithdrawal'] = {};
    runningPolicyValues['bavAfterBonusAndBeforeWithdrawal'] = {};
    runningPolicyValues['tavAfterBonusAndBeforeWithdrawal'] = {};
    //Fixing the issue ATP-3149
    runningPolicyValues['regularBasePremium'] = {};
    runningPolicyValues["annualTotalFundBalances"] = {};
    runningPolicyValues['cois'] = {};
    runningPolicyValues['annualCois'] = {};
    runningPolicyValues['accumulatedcashOutPayments'] = {};
    runningPolicyValues["surrenderValues"] = {};
    runningPolicyValues['deathBenefits'] = {};              // base plan death benefit
    runningPolicyValues['totalDeathBenefits'] = {};
    runningPolicyValues['totalProtections'] = {};
    runningPolicyValues['surrenderValueBeforeWithdrawal'] = {};

    runningPolicyValues['maxWithdrawal'] = {};
    runningPolicyValues['maxTopupWithdrawal'] = {};
    runningPolicyValues['error'] = {};
    runningPolicyValues['loyalBonus'] = {};
    runningPolicyValues['specialBonus'] = {};

    runningPolicyValues['topup'] = {};                       // top up premiums
    runningPolicyValues['totalPremiums'] = {};
    runningPolicyValues['newPremium'] = {};
    runningPolicyValues['netPremium'] = {};
    runningPolicyValues['premiumLoad'] = {};                 // total premium load (base + topup)
    runningPolicyValues['topupPremiumLoad'] = {};            // topup premium load
    
    runningPolicyValues['BAVFundAllocations'] = {};        // for BAV fund allocations
    runningPolicyValues['TAVFundAllocations'] = {};        // for TAV fund allocations

    for (var returnTypeKey in PublicConstants.FUND_RETURN) {
        runningPolicyValues['regularPremium'][returnTypeKey] = Number(0);
        //Fixing the issue ATP-3149
        runningPolicyValues['regularBasePremium'][returnTypeKey] = Number(0);
        runningPolicyValues["annualTotalFundBalances"][returnTypeKey] = Number(0);
        runningPolicyValues['cois'][returnTypeKey] = Number(0);
        runningPolicyValues['annualCois'][returnTypeKey] = Number(0);
        runningPolicyValues['accumulatedcashOutPayments'][returnTypeKey] = Number(0);
        runningPolicyValues['bavBeforeBonusAndWithdrawal'][returnTypeKey] = Number(0);
        runningPolicyValues['tavBeforeBonusAndWithdrawal'][returnTypeKey] = Number(0);
        runningPolicyValues['bavAfterBonusAndBeforeWithdrawal'][returnTypeKey] = Number(0);
        runningPolicyValues['tavAfterBonusAndBeforeWithdrawal'][returnTypeKey] = Number(0);
        runningPolicyValues['surrenderValues'][returnTypeKey] = Number(0);
        runningPolicyValues['deathBenefits'][returnTypeKey] = Number(0);
        runningPolicyValues['totalDeathBenefits'][returnTypeKey] = Number(0);
        runningPolicyValues['totalProtections'][returnTypeKey] = Number(0);
        runningPolicyValues['surrenderValueBeforeWithdrawal'][returnTypeKey] = Number(0);

        runningPolicyValues['maxWithdrawal'][returnTypeKey] = 0;
        runningPolicyValues['maxTopupWithdrawal'][returnTypeKey] = 0;
        runningPolicyValues['error'][returnTypeKey] = "";
        runningPolicyValues['loyalBonus'][returnTypeKey] = 0;
        runningPolicyValues['specialBonus'][returnTypeKey] = 0;

        runningPolicyValues['totalPremiums'][returnTypeKey] = 0;
        runningPolicyValues['newPremium'][returnTypeKey] = 0;
        runningPolicyValues['netPremium'][returnTypeKey] = 0;
        runningPolicyValues['premiumLoad'][returnTypeKey] = 0;                 // total premium load (base + topup)
        runningPolicyValues['topupPremiumLoad'][returnTypeKey] = 0;            // topup premium load
        runningPolicyValues['topup'][returnTypeKey] = 0;            // topup premium load
   }
},
   initialSetup: function(args) {
    var context = args["context"];
    var proposal = context.proposal;
    var basePlan = proposal.coverageInfo;
    var metadata = context.events.metadata;
    var productId = basePlan.product.productKey.primaryProduct.productPK.productId;
    var runningPolicyValues = context.runningPolicyValues;
    //var regularPremium = basePlan.plannedPremium;

    context['precision'] = 2;
    context['interestRatePrecision'] = 7;

    var year = runningPolicyValues.year;
    var months = runningPolicyValues.months;
    var month = months % 12;
    
    /* it is reserverd for future use */
    var fundConfig;
    fundConfig = {
        fundId: "Cash"
    };
    fundConfig['annualInterestRate'] = {};
    fundConfig[PublicConstants.FUND_RETURN.LOW] = Number(0);
    fundConfig[PublicConstants.FUND_RETURN.MEDIUM] = Number(0);
    fundConfig[PublicConstants.FUND_RETURN.HIGH] = Number(0);
    fundConfig.annualInterestRate[PublicConstants.FUND_RETURN.LOW] = Number(0);
    fundConfig.annualInterestRate[PublicConstants.FUND_RETURN.MEDIUM] = Number(0);
    fundConfig.annualInterestRate[PublicConstants.FUND_RETURN.HIGH] = Number(0);
    fundConfig['policyOptions'] = context.policyOptions;

    runningPolicyValues['cors'] = {};
    for (var returnTypeKey in PublicConstants.FUND_RETURN) {
        runningPolicyValues['cors'][returnTypeKey] = Number(0);
    }
    
    var runningPolicyValues = context.runningPolicyValues;
    var months = runningPolicyValues.months;

    // ****** face amount handler ********
    var IClone = Interface.define({
        clone: Interface.METHOD
    })
    
    var cloneHelper = Class.define({
        init: function(args) {
            this.self['context'] = {};
            this.self.context['exclusion'] = args['exclusion'];
        },
        clone: function(args) {
            var obj = args['obj'];
            if (typeof obj === 'object') {
                var res = Utils.extend({}, obj);
                for(var i in res) {
                    if (this.self.context.exclusion.indexOf(i) >= 0) {
                        // nothing
                    } else {
                        if (typeof res[i] === 'object') {
                            res[i] = this.self.clone({obj: res[i]});
                        }
                    }
                }
                return res;
            } else {
                return obj;
            }
        }
    })
    
    var IFaceAmountHelper = Interface.define({
        changeFaceAmount: Interface.METHOD,
        calculatePremium: Interface.METHOD,
        totalFaceAmount: Interface.METHOD,
        debugLayers: Interface.METHOD
    });
    
    var faceAmountHelper = Class.define({
        init: function(args) {
            var basePlan = args['basePlan'];
            var projectionContext = args['context'];
            var running = projectionContext.runningPolicyValues;
            var returnType = args['returnType'];

            this.self['context'] = {};
            this.self.context['projectionContext'] = projectionContext;
            this.self.context['faceAmountLayers'] = [];
            this.self.context['basePlan'] = Utils.extend({}, basePlan);
            this.self.context['returnType'] = returnType;
            
            if (Utils.isNothing( running.faceAmount )) {
                running.faceAmount = {};
            }
            if (Utils.isNothing( running.faceAmount[returnType]) ) {
                running.faceAmount[returnType] = 0;
            }
            this.self.addLayer({coverage: Utils.extend({}, basePlan)});
        },
        changeFaceAmount: function(args) {
            // accept face amount and decide if new layer should be increased
            // decrease face amount
            var policyYear = args['year'];
            var newFaceAmount = args['faceAmount'];
            var faceAmount = this.self.totalFaceAmount(args);
            if (faceAmount < newFaceAmount) {
                // increasing face amount
                var newLayerFaceAmount = newFaceAmount - faceAmount;
                // var layer = this.self.createLayer({year:policyYear, faceAmount:newLayerFaceAmount});
                var layer = this.self.createLayer({ year: policyYear, faceAmount: newLayerFaceAmount, isFAChange: true });
                this.addLayer({coverage: layer});
            } else
            if (faceAmount > newFaceAmount) {
                // decreasing face amount
                var reducingAmount = faceAmount - newFaceAmount;
                this.self.reduceFaceAmount({reducingFaceAmount:reducingAmount});
            }
        },
        createLayer: function(args) {
            var year = args['year'];
            var layerFaceAmount = args['faceAmount'];
            // clone layer
            var basePlan = this.self.context.basePlan;
            // var newLayer = Utils.extend({}, basePlan);
            var newLayer = IClone.appliedTo(cloneHelper.create({exclusion:['catalog', 'schema','proposal']})).call('clone', {obj:basePlan});
            newLayer.parties.party.insuredAge = basePlan.parties.party.insuredAge + year;
            newLayer.faceAmount = layerFaceAmount;
            newLayer.topUpPremium = 0;
            if (!Utils.isNothing(args['isFAChange'])) {
                newLayer.isFAChange = args['isFAChange'];
            }
            // _DBR("@@@@@ createLayer", newLayer, "faceAmountHelper", year * 12);
            return newLayer;
        },
        addLayer: function(args) {
            var layer = args['coverage'];
            this.self.context.faceAmountLayers.push(layer);
            this.self.context.projectionContext.runningPolicyValues.faceAmount[this.self.context.returnType] += layer.faceAmount;
        },
        reduceFaceAmount: function(args) {
            var reducingFaceAmount = args['reducingFaceAmount'];
            this.self.context.projectionContext.runningPolicyValues.faceAmount[this.self.context.returnType] -= reducingFaceAmount;

            var layers = this.self.context.faceAmountLayers.length;
            for(var i=layers-1; i>=0; i--) {
                var layer = this.self.context.faceAmountLayers[i];
                var reduced = Math.min(layer.faceAmount, reducingFaceAmount);
                layer.faceAmount -= reduced;
                reducingFaceAmount -= reduced;
            }
            var newLayers = [];
            for(var i in this.self.context.faceAmountLayers) {
                var layer = this.self.context.faceAmountLayers[i];
                if (layer.faceAmount > 0) {
                    newLayers.push( layer );
                }
            }
            this.self.context.faceAmountLayers = newLayers;

            _DBR("@@@@ faceAmount[" + this.self.context.returnType + "]", 
                this.self.context.projectionContext.runningPolicyValues.faceAmount[this.self.context.returnType], 
                "eventAvyInitialization_RUVXX", this.self.context.projectionContext.runningPolicyValues.months);
        },
        totalFaceAmount: function(args) {
            var faceAmountTotal = 0;
            for(var i in this.self.context.faceAmountLayers) {
                var cov = this.self.context.faceAmountLayers[i];
                faceAmountTotal += cov.faceAmount;
            }
            return faceAmountTotal;
        },
        debugLayers: function(args) {
            var ctx = this.self.context.projectionContext;
            var running = ctx.runningPolicyValues;
            var months = running.months;
            var year = running.year;
            var proposal = ctx.proposal;

            var totalFa = this.self.totalFaceAmount(args);
            var debugLayerList = [];
            for(var i in this.self.context.faceAmountLayers) {
                var layer = this.self.context.faceAmountLayers[i];
                if (layer.faceAmount > 0) {
                    debugLayerList.push({layerId: i, layerAge: layer.parties.party.insuredAge, faceAmount: layer.faceAmount});
                }
            }
            _DBR("Face Amount [" + this.self.context.returnType + ']', totalFa, 'faceAmountHelper', months);
            if (year >= proposal.startDebugYear && year <= proposal.stopDebugYear && proposal.enableDebug) {
                _SS(debugLayerList, 5);
            }
        },
        calculatePremium: function(args) {
            var debug = args['debug'];
            var ctx = this.self.context.projectionContext;
            var running = ctx.runningPolicyValues;
            var months = running.months;
            var year = running.year;
            var paymentMode = this.self.context['basePlan'].options.paymentMode;

            var totalPremium = 0;
            var covPremCalcHelper = IFunction.implementBy( CalculateCoveragePremium.create() );
            for(var ci in this.self.context.faceAmountLayers) {
                var layer = this.self.context.faceAmountLayers[ci];
                var covPremObj = covPremCalcHelper.call("execute", { coverage:layer, year:0, months:months, paymentMode:paymentMode, debug: debug, context: ctx });    
                if (!Utils.isNothing( covPremObj )) {
                    totalPremium = totalPremium + covPremObj.value;
                }
            }
            return totalPremium;
        }
    });
    // ***********************************

    // bonus accumulators
    runningPolicyValues['firstThreeYearPremiumLoad'] = {};
    runningPolicyValues['accumFundBalancesForBonus'] = {};
    
    runningPolicyValues['lapseAtYearBeginning'] = {};
    runningPolicyValues['lapse'] = {};
    runningPolicyValues['plannedPremium'] = {};
    runningPolicyValues['faceAmount'] = {};
    runningPolicyValues['faceAmountLayers'] = {};
    for (var returnTypeKey in PublicConstants.FUND_RETURN) {
        runningPolicyValues['lapseAtYearBeginning'][returnTypeKey] = "N";
        runningPolicyValues['lapse'][returnTypeKey] = "N";
        
        //runningPolicyValues['faceAmount'][returnTypeKey] = basePlan.faceAmount;
        runningPolicyValues['faceAmountLayers'][returnTypeKey] = IFaceAmountHelper.implementBy(
            faceAmountHelper.create({basePlan:basePlan, context:context, returnType:returnTypeKey})
        );
        runningPolicyValues['faceAmountLayers'][returnTypeKey].call("debugLayers");
        
        runningPolicyValues['plannedPremium'][returnTypeKey] = _V( basePlan.plannedPremium, 0);
        runningPolicyValues['accumFundBalancesForBonus'][returnTypeKey] = 0;
    }

    // ************ RUV fund pool *************
    var RUVXXFundPoolImpl = FundPoolImpl.extend({
        init: function(args) {
            //this.parent.init(args);
            var context = args['context'];
            this.self.context['projectionContext'] = context;
        },
        dumpin: function(args) {
            var amount = args['amount'];
            var amounts = args['amounts'];
            
            var isNegative = false;
            if (!Utils.isNothing(amount)) {
                isNegative = (Number(amount) < 0);
            }
            if (!Utils.isNothing(amounts)) {
                for(var i in amounts) {
                    var amount = amounts[i];
                    isNegative = (Number(amount) < 0);
                    if (isNegative) break;
                }
            }
            var allocationRatios;
            if (isNegative || runningPolicyValues.isCalculatingCoiRUVXX || runningPolicyValues.isCalculatingTopupRUVXX) {
                // negative means it is withdrawal instead of dumpin
                allocationRatios = this.self.allocations();
            } else {
                allocationRatios = this.self.dumpinAllocation();
            }
            
            var remainAmount = amount;
            var remainAmounts = Utils.extend({}, amounts);
            
            //console.log("allocationRatios (i.e. pool allocation ratio) = " + JSON.stringify(allocationRatios));
            // var i = 0;
            _DBR("allocationRatios", allocationRatios, "FundPoolImpl->" ,this.self.context.iteratorContext.runningPolicyValues.months);
            
            // Get product key and sort
            var keys = Object.keys(this.self.context.fundPools);
            keys.sort(function(a, b) {
              if(a < b) return -1;
              if(a > b) return 1;
              return 0;
            });
            
            // for (var fundPoolKey in this.self.context.fundPools) {
            for (var i = 0; i < keys.length; i++) {
                var fundPoolKey = keys[i];
                // i = i + 1;
                // var lastOne = (i == this.self.context.fundPools.length);
                var lastOne = (i + 1 == keys.length);
                
                var pool = this.self.context.fundPools[fundPoolKey];
                for (var returnType in pool.context.fund) {
                    if (Utils.isNothing(pool.context.fund[returnType])) {
                       pool.context.fund[returnType] = 0;
                    }
                    //console.log("fund before = " + pool.context.fund[returnType]);
                    var allocatedAmount = Number(0);
                    if (!Utils.isNothing(amounts)) {
                       if (!lastOne) {
                        //   allocatedAmount = _R(Number(amounts[returnType]) * Number(allocationRatios[fundPoolKey][returnType]), this.context.precision);
                        //   remainAmounts[returnType] = remainAmounts[returnType] - allocatedAmount;
                        allocatedAmountValue = Number(amounts[returnType]) * Number(allocationRatios[fundPoolKey][returnType]);
                        // allocatedAmountValue = Math.round(allocatedAmountValue * 1e7) / 1e7;
                        var fixIssueRoundingFlag = 1;
                        if (Number(amounts[returnType]) < 0) {
                          fixIssueRoundingFlag = -1;
                        }
                        // allocatedAmount = _R(fixIssueRoundingFlag * allocatedAmountValue, this.context.precision);
                        // allocatedAmount = Math.round(allocatedAmount * 1e7) / 1e7;
                        allocatedAmount = Math.round(allocatedAmountValue * 1e7) / 1e7;
                        allocatedAmount = _R(fixIssueRoundingFlag * allocatedAmount, this.context.precision);
                        
                        allocatedAmount = allocatedAmount * fixIssueRoundingFlag;
                        // remainAmounts[returnType] = _R(Number(remainAmounts[returnType]) - Number(allocatedAmount), this.context.precision);
                        remainAmounts[returnType] = _R(((Number(remainAmounts[returnType]) - Number(allocatedAmount)) * fixIssueRoundingFlag), this.context.precision);
                        remainAmounts[returnType] = remainAmounts[returnType] * fixIssueRoundingFlag;
                
                       } else {
                           allocatedAmount = remainAmounts[returnType];
                       }
                    } else {
                       if (!lastOne) {
                        //   allocatedAmount = _R(amount * allocationRatios[fundPoolKey][returnType], this.context.precision);
                        //   remainAmount = remainAmount - allocatedAmount;
                        allocatedAmountValue = Number(amount) * Number(allocationRatios[fundPoolKey][returnType]);
                        // allocatedAmountValue = Math.round(allocatedAmountValue * 1e7) / 1e7;
                        allocatedAmount = Math.round(allocatedAmountValue * 1e7) / 1e7;
                        allocatedAmount = _R(-1 * allocatedAmount, this.context.precision);
                        
                        allocatedAmount = allocatedAmount * -1;
                        remainAmount = _R(Number(remainAmount) - Number(allocatedAmount), this.context.precision);
                       } else {
                           allocatedAmount = remainAmount;
                       }
                    }
                    
                    var currentBalance = Number(pool.context.fund[returnType]);
                    pool.context.fund[returnType] = _R(currentBalance + Number(allocatedAmount), this.context.precision);
                    
                    if (allocatedAmount < 0) {
                        _DBR("fundBalance(" + fundPoolKey + ")[" + returnType + "] = currentBalance(" + currentBalance +  ") - amount(" + Number(-allocatedAmount) + ")", pool.context.fund[returnType], "FundPoolImpl->" ,this.self.context.iteratorContext.runningPolicyValues.months);
                    } else {
                        _DBR("fundBalance(" + fundPoolKey + ")[" + returnType + "] = currentBalance(" + currentBalance +  ") + amount(" + Number(allocatedAmount) + ")", pool.context.fund[returnType], "FundPoolImpl->" ,this.self.context.iteratorContext.runningPolicyValues.months);
                    }
                    //console.log("fund after = " + pool.context.fund[returnType]);
                }
            }
        },
        
        allocations: function(args) {
            var allocationRatios = {};
            var balanceTotals = this.self.fundBalances();
            var remainAllocationRatios = { LOW: 0, MEDIUM: 0, HIGH: 0 };
            var keys = Object.keys(this.self.context.fundPools);
            keys.sort(function (a, b) {
                if (a < b) return -1;
                if (a > b) return 1;
                return 0;
            });
            for (var i = 0; i < keys.length; i++) {
                var fundPoolKey = keys[i];
                var lastOne = (i + 1 == keys.length);
                if (Utils.isNothing(allocationRatios[fundPoolKey])) {
                    allocationRatios[fundPoolKey] = {};
                }
                var balances = IFund.appliedTo(this.self.context.fundPools[fundPoolKey]).call("fundBalances", {});
                //console.log(JSON.stringify(balances));
    
                for (var balanceIdx in balances) {
                    if (Number(balanceTotals[balanceIdx]) == 0) {
                        allocationRatios[fundPoolKey][balanceIdx] = _R(this.self.context.allocations[fundPoolKey] / 100, 13);
                    } else {
                        // allocationRatios[fundPoolKey][balanceIdx] = _R(balances[balanceIdx] / balanceTotals[balanceIdx], 13);
                        if (!lastOne) {
                             allocationRatios[fundPoolKey][balanceIdx] = _R(balances[balanceIdx] / (balanceTotals[balanceIdx] + 1e-10), 13);
                             remainAllocationRatios[balanceIdx] += allocationRatios[fundPoolKey][balanceIdx];
                         } else {
                             if (keys.length > 1) {
                                 allocationRatios[fundPoolKey][balanceIdx] = _R(1 - remainAllocationRatios[balanceIdx], 13);
                             } else {
                                 allocationRatios[fundPoolKey][balanceIdx] = _R(balances[balanceIdx] / (balanceTotals[balanceIdx] + 1e-10), 13);
                                 remainAllocationRatios[balanceIdx] += allocationRatios[fundPoolKey][balanceIdx];
                             }
                         }
                    }
                }
            }
            var running = this.self.context.projectionContext.runningPolicyValues;
            if (running.isCalculatingPolicyFeeRUVXX) {
                if (!running.isCalculatingTopupRUVXX) {
                    allocationRatios = running.previousAllocationRatios;
                } else {
                    allocationRatios = running.previousTopupAllocationRatios;
                    running.isCalculatingTopupRUVXX = false;
                }
                running.isCalculatingPolicyFeeRUVXX = false;
            } else {
                if (!running.isCalculatingTopupRUVXX) {
                    running.isCalculatingCoiRUVXX = false;
                    running.previousAllocationRatios = allocationRatios;
                } else {
                    running.previousTopupAllocationRatios = allocationRatios;
                    running.isCalculatingTopupRUVXX = false;
                }
            }
            return allocationRatios;
        },
        rollingInterest: function(args) {
            var keys = Object.keys(this.self.context.fundPools);
            keys.sort(function(a, b) {
              if(a < b) return -1;
              if(a > b) return 1;
              return 0;
            });
            for (var i = 0; i < keys.length; i++) {
               var fundPoolKey = keys[i];
               var pool = this.self.context.fundPools[fundPoolKey];
               IFund.appliedTo(pool).call("rollingInterest", {});
            }
            this.self.context.noOfInterestRolling++;
         },
        fundBalances: function(args) {
            var fundReturns = {};
            for (var fundPoolKey in this.self.context.fundPools) {
              var pool = this.self.context.fundPools[fundPoolKey];
              var poolFunds = IFund.appliedTo(pool).call("fundBalances", {});
              //console.log("poolFunds = " + JSON.stringify(poolFunds));

              for (var fundKey in poolFunds) {
                  if (Utils.isNothing(fundReturns[fundKey])) {
                     fundReturns[fundKey] = 0;
                  }
                  // fundReturns[fundKey] = Number(fundReturns[fundKey]) + Number(poolFunds[fundKey]);
                  fundReturns[fundKey] = Math.round((Number(fundReturns[fundKey]) + Number(poolFunds[fundKey])) * 1e7) / 1e7;
              }
            }
            //console.log("Pool.fundBalances = " + JSON.stringify(fundReturns));
            return fundReturns;
         },
        
        dumpinAllocation: function(args) {
            var running = this.self.context.projectionContext.runningPolicyValues;
            // cache feature
            var allocationRatioOfFundAtInception = this.self.context.allocationRatioOfFundAtInception;
            if (Utils.isNothing(allocationRatioOfFundAtInception)) {
                var allocationOfFundAtInception = this.self.context.allocations;   // by fund code
                var allocationRates = {};
                for(var fundKey in allocationOfFundAtInception) {
                    allocationRates[fundKey] = {};
                    for(var returnKey in PublicConstants.FUND_RETURN) {
                        allocationRates[fundKey][returnKey] = allocationOfFundAtInception[fundKey]/100;
                    }
                }
                allocationRatioOfFundAtInception = allocationRates;
                _DBR('@@@@ allocationRatioOfFundAtInception created', allocationRatioOfFundAtInception, "RUVXXFundPoolImpl", running.months);
                this.self.context['allocationRatioOfFundAtInception'] = allocationRates;
            }
            return allocationRatioOfFundAtInception;
        }
    });
    // **************************************

    /* create fund accounts */
    if (!Utils.isNothing(proposal.funds.fundRecord)) {
        runningPolicyValues['fundPool'] = RUVXXFundPoolImpl.create({
            context: context
        });
    }

    /* create topup fund accounts */
    if (!Utils.isNothing(proposal.funds.fundRecord)) {
        runningPolicyValues['topupFundPool'] = RUVXXFundPoolImpl.create({
            context: context
        });
    }

    /* it is reserved for future use */
    runningPolicyValues['cashoutAccount'] = FundImpl.create({
        fundConfig: fundConfig,
        context: context
    });

    /* list available rates */
    _DB("rates", context.rates, "@@@@@@@@");

    /* initialize accumulated policy values */
    runningPolicyValues['contractPlannedPremium'] = null; 
    //_DBR("contractPlannedPremium = ", runningPolicyValues.contractPlannedPremium, "eventAvyInitialization_RUVXX", runningPolicyValues.months);
    runningPolicyValues['accPremiums'] = {};
    // Fixing the issue ATP-3082 Accumulate premium for base plan is missing
    runningPolicyValues['accumBasePremiums'] = {};
    runningPolicyValues['accumulateTotalPlannedPremiums'] = {};
    runningPolicyValues['totalWithdrawal'] = 0;
    runningPolicyValues['accumTopup'] = {};
    runningPolicyValues['accumPremiumRequested'] = {};
    runningPolicyValues['accumPremiumPaid'] = {};
    runningPolicyValues['wocTargetPremium'] = 0;
    
    // plannedPremiumAtInception is for calculating multiplier of planned premium pay
    // the value will be set in initialize planned premium event
    runningPolicyValues['plannedPremiumAtInception'] = null;
    runningPolicyValues['premiumMultiplier'] = 0;
    
    runningPolicyValues['cumulativePremium'] = {};         // for colCumulativePremium
    // ----
    for(var i in PublicConstants.FUND_RETURN) {
        runningPolicyValues['firstThreeYearPremiumLoad'][i] = 0;
        runningPolicyValues['accPremiums'][i] = 0;
        runningPolicyValues['accumTopup'][i] = 0;
        runningPolicyValues['accumPremiumRequested'][i] = 0;
        runningPolicyValues['accumPremiumPaid'][i] = 0;
        // Fixing the issue ATP-3082 Accumulate premium for base plan is missing
        runningPolicyValues['accumBasePremiums'][i] = 0;
        runningPolicyValues['accumulateTotalPlannedPremiums'][i] = 0;
        
        runningPolicyValues['cumulativePremium'][i] = 0; // for colCumulativePremium
    }
    //runningPolicyValues['initialFaceAmountRatio'] = Number(basePlan.faceAmount / basePlan.plannedPremium).toFixed(2);
    //_DBR("initialFaceAmountRatio (RS) = ", runningPolicyValues.initialFaceAmountRatio, "eventAvyInitialization_RUVXX", runningPolicyValues.months);

    // define for premium holiday
    runningPolicyValues['phActivities'] = {};
    runningPolicyValues['phActivities'].isPremiumHoliday = false;
    runningPolicyValues['phActivities'].isResumePremiumHoliday = false;
    runningPolicyValues['phActivities'].premiumMultiplier = 0;
    runningPolicyValues['phActivities'].resumeModalBasePremium = 0;
     
    var isUVL = basePlan.catalog.call('isUVL');
    if (isUVL) {
        IFund.appliedTo(runningPolicyValues.fundPool).call("dumpin", {
            amount: 0
        });
        IFund.appliedTo(runningPolicyValues.topupFundPool).call("dumpin", {
            amount: 0
        });
        IFund.appliedTo(runningPolicyValues.cashoutAccount).call("dumpin", {
            amount: 0
        });
    }
}
});
var eventCalcAccumulateCouponBenefitEOY_EDX = eventCalculateTradPlanAccumulateDividends_EDX.extend({
   eventName: function(args) {
    return "Calculate Trad Plan Accumulate Coupon";
},
   dividendName: function(args) {
    return "coupon";
},
   accDividendName: function(args) {
    return "accCoupon";
},
   dividendIntFieldName: function(args) {
    return "AODRate";
}
});
var eventCalcAccumulateCouponBenefitEOYHIGH_EDX = eventCalculateTradPlanAccumulateDividends_EDX.extend({
   eventName: function(args) {
    return "Calculate Trad Plan Accumulate Coupon HIGH";
},
   dividendName: function(args) {
    return "coupon";
},
   accDividendName: function(args) {
    return "accHigherCoupon";
},
   dividendIntFieldName: function(args) {
    return "AODRateHigh";
}
});
var eventCalcAccumulateCouponBenefitEOYLOW_EDX = eventCalculateTradPlanAccumulateDividends_EDX.extend({
   eventName: function(args) {
    return "Calculate Trad Plan Accumulate Coupon LOW";
},
   dividendName: function(args) {
    return "coupon";
},
   accDividendName: function(args) {
    return "accLowerCoupon";
},
   dividendIntFieldName: function(args) {
    return "AODRateLow";
}
});
var eventCalcAccumulateExcellentReward_EDX = eventCalculateTradPlanAccumulateDividends_EDX.extend({
   eventName: function(args) {
    return "Calculate Trad Plan Accumulate Excellent Reward";
},
   dividendName: function(args) {
    return "excellentReward";
},
   accDividendName: function(args) {
    return "accExcellentReward";
},
   dividendIntFieldName: function(args) {
    return "AODRate";
}
});
var eventCalcAccumulateExcellentRewardHIGH_EDX = eventCalculateTradPlanAccumulateDividends_EDX.extend({
   eventName: function(args) {
    return "Calculate Trad Plan Accumulate Excellent Reward HIGH";
},
   dividendName: function(args) {
    return "excellentReward";
},
   accDividendName: function(args) {
    return "accHigherExcellentReward";
},
   dividendIntFieldName: function(args) {
    return "AODRateHigh";
}
});
var eventCalcAccumulateExcellentRewardLOW_EDX = eventCalculateTradPlanAccumulateDividends_EDX.extend({
   eventName: function(args) {
    return "Calculate Trad Plan Accumulate Excellent Reward LOW";
},
   dividendName: function(args) {
    return "excellentReward";
},
   accDividendName: function(args) {
    return "accLowerExcellentReward";
},
   dividendIntFieldName: function(args) {
    return "AODRateLow";
}
});
var eventCalcCOILocal = eventCalculateCOI.extend({
   eventName: function(args) {
    return "Calculate COI and Round to 2 digits (Local)";
},
   run: function(args) {
    // this.parent.run(args);
    var context = args["context"];
    var proposal = context.proposal;
    var basePlan = proposal.coverageInfo;
    var productId = basePlan.product.productKey.primaryProduct.productPK.productId;
    var runningPolicyValues = context.runningPolicyValues;
    var year = runningPolicyValues.year;
    var months = runningPolicyValues.months;
    var coiVal = Number(0);

    var coiRates = context.rates[basePlan.product.productKey.primaryProduct.productPK.productId][SchemaConstants.PREMIUM_TYPE.COSTOFINSURANCE];
    var coiRate;
    if (year > coiRates.rates.length - 1) {
      coiRate = coiRates.rates[coiRates.rates.length - 1];
    } else {
      coiRate = coiRates.rates[year];
    }
    
    coiRate = _R2(coiRate);
    _DBR("Debug round issue COIs rates:", coiRates, "eventCalculateCOILocal->", context.runningPolicyValues.months);
    _DBR("Debug round issue COIs rate:", coiRate, "eventCalculateCOILocal->", context.runningPolicyValues.months);
    
    
    var coiCalc = DataDrivenCalculatorImpl.create({
      drivenKeys: PublicConstants.FUND_RETURN,
      drivenDatas: runningPolicyValues.nars,
    });
    var cois = IDataDrivenCalculator.appliedTo(coiCalc).call("calculate", {
      calculateBlock: function (nar) {
        // var coi = _R2((coiRate * _R13(1 / 12)) * nar / 1000);
        var coi = _R2(_R13(coiRate * _R13(1 / 12)) * nar / 1000);
        coiVal = coi;
        return coi;
      }
    });
    runningPolicyValues['cois'] = cois;
    runningPolicyValues['coiRate'] = coiRate;
    if (months == "0") {
      runningPolicyValues['firstMonthCoi'] = coiVal;
    }

    //var fundBalances = IFund.appliedTo(runningPolicyValues.fundPool).call("fundBalances", {});
    //var cashOutBalances = IFund.appliedTo(runningPolicyValues.cashoutAccount).call("fundBalances", {});
    var isUVL = basePlan.catalog.call("isUVL");
    var isRegularSaving = basePlan.catalog.call("isRegularSaving");   
    
    for (var coiIdx in runningPolicyValues.cois) {
        //var balance = Number( fundBalances[coiIdx] ) + Number( cashOutBalances[coiIdx] );

        var isLapse = runningPolicyValues.lapse[coiIdx];
        var coi = runningPolicyValues.cois[coiIdx];

        // if (isLapse == 'Y') {
        //     coi = 0;
        // } else {
        //     coi = _R2( coi );
        // }
        
        if( isUVL && isRegularSaving ) {
            if (isLapse == 'Y') {
                coi = 0;
            } else {
                coi = _R2( coi );   
            }
        } else {
            coi = _R2( coi );
        }

        //coi = _R2(Math.min( coi, balance ) );
        //_DBR("coi[" + coiIdx + "] = R2( min(" + balance + ", " + runningPolicyValues.cois[coiIdx] + "))", coi, "eventCalculateCOILocal->", runningPolicyValues.months);    
    
        runningPolicyValues.cois[coiIdx] = coi;
    }

    _DBR("all COIs is rounded to 2 digits", runningPolicyValues.cois, "eventCalculateCOILocal->", context.runningPolicyValues.months);
},
   shouldBeRun: function(args) {
    // return this.parent.shouldBeRun(args);
    return true;
}
});
var eventCalcCOILocalRUVXX = eventCalculateCOI.extend({
   eventName: function(args) {
return "Calculate COI and Round to 7 digits (Local)";
},
   shouldBeRun: function(args) {
return true;
},
   run: function(args) {
// this.parent.run(args);
    var context = args["context"];
    var proposal = context.proposal;
    var basePlan = proposal.coverageInfo;
    var productId = basePlan.product.productKey.primaryProduct.productPK.productId;
    var runningPolicyValues = context.runningPolicyValues;
    var year = runningPolicyValues.year;
    var months = runningPolicyValues.months;
    var coiVal = Number(0);

    var coiRates = context.rates[basePlan.product.productKey.primaryProduct.productPK.productId][SchemaConstants.PREMIUM_TYPE.COSTOFINSURANCE];
    var coiRate;
    if (year > coiRates.rates.length - 1) {
      coiRate = coiRates.rates[coiRates.rates.length - 1];
    } else {
      coiRate = coiRates.rates[year];
    }
    
    // coiRate = _R2(coiRate);
    // coiRate = _R7(coiRate);
    
    // This for fixing float system issue
    coiRate = _R2(coiRate) / 100000;
    
    _DBR("Debug round issue COIs rates:", coiRates, "eventCalculateCOILocal->", context.runningPolicyValues.months);
    _DBR("Debug round issue COIs rate:", coiRate, "eventCalculateCOILocal->", context.runningPolicyValues.months);
    
    
    var coiCalc = DataDrivenCalculatorImpl.create({
      drivenKeys: PublicConstants.FUND_RETURN,
      drivenDatas: runningPolicyValues.nars,
    });
    var cois = IDataDrivenCalculator.appliedTo(coiCalc).call("calculate", {
      calculateBlock: function (nar) {
        // var coi = _R2((coiRate * _R13(1 / 12)) * nar / 1000);
        var coi = _R2(_R13(coiRate * _R13(1 / 12)) * nar / 1000);
        coiVal = coi;
        return coi;
      }
    });
    runningPolicyValues['cois'] = cois;
    runningPolicyValues['coiRate'] = coiRate;
    if (months == "0") {
      runningPolicyValues['firstMonthCoi'] = coiVal;
    }

    //var fundBalances = IFund.appliedTo(runningPolicyValues.fundPool).call("fundBalances", {});
    //var cashOutBalances = IFund.appliedTo(runningPolicyValues.cashoutAccount).call("fundBalances", {});
    var isUVL = basePlan.catalog.call("isUVL");
    var isRegularSaving = basePlan.catalog.call("isRegularSaving");   
    
    for (var coiIdx in runningPolicyValues.cois) {
        //var balance = Number( fundBalances[coiIdx] ) + Number( cashOutBalances[coiIdx] );

        var isLapse = runningPolicyValues.lapse[coiIdx];
        var coi = runningPolicyValues.cois[coiIdx];

        // if (isLapse == 'Y') {
        //     coi = 0;
        // } else {
        //     coi = _R2( coi );
        // }
        
        if( isUVL && isRegularSaving ) {
            if (isLapse == 'Y') {
                coi = 0;
            } else {
                coi = _R2( coi );   
            }
        } else {
            coi = _R2( coi );
        }

        //coi = _R2(Math.min( coi, balance ) );
        //_DBR("coi[" + coiIdx + "] = R2( min(" + balance + ", " + runningPolicyValues.cois[coiIdx] + "))", coi, "eventCalculateCOILocal->", runningPolicyValues.months);    
    
        runningPolicyValues.cois[coiIdx] = coi;
    }

    _DBR("all COIs is rounded to 2 digits", runningPolicyValues.cois, "eventCalculateCOILocal->", context.runningPolicyValues.months);
}
});
var eventCalcCOR_COR01Local = eventCalculateCOR_XXXXX.extend({
   eventName: function(args) {
   return "Calculate COR of Riders (COR01)";
},
   calculateMonthlyCOR: function(args) {
   // to be overrided by child class
   //
   var context = args['context'];
   var running = context.runningPolicyValues;
   var proposal = context.proposal;
   var basePlan = proposal.coverageInfo;
   var rider = args['rider'];
   var rates = context['rates'];
   var baseProductId = basePlan.product.productKey.primaryProduct.productPK.productId;
   var riderProductId = rider.product.productKey.primaryProduct.productPK.productId;
   var year = running.year;
   var extraRating = rider.extraRating;
   var returnType = args['returnType'];
   var currentCors = running.cors[returnType];
   var premiums = running.premiums;
   
   var modalFactorForCoi = 1;
   if (basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.SEMIANNUAL) {
       modalFactorForCoi = 1/2;
   }
   if (basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.QUARTERLY) {
       modalFactorForCoi = 1/4;
   }
   if (basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.MONTHLY) {
       modalFactorForCoi = 1/12;
   }

   // Target Premium rate
   var targetPremiumRate = rates[riderProductId][SchemaConstants.PREMIUM_TYPE.BASICPREMIUM].rates[0];
   // COR rate
   var coiRate = rates[riderProductId][SchemaConstants.PREMIUM_TYPE.COSTOFINSURANCE].rates[year];
   // WOC Factor for Base
   var wocFactor = rates[riderProductId][SchemaConstants.PREMIUM_TYPE.MINIMUMPREMIUM].rates[year];
   // WOC Factor for Policy Fee
   var wocPolicyFeeFactor = rates[riderProductId][SchemaConstants.PREMIUM_TYPE.MIN_PLANNED_PREMUM].rates[year];
   var monthlyCoiRate = coiRate / 12 * extraRating.percentageExtra;

   // Basic information for calculation
   var narAmount = Number(running['nars'][returnType]);
   var extraRating = rider.extraRating;
   // WAIVER TRENDING FACTOR
   var waiverTrendingFactor = -3.6/100;   
   var policyDate = proposal.policyYearDate.date();
   policyDate.setMonth( policyDate.getMonth() + running.months );   
   var yearOfPolicyFee = Math.max(Math.min(2033, policyDate.getFullYear()) - 2015, 0);

   if (running.year < 2) {      
      _DBR("", "", "", running.year);
      _DBR("", "[ Rates for Reference (" + returnType + ") ]", "", running.year);
      _DBR("yearOfPolicyFee", yearOfPolicyFee, "", running.year);
      _DBR("narAmount", narAmount, "", running.year);
      _DBR("targetPremiumRate", targetPremiumRate, "", running.year);
      _DBR("coiRate", coiRate, "", running.year);
      _DBR("wocFactor", wocFactor, "", running.year);
      _DBR("wocPolicyFeeFactor", wocPolicyFeeFactor, "", running.year);
      _DBR("extraRating", extraRating, "", running.year);
      _DBR("monthlyCoiRate", monthlyCoiRate, "", running.year);
      _DBR("currentCors", currentCors, "", running.year);
      _DBR("policyDate", policyDate.formatString(), "", running.year);
   }

   /**  calculate NAAR model (initial) **/
   // 1. WOC POLICY FEE
   var trendingFactor = Math.pow(1 + waiverTrendingFactor, yearOfPolicyFee);
   var wocPolicyFee = _R(_R(wocPolicyFeeFactor * trendingFactor, 1) * running.policyFees[returnType] * 12, 3);

   /**  calculate NAAR model (regular) **/
   var wocNaarBase = _R((wocFactor * Number(extraRating.percentageExtra) + Number( _V( extraRating.flatExtra, 0) ) / 1000) * narAmount / 1000, 3);
   //wocPremiums = (currentCors + Number(basePlan.plannedPremium) + running['wocTargetPremium']) * 3;
   var wocPremiums = running['targetPremiums'] * 3;
   var totalWocFA = _R2(wocNaarBase + wocPolicyFee + wocPremiums);
   //var targetPremium = calculateTargetPremium(totalWocFA);
   if (year == 0) {
       wocCor = _R2(_R2(totalWocFA * monthlyCoiRate / 1000) / 2);
   } else {
       wocCor = _R2(totalWocFA * monthlyCoiRate / 1000);
   }

   var showValue = true;
   if (running.year < proposal.startDebugYear) {
      showValue = false;
   }
   if (running.year > proposal.stopDebugYear) {
      showValue = false;
   }
   if (showValue) {
       _DBR("", "", "", running.year);
       _DBR("", "[ Regular NAAR model for WOC (" + returnType + ") ]", "", running.year);
       _DBR("wocNaarBase", wocNaarBase, "", running.year);
       _DBR("wocPolicyFee", wocPolicyFee, "", running.year);
       _DBR("wocPremiums", wocPremiums, "", running.year);
       _DBR("totalWocFA", totalWocFA, "", running.year);
       _DBR("wocCor", wocCor, "", running.year);
   }

   return wocCor;
},
   calculateMethod: function(args) {
   return "COR01";
}
});
var eventCalcCOR_COR02Local = eventCalculateCOR_XXXXX.extend({
   eventName: function(args) {
return "Calculate COR of Riders (COR02)";
},
   calculateMonthlyCOR: function(args) {
   // to be overrided by child class
   //
   var context = args['context'];
   var running = context.runningPolicyValues;
   var proposal = context.proposal;
   var basePlan = proposal.coverageInfo;
   var rider = args['rider'];
   var baseProductId = basePlan.product.productKey.primaryProduct.productPK.productId;
   var riderProductId = rider.product.productKey.primaryProduct.productPK.productId;

   var rates = context['rates'];
   if (rider.coverageId.startsWith('R')) {
       rates = rates[rider.coverageId];
   }   

   var year = running.year;
   var months = running.months;
   var extraRating = rider.extraRating;
   var returnType = args['returnType'];

   var modalFactorForCoi = 1;
   if (basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.SEMIANNUAL) {
       modalFactorForCoi = 1/2;
   }
   if (basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.QUARTERLY) {
       modalFactorForCoi = 1/4;
   }
   if (basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.MONTHLY) {
       modalFactorForCoi = 1/12;
   }

   //if (running.months == 0 && returnType == PublicConstants.FUND_RETURN.LOW) {
   //   _SS(running, 5);
   //   _SS(rates, 5);
   //}
   
   // Set lienForJuveniles rates
   var lienForJuvenilesRate = {
    "rates": [.2, .4, .6, .8, 1]
   };

   var age = Number(rider.parties.party.insuredAge) + Number(running.year);

   // Calculate lienForJuveniles value base on age
   var lienForJuvenilesValue = lienForJuvenilesRate.rates[age] || 1;
   
   var corRate = rates[riderProductId][SchemaConstants.PREMIUM_TYPE.COSTOFINSURANCE].rates[year];
   
   _DBR("corRate (" + riderProductId + ")", corRate, "eventCalculateCOR_COR02Local->", months);
   _DBR("modal corRate (" + riderProductId + ")", _R13(corRate * _R13(1/12) * Number(extraRating.percentageExtra)), "eventCalculateCOR_COR02Local->", months);

    //   var cor = _R2(rider.faceAmount * lienForJuvenilesValue * _R13(corRate * _R13(1/12) * Number(extraRating.percentageExtra)) / 1000);
    
   // Add this line to fix MC5 cor. With MC5 (HospitalBenefit) no need to set lienForJuvenilesValue
   
    var catalog = rider.catalog.call('getCatalog');
    var isHospitalBenefit = Utils.matchInList("HospitalBenefit", catalog.ProductCatalog.ProductType.ProductTypeCode, false);
    var cor = 0;
    if (isHospitalBenefit) {
        cor = _R2(rider.faceAmount * _R13(corRate * _R13(1/12) * Number(extraRating.percentageExtra)) / 1000);
    } else {
        cor = _R2(rider.faceAmount * lienForJuvenilesValue * _R13(corRate * _R13(1/12) * Number(extraRating.percentageExtra)) / 1000);
    }
    //
    
   
   if (!Utils.isNothing(extraRating) && !Utils.isNothing(extraRating.flatExtra)) {
       cor  +=  _R2(rider.faceAmount * _R13(Number(extraRating.flatExtra) / 12) / 1000) ;
   }
   if (!Utils.isNothing(extraRating) && !Utils.isNothing(extraRating.tempFlat) && !Utils.isNothing(extraRating.tempFlatDuration)) {
       if (year < Number(extraRating.tempFlatDuration)) {
           cor  +=  _R2(rider.faceAmount * _R13(Number(extraRating.tempFlat) / 12) / 1000) ;
       }
   }

   if (year == 0) {
        cor = _R2(cor / 2);
   }

   //_DBR("COR (" + riderProductId + ") @ " + year + "[COR rate: " + corRate + "]", cor, "eventCalculateCOR_COR02Local->", running.months);
   return cor;
},
   calculateMethod: function(args) {
return "COR02";
}
});
var eventCalcCOR_COR03Local = eventCalculateCOR_XXXXX.extend({
   eventName: function(args) {
return "Calculate COR of Riders (COR03)";
},
   calculateMonthlyCOR: function(args) {
   // to be overrided by child class
   //
   var context = args['context'];
   var running = context.runningPolicyValues;
   var proposal = context.proposal;
   var basePlan = proposal.coverageInfo;
   var rider = args['rider'];
   var rates = context['rates'];
   if (rider.coverageId.startsWith('R')) {
       rates = rates[rider.coverageId];
   }   

   var baseProductId = basePlan.product.productKey.primaryProduct.productPK.productId;
   var riderProductId = rider.product.productKey.primaryProduct.productPK.productId;
   var year = running.year;
   var extraRating = rider.extraRating;
   var returnType = args['returnType'];

   var modalFactorForCoi = 1;
   if (basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.SEMIANNUAL) {
       modalFactorForCoi = 1/2;
   }
   if (basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.QUARTERLY) {
       modalFactorForCoi = 1/4;
   }
   if (basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.MONTHLY) {
       modalFactorForCoi = 1/12;
   }

   //if (running.months == 0 && returnType == PublicConstants.FUND_RETURN.LOW) {
   //   _SS(running, 5);
   //   _SS(rates, 5);
   //}
   
   _DBR("", "", "", running.months);
   _DBR("rider code", riderProductId, "eventCalculateCOR_COR03Local->", running.months);

   var pyd = proposal.policyYearDate.date();
   pyd.setMonth( pyd.getMonth() + running.months );
   var noOfInflationYears = pyd.getFullYear() - 2016;
   var inflationMultiplier = Math.pow(1.08, noOfInflationYears);
   
   _DBR("noOfInflationYears", noOfInflationYears, "eventCalculateCOR_COR03Local->",running.months);
   _DBR("inflationMultiplier", inflationMultiplier, "eventCalculateCOR_COR03Local->",running.months);

   var corRate = rates[riderProductId][SchemaConstants.PREMIUM_TYPE.COSTOFINSURANCE].rates[year];
   _DBR("corRate (no inflation)", corRate, "eventCalculateCOR_COR03Local->",running.months);

   var ciRate = 0;
   if (!Utils.isNothing(rates[riderProductId][SchemaConstants.PREMIUM_TYPE.MINIMUMPREMIUM])) {
       ciRate = rates[riderProductId][SchemaConstants.PREMIUM_TYPE.MINIMUMPREMIUM].rates[year];
   }
   _DBR("CI Rate (no inflation)", ciRate, "eventCalculateCOR_COR03Local->",running.months);

   var maxCorRate = rates[riderProductId][SchemaConstants.PREMIUM_TYPE.MIN_PLANNED_PREMUM].rates[year];
   _DBR("Max COR Rate", maxCorRate, "eventCalculateCOR_COR03Local->",running.months);

   corRate = _R( corRate * inflationMultiplier, 0);
   _DBR("corRate (with inflation)", corRate, "eventCalculateCOR_COR03Local->",running.months);   

   var cor = _R2( _R13( Math.min(corRate + ciRate, maxCorRate + ciRate) / 12 * Number(extraRating.percentageExtra) ) );
   if (!Utils.isNothing(extraRating) && !Utils.isNothing(extraRating.flatExtra)) {
       cor  +=  _R2(_R13(Number(extraRating.flatExtra) / 12)) ;
   }
   if (!Utils.isNothing(extraRating) && !Utils.isNothing(extraRating.tempFlat) && !Utils.isNothing(extraRating.tempFlatDuration)) {
       if (year < Number(extraRating.tempFlatDuration)) {
           cor  +=  _R2(_R13(Number(extraRating.tempFlat) / 12)) ;
       }
   }

   if (year == 0) {
        cor = _R2(cor / 2);
   }

   _DBR("COR (" + riderProductId + ") @ " + year + "[COR rate: " + corRate + "]", cor, "eventCalculateCOR_COR03Local->", running.months);
   return cor;
},
   calculateMethod: function(args) {
return "COR03";
}
});
var eventCalcMaxWithdrawalRUVXX = eventCalcMaxWithdrawalUL007.extend({
   eventName: function(args) {
    return "eventCalcMaxWithdrawalRUVXX";
},
   maxWithdrawal: function(args) {
    var returnType = args['returnType'];
    var context = args['context'];
    var running = context.runningPolicyValues;
    var basePlan = context.proposal.coverageInfo;
    var minFA = args['minFA'];
    
    var minFAByPremium = IFunction.appliedTo(CalcEventMinFaceAmountByMinPrem.create()).call('execute', {context: context, coverage: context.proposal.coverageInfo});
    if (Utils.isNothing(minFAByPremium)) minFAByPremium = 0;
    _DBR("maxWithdrawal.minFAByPremium", minFAByPremium, "eventCalcMaxWithdrawalRUVXX->", context.runningPolicyValues.months);

    var maxWithdrawalByIndvidualFund = this.self.maxWithdrawalByIndividualFund(args);
    _DBR("maxWithdrawal.maxWithdrawalByIndvidualFund", maxWithdrawalByIndvidualFund, "eventCalcMaxWithdrawalRUVXX->", context.runningPolicyValues.months);

    var fa = context.runningPolicyValues.faceAmount[returnType];
    _DBR("maxWithdrawal.fa", fa, "eventCalcMaxWithdrawalRUVXX->", context.runningPolicyValues.months);

    var maxWD;
    if (basePlan.options.dbLevel == SchemaConstants.DB_OPTION.LEVEL) {
        maxWD = Math.min(fa - Math.max(minFA, minFAByPremium.value), maxWithdrawalByIndvidualFund);
        _DBR("DB Level Math.min(fa - Math.max(minFA, minFAByPremium)", maxWD, "eventCalcMaxWithdrawalRUVXX->", context.runningPolicyValues.months);
    } else {
        maxWD = maxWithdrawalByIndvidualFund;
        _DBR("DB Increase maxWithdrawalByIndvidualFund", maxWD, "eventCalcMaxWithdrawalRUVXX->", context.runningPolicyValues.months);
    }
    _DBR("maxWithdrawal.maxWD", maxWD, "eventCalcMaxWithdrawalRUVXX->", context.runningPolicyValues.months);
    return maxWD;
},
   minAccountValue: function(args) {
    return 0;
},
   minFundBalanceAfterWithdrawal: function(args) {
    return 2000;
},
   maxWithdrawalByIndividualFund: function(args) {
    var returnType = args['returnType'];
    var context = args['context'];
    var running = context.runningPolicyValues;
    var year = context.runningPolicyValues.year;
    
    var fb = IFund.appliedTo( running.fundPool ).call("fundBalances");
    //var sv = context.runningPolicyValues.surrenderValueBeforeWithdrawal;
    //var scLow = fb[returnType] - sv[returnType];
    var scLow = running["surrenderCharges"];
    
    _DBR("minAccountValue.scLow", scLow, "eventCalcMaxWithdrawalRUVXX->", context.runningPolicyValues.months);
    var minAccountValue = this.self.minFundBalanceAfterWithdrawal({});
    _DBR("maxWithdrawal.minAccountValue", minAccountValue, "eventCalcMaxWithdrawalRUVXX->", context.runningPolicyValues.months);

    _DBR("@@@@ List of funds in BAV fund pool", "", "eventCalcMaxWithdrawalRUVXX", running.months);
    var lessestFundBalance;
    var poolFundBalances = {};
    var poolFunds = running.fundPool.self.context.fundPools;
    var proportionFunds = running.fundPool.allocations();
    for(var fundCode in poolFunds) {
        poolFundBalances[fundCode] = IFund.appliedTo(poolFunds[fundCode]).call('fundBalances');
        var allocationFund = proportionFunds[fundCode][PublicConstants.FUND_RETURN.LOW];
        var poolFundBalance = (poolFundBalances[fundCode][PublicConstants.FUND_RETURN.LOW] - minAccountValue) / allocationFund - scLow;
        if (Utils.isNothing(lessestFundBalance)) {
            lessestFundBalance = poolFundBalance;
        } else {            
            lessestFundBalance = Math.min( lessestFundBalance, poolFundBalance );
        }
    }
    if (year >= context.proposal.startDebugYear && year <= context.proposal.stopDebugYear && context.proposal.enableDebug) {
        _SS(poolFundBalances, 5);
        _DBR("@@@@ Lessest Fund Balance", lessestFundBalance, "eventCalcMaxWithdrawalRUVXX", running.months);
    }
    //var maxWithdrawalByFund = Math.max(0, lessestFundBalance - minAccountValue);
    var maxWithdrawalByFund = lessestFundBalance;
    _DBR("@@@@ maxWithdrawalByFund", maxWithdrawalByFund, "eventCalcMaxWithdrawalRUVXX", running.months);
    return maxWithdrawalByFund;
}
});
var eventCalcNAR_UL007 = eventCalcNARLocal.extend({
   eventName: function(args) {
    return "eventCalculateNAR_UL007";
},
   getFaceAmountByReturnType: function(args) {
    var context = args.args.context;
    var returnType = args.returnType;
    
    //_DBR("", "", "", context.runningPolicyValues.months);
    //_DBR("getFaceAmountByReturnType.returnType", returnType, "@@@@", context.runningPolicyValues.months);
    //_DBR("getFaceAmountByReturnType.faceAmount", context.runningPolicyValues.faceAmount, "@@@@", context.runningPolicyValues.months);
    
    return context.runningPolicyValues.faceAmount[returnType];
    //return context.proposal.coverageInfo.faceAmount;
}
});
var eventCalcRiderProtectionByMethod = eventCalcProtectionByMethod.extend({
   eventName: function(args) {
    return "eventCalcRiderProtectionByMethod";
},
   shouldBeRun: function(args) {
    var context = args["context"];
    return true;
},
   run: function(args) {
    var context = args["context"];
    var proposal = context.proposal;
    var coverage = proposal.coverageInfo;
    var running = context.runningPolicyValues;
    var basePlanPK = coverage.product.productKey.primaryProduct.productPK.productId;
    var totalRiderProtection = 0;
    var riderProtectionArray = [];
    running.additionalBasePlanProtection = 0;
    
    var riders = proposal.riders.coverageInfo;
    for(var i in riders) {
        var rider = riders[i];
        var riderPK = rider.product.productKey.primaryProduct.productPK.productId;
        
        var riderProtection = this.parent.calcProtection({coverage: rider, args: args});

        //Check if rider has same key as baseplan. Add the protection to baseplan if it is.
        if(basePlanPK == riderPK){
            running.additionalBasePlanProtection += riderProtection;
            riderProtection = 0; //Reset rider's protection
        } else{
            totalRiderProtection += riderProtection;
        }
        // var riderProtectionObj = {};
        // riderProtectionObj['protection'] = riderProtection;
        // riderProtectionObj['riderPK'] = riderPK;
        // riderProtectionArray[i] = riderProtectionObj;
        
        // Add more properties to calculate totalProtection and totalDeathBenefit
        var catalog = rider.catalog.call('getCatalog');
        var hasDeathBenefit = Utils.matchInList("HasDeathBenefit", catalog.ProductCatalog.ProductType.ProductTypeCode, false);
        var isAccidentalDeath = Utils.matchInList("AccidentalDeath", catalog.ProductCatalog.ProductType.ProductTypeCode, false);
        var isMajorDiseaseBenefit = Utils.matchInList("MajorDiseaseBenefit", catalog.ProductCatalog.ProductType.ProductTypeCode, false);
        var isInsured = this.self.isRiderInsured( {coverage: rider, args: args} );
        var riderProtectionObj = {};
        riderProtectionObj['protection'] = riderProtection;
        riderProtectionObj['riderPK'] = riderPK;
        riderProtectionObj['isInsured'] = isInsured;
        riderProtectionObj['hasDeathBenefit'] = hasDeathBenefit;
        riderProtectionObj['isAccidentalDeath'] = isAccidentalDeath;
        riderProtectionObj['isMajorDiseaseBenefit'] = isMajorDiseaseBenefit;
        riderProtectionArray[i] = riderProtectionObj;
    }
    
    running.totalRiderProtection = totalRiderProtection;
    running.riderProtections = riderProtectionArray;
    
    // Add termProtection to totalDeathBenefit
    var termProtection = 0;
        for (var i in riderProtectionArray) {
            if (running.riderProtections[i].isInsured && running.riderProtections[i].hasDeathBenefit) {
                termProtection = running.riderProtections[i].protection;
            }
        }
        var isUVL = coverage.catalog.call("isUVL");
        if (isUVL) {
            for (var returnType in PublicConstants.FUND_RETURN){
                var isLapse = running.lapse[returnType];
                if (isLapse == 'Y') {
                    termProtection = 0;
                }
                running.totalDeathBenefits[returnType] += termProtection;
            }
        }
    
    return;
},
   isRiderInsured: function(args) {
    var coverage = args['coverage'];
    var args2 = args.args;
    var context = args2['context'];
    var riderInsuredId = coverage.parties.party.insuredId;
    var basePlanInsuredId = context.proposal.coverageInfo.parties.party.insuredId;
    return (riderInsuredId == basePlanInsuredId);
}
});
var eventCalcSpecialBonusRUVXX = eventCalcLoyaltyBonusRUVXX.extend({
   eventName: function(args) {
    return "eventCalcSpecialBonusRUVXX";
},
   init: function(args) {
    this.self.context['bonusStartYear'] = [0, 10, 20];
    this.self.context['bonusReleaseYear'] = [9, 19];
    this.self.context['bonusScale'] = {9: 1, 19: 3 }; 
    
    //this.self.context.conditions.splice(0, 1);      // erase the first rule
    return null;
},
   calcBonus: function(args) {
    var args2 = args['args'];
    var returnType = args['returnType'];
    var context = args2['context'];
    var running = context.runningPolicyValues;
    var year = running.year;
    var rate = this.self.context.bonusScale[year];
    
    var firstThreeYearPremiumLoad = running.firstThreeYearPremiumLoad[returnType];
    var bonus = _R2( firstThreeYearPremiumLoad * rate );
    return bonus;
},
   saveBonus: function(args) {
    var args2 = args['args'];
    var bonus = args['bonus'];
    var context = args2["context"];
    var running = context.runningPolicyValues;
    for(var i in PublicConstants.FUND_RETURN) {
        running['specialBonus'][i] += bonus[i];
    }
    _DBR( 'specialBonus', running['specialBonus'], 'eventCalcSpecialBonusRUVXX', running.months );
}
});
var eventCalcSurrenderValuesBeforeWithdrawRUVXX = eventCalcSurrenderValuesRUVXX.extend({
   eventName: function(args) {
    return "Calculate Surrender Value with Withdrawal (RUVXX)";
},
   shouldBeRun: function(args) {
    return this.parent.shouldBeRun(args);
},
   run: function(args) {
    var context = args["context"];
    var running = context.runningPolicyValues;

    this.parent.run(args);
    for(var returnType in PublicConstants.FUND_RETURN) {
        running['surrenderValueBeforeWithdrawal'][returnType] = running['surrenderValues'][returnType];
    }
}
});
var eventCalcSurrenderValuesBeforeWithdrawUL007 = eventCalcSurrenderValuesUL007.extend({
   eventName: function(args) {
    return "Calculate Surrender Value with Withdrawal (UL007)";
},
   shouldBeRun: function(args) {
    return this.parent.shouldBeRun(args);
},
   run: function(args) {
    var context = args["context"];
    var running = context.runningPolicyValues;

    this.parent.run(args);
    for(var returnType in PublicConstants.FUND_RETURN) {
        running['surrenderValueBeforeWithdrawal'][returnType] = running['surrenderValues'][returnType];
    }
}
});
var eventCalcTradPlanAccGratefulDiv_ENCXXX = eventCalculateTradPlanAccumulateDividends.extend({
   eventName: function(args) {
    return "Calculate Trad Plan Accumulate Grateful Dividends (ENCXXX)";
},
   dividendName: function(args) {
    return "gratefulDividends";
},
   accDividendName: function(args) {
    return "accGratefulDividends";
},
   dividendIntFieldName: function(args) {
    return this.parent.dividendIntFieldName(args);
}
});
var eventCalcTradPlanAccGratefulDivHIGH_ENCXXX = eventCalculateTradPlanAccumulateDividends.extend({
   eventName: function(args) {
    return "Calculate Trad Plan Accumulate Grateful Dividends HIGH (ENCXXX)";
},
   dividendName: function(args) {
    return "higherGratefulDividends";
},
   accDividendName: function(args) {
    return "accHigherGratefulDividends";
},
   dividendIntFieldName: function(args) {
    return "AODRateHigh";
}
});
var eventCalcTradPlanAccGratefulDivLOW_ENCXXX = eventCalculateTradPlanAccumulateDividends.extend({
   eventName: function(args) {
    return "Calculate Trad Plan Accumulate Grateful Dividends LOW (ENCXXX)";
},
   dividendName: function(args) {
    return "lowerGratefulDividends";
},
   accDividendName: function(args) {
    return "accLowerGratefulDividends";
},
   dividendIntFieldName: function(args) {
    return "AODRateLow";
}
});
var eventCalcTradPlanAccumulateCoupons = eventCalculateTradPlanAccumulateDividends.extend({
   eventName: function(args) {
    return "Calculate Trad Plan Accumulate Coupons";
},
   dividendName: function(args) {
    return "coupon";
},
   accDividendName: function(args) {
    return "accCoupons";
},
   dividendIntFieldName: function(args) {
    return this.parent.dividendIntFieldName(args);
}
});
var eventCalcTradPlanAccumulateCouponsHIGH = eventCalculateTradPlanAccumulateDividends.extend({
   eventName: function(args) {
    return "Calculate Trad Plan Accumulate Coupons HIGH";
},
   dividendName: function(args) {
    return "coupon";
},
   accDividendName: function(args) {
    return "accHigherCoupons";
},
   dividendIntFieldName: function(args) {
    return "AODRateHigh";
}
});
var eventCalcTradPlanAccumulateCouponsLOW = eventCalculateTradPlanAccumulateDividends.extend({
   eventName: function(args) {
    return "Calculate Trad Plan Accumulate Coupons LOW";
},
   dividendName: function(args) {
    return "coupon";
},
   accDividendName: function(args) {
    return "accLowerCoupons";
},
   dividendIntFieldName: function(args) {
    return "AODRateLow";
}
});
var eventCalcTradPlanAccumulateDivHIGH = eventCalculateTradPlanAccumulateDividends.extend({
   eventName: function(args) {
    return "Calculate Trad Plan Accumulate Dividends HIGH";
},
   dividendName: function(args) {
    return "higherDividends";
},
   accDividendName: function(args) {
    return "accHigherDividends";
},
   dividendIntFieldName: function(args) {
    return "AODRateHigh";
}
});
var eventCalcTradPlanAccumulateDivLOW = eventCalculateTradPlanAccumulateDividends.extend({
   eventName: function(args) {
    return "Calculate Trad Plan Accumulate Dividends LOW";
},
   dividendName: function(args) {
    return "lowerDividends";
},
   accDividendName: function(args) {
    return "accLowerDividends";
},
   dividendIntFieldName: function(args) {
    return "AODRateLow";
}
});
var eventCalcTradPlanAccumulateSpecialDiv_EDX = eventCalculateTradPlanAccumulateDividends_EDX.extend({
   eventName: function(args) {
    return "Calculate Trad Plan Accumulate Special Dividends (EDX)";
},
   dividendName: function(args) {
    return "specialDividends";
},
   accDividendName: function(args) {
    return "accSpecialDividends";
},
   dividendIntFieldName: function(args) {
    return "AODRate";
}
});
var eventCalcTradPlanAccumulateSpecialDivHIGH_EDX = eventCalculateTradPlanAccumulateDividends_EDX.extend({
   eventName: function(args) {
    return "Calculate Trad Plan Accumulate Special Dividends High (EDX)";
},
   dividendName: function(args) {
    return "higherSpecialDividends";
},
   accDividendName: function(args) {
    return "accHigherSpecialDividends";
},
   dividendIntFieldName: function(args) {
    return "AODRateHigh";
}
});
var eventCalcTradPlanAccumulateSpecialDivLOW_EDX = eventCalculateTradPlanAccumulateDividends_EDX.extend({
   eventName: function(args) {
    return this.parent.eventName(args);
},
   dividendName: function(args) {
    return "lowerSpecialDividends";
},
   accDividendName: function(args) {
    return "accLowerSpecialDividends";
},
   dividendIntFieldName: function(args) {
    return "AODRateLow";
}
});
var eventCalcTradPlanSpecialDividends_EDX = eventCalcTradPlanDividends_EDX.extend({
   eventName: function(args) {
    return "Calculate Trad Plan Special Dividends EDX";
},
   shouldBeRun: function(args) {
    return this.parent.shouldBeRun(args);
},
   getSecondInsuredDividendRates: function(args) {
    var context = args["context"];
    var proposal = context.proposal;
    var basePlan = proposal.coverageInfo;
    var productId = basePlan.product.productKey.primaryProduct.productPK.productId;
    var secondInsuredId = basePlan.parties.secondInsured.insuredId;

    if (Utils.isNothing(context.rates[productId][secondInsuredId])){
      context.rates[productId][secondInsuredId] = {};
    }

    if (Utils.isNothing(context.rates[productId][secondInsuredId][SchemaConstants.POLICY_VALUE.SPECIAL_BONUS])){
        var funcManager = Repository.getManager(SystemComponents.MANAGER.FUNCTION_MANAGER);
        var secondInsuredRate = funcManager.call('execute', {
            function: 'GetSecondInsuredRates',
                args: {
                    coverage: basePlan,
                rateType: RateConstants.RATETYPE.SPECIAL_BONUS
            }
        });

        context.rates[productId][secondInsuredId][SchemaConstants.POLICY_VALUE.SPECIAL_BONUS] = secondInsuredRate;
    }
    

    return context.rates[productId][secondInsuredId][SchemaConstants.POLICY_VALUE.SPECIAL_BONUS];
},
   run: function(args) {
    var context = args["context"];
    var running = context.runningPolicyValues;
    running.specialDividends = this.self.calculate(args);
    return;
}
});
var eventCalcTradRidersCashValue = eventCalcTradPlanCashValue.extend({
   eventName: function(args) {
    return "Calculate Trad Riders Cash Value";
},
   shouldBeRun: function(args) {
    var context = args["context"];
    var projOptions = context.projectionOptions;
    return Utils.matchInList(InterfaceConstants.PROJECTION_OPTIONS.BASE_PLAN_WITH_RIDERS, projOptions, false);
},
   run: function(args) {
    var context = args["context"];
    
    var running = context.runningPolicyValues;
    var proposal = context.proposal;
    
    running['ridersCashValueList'] = [];
    running.ridersCashValue = 0;
    
    var riders = proposal.riders.coverageInfo;
    for(var i in riders) {
        var rider = riders[i];
        var csv = _R(this.self.calcCashValue( {coverage:rider, args:args} ),0);
        
        running.ridersCashValueList.push(csv);
        running.ridersCashValue += csv;
    }

    return;
}
});
var eventCoreCalcPremiumByMethod = eventCoreCalculatePremiumXXXXX.extend({
   eventName: function(args) {
    return "Calculate Base Plan Premiums by Method Id";
},
   calculate: function(args) {
    var coverage = args["coverage"];
    var basePlan = coverage.proposal.coverageInfo;
    var context = args["context"];
    var running = context.runningPolicyValues;
    var months = running.months;
    var year = running.year;
    
    var debug = false;
    if (_V(coverage.proposal.enableDebug, false)) {
        if (!Utils.isNothing(coverage.proposal.startDebugYear) && !Utils.isNothing(coverage.proposal.stopDebugYear)) {
            if (coverage.proposal.startDebugYear <= year && year <= coverage.proposal.stopDebugYear) {
                debug = true;    
            }
        }
    }
    
    var isUvl = basePlan.catalog.call("isUVL");
    var paymentMode;
    if (isUvl) {
        paymentMode = basePlan.options.paymentMode;    
    } else {
        paymentMode = SchemaConstants.PAYMENT_MODE.ANNUAL;    
    }
    _DBR(">>>>> paymentMode", paymentMode);
    //var covPremCalcHelper = IFunction.appliedTo( CalculateCoveragePremium.create() );
    var covPremCalcHelper = IFunction.appliedTo( CalculateCoveragePremiumLocal.create() );
    var covPremObj = covPremCalcHelper.call("execute", { coverage:coverage, year:year, months:months, paymentMode:paymentMode, debug: debug, context: context });
    
    var covPremium = 0;
    if (!Utils.isNothing(covPremObj)) {
        covPremium = covPremObj.value;
    }
    
    //for column modal basic premium
    var modPremCalcHelper = IFunction.appliedTo( CalculateCoveragePremiumLocal.create() );
    var modPremObj = modPremCalcHelper.call("execute", { coverage:coverage, year:year, months:months, paymentMode:basePlan.options.paymentMode, debug: debug, context: context });

    var modPremium = 0;
    if (!Utils.isNothing(modPremObj)) {
        modPremium = modPremObj.value;
    }

    running.modalBasicPremium = modPremium;

    return covPremium;
},
   shouldBeRun: function(args) {
    var context = args['context'];
    var months = context.runningPolicyValues.months;
    var month = months % 12;
    if (month === 0) {
        return this.parent.shouldBeRun(args);
    }
},
   init: function(args) {
    var debug = args['debug'];
    if (Utils.isNothing(this.self['context'])) {
        this.self['context'] = {};
    }
    this.self.context['debug'] = _V( debug, true );
    return;
}
});
var eventCoreCalcPremiumByMethodLocal = eventCoreCalcPremiumByMethod.extend({
   eventName: function(args) {
    return "Calculate Base Plan Premiums by Method Id (Localised)";
},
   calculate: function(args) {
    var coverage = args["coverage"];
    var context = args["context"];

    var basePlan = coverage.proposal.coverageInfo;
    var running = context.runningPolicyValues;
    var months = running.months;
    var year = running.year;
    
    var debug = false;
    if (_V(coverage.proposal.enableDebug, false)) {
        if (!Utils.isNothing(coverage.proposal.startDebugYear) && !Utils.isNothing(coverage.proposal.stopDebugYear)) {
            if (coverage.proposal.startDebugYear <= year && year <= coverage.proposal.stopDebugYear) {
                debug = true;    
            }
        }
    }
    
    var covPremium = 0;

    var isUvl = basePlan.catalog.call("isUVL");
    if (isUvl) {
        covPremium = this.calculateUVLPremium({args:args, debug:debug});
    } else {
        covPremium = this.calculateTradPremium({args:args, debug:debug});
    }
    return covPremium;
},
   getPaymentFrequency: function(args) {
    var coverage = args['coverage'];
    var basePlan = coverage.proposal.coverageInfo;
    var noOfPays = 1;
    if (basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.MONTHLY) {
       noOfPays = 12;
    }
    if (basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.QUARTERLY) {
        noOfPays = 4;
    }
    if (basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.SEMIANNUAL) {
        noOfPays = 2;
    }
    return noOfPays;
},
   calculateUVLPremium: function(args) {
    var args2 = args['args'];
    var debug = args['debug'];
    var coverage = args2["coverage"];
    var context = args2["context"];
    
    var basePlan = coverage.proposal.coverageInfo;
    var running = context.runningPolicyValues;
    var months = running.months;
    var year = running.year;
    var paymentMode = basePlan.options.paymentMode;   
    
    _DBR(">>>>> paymentMode", paymentMode);

    var covPremCalcHelper = IFunction.appliedTo( CalculateCoveragePremium.create() );
    var covPremObj = covPremCalcHelper.call("execute", { coverage:coverage, year:year, months:months, paymentMode:paymentMode, debug: debug, context: context });
    return covPremObj.value;
},
   calculateTradPremium: function(args) {
    var args2 = args['args'];
    var debug = args['debug'];
    var coverage = args2["coverage"];
    var context = args2["context"];

    var basePlan = coverage.proposal.coverageInfo;
    var running = context.runningPolicyValues;
    var months = running.months;
    var year = running.year;
    var paymentMode = basePlan.options.paymentMode;   
    
    _DBR(">>>>> paymentMode", paymentMode);

    var covPremCalcHelper = IFunction.appliedTo( CalculateCoveragePremium.create() );
    var covPremObj = covPremCalcHelper.call("execute", { coverage:coverage, year:year, months:months, paymentMode:paymentMode, debug: debug, context: context });
    return covPremObj.value * this.self.getPaymentFrequency(args);
}
});
var eventCoreCalcPremiumByMethodRUVXX = eventCoreCalcPremiumByMethodLocal.extend({
   eventName: function(args) {
    return "Calculate Base Plan Premiums by Method Id (RUVXX)";
},
   calculateUVLPremium: function(args) {
    var args2 = args['args'];
    var debug = args['debug'];

    var coverage = args2["coverage"];
    var context = args2["context"];
    var returnKey = args2['returnKey'];
    
    var basePlan = coverage.proposal.coverageInfo;
    var running = context.runningPolicyValues;
    var months = running.months;
    var year = running.year;
    var paymentMode = basePlan.options.paymentMode;   
    
    _DBR(">>>>> paymentMode", paymentMode);

    //var covPremCalcHelper = IFunction.appliedTo( CalculateCoveragePremium.create() );
    //var covPremObj = covPremCalcHelper.call("execute", { coverage:coverage, year:year, months:months, paymentMode:paymentMode, debug: debug, context: context });
    //return covPremObj.value;
    
    var premium = running.faceAmountLayers[returnKey].call('calculatePremium', {debug: debug});
    return premium;
},
   run: function(args) {
    var context = args["context"];
    var rates = context.rates;
    var running = context.runningPolicyValues;
    var months = running.months;
    var methodId = this.self.premiumMethod(args);

    var basePlan = context.proposal.coverageInfo;
    var basePlanSchema = basePlan.schema.call("getSchema");
    var baseProductId = _PV(basePlan, "product.productKey.primaryProduct.productPK.productId");

    if (_PV( basePlan.catalog.call('getCatalog'), 'ProductCatalog.Alias' ) != 'RUV') {
        return this.parent.run(args);
    }
    
    _DBR('It is local overriding codes', '', 'eventCoreCalcPremiumByMethodRUVXX', months);
    
    // No premium value for premium holiday
    if (!Utils.isNothing(running.phActivities)) {
        if (running.phActivities.isPremiumHoliday) {
            return;
        }
    }
    
    for(var returnKey in PublicConstants.FUND_RETURN) {
        var annualPremium = this.self.calculate({
            context: context,
            coverage: basePlan,
            returnKey: returnKey
        });

        _DBR("premium[" + returnKey + "]", annualPremium, "eventCalculatePremium" + methodId + "->", months);
        //running.plannedPremium[returnKey] = running.plannedPremium[returnKey] + annualPremium;
        running.plannedPremium[returnKey] = annualPremium;
        _DBR("plannedPremium[" + returnKey + "]", running.plannedPremium[returnKey], "eventCalculatePremium" + methodId + "->", months);
        
        if (returnKey == PublicConstants.FUND_RETURN.HIGH) {
            running.basePlanPremiums += annualPremium;
            _DBR("running.basePlanPremiums[" + returnKey + "]", running.basePlanPremiums, "eventCalculatePremium" + methodId + "->", months);
            if (this.self.context.updateTotalPremium) {
                running.totalPremiums += annualPremium;
                _DBR("running.totalPremiums", running.totalPremiums, "eventCalculatePremium" + methodId + "->", months);
            }
        }
    }    

    return;
}
});
var eventCoreCalcRiderPremiumByMethod = eventCoreCalculateRiderPremiumXXXXX.extend({
   eventName: function(args) {
    return "Calcualte All Rider Premiums by their method Id";
},
   calculate: function(args) {
    var coverage = args["coverage"];
    var basePlan = coverage.proposal.coverageInfo;
    var context = args["context"];
    var running = context.runningPolicyValues;
    var months = running.months;
    var year = running.year;

    var debug = false;
    if (_V(coverage.proposal.enableDebug, false)) {
        if (!Utils.isNothing(coverage.proposal.startDebugYear) && !Utils.isNothing(coverage.proposal.stopDebugYear)) {
            if (coverage.proposal.startDebugYear <= year && year <= coverage.proposal.stopDebugYear) {
                debug = true;
            }
        }
    }

    var isUvl = basePlan.catalog.call("isUVL");

    var freq = 1;
    var paymentMode;
    if (isUvl) {
        paymentMode = basePlan.options.paymentMode;
        if (coverage.options.paymentMode == SchemaConstants.PAYMENT_MODE.ANNUAL) {
            freq = 1;
        }
        if (coverage.options.paymentMode == SchemaConstants.PAYMENT_MODE.SEMIANNUAL) {
            freq = 2;
        }
        if (coverage.options.paymentMode == SchemaConstants.PAYMENT_MODE.QUARTERLY) {
            freq = 4;
        }
        if (coverage.options.paymentMode == SchemaConstants.PAYMENT_MODE.MONTHLY) {
            freq = 12;
        }
    } else {
        paymentMode = SchemaConstants.PAYMENT_MODE.ANNUAL;
    }
    var covPremCalcHelper = IFunction.appliedTo( CalculateCoveragePremium.create() );

    // specific for Participate product type as ENxxx
    var covPremObj = null;
    var catalogBasePlan = basePlan.catalog.implementation;
    var catalogRider = coverage.catalog.call('getCatalog');
    var hasHospitalBenefit = Utils.matchInList("HospitalBenefit", catalogRider.ProductCatalog.ProductType.ProductTypeCode, false);
    var isEducation = Utils.matchInList("Education", catalogBasePlan.catalog.ProductCatalog.ProductType.ProductTypeCode, false);
    var isRegularSaving = Utils.matchInList("RegularSaving", catalogBasePlan.catalog.ProductCatalog.ProductType.ProductTypeCode, false);

    if (catalogBasePlan.isParticipate() && !hasHospitalBenefit) {

      // Rider Premium of ENxx just calculate at the first year as SPIS
      covPremObj = covPremCalcHelper.call("execute", { coverage:coverage, year:0, months:months, paymentMode:paymentMode, debug: debug, context:context });

      // check over period
      // we need to re-check again ppp here because we send year = 0 to CalculateCoveragePremium
      // so that, CalculateCoveragePremium cannot determine ppp
      var ppp = coverage.schema.call("calculatePremiumPayingPeriod", {coverage: coverage});
      if (year >= ppp && !Utils.isNothing(covPremObj))
        covPremObj.value = 0;

    }

    // Fix issue RHCxx rider over the paying period
    else if (isEducation || hasHospitalBenefit){

      covPremObj = covPremCalcHelper.call("execute", { coverage:coverage, year:year, months:months, paymentMode:paymentMode, debug: debug, context:context });

      var ppp = basePlan.schema.call("calculatePremiumPayingPeriod", {coverage: coverage});
      
      var pppRider = coverage.schema.call("calculatePremiumPayingPeriod", { coverage: coverage });
      var minPremiumPaidPeriod = Number(coverage.schema.call("getSchema").ProductSchema.BasicParticular.PremiumPaidPeriod.MinPremiumPaidPeriod.text);
      var covPremium = 0;
      if (year >= pppRider && year <= minPremiumPaidPeriod && !Utils.isNothing(covPremObj)) {
        var premiumCalculator = Repository.getManager(SystemComponents.MANAGER.PREMIUM_CALCULATOR);
        var calculator = premiumCalculator.call("lookupCalculator", { coverage: coverage });
        if (!Utils.isNothing(calculator)) {
          var result = calculator.call("calculate", {
            coverage: coverage,
            ipo: _V(coverage.ipo, 0),
            context: context,
            policyYear: year
          });
          for (var i in result.totalPremiums) {
            var totalPremiumRec = result.totalPremiums[i];
            if (totalPremiumRec.paymentMode == paymentMode) {
              covPremium = totalPremiumRec.totalPremium;
              running.regularPremiumIsLapse += covPremium;
              
              covPremObj.value = 0;
            }
          }
        }
      }
      
      if (year >= ppp && !Utils.isNothing(covPremObj))
        covPremObj.value = 0;

    }else {
      covPremObj = covPremCalcHelper.call("execute", { coverage:coverage, year:year, months:months, paymentMode:paymentMode, debug: debug, context:context });

    }
    var covPremium = 0;
    if (!Utils.isNothing(covPremObj)) {
        if(!isRegularSaving && isUvl && hasHospitalBenefit){
            covPremium = _R(covPremObj.value,0) * freq;
            running.totalModalBaseRiderPremium += covPremObj.value;
        }else{
            covPremium = covPremObj.value * freq;
            running.totalModalBaseRiderPremium += covPremObj.value;
        }
    }

    return covPremium;
},
   shouldBeRun: function(args) {
    var context = args["context"];
    var running = context.runningPolicyValues;
    var basePlan = context.proposal.coverageInfo;
    var projOptions = context.projectionOptions;
    var run = Utils.matchInList(InterfaceConstants.PROJECTION_OPTIONS.BASE_PLAN_WITH_RIDERS, projOptions, false);

    var run2 = false;
    var isUVL = basePlan.catalog.call('isUVL');
    if (isUVL) {
        for(var idx in PublicConstants.FUND_RETURN) {
            run2 = (run2 || running.lapse[idx] == "N");
        }
    } else {
        run2 = true;
    }

    // Fix issue for ENx with regularPayment = 0
    var run3 = true;
    if (isUVL) {
        // we don't need to check this now because
       // on the initial events, we set regularPayment = basePremium if it' null
       // Beside that, it also fix issue rider premium for RUVxx
       //run3 = (basePlan.regularPayment > 0);
    }

    var months = context.runningPolicyValues.months;
    var month = months % 12;
    if (month === 0) {
        return run && run2 && run3 && this.parent.shouldBeRun(args);
    } else {
        return false;
    }
},
   init: function(args) {
    var debug = args['debug'];
    if (Utils.isNothing(this.self['context'])) {
        this.self['context'] = {};
    }
    this.self.context['debug'] = _V( debug, true );
    //return this.parent.init(args);
    return;
},
   run: function(args) {
    var context = args["context"];
    var methodId = this.self.premiumMethod(args);
    var rates = context.rates;
    var running = context.runningPolicyValues;
    var months = running.months;

    var riders = _V(_PV(context.proposal, "riders.coverageInfo"), []);
    
    running['riderPremiumsList'] = [];
    for (var riderIdx in riders) {
        var riderCov = riders[riderIdx];
        var riderPremium = this.self.calculate({
            context: context,
            coverage: riderCov
        });
        
        _DBR("riderPremium[" + riderIdx + "]", riderPremium, "eventCalculatePremium" + methodId + "->", months);
        running.riderPremiums += riderPremium;
        running.riderPremiumsList.push(riderPremium);
        
        if (this.self.context.updateTotalPremium) {
            running.totalPremiums += riderPremium;
        }
    }
    _DBR("running.riderPremiums", running.riderPremiums, "eventCalculatePremium" + methodId + "->", months);
    if (this.self.context.updateTotalPremium) {
        _DBR("running.totalPremiums", running.totalPremiums, "eventCalculatePremium" + methodId + "->", months);
    }
    return;
}
});
var eventDeductCOILocal = eventDeductCOI.extend({
   eventName: function(args) {
    return "Deduct COI (Local)";
},
   run: function(args) {
      var context = args["context"];
      var runningPolicyValues = context.runningPolicyValues;
      
      var fundBalances = IFund.appliedTo(runningPolicyValues.fundPool).call("fundBalances", {});
      var cashOutBalances = IFund.appliedTo(runningPolicyValues.cashoutAccount).call("fundBalances", {});

      _DBR("", "", "", runningPolicyValues.months);    
      _DBR("", "Net COI for Deduction", "", runningPolicyValues.months);    

      var ncois = runningPolicyValues.cois;
      
      var proposal = context.proposal;
      var basePlan = proposal.coverageInfo;
      var isUVL = basePlan.catalog.call("isUVL");
      var isRegularSaving = basePlan.catalog.call("isRegularSaving");
      if (isUVL && !isRegularSaving) {
        var topupBalance = IFund.appliedTo(runningPolicyValues.topupFundPool).call("fundBalances", {});
        var topupCoiCharge = { LOW: 0, MEDIUM: 0, HIGH: 0 };
      }
      
      for(coiIdx in ncois) {
           var balance = fundBalances[coiIdx] + cashOutBalances[coiIdx];
           var coi = ncois[coiIdx];
           ncois[coiIdx] = Math.min( coi, balance );

           _DBR("coi[" + coiIdx + "] = R2( min(" + balance + ", " + coi + "))", ncois[coiIdx], "eventDeductCOILocal->", runningPolicyValues.months);
           
           if (isUVL && !isRegularSaving) {
                topupCoiCharge[coiIdx] = Math.min(coi - ncois[coiIdx], topupBalance[coiIdx]);
           }
      }
      
      if (isUVL && !isRegularSaving) {
        runningPolicyValues.isCalculatingCoiRUVXX = true;
        runningPolicyValues.previousFundPool = IFund.appliedTo(runningPolicyValues.fundPool).call("fundBalances", {});
      }

      IFund.appliedTo(runningPolicyValues.fundPool).call("withdraw", {
         amounts: ncois
      });
      
      if (isUVL && !isRegularSaving) {
        runningPolicyValues.isCalculatingTopupRUVXX = true;
        IFund.appliedTo(runningPolicyValues.topupFundPool).call("withdraw", {
            amounts: topupCoiCharge
        });
      }
}
});
var eventDeductWithdrawalRUVXX = eventDeductWithdrawalUL007.extend({
   eventName: function(args) {
    return "Deduct withdrawal from accounts (RUVXX)";
},
   getPartialWithdrawSurcharges: function(args) {
    var year = args['year'];
    var rate = [0, 0.2, 0.2, 0.18, 0.18, 0.1, 0.05, 0.02, 0.01];
    if (rate.length > year) 
        return rate[year]; 
    else 
        return 0;
},
   setErrorCode: function(args) {
    var dbLevel = args["dbLevel"];
    if(dbLevel == SchemaConstants.DB_OPTION.LEVEL) {
        return "ERR09012,";
    }
    return "ERR09012B,";
},
   calcWithdrawalAmounts: function(args) {
    var year = args['year'];
    var withdrawal = args['withdrawal'];
    
    var partialWithdrawalSurcharge = this.self.getPartialWithdrawSurcharges({year: year});
    var partialWithdrawal = _R2(withdrawal * (1 + partialWithdrawalSurcharge));
    var partialWithdrawalCharge = partialWithdrawal - withdrawal;

    //withdrawalAmount = partialWithdrawal;
    //totalWithdrawal = activity.withdrawal;
    return {withdrawalAmount: withdrawal, totalWithdrawal: partialWithdrawal};
}
});
var eventReceiveRegularPremiumLocal = eventReceiveInitialPremiumLocal.extend({
   eventName: function(args) {
    return "Receive Regular Payment (Local)";
},
   newPremiumReceived: function(args) {
    var context = args["context"];

    var metadata = context.events.metadata;
    var proposal = context.proposal;
    var basePlan = proposal.coverageInfo;
    var runningPolicyValues = context.runningPolicyValues;
    var months = runningPolicyValues.months;
    var newPremium = 0;
    var month = months % 12;
    //  var premiumAmount = Number(this.self.newPremium(args));

     if (month == 0 && basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.ANNUAL) {
        //  newPremium = premiumAmount;
        newPremium = Math.max(0, basePlan.regularPayment - runningPolicyValues.topup);
         _DBR("plannedPremium", newPremium, "eventReceiveRegularPremiumLocal->", months);
     } else
     if ((month % 6) == 0 && basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.SEMIANNUAL) {
         newPremium = Math.max(0, basePlan.regularPayment - runningPolicyValues.topup);
         _DBR("plannedPremium", newPremium, "eventReceiveRegularPremiumLocal->", months);
     } else
     if ((months % 3) == 0 && basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.QUARTERLY) {
        newPremium = Math.max(0, basePlan.regularPayment - runningPolicyValues.topup);
         _DBR("plannedPremium", newPremium, "eventReceiveRegularPremiumLocal->", months);
     } else
     if (basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.MONTHLY) {
        newPremium = Math.max(0, basePlan.regularPayment - runningPolicyValues.topup);
         _DBR("plannedPremium", newPremium, "eventReceiveRegularPremiumLocal->", months);
     }
    return newPremium;
},
   shouldBeRun: function(args) {
    var context = args["context"];
    var running = context.runningPolicyValues;

    var shouldRun = false;
    for(idx in PublicConstants.FUND_RETURN) {
        shouldRun = (shouldRun || running.lapse[idx] == "N");
    }

    return shouldRun;
},
   newPremium: function(args) {
    var context = args["context"];
    var running = context.runningPolicyValues;
    var metadata = context.events.metadata;
    var proposal = context.proposal;
    var basePlan = proposal.coverageInfo;
    var riderPremiums = running.riderPremiums;
    // #SEMIANNUAL - commment out this line fix issue when payment mode is SEMIANNUAL 
    // var mpre = basePlan.plannedPremium + riderPremiums;
    // Add this line for fix #SEMIANNUAL
    
    var mpre = 0;
    if (basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.ANNUAL) {
        mpre = basePlan.plannedPremium + riderPremiums;
     } else if (basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.SEMIANNUAL) {
        mpre = basePlan.plannedPremium * 2 + riderPremiums;
     } else if (basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.QUARTERLY){
        mpre = basePlan.plannedPremium * 4 + riderPremiums;
     } else if (basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.MONTHLY) {
        mpre = basePlan.plannedPremium * 12 + riderPremiums;
     }
    
    // End fix #SEMIANNUAL
    

    if (!Utils.isNothing(basePlan.regularPayment)) {
        var p = Math.min(basePlan.regularPayment, mpre);
        _DBR("newPremium = Math.min( " + basePlan.regularPayment + ", " + basePlan.plannedPremium + " )", p, "eventReceiveRegularPremiumLocal->", running.months);
        return p
    } else {
        return mpre;
    }
}
});
var eventReceiveTopupPremiumLocal = eventReceiveInitialPremiumLocal.extend({
   eventName: function(args) {
    return "Receive Topup Premium (Local)";
},
   shouldBeRun: function(args) {
    var context = args['context'];
    var shouldRun = (context.policyOptions.indexOf("FundActivitiesOption") >= 0);
    var running = context.runningPolicyValues;

    for(var idx in PublicConstants.FUND_RETURN) {
        shouldRun = (shouldRun || running.lapse[idx] == "N");
    }

    return shouldRun;
},
   newPremiumReceived: function(args) {
    var context = args["context"];

    var metadata = context.events.metadata;
    var proposal = context.proposal;
    var basePlan = proposal.coverageInfo;
    var runningPolicyValues = context.runningPolicyValues;
    var months = runningPolicyValues.months;
    var newPremium = this.self.newRegularTopup(args);

    var year = runningPolicyValues.year;
    var months = runningPolicyValues.months;
    var month = months % 12;
    
    if (month == 0) {
        if (!Utils.isNothing(proposal.fundActivities) && !Utils.isNothing(proposal.fundActivities.fundActivity)) {
            var activities = Utils.iterator(proposal.fundActivities.fundActivity);
            var parties = Utils.iterator(basePlan.parties.party);
            for (var idx in activities) {
                var activity = activities[idx];
                if (Number(activity.topupPremium) > 0 && Number(activity.attainAge) == (Number(parties[0].insuredAge) + Number(year))) {
                    if (!Utils.isNothing(activity.topupPremium)) {
                        newPremium = Number(newPremium) + Number(activity.topupPremium);
                    }
                    break;
                }
            }
        }
    }
    
    if (newPremium > 0) {
        // save top-up premium in context to show in result column
        runningPolicyValues['topup'] = runningPolicyValues['topup'] + Number(newPremium);

        _DBR("", "", "", months);
        _DBR("newTopupPremium", newPremium, "eventReceiveTopupPremiumLocal->", months);
        _DBR("topupPremium", runningPolicyValues['topup'], "eventReceiveTopupPremiumLocal->", months);
    }

    return newPremium;
},
   lookupAllocationRate: function(args) {
   var context = args["context"];

   var metadata = context.events.metadata;
   var proposal = context.proposal;
   var basePlan = proposal.coverageInfo;
   var productId = basePlan.product.productKey.primaryProduct.productPK.productId;
   var runningPolicyValues = context.runningPolicyValues;

   var year = runningPolicyValues.year;
   var months = runningPolicyValues.months;
   var allocationRate = 1;

   var allocationRates = context.rates[productId][SchemaConstants.PREMIUM_TYPE.TOPUP_ALLOCATION];
   if (!Utils.isNothing(allocationRates)) {
       allocationRate = allocationRates.rates[year];
   }
   _DBR("topupAllocationRate", allocationRate, "eventReceiveXXXXXPremiumLocal->", months);

   return allocationRate;
},
   newRegularTopup: function(args) {
    var context = args["context"];

    var metadata = context.events.metadata;
    var proposal = context.proposal;
    var basePlan = proposal.coverageInfo;
    var runningPolicyValues = context.runningPolicyValues;
    var riderPremiums = _V( runningPolicyValues.riderPremiums, 0 );
    var months = runningPolicyValues.months;
    var month = months % 12;
    
    var mpre = 0;
    if (month == 0 && basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.ANNUAL) {
         mpre = basePlan.plannedPremium + riderPremiums;
         runningPolicyValues.totalAnnualRegularPremium += basePlan.regularPayment;
      } else if ((month % 6) == 0 && basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.SEMIANNUAL) {
         mpre = basePlan.plannedPremium * 2 + riderPremiums;
         runningPolicyValues.totalAnnualRegularPremium += basePlan.regularPayment;
      } else if ((months % 3) == 0 && basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.QUARTERLY){
         mpre = basePlan.plannedPremium * 4 + riderPremiums;
         runningPolicyValues.totalAnnualRegularPremium += basePlan.regularPayment;
      } else if (basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.MONTHLY) {
         mpre = basePlan.plannedPremium * 12 + riderPremiums;
         runningPolicyValues.totalAnnualRegularPremium += basePlan.regularPayment;
      }

    var regularTopupAmount = 0;
    if (!Utils.isNothing(basePlan.regularPayment)) {
        // regularTopupAmount = Math.max(0, basePlan.regularPayment - mpre);
        regularTopupAmount = Math.max(0, runningPolicyValues.totalAnnualRegularPremium - mpre - runningPolicyValues.topup);
    }

    var regularTopup = 0;
    
    if (month == 0 && basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.ANNUAL) {
        regularTopup = regularTopupAmount;
        _DBR("regularTopup", regularTopup, "eventReceiveTopupPremiumLocal->", months);
    } else
    if ((month % 6) == 0 && basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.SEMIANNUAL) {
        regularTopup = regularTopupAmount;
        _DBR("regularTopup", regularTopup, "eventReceiveTopupPremiumLocal->", months);
    } else
    if ((months % 3) == 0 && basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.QUARTERLY) {
        regularTopup = regularTopupAmount;
        _DBR("regularTopup", regularTopup, "eventReceiveTopupPremiumLocal->", months);
    } else
    if (basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.MONTHLY) {
        regularTopup = regularTopupAmount;
        _DBR("regularTopup", regularTopup, "eventReceiveTopupPremiumLocal->", months);
    }

    return regularTopup;
}
});
var eventReceiveTopupPremiumRUVXX = eventReceiveInitialPremiumLocal.extend({
   eventName: function(args) {
    return "Receive Topup Premium (RUVXX)";
},
   shouldBeRun: function(args) {
    var context = args['context'];
    var shouldRun = (context.policyOptions.indexOf("FundActivitiesOption") >= 0);
    var running = context.runningPolicyValues;

    for(var idx in PublicConstants.FUND_RETURN) {
        shouldRun = (shouldRun || running.lapse[idx] == "N");
    }

    return shouldRun;
},
   newPremiumReceived: function(args) {
    var context = args["context"];

    var metadata = context.events.metadata;
    var proposal = context.proposal;
    var basePlan = proposal.coverageInfo;
    var runningPolicyValues = context.runningPolicyValues;
    var months = runningPolicyValues.months;
    var newPremium = 0; 

    var year = runningPolicyValues.year;
    var months = runningPolicyValues.months;
    var month = months % 12;

    if (month === 0 && basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.ANNUAL) {
        newPremium += Math.max(0, runningPolicyValues.accumPremiumPaid - runningPolicyValues.accumPremiumRequested - runningPolicyValues.accumTopup); 
        _DBR("newPremium", newPremium, "eventReceivePlannedPremiumsLocal->", months);
    } else
    if ((month % 6) === 0 && basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.SEMIANNUAL) {
        newPremium += Math.max(0, runningPolicyValues.accumPremiumPaid - runningPolicyValues.accumPremiumRequested - runningPolicyValues.accumTopup); 
        _DBR("newPremium", newPremium, "eventReceivePlannedPremiumsLocal->", months);
    } else
    if ((months % 3) === 0 && basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.QUARTERLY) {
        newPremium += Math.max(0, runningPolicyValues.accumPremiumPaid - runningPolicyValues.accumPremiumRequested - runningPolicyValues.accumTopup); 
        _DBR("newPremium", newPremium, "eventReceivePlannedPremiumsLocal->", months);
    } else
    if (basePlan.options.paymentMode == SchemaConstants.PAYMENT_MODE.MONTHLY) {
        newPremium += Math.max(0, runningPolicyValues.accumPremiumPaid - runningPolicyValues.accumPremiumRequested - runningPolicyValues.accumTopup); 
        _DBR("newPremium", newPremium, "eventReceivePlannedPremiumsLocal->", months);
    }

    /*
    if (month === 0) {
        //newPremium += _V(basePlan.topUpPremium, 0);
        newPremium += Math.max(0, runningPolicyValues.accumPremiumPaid - runningPolicyValues.accumPremiumRequested - runningPolicyValues.accumTopup); 
    }
    */

    if (newPremium > 0) {
        // save top-up premium in context to show in result column
        runningPolicyValues.topup = runningPolicyValues.topup + newPremium;
        runningPolicyValues.accumTopup = runningPolicyValues.accumTopup + newPremium;

        _DBR("", "", "", months);
        _DBR("newTopupPremium", newPremium, "eventReceiveTopupPremiumLocal->", months);
        _DBR("topupPremium", runningPolicyValues['topup'], "eventReceiveTopupPremiumLocal->", months);
        _DBR("accumTopup", runningPolicyValues['accumTopup'], "eventReceiveTopupPremiumLocal->", months);
    }

    return newPremium;
},
   lookupAllocationRate: function(args) {
   var context = args["context"];

   var metadata = context.events.metadata;
   var proposal = context.proposal;
   var basePlan = proposal.coverageInfo;
   var productId = basePlan.product.productKey.primaryProduct.productPK.productId;
   var runningPolicyValues = context.runningPolicyValues;

   var year = runningPolicyValues.year;
   var months = runningPolicyValues.months;
   var allocationRate = 1;

   var allocationRates = context.rates[productId][SchemaConstants.PREMIUM_TYPE.TOPUP_ALLOCATION];
   if (!Utils.isNothing(allocationRates)) {
       allocationRate = allocationRates.rates[year];
   }
   _DBR("topupAllocationRate", allocationRate, "eventReceiveXXXXXPremiumLocal->", months);

   return allocationRate;
},
   getFundPool: function(args) {
    var context = args['context'];
    return context.runningPolicyValues.topupFundPool;
},
   netPremiumReceived: function(args) {
    var context = args.args.context;
    var running = context.runningPolicyValues;
    
    var netPremium = this.parent.netPremiumReceived(args);
    var newPremium = args['newPremium'];
    var topupPremLoad = newPremium - netPremium;
    
    _DBR("topupPremLoad", topupPremLoad, "eventReceiveTopupPremiumRUVXX", running.months);
    running['topupPremiumLoad'] = running['topupPremiumLoad'] + topupPremLoad;
    _DBR("running.topupPremiumLoad", running.topupPremiumLoad, "eventReceiveTopupPremiumRUVXX", running.months);
    
    return netPremium;
},
   dumpinPremium: function(args) {
    var args2 = args['args'];
    var netNewPremium = args['netNewPremium'];
    
    var context = args2['context'];
    var runningPolicyValues = context.runningPolicyValues;
    
    var netNewPremiums = {};
    for(var returnTypeIdx in PublicConstants.FUND_RETURN) {
        var returnType = PublicConstants.FUND_RETURN[returnTypeIdx];

        var isLapse = runningPolicyValues.lapse[returnType];
        if (isLapse == 'Y') {
            netNewPremiums[returnType] = 0;
        } else {
            netNewPremiums[returnType] = netNewPremium;
        }
    }

    _DBR("netNewPremiums", netNewPremiums, "$$$$$ eventReceiveXXXXXXPremiumLocal->", runningPolicyValues.months);

    var fundPool = this.self.getFundPool(args2);
    IFund.appliedTo(fundPool).call("dumpin", {
        amounts: netNewPremiums
    });
}
});
var eventRollInterestRUVXX = eventRollInterest.extend({
   eventName: function(args) {
     // eventRollInterest
     // - roll interest of accounts
     return "Roll interest (RUVxx with TAV)";
},
   run: function(args) {
    var result = this.parent.run(args);
    var runningPolicyValues = args.context.runningPolicyValues;
    if (runningPolicyValues.topupFundPool) {
        IFund.appliedTo(runningPolicyValues.topupFundPool).call("rollingInterest", {});
    }
    // Support for validation
    runningPolicyValues.bavBeforeBonusAndWithdrawal = IFund.appliedTo(runningPolicyValues.fundPool).call("fundBalances", {});
    runningPolicyValues.tavBeforeBonusAndWithdrawal = IFund.appliedTo(runningPolicyValues.topupFundPool).call("fundBalances", {});
    return result;
}
});
var eventTradParPlanAvyInitialization = eventCoreMvyAvyInitialization.extend({
   eventName: function(args) {
     return "Initialise MVY / AVY for Participate Products";
},
   shouldBeRun: function(args) {
     return this.parent.shouldBeRun(args);
},
   MVY: function(args) {
     var context = args["context"];
     var running = context.runningPolicyValues;
     // nothing
},
   AVY: function(args) {
     var context = args["context"];
     var running = context.runningPolicyValues;
     var months = running.months;
     running['dividends'] = 0;
     running['cashValue'] = 0;
     running['rpu'] = 0;     
     running['basePlanPremiums'] = 0;

     running['riderPremiums'] = 0;
     running['ridersCashValue'] = 0;

     running['totalPremiums'] = 0;
     running['deathBenefits'] = 0;
     running['ridersDeathBenefit'] = 0;
     running['ciBenefit'] = 0;
     running['cashValue'] = 0;
     running['coupon'] = 0;
     running['genderCiBenefit'] = 0;
     running['lateCiBenefit'] = 0;
     running['emCiBenefit'] = 0;

     // dividends 
     running['dividends'] = 0;
     running["gratefulDividends"] = 0;
     running['lowerDividends'] = 0;
     running['lowerGratefulDividends'] = 0;
     running['higherDividends'] = 0;
     running['higherGratefulDividends'] = 0;
     
     // rider premiums and cash value
     running['riderPremiumsList'] = [];
     running['ridersCashValueList'] = [];
},
   initialSetup: function(args) {
     var context = args["context"];
     var running = context.runningPolicyValues;
     var months = running.months;
     var proposal = context.proposal;
     
     running['accPremiums'] = 0;
     running['accBasePlanPremiums'] = 0;

     running['accCoupons'] = 0;
     running['couponNotReceive'] = 0;
     running['accDividends'] = 0;
     running["accGratefulDividends"] = 0;

     running['accLowerCoupons'] = 0;
     running['accLowerDividends'] = 0;
     running["accLowerGratefulDividends"] = 0;

     running['accHigherCoupons'] = 0;
     running['accHigherDividends'] = 0;
     running["accHigherGratefulDividends"] = 0;
     
     running.age = Number(context.insuredAge) + Number(running.year);
}
});

    var colAccumulateBasePremiumHigh = Class.define({
            columnName: function(args) {
    return "colAccumulateBasePremiumHigh";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.accumBasePremiums[PublicConstants.FUND_RETURN.HIGH];
}
    });
    var colAccumulateBasePremiumLow = Class.define({
            columnName: function(args) {
    return "colAccumulateBasePremiumLow";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.accumBasePremiums[PublicConstants.FUND_RETURN.LOW];
}
    });
    var colAccumulateBasePremiumMedium = Class.define({
            columnName: function(args) {
    return "colAccumulateBasePremiumMedium";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.accumBasePremiums[PublicConstants.FUND_RETURN.MEDIUM];
}
    });
    var colAccumulatePremiumsHigh = Class.define({
            columnName: function(args) {
    return "colAccumulatePremiumsHigh";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.annualAccumulatedPremium[PublicConstants.FUND_RETURN.HIGH];
}
    });
    var colAccumulatePremiumsLow = Class.define({
            columnName: function(args) {
    return "colAccumulatePremiumsLow";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.annualAccumulatedPremium[PublicConstants.FUND_RETURN.LOW];
}
    });
    var colAccumulatePremiumsMedium = Class.define({
            columnName: function(args) {
    return "colAccumulatePremiumsMedium";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.annualAccumulatedPremium[PublicConstants.FUND_RETURN.MEDIUM];
}
    });
    var colAccumulateTotalPlannedPremium = Class.define({
            columnName: function(args) {
    return "colAccumulateTotalPlannedPremium";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.accumulateTotalPlannedPremiums[PublicConstants.FUND_RETURN.HIGH];
}
    });
    var colAllocatedPremiums = Class.define({
            columnName: function(args) {
    return "colAllocatedPremiums";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    //return record.regularPayment - (record.newPremium - record.netPremium);
    return record.netPremium;
}
    });
    var colAllocatedPremiumsUVL = Class.define({
            columnName: function(args) {
    return "colAllocatedPremiumsUVL";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.totalPremiums - record.premiumLoad;
}
    });
    var colAvBeforeBonusAndWithdrawalHigh = Class.define({
            columnName: function(args) {
    return "colAvBeforeBonusAndWithdrawalHigh";
},
            shouldBeShown: function(args) {
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    var calValue = record.avBeforeBonusAndWithdrawal[PublicConstants.FUND_RETURN.HIGH];
    return calValue;
}
    });
    var colAvBeforeBonusAndWithdrawalLow = Class.define({
            columnName: function(args) {
    return "colAvBeforeBonusAndWithdrawalLow";
},
            shouldBeShown: function(args) {
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    var calValue = record.avBeforeBonusAndWithdrawal[PublicConstants.FUND_RETURN.LOW];
    return calValue;
}
    });
    var colAvBeforeBonusAndWithdrawalMedium = Class.define({
            columnName: function(args) {
    return "colAvBeforeBonusAndWithdrawalMedium";
},
            shouldBeShown: function(args) {
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    var calValue = record.avBeforeBonusAndWithdrawal[PublicConstants.FUND_RETURN.MEDIUM];
    return calValue;
}
    });
    var colBaseAllocatedPremiumHigh = Class.define({
            columnName: function(args) {
    return "colBaseAllocatedPremiumHigh";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.totalPremiums - record.premiumLoad - record.topupAllocatedPremiums[PublicConstants.FUND_RETURN.HIGH];
}
    });
    var colBaseAllocatedPremiumLow = Class.define({
            columnName: function(args) {
    return "colBaseAllocatedPremiumLow";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.totalPremiums - record.premiumLoad - record.topupAllocatedPremiums[PublicConstants.FUND_RETURN.LOW];
}
    });
    var colBaseAllocatedPremiumMedium = Class.define({
            columnName: function(args) {
    return "colBaseAllocatedPremiumMedium";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.totalPremiums - record.premiumLoad - record.topupAllocatedPremiums[PublicConstants.FUND_RETURN.MEDIUM];
}
    });
    var colBasePlanFaceAmount = Class.define({
            columnName: function(args) {
    return "colBasePlanFaceAmount";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.basePlanFaceAmount;
}
    });
    var colBaseProtection = Class.define({
            columnName: function(args) {
    return "colBaseProtection";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.basePlanProtection;
}
    });
    var colBAVAfterBonusAndBeforeWithdrawalHigh = Class.define({
            columnName: function(args) {
    return "colBAVAfterBonusAndBeforeWithdrawalHigh";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    var calValue = record.bavAfterBonusAndBeforeWithdrawal[PublicConstants.FUND_RETURN.HIGH];
    return calValue;
}
    });
    var colBAVAfterBonusAndBeforeWithdrawalLow = Class.define({
            columnName: function(args) {
    return "colBAVAfterBonusAndBeforeWithdrawalLow";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    var calValue = record.bavAfterBonusAndBeforeWithdrawal[PublicConstants.FUND_RETURN.LOW];
    return calValue;
}
    });
    var colBAVAfterBonusAndBeforeWithdrawalMedium = Class.define({
            columnName: function(args) {
    return "colBAVAfterBonusAndBeforeWithdrawalMedium";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    var calValue = record.bavAfterBonusAndBeforeWithdrawal[PublicConstants.FUND_RETURN.MEDIUM];
    return calValue;
}
    });
    var colBAVBeforeBonusAndWithdrawalHigh = Class.define({
            columnName: function(args) {
    return "colBAVBeforeBonusAndWithdrawalHigh";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    var calValue = record.bavBeforeBonusAndWithdrawal[PublicConstants.FUND_RETURN.HIGH];
    return calValue;
}
    });
    var colBAVBeforeBonusAndWithdrawalLow = Class.define({
            columnName: function(args) {
    return "colBAVBeforeBonusAndWithdrawalLow";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    var calValue = record.bavBeforeBonusAndWithdrawal[PublicConstants.FUND_RETURN.LOW];
    return calValue;
}
    });
    var colBAVBeforeBonusAndWithdrawalMedium = Class.define({
            columnName: function(args) {
    return "colBAVBeforeBonusAndWithdrawalMedium";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    var calValue = record.bavBeforeBonusAndWithdrawal[PublicConstants.FUND_RETURN.MEDIUM];
    return calValue;
}
    });
    var colBAVInterest = Class.define({
            columnName: function(args) {
      var type = this.self.context.type.toLowerCase();
      var upperFirstChar = type.charAt(0).toUpperCase() + type.substr(1);
      var fundCode = this.self.context.fund.code;
      return "colBAVInterest" + upperFirstChar + "[" + fundCode + "]";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    var fundValue = record.BAVFundAllocations[this.self.context.fund.code][this.self.context.type];
    return _V( fundValue, 0);
},
            init: function(args) {
    var fund = args['fund'];
    var type = args['type'];

    this.self['context'] = {};
    this.self.context['fund'] = fund;
    this.self.context['type'] = type;
}
    });
    var colCumulativePremium = Class.define({
            columnName: function(args) {
    return "colCumulativePremium";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    var calValue = record.cumulativePremium;
    return calValue;
}
    });
    var colErrorHigh = Class.define({
            columnName: function(args) {
    return "colErrorHigh";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.error[PublicConstants.FUND_RETURN.HIGH];
}
    });
    var colErrorLow = Class.define({
            columnName: function(args) {
    return "colErrorLow";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.error[PublicConstants.FUND_RETURN.LOW];
}
    });
    var colErrorMedium = Class.define({
            columnName: function(args) {
    return "colErrorMedium";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.error[PublicConstants.FUND_RETURN.MEDIUM];
}
    });
    var colExampleColumnLocal = Class.define({
            columnName: function(args) {
    return "colExampleColumnLocal";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return 0.00;
},
            exampleMethod: function(args) {
    return null;
   }
    });
    var colFaceAmountHigh = Class.define({
            columnName: function(args) {
    return "colFaceAmountHigh";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.faceAmount[PublicConstants.FUND_RETURN.HIGH];
}
    });
    var colFaceAmountLow = Class.define({
            columnName: function(args) {
    return "colFaceAmountLow";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.faceAmount[PublicConstants.FUND_RETURN.LOW];
}
    });
    var colFaceAmountMedium = Class.define({
            columnName: function(args) {
    return "colFaceAmountMedium";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.faceAmount[PublicConstants.FUND_RETURN.MEDIUM];
}
    });
    var colLoyaltyBonusHigh = Class.define({
            columnName: function(args) {
    return "colLoyaltyBonusHigh";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    var calValue = Math.max(0, Number(record.fundBonus[PublicConstants.FUND_RETURN.HIGH]));
   return calValue;
}
    });
    var colLoyaltyBonusLow = Class.define({
            columnName: function(args) {
    return "colLoyaltyBonusLow";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    var calValue = Math.max(0, Number(record.fundBonus[PublicConstants.FUND_RETURN.LOW]));
   return calValue;
}
    });
    var colLoyaltyBonusMedium = Class.define({
            columnName: function(args) {
    return "colLoyaltyBonusMedium";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    var calValue = Math.max(0, Number(record.fundBonus[PublicConstants.FUND_RETURN.MEDIUM]));
   return calValue;
}
    });
    var colMaxTopupWithdrawalHigh = Class.define({
            columnName: function(args) {
    return "colMaxTopupWithdrawalHigh";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.maxTopupWithdrawal[PublicConstants.FUND_RETURN.HIGH];
}
    });
    var colMaxTopupWithdrawalLow = Class.define({
            columnName: function(args) {
    return "colMaxTopupWithdrawalLow";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.maxTopupWithdrawal[PublicConstants.FUND_RETURN.LOW];
}
    });
    var colMaxTopupWithdrawalMedium = Class.define({
            columnName: function(args) {
    return "colMaxTopupWithdrawalMedium";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.maxTopupWithdrawal[PublicConstants.FUND_RETURN.MEDIUM];
}
    });
    var colMaxWithdrawalHigh = Class.define({
            columnName: function(args) {
    return "colMaxWithdrawalHigh";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.maxWithdrawal[PublicConstants.FUND_RETURN.HIGH];
}
    });
    var colMaxWithdrawalLow = Class.define({
            columnName: function(args) {
    return "colMaxWithdrawalLow";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.maxWithdrawal[PublicConstants.FUND_RETURN.LOW];
}
    });
    var colMaxWithdrawalMedium = Class.define({
            columnName: function(args) {
    return "colMaxWithdrawalMedium";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.maxWithdrawal[PublicConstants.FUND_RETURN.MEDIUM];
}
    });
    var colMinFaceAmount = Class.define({
            columnName: function(args) {
    return "colMinFaceAmount";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.minFaceAmount;
}
    });
    var colModalBasePremium = Class.define({
            columnName: function(args) {
    return "colModalBasePremium";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    var calValue = record.modalBasePremium;
    return calValue;
}
    });
    var colPolicyAccountHigh = Class.define({
            columnName: function(args) {
    return "colPolicyAccountHigh";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    var colPolicyAccountValueHigh = record.accountValues[PublicConstants.FUND_RETURN.HIGH] + record.cashoutAccount[PublicConstants.FUND_RETURN.HIGH];
    var topupAccountValueHigh = record.topupAccountValues[PublicConstants.FUND_RETURN.HIGH];
    return Math.max(0, Number(colPolicyAccountValueHigh + topupAccountValueHigh));
}
    });
    var colPolicyAccountLow = Class.define({
            columnName: function(args) {
    return "colPolicyAccountLow";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    var accountValueLow = record.accountValues[PublicConstants.FUND_RETURN.LOW] + record.cashoutAccount[PublicConstants.FUND_RETURN.LOW];
    var topupAccountValueLow = record.topupAccountValues[PublicConstants.FUND_RETURN.LOW];
    return Math.max(0, Number(accountValueLow + topupAccountValueLow));
}
    });
    var colPolicyFee = Class.define({
            columnName: function(args) {
    return "colPolicyFee";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.policyFee;
}
    });
    var colPolicyLapseHigh = Class.define({
            columnName: function(args) {
    return "colPolicyLapseHigh";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    var policyLapse = record.policyLapse;
    var lapseHigh = policyLapse[PublicConstants.FUND_RETURN.HIGH];
    return lapseHigh;
}
    });
    var colPolicyLapseLow = Class.define({
            columnName: function(args) {
    return "colPolicyLapseLow";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    var policyLapse = record.policyLapse;
    var lapseLow = policyLapse[PublicConstants.FUND_RETURN.LOW];
    return lapseLow;
}
    });
    var colPolicyLapseMedium = Class.define({
            columnName: function(args) {
    return "colPolicyLapseMedium";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    var policyLapse = record.policyLapse;
    var lapseMedium = policyLapse[PublicConstants.FUND_RETURN.MEDIUM];
    return lapseMedium;
}
    });
    var colPremiumLoad = Class.define({
            columnName: function(args) {
    return "colPremiumLoad";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];

    // ATP-488  #1 comment out this code - it seem raise issue gap data
    var calValue = record.premiumLoad;
    return calValue;
}
    });
    var colPremiumLoadAndOtherFees = Class.define({
            columnName: function(args) {
    return "colPremiumLoadAndOtherFees";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    var partialWithdrawalCharge = 0;
     if (!Utils.isNothing(record.partialWithdrawalCharge)) {
        partialWithdrawalCharge = record.partialWithdrawalCharge;
     }
     var calValue = record.premiumLoad + record.policyFee + partialWithdrawalCharge;
     return calValue;
}
    });
    var colRegularLoyaltyBonusHigh = Class.define({
            columnName: function(args) {
    return "colRegularLoyaltyBonusHigh";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
   var record = args["record"];
   var calValue = Math.max(0, Number(record.fundBonus[PublicConstants.FUND_RETURN.HIGH]));
   return calValue;
}
    });
    var colRegularLoyaltyBonusLow = Class.define({
            columnName: function(args) {
    return "colRegularLoyaltyBonusLow";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
   var record = args["record"];
   var calValue = Math.max(0, Number(record.fundBonus[PublicConstants.FUND_RETURN.LOW]));
   return calValue;
}
    });
    var colRegularLoyaltyBonusMedium = Class.define({
            columnName: function(args) {
    return "colRegularLoyaltyBonusMedium";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
   var record = args["record"];
   var calValue = Math.max(0, Number(record.fundBonus[PublicConstants.FUND_RETURN.MEDIUM]));
   return calValue;
}
    });
    var colRegularPayment = Class.define({
            columnName: function(args) {
    return "colRegularPayment";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.regularPayment;
}
    });
    var colRegularPremiums = Class.define({
            columnName: function(args) {
    return "colRegularPremiums";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.totalPremiums - record.topup;
}
    });
    var colRiderCoverageCashValue = Class.define({
            columnName: function(args) {
    var riderIdx = Number(this.self.context.riderIdx) + 1;
    return "colRiderCoverageCashValue[" + riderIdx + 
        "/" + this.self.context.productId + "]";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    var cashValue = record.ridersCashValueList[this.self.context.riderIdx];
    return _V( cashValue, 0);
},
            init: function(args) {
    var riderIdx = args['riderIdx'];
    var coverage = args['coverage'];
    
    this.self['context'] = {};
    this.self.context['riderIdx'] = riderIdx;
    this.self.context['coverage'] = coverage
    this.self.context['productId'] = coverage.product.productKey.primaryProduct.productPK.productId;
}
    });
    var colRiderCoveragePremium = Class.define({
            columnName: function(args) {
    var riderIdx = Number(this.self.context.riderIdx) + 1;
    return "colRiderCoveragePremium[" + riderIdx + 
        "/" + this.self.context.productId + "]";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    var premium = record.riderPremiumsList[this.self.context.riderIdx];
    return _V( premium, 0);
},
            init: function(args) {
    var riderIdx = args['riderIdx'];
    var coverage = args['coverage'];
    
    this.self['context'] = {};
    this.self.context['riderIdx'] = riderIdx;
    this.self.context['coverage'] = coverage
    this.self.context['productId'] = coverage.product.productKey.primaryProduct.productPK.productId;
}
    });
    var colRiderCoverageProtection = Class.define({
            columnName: function(args) {
    var riderIdx = Number(this.self.context.riderIdx) + 1;
    return "colProtection[" + riderIdx + 
        "/" + this.self.context.productId + "]";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return _V(record.riderProtections[this.self.context.riderIdx].protection, 0);
},
            init: function(args) {
    var riderIdx = args['riderIdx'];
    var coverage = args['coverage'];
    
    this.self['context'] = {};
    this.self.context['riderIdx'] = riderIdx;
    this.self.context['coverage'] = coverage
    this.self.context['productId'] = coverage.product.productKey.primaryProduct.productPK.productId;
}
    });
    var colRiderCoverageTotalCashValue = Class.define({
            columnName: function(args) {
    return "colRiderCoverageTotalCashValue[" + this.self.context.productId + "]";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];

    var cashValueByProduct = 0;
    for (var i in this.self.context['riders']){
      var rider = this.self.context['riders'][i];
      if (rider.product.productKey.primaryProduct.productPK.productId == this.self.context['productId']) {
        cashValueByProduct += record.ridersCashValueList[i];
      }
    }

    return _V( cashValueByProduct, 0);
},
            init: function(args) {
    var riderIdx = args['riderIdx'];
    var coverage = args['coverage'];
    var riders = args['riders'];

    this.self['context'] = {};
    this.self.context['riderIdx'] = riderIdx;
    this.self.context['coverage'] = coverage
    this.self.context['productId'] = coverage.product.productKey.primaryProduct.productPK.productId;
    this.self.context['riders'] = riders;

}
    });
    var colRiderProtection = Class.define({
            columnName: function(args) {
    return "colRiderProtection";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.totalRiderProtection;
}
    });
    var colSpecialLoyaltyBonusHigh = Class.define({
            columnName: function(args) {
    return "colSpecialLoyaltyBonusHigh";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return Math.max(0, Number(record.specialBonus[PublicConstants.FUND_RETURN.HIGH]));
}
    });
    var colSpecialLoyaltyBonusLow = Class.define({
            columnName: function(args) {
    return "colSpecialLoyaltyBonusLow";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return Math.max(0, Number(record.specialBonus[PublicConstants.FUND_RETURN.LOW]));
}
    });
    var colSpecialLoyaltyBonusMedium = Class.define({
            columnName: function(args) {
    return "colSpecialLoyaltyBonusMedium";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return Math.max(0, Number(record.specialBonus[PublicConstants.FUND_RETURN.MEDIUM]));
}
    });
    var colSurValueHighBeforeWithdraw = Class.define({
            columnName: function(args) {
    return "colSurValueHighBeforeWithdraw";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.surrenderValueBeforeWithdrawal[PublicConstants.FUND_RETURN.HIGH];
}
    });
    var colSurValueLowBeforeWithdraw = Class.define({
            columnName: function(args) {
    return "colSurValueLowBeforeWithdraw";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.surrenderValueBeforeWithdrawal[PublicConstants.FUND_RETURN.LOW];
}
    });
    var colSurValueMediumBeforeWithdraw = Class.define({
            columnName: function(args) {
    return "colSurValueMediumBeforeWithdraw";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.surrenderValueBeforeWithdrawal[PublicConstants.FUND_RETURN.MEDIUM];
}
    });
    var colTAVAfterBonusAndBeforeWithdrawalHigh = Class.define({
            columnName: function(args) {
    return "colTAVAfterBonusAndBeforeWithdrawalHigh";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
        var calValue = record.tavAfterBonusAndBeforeWithdrawal[PublicConstants.FUND_RETURN.HIGH];
        return calValue;
}
    });
    var colTAVAfterBonusAndBeforeWithdrawalLow = Class.define({
            columnName: function(args) {
    return "colTAVAfterBonusAndBeforeWithdrawalLow";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
        var calValue = record.tavAfterBonusAndBeforeWithdrawal[PublicConstants.FUND_RETURN.LOW];
        return calValue;
}
    });
    var colTAVAfterBonusAndBeforeWithdrawalMedium = Class.define({
            columnName: function(args) {
    return "colTAVAfterBonusAndBeforeWithdrawalMedium";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
        var calValue = record.tavAfterBonusAndBeforeWithdrawal[PublicConstants.FUND_RETURN.MEDIUM];
        return calValue;
}
    });
    var colTAVBeforeBonusAndWithdrawalHigh = Class.define({
            columnName: function(args) {
    return "colTAVBeforeBonusAndWithdrawalHigh";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    var calValue = record.tavBeforeBonusAndWithdrawal[PublicConstants.FUND_RETURN.HIGH];
    return calValue;
}
    });
    var colTAVBeforeBonusAndWithdrawalLow = Class.define({
            columnName: function(args) {
    return "colTAVBeforeBonusAndWithdrawalLow";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    var calValue = record.tavBeforeBonusAndWithdrawal[PublicConstants.FUND_RETURN.LOW];
    return calValue;
}
    });
    var colTAVBeforeBonusAndWithdrawalMedium = Class.define({
            columnName: function(args) {
    return "colTAVBeforeBonusAndWithdrawalMedium";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    var calValue = record.tavBeforeBonusAndWithdrawal[PublicConstants.FUND_RETURN.MEDIUM];
    return calValue;
}
    });
    var colTAVInterest = Class.define({
            columnName: function(args) {
    var type = this.self.context.type.toLowerCase();
    var upperFirstChar = type.charAt(0).toUpperCase() + type.substr(1);
    var fundCode = this.self.context.fund.code;
    return "colTAVInterest" + upperFirstChar + "[" + fundCode + "]";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    var fundValue = record.TAVFundAllocations[this.self.context.fund.code][this.self.context.type];
    if (fundValue < 0) {
        fundValue = 0;
    }
    return _V( fundValue, 0);
},
            init: function(args) {
    var fund = args['fund'];
    var type = args['type'];

    this.self['context'] = {};
    this.self.context['fund'] = fund;
    this.self.context['type'] = type;
}
    });
    var colTopupAccountHigh = Class.define({
            columnName: function(args) {
    return "colTopupAccountHigh";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.topupAccountValues[PublicConstants.FUND_RETURN.HIGH];
}
    });
    var colTopupAccountLow = Class.define({
            columnName: function(args) {
    return "colTopupAccountLow";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.topupAccountValues[PublicConstants.FUND_RETURN.LOW];
}
    });
    var colTopupAccountMedium = Class.define({
            columnName: function(args) {
    return "colTopupAccountMedium";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.topupAccountValues[PublicConstants.FUND_RETURN.MEDIUM];
}
    });
    var colTopupAllocatedPremiumHigh = Class.define({
            columnName: function(args) {
    return "colTopupAllocatedPremiumHigh";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.topupAllocatedPremiums[PublicConstants.FUND_RETURN.HIGH];
}
    });
    var colTopupAllocatedPremiumLow = Class.define({
            columnName: function(args) {
    return "colTopupAllocatedPremiumLow";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.topupAllocatedPremiums[PublicConstants.FUND_RETURN.LOW];
}
    });
    var colTopupAllocatedPremiumMedium = Class.define({
            columnName: function(args) {
    return "colTopupAllocatedPremiumMedium";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.topupAllocatedPremiums[PublicConstants.FUND_RETURN.MEDIUM];
}
    });
    var colTopupPremium = Class.define({
            columnName: function(args) {
    return "colTopupPremium";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    var calValue = record.topup;
    return calValue;
}
    });
    var colTotalLoyaltyBonusHigh = Class.define({
            columnName: function(args) {
    return "colTotalLoyaltyBonusHigh";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return Math.max(0, Number(record.fundBonus[PublicConstants.FUND_RETURN.HIGH]+ record.specialBonus[PublicConstants.FUND_RETURN.HIGH]));
}
    });
    var colTotalLoyaltyBonusLow = Class.define({
            columnName: function(args) {
    return "colTotalLoyaltyBonusLow";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return Math.max(0, Number(record.fundBonus[PublicConstants.FUND_RETURN.LOW]+ record.specialBonus[PublicConstants.FUND_RETURN.LOW]));
}
    });
    var colTotalLoyaltyBonusMedium = Class.define({
            columnName: function(args) {
    return "colTotalLoyaltyBonusMedium";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return Math.max(0, Number(record.fundBonus[PublicConstants.FUND_RETURN.MEDIUM]+ record.specialBonus[PublicConstants.FUND_RETURN.MEDIUM]));
}
    });
    var colTotalModalBasePremium = Class.define({
            columnName: function(args) {
    return "colTotalModalBasePremium";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    var calValue = record.totalModalBasePremium;
    return calValue;
}
    });
    var colTotalPlannedPremium = Class.define({
            columnName: function(args) {
    return "colTotalPlannedPremium";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.totalPlannedPremium;
}
    });
    var colTotalProtection = Class.define({
            columnName: function(args) {
    return "colTotalProtection";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.totalProtections[PublicConstants.FUND_RETURN.MEDIUM];
}
    });
    var colTotalProtectionHigh = Class.define({
            columnName: function(args) {
    return "colTotalProtectionHigh";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.totalProtections[PublicConstants.FUND_RETURN.HIGH];
}
    });
    var colTotalProtectionLow = Class.define({
            columnName: function(args) {
    return "colTotalProtectionLow";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.totalProtections[PublicConstants.FUND_RETURN.LOW];
}
    });
    var colTradAccEducationBenefit = Class.define({
            columnName: function(args) {
    return "colTradAccEducationBenefit";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.accCoupon;
}
    });
    var colTradAccEducationBenefitHIGH = Class.define({
            columnName: function(args) {
    return "colTradAccEducationBenefitHIGH";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.accHigherCoupon;
}
    });
    var colTradAccEducationBenefitLOW = Class.define({
            columnName: function(args) {
    return "colTradAccEducationBenefitLOW";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.accLowerCoupon;
}
    });
    var colTradAccSpecialDividends_EDX = Class.define({
            columnName: function(args) {
    return "colTradAccSpecialDividends_EDX";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.accSpecialDividends;
}
    });
    var colTradAccSpecialDividendsHIGH_EDX = Class.define({
            columnName: function(args) {
    return "colTradAccSpecialDividendsHIGH_EDX";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.accHigherSpecialDividends;
}
    });
    var colTradAccSpecialDividendsLOW_EDX = Class.define({
            columnName: function(args) {
    return "colTradAccSpecialDividendsLOW_EDX";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.accLowerSpecialDividends;
}
    });
    var colTradAccuDeathBenefit = Class.define({
            columnName: function(args) {
    return "colTradAccuDeathBenefit";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.accDividends + record.accExcellentReward + record.accSpecialDividends + record.accCoupon + record.deathBenefit;
}
    });
    var colTradAccuDeathBenefitHIGH = Class.define({
            columnName: function(args) {
    return "colTradAccuDeathBenefitHIGH";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.accHigherDividends + record.accHigherExcellentReward + record.accHigherSpecialDividends + record.accHigherCoupon + record.higherDeathBenefit;
}
    });
    var colTradAccuDeathBenefitLOW = Class.define({
            columnName: function(args) {
    return "colTradAccuDeathBenefitLOW";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.accLowerDividends + record.accLowerExcellentReward + record.accLowerSpecialDividends + record.accLowerCoupon + record.lowerDeathBenefit;
}
    });
    var colTradAccuGratefulDividends = Class.define({
            columnName: function(args) {
    return "colTradAccuGratefulDividends";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.accGratefulDividends;
}
    });
    var colTradAccuGratefulDividendsHIGH = Class.define({
            columnName: function(args) {
    return "colTradAccuGratefulDividendsHIGH";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.accHigherGratefulDividends;
}
    });
    var colTradAccuGratefulDividendsLOW = Class.define({
            columnName: function(args) {
    return "colTradAccuGratefulDividendsLOW";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.accLowerGratefulDividends;
}
    });
    var colTradAccumulateBasePlanPremium = Class.define({
            columnName: function(args) {
    return "colTradAccumulateBasePlanPremium";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return _V(record.accumulateBasePlanPremiums, 0.00);
}
    });
    var colTradAccumulateCoupons = Class.define({
            columnName: function(args) {
    return "colTradAccumulateCoupons";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.accCoupons;
}
    });
    var colTradAccumulateCouponsHIGH = Class.define({
            columnName: function(args) {
    return "colTradAccumulateCouponsHIGH";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.accHigherCoupons;
}
    });
    var colTradAccumulateCouponsLOW = Class.define({
            columnName: function(args) {
    return "colTradAccumulateCouponsLOW";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.accLowerCoupons;
}
    });
    var colTradAccumulateDividends = Class.define({
            columnName: function(args) {
    return "colTradAccumulateDividends";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.accDividends;
}
    });
    var colTradAccumulateDividendsHIGH = Class.define({
            columnName: function(args) {
    return "colTradAccumulateDividendsHIGH";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.accHigherDividends;
}
    });
    var colTradAccumulateDividendsLOW = Class.define({
            columnName: function(args) {
    return "colTradAccumulateDividendsLOW";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.accLowerDividends;
}
    });
    var colTradAccumulatePremiums_EDX = Class.define({
            columnName: function(args) {
    return "colTradAccumulatePremiums_EDX";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return _V(record.totalPremiums, 0.00);
}
    });
    var colTradAccumulateTopNotchReward = Class.define({
            columnName: function(args) {
    return "colTradAccumulateTopNotchReward";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.accExcellentReward;
}
    });
    var colTradBaseDeathBenefit = Class.define({
            columnName: function(args) {
    return "colTradBaseDeathBenefit";
},
            shouldBeShown: function(args) {
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.deathBenefit;
}
    });
    var colTradBasePlanAndRiderSurrValue = Class.define({
            columnName: function(args) {
    return "colTradBasePlanAndRiderSurrValue";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.accDividends + record.cashValue + _V(record.accCoupons, 0) + _V(record.accGratefulDividends, 0) + record.ridersCashValue;
}
    });
    var colTradBuiltIn1FinancialSupport = Class.define({
            columnName: function(args) {
    return "colTradBuiltIn1FinancialSupport";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.financialSF;
}
    });
    var colTradBuiltIn2WoP_EDX = Class.define({
            columnName: function(args) {
    return "colTradBuiltIn2WoP_EDX";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.wop;
}
    });
    var colTradBuiltIn4JCI_EDX = Class.define({
            columnName: function(args) {
    return "colTradBuiltIn4JCI_EDX";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.jci;
}
    });
    var colTradCashValue = Class.define({
            columnName: function(args) {
    return "colTradCashValue";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.cashValue;
}
    });
    var colTradCiBenefit = Class.define({
            columnName: function(args) {
    return "colTradCiBenefit";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.ciBenefit;
}
    });
    var colTradCoupon = Class.define({
            columnName: function(args) {
    return "colTradCoupon";
},
            shouldBeShown: function(args) {
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.coupon;
}
    });
    var colTradCouponAccumulatedHighCI = Class.define({
            columnName: function(args) {
    return "colTradCouponAccumulatedHighCI";
},
            shouldBeShown: function(args) {
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.accHigherCoupons;
}
    });
    var colTradCouponAccumulatedLowCI = Class.define({
            columnName: function(args) {
    return "colTradCouponAccumulatedLowCI";
},
            shouldBeShown: function(args) {
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.accLowerCoupons;
}
    });
    var colTradCouponAccumulatedMediumCI = Class.define({
            columnName: function(args) {
    return "colTradCouponAccumulatedMediumCI";
},
            shouldBeShown: function(args) {
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.accCoupons;
}
    });
    var colTradCouponNotReceive = Class.define({
            columnName: function(args) {
    return "colTradCouponNotReceive";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.couponNotReceive;
}
    });
    var colTradDb = Class.define({
            columnName: function(args) {
    return "colTradDb";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.deathBenefit;
}
    });
    var colTradDividends = Class.define({
            columnName: function(args) {
    return "colTradDividends";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.dividends;
}
    });
    var colTradDividendsHIGH = Class.define({
            columnName: function(args) {
    return "colTradDividendsHIGH";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.higherDividends;
}
    });
    var colTradDividendsLOW = Class.define({
            columnName: function(args) {
    return "colTradDividendsLOW";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.lowerDividends;
}
    });
    var colTradEarlyAndMediateCiBenefit = Class.define({
            columnName: function(args) {
    return "colTradEarlyAndMediateCiBenefit";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return _V(record.emCiBenefit,0);
}
    });
    var colTradEducationBenefit = Class.define({
            columnName: function(args) {
    return "colTradEducationBenefit";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return _V(record.coupon,0);
}
    });
    var colTradGenderCiBenefit = Class.define({
            columnName: function(args) {
    return "colTradGenderCiBenefit";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return _V(record.genderCiBenefit,0);
}
    });
    var colTradGratefulDividends = Class.define({
            columnName: function(args) {
    return "colTradGratefulDividends";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.gratefulDividends;
}
    });
    var colTradGratefulDividendsHIGH = Class.define({
            columnName: function(args) {
    return "colTradGratefulDividendsHIGH";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.higherGratefulDividends;
}
    });
    var colTradGratefulDividendsLOW = Class.define({
            columnName: function(args) {
    return "colTradGratefulDividendsLOW";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.lowerGratefulDividends;
}
    });
    var colTradGuaranteedCashValueNotReceived = Class.define({
            columnName: function(args) {
    return "colTradGuaranteedCashValueNotReceived";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return _V(record.cashValue + record.couponNotReceive,0);
}
    });
    var colTradGuaranteedCashValueReceived = Class.define({
            columnName: function(args) {
    return "colTradGuaranteedCashValueReceived";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.cashValue;
}
    });
    var colTradLateCiBenefit = Class.define({
            columnName: function(args) {
    return "colTradLateCiBenefit";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return _V(record.lateCiBenefit,0);
}
    });
    var colTradModalBasicPremiums = Class.define({
            columnName: function(args) {
    return "colTradModalBasicPremiums";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return _V(record.modalBasicPremium, 0.00);
}
    });
    var colTradNewBaseDeathBenefit = Class.define({
            columnName: function(args) {
    return "colTradNewBaseDeathBenefit";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.newBaseDeathBenefit;
}
    });
    var colTradNonGuaranteedDeathbenefit = Class.define({
            columnName: function(args) {
    return "colTradNonGuaranteedDeathbenefit";
},
            shouldBeShown: function(args) {
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    var calValue = record.deathBenefit + record.accCoupons + record.accDividends + record.accGratefulDividends;
    return calValue;
}
    });
    var colTradNonGuaranteedDeathbenefitHIGH = Class.define({
            columnName: function(args) {
    return "colTradNonGuaranteedDeathbenefitHIGH";
},
            shouldBeShown: function(args) {
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    var calValue = record.deathBenefit + record.accHigherCoupons + record.accHigherDividends + record.accHigherGratefulDividends;
    return calValue;
}
    });
    var colTradNonGuaranteedDeathbenefitLOW = Class.define({
            columnName: function(args) {
    return "colTradNonGuaranteedDeathbenefitLOW";
},
            shouldBeShown: function(args) {
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    var calValue = record.deathBenefit + record.accLowerCoupons + record.accLowerDividends + record.accLowerGratefulDividends;
    return calValue;
}
    });
    var colTradRidersDeathBenefit = Class.define({
            columnName: function(args) {
    return "colTradRidersDeathBenefit";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.ridersDeathBenefit;
}
    });
    var colTradSpecialDividends = Class.define({
            columnName: function(args) {
    return "colTradSpecialDividends";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.specialDividends;
}
    });
    var colTradSpecialDividends_HIGH = Class.define({
            columnName: function(args) {
    return "colTradSpecialDividends_HIGH";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.higherSpecialDividends;
}
    });
    var colTradSpecialDividends_LOW = Class.define({
            columnName: function(args) {
    return "colTradSpecialDividends_LOW";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.lowerSpecialDividends;
}
    });
    var colTradTopNotchReward = Class.define({
            columnName: function(args) {
    return "colTradTopNotchReward";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return _V(record.excellentReward,0);
}
    });
    var colTradTotalAccumulateDividends_EDX = Class.define({
            columnName: function(args) {
    return "colTradTotalAccumulateDividends_EDX";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.accDividends + record.accSpecialDividends;
}
    });
    var colTradTotalAccumulateDividendsHIGH_EDX = Class.define({
            columnName: function(args) {
    return "colTradTotalAccumulateDividendsHIGH_EDX";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.accHigherDividends + record.accHigherSpecialDividends;
}
    });
    var colTradTotalAccumulateDividendsLOW_EDX = Class.define({
            columnName: function(args) {
    return "colTradTotalAccumulateDividendsLOW_EDX";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.accLowerDividends + record.accLowerSpecialDividends;
}
    });
    var colTradTotalBaseDeathBenefit = Class.define({
            columnName: function(args) {
    return "colTradTotalBaseDeathBenefit";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.accDividends + record.deathBenefit + record.accCoupons + _V(record.accGratefulDividends, 0);
}
    });
    var colTradTotalBaseDeathBenefitHIGH = Class.define({
            columnName: function(args) {
    return "colTradTotalBaseDeathBenefitHIGH";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.accHigherDividends + record.deathBenefit + record.accHigherCoupons + _V(record.accHigherGratefulDividends, 0);
}
    });
    var colTradTotalBaseDeathBenefitLOW = Class.define({
            columnName: function(args) {
    return "colTradTotalBaseDeathBenefitLOW";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.accLowerDividends + record.deathBenefit + record.accLowerCoupons + _V(record.accLowerGratefulDividends, 0);
}
    });
    var colTradTotalBaseSurrValue = Class.define({
            columnName: function(args) {
    return "colTradTotalBaseSurrValue";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.accDividends + record.cashValue + _V(record.accCoupons, 0) + _V(record.accGratefulDividends, 0);
}
    });
    var colTradTotalBaseSurrValueHIGH = Class.define({
            columnName: function(args) {
    return "colTradTotalBaseSurrValueHIGH";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.accHigherDividends + record.cashValue + _V(record.accHigherCoupons, 0) + _V(record.accHigherGratefulDividends, 0);
}
    });
    var colTradTotalBaseSurrValueLOW = Class.define({
            columnName: function(args) {
    return "colTradTotalBaseSurrValueLOW";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.accLowerDividends + record.cashValue + _V(record.accLowerCoupons, 0) + _V(record.accLowerGratefulDividends, 0);
}
    });
    var colTradTotalBuiltInBenefit_EDX = Class.define({
            columnName: function(args) {
    return "colTradTotalBuiltInBenefit_EDX";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return _V(record.financialSF + record.wop + record.jci ,0);
}
    });
    var colTradTotalCashValue = Class.define({
            columnName: function(args) {
    return "colTradTotalCashValue";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.cashValue + record.ridersCashValue;
}
    });
    var colTradTotalCSV = Class.define({
            columnName: function(args) {
    return "colTradTotalCSV";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.accDividends + record.accExcellentReward + record.accSpecialDividends + record.accCoupon +record.cashValue;
}
    });
    var colTradTotalCSV_HIGH = Class.define({
            columnName: function(args) {
    return "colTradTotalCSV_HIGH";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.accHigherDividends + record.accHigherExcellentReward + record.accHigherSpecialDividends + record.accHigherCoupon +record.cashValue;
}
    });
    var colTradTotalCSV_LOW = Class.define({
            columnName: function(args) {
    return "colTradTotalCSV_LOW";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.accLowerDividends + record.accLowerExcellentReward + record.accLowerSpecialDividends + record.accLowerCoupon +record.cashValue;
}
    });
    var colTradTotalDeathBenefit = Class.define({
            columnName: function(args) {
    return "colTradTotalDeathBenefit";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.accDividends + record.deathBenefit + record.ridersDeathBenefit + record.accCoupons + _V(record.accGratefulDividends, 0);
}
    });
    var colTradTotalDeathBenefitGuaranteed = Class.define({
            columnName: function(args) {
    return "colTradTotalDeathBenefitGuaranteed";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return _V(record.deathBenefit + record.ridersDeathBenefit,0);
}
    });
    var colTradTotalDeathBenefitHIGH = Class.define({
            columnName: function(args) {
    return "colTradTotalDeathBenefitHIGH";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.accHigherDividends + record.deathBenefit + record.ridersDeathBenefit + record.accHigherCoupons + _V(record.accHigherGratefulDividends, 0);
}
    });
    var colTradTotalDeathBenefitLOW = Class.define({
            columnName: function(args) {
    return "colTradTotalDeathBenefitLOW";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.accLowerDividends + record.deathBenefit + record.ridersDeathBenefit + record.accLowerCoupons + _V(record.accLowerGratefulDividends, 0);
}
    });
    var colTradTotalDividends = Class.define({
            columnName: function(args) {
    return "colTradTotalDividends";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.accGratefulDividends + record.accDividends;
}
    });
    var colTradTotalDividendsHIGH = Class.define({
            columnName: function(args) {
    return "colTradTotalDividendsHIGH";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.accHigherGratefulDividends + record.accHigherDividends;
}
    });
    var colTradTotalDividendsLOW = Class.define({
            columnName: function(args) {
    return "colTradTotalDividendsLOW";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.accLowerGratefulDividends + record.accLowerDividends;
}
    });
    var colTradTotalGuaranteedCashValue = Class.define({
            columnName: function(args) {
    return "colTradTotalGuaranteedCashValue";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return _V(record.cashValue + record.ridersCashValue,0);
}
    });
    var colTradTotalRiderCashValue = Class.define({
            columnName: function(args) {
    return "colTradTotalRiderCashValue";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.ridersCashValue;
}
    });
    var colTradTotalSurrValue = Class.define({
            columnName: function(args) {
    return "colTradTotalSurrValue";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.accDividends + record.cashValue + _V(record.accCoupons, 0) + _V(record.accGratefulDividends, 0) + record.ridersCashValue;
}
    });
    var colTradTotalSurrValueHIGH = Class.define({
            columnName: function(args) {
    return "colTradTotalSurrValueHIGH";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.accHigherDividends + record.cashValue + _V(record.accHigherCoupons, 0) + _V(record.accHigherGratefulDividends, 0) + record.ridersCashValue;
}
    });
    var colTradTotalSurrValueLOW = Class.define({
            columnName: function(args) {
    return "colTradTotalSurrValueLOW";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    return record.accLowerDividends + record.cashValue + _V(record.accLowerCoupons, 0) + _V(record.accLowerGratefulDividends, 0) + record.ridersCashValue;
}
    });
    var colWithdrawalNoChargeBAVLocal = Class.define({
            columnName: function(args) {
    return "colWithdrawalNoChargeBAVLocal";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    var calValue = record.withdrawalNoChargeBAV;
    return calValue;
}
    });
    var colWithdrawalNoChargeLocal = Class.define({
            columnName: function(args) {
    return "colWithdrawalNoChargeLocal";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    var calValue = record.withdrawalNoCharge;
    return calValue;
}
    });
    var colWithdrawalNoChargeTAVLocal = Class.define({
            columnName: function(args) {
    return "colWithdrawalNoChargeTAVLocal";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    var calValue = record.withdrawalNoChargeTAV;
    return calValue;
}
    });
    var colWithdrawalWithChargeLocal = Class.define({
            columnName: function(args) {
    return "colWithdrawalWithChargeLocal";
},
            shouldBeShown: function(args) {
    var context = args["context"];
    return true;
},
            calculatedValue: function(args) {
    var record = args["record"];
    var calValue = record.withdrawal;
    return calValue;
}
    });
    var colTradTotalBaseProtection = colTradTotalBaseDeathBenefit.extend({
            columnName: function(args) {
    return "colTradTotalBaseProtection";
}
    });
    var colTradTotalBaseProtectionHIGH = colTradTotalBaseDeathBenefitHIGH.extend({
            columnName: function(args) {
    return "colTradTotalBaseProtectionHIGH";
}
    });
    var colTradTotalBaseProtectionLOW = colTradTotalBaseDeathBenefitLOW.extend({
            columnName: function(args) {
return "colTradTotalBaseProtectionLOW";
}
    });
    var colTradTotalProtection = colTradTotalDeathBenefit.extend({
            columnName: function(args) {
    return "colTradTotalProtection";
}
    });
    var colTradTotalProtectionHIGH = colTradTotalDeathBenefitHIGH.extend({
            columnName: function(args) {
    return "colTradTotalProtectionHIGH";
}
    });
    var colTradTotalProtectionLOW = colTradTotalDeathBenefitLOW.extend({
            columnName: function(args) {
    return "colTradTotalProtectionLOW";
}
    });
    var colWithdrawalLocal = colWithdrawal.extend({
            columnName: function(args) {
    return "colWithdrawalLocal";
},
            calculatedValue: function(args) {
    var record = args["record"];
    var calValue = record.totalWithdrawal;
    return calValue;
},
            shouldBeShown: function(args) {
    return true;
}
    });

var EDx_Events = CommonEvents.extend({
   init: function(args) {
    this.self['name'] = 'EDx_Events';
    this.self['productId'] = null;
    this.self['productType'] = [CatalogConstants.PRODUCT_TYPE.EDUCATION];
    this.self['providerId'] = "EDx_Events";
},
   events: function(args) {
    var events = [];
    
    events.push(eventAvyInitialization_EDX.create()); // Testing
    events.push(eventCoreCalcPremiumByMethod.create());
    events.push(eventCoreCalcRiderPremiumByMethod.create());
    events.push(eventCalcTradPlanDividends_EDX.create());
    events.push(eventCalcTradPlanSpecialDividends_EDX.create());
    events.push(eventCalcBuiltIn1FinancialSupport_EDX.create());
    events.push(eventCalcBuiltIn2WoP_EDX.create());
    events.push(eventCalcBuiltIn4JCI_EDX.create());
    events.push(eventCalcDeathBenefit_EDX.create());
    events.push(eventCalculateTradPlanAccumulateDividends_EDX.create());
    events.push(eventCalcTradPlanDividendsLOW_EDX.create());
    events.push(eventCalcTradPlanDividendsHIGH_EDX.create());
    events.push(eventCalcTradPlanAccumulateDivLOW.create());
    events.push(eventCalcTradPlanAccumulateDivHIGH.create());
    events.push(eventCalcTradPlanAccumulateSpecialDiv_EDX.create());
    events.push(eventCalcTradPlanCashValue.create());
    events.push(eventCalcCouponBenefitEOY_EDX.create());
    events.push(eventCalcTradPlanSpecialDividendsLOW_EDX.create());
    events.push(eventCalcTradPlanSpecialDividendsHIGH_EDX.create());   
    events.push(eventCalcTradPlanAccumulateSpecialDivLOW_EDX.create());
    events.push(eventCalcTradPlanAccumulateSpecialDivHIGH_EDX.create());
    events.push(eventCalcExcellentReward_EDX.create());
    events.push(eventCalcAccumulateCouponBenefitEOY_EDX.create());
    events.push(eventCalcAccumulateCouponBenefitEOYLOW_EDX.create());
    events.push(eventCalcAccumulateCouponBenefitEOYHIGH_EDX.create());
    events.push(eventCalcAccumulateExcellentReward_EDX.create());
    events.push(eventCalcAccumulateExcellentRewardLOW_EDX.create());
    events.push(eventCalcAccumulateExcellentRewardHIGH_EDX.create());
    
    return events;
},
   columns: function(args) {
    var proposal = args["proposal"];
    var columns = [
         columnYear.create(),
         columnAge.create(),
         colTradBasePlanPremiums.create(),
         colTradModalBasicPremiums.create(),
         colTradRiderPremiums.create(),
         colTradBaseDeathBenefit.create(),
         colTradEducationBenefit.create(),
         colTradTopNotchReward.create(),
         colTradCashValue.create(),
         colTradAccuDeathBenefit.create(),
         colTradAccEducationBenefit.create(),
         colTradAccumulateTopNotchReward.create(),
         colTradAccumulateDividends.create(), 
         colTradAccSpecialDividends_EDX.create(),
         colTradTotalCSV.create(),
         colTradAccumulatePremiums_EDX.create(), 
         
         colTradTotalAccumulateDividendsLOW_EDX.create(),
         colTradTotalCSV_LOW.create(),
         colTradAccuDeathBenefitLOW.create(),
         
         colTradTotalAccumulateDividends_EDX.create(),  
         
         
         colTradTotalAccumulateDividendsHIGH_EDX.create(),
         colTradTotalCSV_HIGH.create(),
         colTradAccuDeathBenefitHIGH.create(),

         //colTradAccEducationBenefitLOW.create(),
         //colTradDividends.create(),
         //colTradSpecialDividends.create(),
         //colTradBuiltIn1FinancialSupport.create(),
         //colTradBuiltIn2WoP_EDX.create(),
         //colTradBuiltIn4JCI_EDX.create(),
         //colTradTotalBuiltInBenefit_EDX.create(),
         //colTradDividendsLOW.create(),
         //colTradDividendsHIGH.create(), 
         //colTradBaseDeathBenefitLOW_EDX.create(),
         //colTradBaseDeathBenefitHIGH_EDX.create(),
         //colTradAccSpecialDividendsLOW_EDX.create(),
         //colTradAccSpecialDividendsHIGH_EDX.create(),
         //colTradAccEducationBenefitHIGH.create(),
         //colTradAccumulateDividendsLOW.create(), 
         //colTradAccumulateDividendsHIGH.create(),

    ]
    
    if (!_V( proposal.hideRiderColumns, false )) {
        var riders = Utils.iterator(_V(proposal.riders.coverageInfo, []))
        for(var i in riders) {
            var rider = riders[i];
            columns.push( colRiderCoveragePremium.create( {riderIdx:i, coverage:rider} ) );
        }
    }


    return columns;
},
   makeSnapshot: function(args) {

    var context = args['context'];
    var running = context.runningPolicyValues;
    var isUnbornChild = running.isUnbornChild;
     
    var snapshot = {
        year: context.runningPolicyValues.year,
        month: (context.runningPolicyValues.months % 12),
        age: Number(context.insuredAge) + Number(context.runningPolicyValues.year),
        basePlanPremiums: context.runningPolicyValues.basePlanPremiums,
        modalBasicPremium: context.runningPolicyValues.modalBasicPremium,
        riderPremiums: context.runningPolicyValues.riderPremiums,
        riderPremiumsList: context.runningPolicyValues.riderPremiumsList,
        dividends: context.runningPolicyValues.dividends,
        specialDividends: context.runningPolicyValues.specialDividends,
        financialSF: context.runningPolicyValues.financialSF,
        wop: context.runningPolicyValues.wop,
        jci: context.runningPolicyValues.jci,
        deathBenefit: context.runningPolicyValues.deathBenefit,
        lowerDividends: context.runningPolicyValues.lowerDividends,
        higherDividends: context.runningPolicyValues.higherDividends,
        accDividends: context.runningPolicyValues.accDividends,
        accLowerDividends: context.runningPolicyValues.accLowerDividends,
        accHigherDividends: context.runningPolicyValues.accHigherDividends,
        accSpecialDividends: context.runningPolicyValues.accSpecialDividends,
        
        cashValue: context.runningPolicyValues.cashValue,
        excellentReward: context.runningPolicyValues.excellentReward,
        lowerDeathBenefit: context.runningPolicyValues.lowerDeathBenefit,
        higherDeathBenefit: context.runningPolicyValues.higherDeathBenefit,
        coupon: context.runningPolicyValues.coupon,
        lowerSpecialDividends: context.runningPolicyValues.lowerSpecialDividends,
        higherSpecialDividends: context.runningPolicyValues.higherSpecialDividends,
        accLowerSpecialDividends: context.runningPolicyValues.accLowerSpecialDividends,
        accHigherSpecialDividends: context.runningPolicyValues.accHigherSpecialDividends,
        accCoupon: context.runningPolicyValues.accCoupon,
        accLowerCoupon: context.runningPolicyValues.accLowerCoupon,
        accHigherCoupon: context.runningPolicyValues.accHigherCoupon,
        
        accExcellentReward: context.runningPolicyValues.accExcellentReward,
        accLowerExcellentReward: context.runningPolicyValues.accLowerExcellentReward,
        accHigherExcellentReward: context.runningPolicyValues.accHigherExcellentReward,
        accumulatePremiums: context.runningPolicyValues.accPremiums,
        totalPremiums: context.runningPolicyValues.totalPremiums,

    }
    
    if(isUnbornChild){
        snapshot['age'] = Number(context.runningPolicyValues.year) - 1;
    }else{
        snapshot['age'] = Number(context.insuredAge) + Number(context.runningPolicyValues.year);
    }

    return snapshot;
}
});
var RUV_EventsLocal = CommonEvents.extend({
   init: function(args) {
    this.self['state'] = {};
    this.self.state.fullLapse = false;
    
    this.self['name'] = 'RUV_EventsLocal';
    this.self['productId'] = null;
    this.self['providerId'] = "RUV_EventsLocal";
    this.self['productType'] = [CatalogConstants.PRODUCT_TYPE.UVLIFE];
},
   events: function(args) {
    var events = [];
    
    // **************************************************************************
    // Policy Initialization (Initial / AVY / MVY)
    // **************************************************************************
    // extend from eventCoreMvyAvyInitialization
    // create a new top up fund account
    // use fund pool instead of fund
    events.push(eventAvyInitialization_RUVXX.create());
    events.push(eventSavePolicyLapseStatusAtYearBeginning.create()); // verified OK
    // face amount change
    // need create a new layer of base coverage to handle @@@ outstanding
    // **** find premium recalculate premium in next AVY only
    // events.push(eventApplyPolicyChangeFaceAmount.create());
    events.push(eventApplyPolicyChangeFaceAmount_RUVXX.create());

    // **************************************************************************
    // Calculation of Base Plan Premium and Rider Premiums
    // **************************************************************************
    // calcualte base plan premium by return, to running.plannedPremium[return]
    // update running.basePlanPremium = running.plannedPremium[return]
    events.push(eventApplyPolicyPremiumHolidayRUVXX.create());
    events.push(eventCoreCalcPremiumByMethodRUVXX.create({updateTotalPremium:false}));
    // calculate running.riderPremiums
    events.push(eventCoreCalcRiderPremiumByMethod.create({updateTotalPremium:false})); // verified OK
    // for AVY (month=0), update running.regularPremium[return] = running.basePlanPremium[return] * ppFreq + running.riderPremium
    events.push(eventUpdateRegularPremiumRUVXX.create());
    // for months == 0, save running.basePlanPremiums to basePlan.plannedPremium
    // for months == 0, save running.contractPlannedPremium[return] = running.plannedPremium[return]
    events.push(eventInitPlannedPremiumByBasePremiumRUVXX.create()); // months === 0 only

    // **************************************************************************
    // Fund Activity Process
    // **************************************************************************
    // planned premium change (STOP/RESUME PAYMENT ALLOWED)
    // update running.plannedPremium[return] = activity.plannedPremium
    
    events.push(eventApplyPolicyChangePlannedPremiumRUVXX.create()); // verified OK
    events.push(eventApplyPolicyChangeRegularTopUp_RUVXX.create());
    // update running.accumPremiumRequested[return] += running.contractPlannedPremium[return]
    events.push(eventAccumulateBasePremiumsRUVXX.create());

    // all premiums are handled here @@@ outstanding
    events.push(eventReceivePremiumsRUVXX.create());
    // events.push(eventReceiveTopupPremiumRUVXX.create());
    events.push(eventAccumulatePremiumReceivedUVL.create()),

    // **************************************************************************
    // UVL or UL NAAR calculation and Cost of Insurance Calculation and Deduction
    // **************************************************************************
    // 3 face amounts
    events.push(eventCalcNAR_UL007.create()); // verified OK
    events.push(eventCalcPolicyFeeUL007.create()); // verified OK
    // events.push(eventCalcCOILocal.create()); // verified OK and COI round to 2 decimal points
    events.push(eventCalcCOILocalRUVXX.create()); // verified OK and COI round to 7 decimal points
    events.push(eventAccumulateCOILocal.create()); // verified OK but decimal points could be set to 2 decimal
    events.push(eventDeductCOILocal.create()); // verified OK
    events.push(eventDeductMonthlyPolicyFeeUL007.create()); // verified OK 
    events.push(eventTestLapsation.create()); // verified OK
    // required to roll interest for top up account
    events.push(eventRollInterestRUVXX.create()); // verified OK
    
    // **************************************************************************
    // save surrender values for calculating MAX withdrawal of BAV
    // **************************************************************************
    // surrender charge is calculated by Base Premium only
    // surrender charge rate is different form UL007
    events.push(eventCalcSurrenderValuesBeforeWithdrawRUVXX.create()); // verified OK

    // **************************************************************************
    // calculate MAX withdrawal for two accounts
    // **************************************************************************
    // Math.min( FA - minFA, GNSV - 2000 )
    events.push(eventCalcMaxWithdrawalRUVXX.create()); // verified OK
    
    // **************************************************************************
    // process partial withdrawal
    // **************************************************************************
    // partial withdrawal rate different
    // extend from eventDeductWIthdrawalUL007
    events.push(eventDeductWithdrawalRUVXX.create()); // verified OK
    // handle withdrawal from TAV
    events.push(eventDeductTopupWithdrawalRUVXX.create()); // verified OK
    
    // **************************************************************************
    // prepare policy values for calculation of bonus
    // **************************************************************************
    // accumulate fund balances and premium loads
    events.push(eventAccumulatePolicyValuesRUVXX.create());
    
    // **************************************************************************
    // calculate bonus(es)
    // **************************************************************************
    // start from Y2M11 for every 3 years for 6 times 
    // 3% of average fund balances in last 36 months
    // In bonus review period, no withdrawal in BAV and 
    // and no face amount comparing beginning FA 
    // credit to BAV 
    events.push(eventCalcLoyaltyBonusRUVXX.create());
    // test condition is same as  special bonus
    // pay at Y9M11 and Y19M11
    // 100% and 300% of Accumulated Basic Premium Load in
    // first 3 years
    events.push(eventCalcSpecialBonusRUVXX.create());

    // **************************************************************************
    // deposit bonus(es)
    // **************************************************************************
    events.push(eventDumpinLoyaltyBonusRUVXX.create());
    events.push(eventDumpinSpecialBonusRUVXX.create());
    
    // fund balance of topup account
    // max topup withdrawal is same as topup fund balance
    events.push(eventCalcMaxTopupWithdrawalLocal.create()); // verified OK

    // **************************************************************************
    // calculate Surrender Values
    // **************************************************************************
    // surrender charge is calculated by Base Premium only
    // surrender charge rate is different form UL007
    events.push(eventCalcSurrenderValuesRUVXX.create());
    
    // **************************************************************************
    // calculate Death Benefits
    // **************************************************************************
    events.push(eventCalcDeathBenefit.create());
    events.push(eventCalcRidersDeathBenefit.create());
    events.push(eventCalcTotalDeathBenefitLocal.create());

    // **************************************************************************
    // calculate Fund allocations
    // **************************************************************************
    events.push(eventCalcFundAllocationRUVXX.create());
    
    // **************************************************************************
    // display values for debug purpose
    // **************************************************************************
    events.push(showMonthlyResults.create());
    // **************************************************************************
    // calcualte topup allocated premium
    // **************************************************************************
    events.push(eventTopupAllocatedPremiumRUVXX.create());
    return events;
},
   columns: function(args) {
    var columns = [
        columnYear.create(),
        columnAge.create(),
        
        colPremium.create(),
        colModalBasePremium.create(),
        colTradRiderPremiums.create(),
        colTopupPremium.create(),
        colTotalPremium.create(),
        colCumulativePremium.create(),
        // add Premium Load column
        colPremiumLoad.create(),
        colAllocatedPremiumsUVL.create(),
        
        // provide total planning premium as SPIS to show on report
        colTotalPlannedPremium.create(),
        // ATP - 3649
        colAccumulateTotalPlannedPremium.create(),
        // add Top-up Premium column
        colPolicyFee.create(),
        // Fixing the issue ATP-3082 Accumulate premium for base plan is missing
        colAccumulateBasePremiumLow.create(),
        colAccumulateBasePremiumMedium.create(),
        colAccumulateBasePremiumHigh.create(),
        
        // LOW
        colAccumulatePremiumsLow.create(),
        colNarLow.create(),
        colCoiLow.create(),
        colBAVBeforeBonusAndWithdrawalLow.create(),
        colTAVBeforeBonusAndWithdrawalLow.create(),
        colBAVAfterBonusAndBeforeWithdrawalLow.create(),
        colTAVAfterBonusAndBeforeWithdrawalLow.create(),
        colAccountLow.create(),
        colTopupAccountLow.create(),
         // Fixing the issue ATP-3150, Policy account value are missing
        colPolicyAccountLow.create(),
        colSurValueLow.create(),
        colDbLow.create(),
        colTotalDbLow.create(),
        colTotalProtectionLow.create(),
        // Fixing the issue ATP-3060 Loyalty bonus column is not include the special bonus for year 10 and year 20
        colLoyaltyBonusLow.create(),
        colRegularLoyaltyBonusLow.create(),
        colSpecialLoyaltyBonusLow.create(),
        colTotalLoyaltyBonusLow.create(),
        //Fixing the issue ATP-3211, Topup allocated premium is missing
        colBaseAllocatedPremiumLow.create(),
        colTopupAllocatedPremiumLow.create(),
        
        // MEDIUM
        colAccumulatePremiumsMedium.create(),
        colCoiMedium.create(),
        colNarMedium.create(),
        colBAVBeforeBonusAndWithdrawalMedium.create(),
        colTAVBeforeBonusAndWithdrawalMedium.create(),
        colBAVAfterBonusAndBeforeWithdrawalMedium.create(),
        colTAVAfterBonusAndBeforeWithdrawalMedium.create(),
        colAccountMedium.create(),
        colTopupAccountMedium.create(),
        colSurValueMedium.create(),
        colDbMedium.create(),
        colTotalDbMedium.create(),
        colTotalProtection.create(),
        // Fixing the issue ATP-3060 Loyalty bonus column is not include the special bonus for year 10 and year 20
        colLoyaltyBonusMedium.create(),
        colRegularLoyaltyBonusMedium.create(),
        colSpecialLoyaltyBonusMedium.create(),
        colTotalLoyaltyBonusMedium.create(),
        // Fixing the issue ATP-3150, Policy account value are missing
        colBaseAllocatedPremiumMedium.create(),
        colTopupAllocatedPremiumMedium.create(),
        
        // HIGH
        colAccumulatePremiumsHigh.create(),
        colNarHigh.create(),
        colCoiHigh.create(),
        colBAVBeforeBonusAndWithdrawalHigh.create(),
        colTAVBeforeBonusAndWithdrawalHigh.create(),
        colBAVAfterBonusAndBeforeWithdrawalHigh.create(),
        colTAVAfterBonusAndBeforeWithdrawalHigh.create(),
        colAccountHigh.create(),
        colTopupAccountHigh.create(),
         // Fixing the issue ATP-3150, Policy account value are missing
        colPolicyAccountHigh.create(),
        colSurValueHigh.create(),
        colDbHigh.create(),
        colTotalDbHigh.create(),
        colTotalProtectionHigh.create(),
        // Fixing the issue ATP-3060 Loyalty bonus column is not include the special bonus for year 10 and year 20
        colLoyaltyBonusHigh.create(),
        colRegularLoyaltyBonusHigh.create(),
        colSpecialLoyaltyBonusHigh.create(),
        colTotalLoyaltyBonusHigh.create(),
        // Fixing the issue ATP-3150, Policy account value are missing
        colBaseAllocatedPremiumHigh.create(),
        colTopupAllocatedPremiumHigh.create(),
        
        // add Total Withdrawl column
        colWithdrawalLocal.create(),
        colWithdrawalWithChargeLocal.create(),
        colWithdrawalNoChargeBAVLocal.create(),
        colWithdrawalNoChargeTAVLocal.create(),
        colWithdrawalNoChargeLocal.create(),
        colTradRidersDeathBenefit.create(),
        colPolicyLapseLow.create(),
        colPolicyLapseMedium.create(),
        colPolicyLapseHigh.create(),
        colSurValueLowBeforeWithdraw.create(),
        colSurValueMediumBeforeWithdraw.create(),
        colSurValueHighBeforeWithdraw.create(),
        colPremiumLoadAndOtherFees.create(),
        
        // Add column "Policy Fee" and "Premium Load & other fees"
        colBasePlanFaceAmount.create(),

        // faceAmount per return rates
        colFaceAmountLow.create(),
        colFaceAmountMedium.create(),
        colFaceAmountHigh.create(),
        colMaxWithdrawalLow.create(),
        colMaxWithdrawalMedium.create(),
        colMaxWithdrawalHigh.create(),
        colMaxTopupWithdrawalLow.create(),
        colMaxTopupWithdrawalMedium.create(),
        colMaxTopupWithdrawalHigh.create(),
        colErrorLow.create(),
        colErrorMedium.create(),
        colErrorHigh.create(),    
        // Column min FA make annualized base premium >= 7M
        colMinFaceAmount.create()
    ];
    
    // For fund allocation columns
    var funds = args['proposal']['funds']['fundRecord'];
    for (var i in funds){
      for (var type in PublicConstants.FUND_RETURN){
        columns.push( colBAVInterest.create( {fund:funds[i], type: type} ) );
        columns.push( colTAVInterest.create( {fund:funds[i], type: type} ) );
      }
    }
    
    return columns;
},
   makeSnapshot: function(args) {
    var context = args['context'];
    
    var snapshot = {
        year: context.runningPolicyValues.year,
        month: (context.runningPolicyValues.months % 12),
        age: Number(context.insuredAge) + Number(context.runningPolicyValues.year),
        accountValues: IFund.appliedTo(context.runningPolicyValues.fundPool).call("fundBalances", {}),
        topupAccountValues: IFund.appliedTo(context.runningPolicyValues.topupFundPool).call("fundBalances", {}),
        nars: context.runningPolicyValues.nars,
        cois: context.runningPolicyValues.annualCois,
        fundBonus: context.runningPolicyValues.loyalBonus || { HIGH: 0, LOW: 0, MEDIUM: 0 },
        coiRate: context.runningPolicyValues.coiRate,
        withdrawal: context.runningPolicyValues.withdrawal,
        withdrawalNoCharge: context.runningPolicyValues.withdrawalNoCharge + context.runningPolicyValues.topupWithdrawal,
        withdrawalNoChargeBAV: context.runningPolicyValues.withdrawalNoCharge,
        withdrawalNoChargeTAV: context.runningPolicyValues.topupWithdrawal,
        partialWithdrawalCharge: context.runningPolicyValues.partialWithdrawalCharge,
        // Add total withdrawal
        totalWithdrawal: context.runningPolicyValues.totalWithdrawal,
        bavBeforeBonusAndWithdrawal: context.runningPolicyValues.bavBeforeBonusAndWithdrawal,
        tavBeforeBonusAndWithdrawal: context.runningPolicyValues.tavBeforeBonusAndWithdrawal,
        bavAfterBonusAndBeforeWithdrawal: context.runningPolicyValues.bavAfterBonusAndBeforeWithdrawal,
        tavAfterBonusAndBeforeWithdrawal: context.runningPolicyValues.tavAfterBonusAndBeforeWithdrawal,
        initialDumpIn: context.runningPolicyValues.initialDumpIn,
        newPremium: context.runningPolicyValues.newPremium[PublicConstants.FUND_RETURN.HIGH] - _V( context.runningPolicyValues.topup[PublicConstants.FUND_RETURN.HIGH], 0 ), 
        netPremium: context.runningPolicyValues.netPremium[PublicConstants.FUND_RETURN.HIGH],
        // Add Top-up premium
        topup: context.runningPolicyValues.topup[PublicConstants.FUND_RETURN.HIGH],
        totalPremiums: context.runningPolicyValues.totalPremiums[PublicConstants.FUND_RETURN.HIGH],
        //deathBenefits: context.runningPolicyValues.deathBenefits,
        ridersDeathBenefit: context.runningPolicyValues.ridersDeathBenefit,
        //totalDeathBenefits: context.runningPolicyValues.totalDeathBenefits,
        cashOut: context.runningPolicyValues.cashOut,
        cashOutPayments: context.runningPolicyValues.accumulatedcashOutPayments,
        firstMonthCoi: context.runningPolicyValues.firstMonthCoi,
        cashoutAccount: IFund.appliedTo(context.runningPolicyValues.cashoutAccount).call("fundBalances", {}),
        surrenderValuesFromCashoutAccount: IFund.appliedTo(context.runningPolicyValues.cashoutAccount).call("surrenderValues", {}),
        surrenderValues: context.runningPolicyValues.surrenderValues,
        surrenderValueBeforeWithdrawal: context.runningPolicyValues.surrenderValueBeforeWithdrawal,
        maxWithdrawal: context.runningPolicyValues.maxWithdrawal,
        maxTopupWithdrawal: context.runningPolicyValues.maxTopupWithdrawal,
        premiumLoad: context.runningPolicyValues.premiumLoad[PublicConstants.FUND_RETURN.HIGH],
        topupPremiumLoad: context.runningPolicyValues.topupPremiumLoad[PublicConstants.FUND_RETURN.HIGH],
        policyFee: context.runningPolicyValues.policyFee,
        riderPremiums: context.runningPolicyValues.riderPremiums,
        totalProtections: context.runningPolicyValues.totalProtections,
        accumFundBalancesForBonus: context.runningPolicyValues.accumFundBalancesForBonus,
        firstThreeYearPremiumLoad: context.runningPolicyValues.firstThreeYearPremiumLoad,
        accumPremiumRequested: context.runningPolicyValues.accumPremiumRequested,
        accumPremiumPaid: context.runningPolicyValues.accumPremiumPaid,
        accumTopup: context.runningPolicyValues.accumTopup,
        // Fixing the issue ATP-3082 Accumulate premium for base plan is missing
        accumBasePremiums: context.runningPolicyValues.accumBasePremiums,
        totalPlannedPremium: context.runningPolicyValues.totalPremiums[PublicConstants.FUND_RETURN.HIGH] + _V(context.runningPolicyValues.riderPremiums, 0),  // it for show total planned premium at report
        error: context.runningPolicyValues.error,
        topupAllocatedPremiums: context.runningPolicyValues.topupAllocatedPremiums,
        modalBasePremium: context.runningPolicyValues.modalBasePremium,
        //for colCumulativePremium
        cumulativePremium: context.runningPolicyValues.cumulativePremium[PublicConstants.FUND_RETURN.HIGH],
        basePlanFaceAmount: _V(context.runningPolicyValues.faceAmount[PublicConstants.FUND_RETURN.HIGH], 0),
        minFaceAmount: _V(context.runningPolicyValues.minFaceAmount, 0)
    };

    snapshot['faceAmount'] = {};
    snapshot['policyLapse'] = {};
    snapshot['deathBenefits'] = {};
    snapshot['totalDeathBenefits'] = {};
    snapshot['loyalBonus'] = {};
    snapshot['specialBonus'] = {};
    snapshot['accumBasePremiums'] = {};
    snapshot['accumulateTotalPlannedPremiums'] = {};
    var termProtection = 0;
    termProtection = context.runningPolicyValues.ridersDeathBenefit;
    for(var i in PublicConstants.FUND_RETURN) {
        snapshot['faceAmount'][i] = context.runningPolicyValues.faceAmount[i];
        snapshot['policyLapse'][i] = context.runningPolicyValues.lapse[i];
        snapshot['deathBenefits'][i] = context.runningPolicyValues.deathBenefits[i]; // + snapshot.topupAccountValues[i];
        snapshot['totalDeathBenefits'][i] = context.runningPolicyValues.totalDeathBenefits[i] + termProtection; // + snapshot.topupAccountValues[i];
        snapshot['loyalBonus'][i] = context.runningPolicyValues.loyalBonus[i];
        snapshot['specialBonus'][i] = context.runningPolicyValues.specialBonus[i];
        snapshot['accumBasePremiums'][i] = context.runningPolicyValues.accumBasePremiums[PublicConstants.FUND_RETURN.HIGH];
        snapshot['accumulateTotalPlannedPremiums'][i] = context.runningPolicyValues.accumulateTotalPlannedPremiums[i];
        if (context.runningPolicyValues.lapse[i] == 'Y') {
            snapshot['accountValues'][i] = 0;
            snapshot['topupAccountValues'][i] = 0;
            snapshot['cashoutAccount'][i] = 0;
            snapshot['surrenderValues'][i] = 0;
            snapshot['surrenderValuesFromCashoutAccount'][i] = 0;
            snapshot['loyalBonus'][i] = 0;
            snapshot['specialBonus'][i] = 0;
            snapshot['surrenderValueBeforeWithdrawal'][i] = 0;
            snapshot['cois'][i] = 0;
        }
        
        if (context.runningPolicyValues.lapse.HIGH == 'Y') {
            snapshot['policyFee'] = 0;
        }
        
        if (context.runningPolicyValues.lapse[i] == 'Y') {
        // if (context.runningPolicyValues.lapseAtYearBeginning[i] == 'Y') {
            snapshot['deathBenefits'][i] = 0;
            snapshot['totalDeathBenefits'][i] = 0;
        }
    }
    
    // Display value for premium holiday
    if (context.runningPolicyValues.phActivities) {
        if (context.runningPolicyValues.phActivities.isPremiumHoliday && !context.runningPolicyValues.phActivities.isResumePremiumHoliday) {
            snapshot['modalBasePremium'] = 0;
        } else if (!context.runningPolicyValues.phActivities.isPremiumHoliday && context.runningPolicyValues.phActivities.isResumePremiumHoliday){
            snapshot['modalBasePremium'] = context.runningPolicyValues.phActivities.resumeModalBasePremium;
            context.runningPolicyValues.phActivities.isResumePremiumHoliday = false;
        }
    }

    var accumPremiums = {};
    var fullLapseCount = 0;
    for(var i in PublicConstants.FUND_RETURN) {
        //_DBR("snapshot.policyLapse[i]", snapshot.policyLapse[i], "", context.runningPolicyValues.months);
        var isLapse = (snapshot.policyLapse[i] === 'Y');
        if (isLapse) {
            accumPremiums[ i ] = 0;
        } else {
            accumPremiums[ i ] = context.runningPolicyValues.accPremiums[i];
        }
        if (isLapse) fullLapseCount = fullLapseCount  + 1;
    }
    snapshot['annualAccumulatedPremium'] = accumPremiums;
    
    var fullLapse = false;
    if (fullLapseCount == 3) fullLapse = true;
    
    // Reset fullLapse to prevent PE run >2 times (clear cached for this value)
    if (context.runningPolicyValues.year == 0)
        this.self.state.fullLapse = false;
        
    _DBR('@@@@ fullLapse', fullLapse, 'RUV_EventsLocal->', context.runningPolicyValues.months);
    _DBR('@@@@ this.self.state.fullLapse', this.self.state.fullLapse, 'RUV_EventsLocal->', context.runningPolicyValues.months);
    if (this.self.state.fullLapse) {
        snapshot['basePlanFaceAmount'] = _V(context.runningPolicyValues.faceAmount[PublicConstants.FUND_RETURN.HIGH], 0);
        snapshot['topup'] = 0;
        snapshot['newPremium'] = 0;
        snapshot['netPremium'] = 0;
        snapshot['totalPremiums'] = 0;
        snapshot['riderPremiums'] = 0;
        snapshot['modalBasePremium'] = 0;
        snapshot.coiRate = 0;
        snapshot.totalPremiums = 0;
        //  Fixing the issue ATP-3082 Accumulate premium for base plan is missing
        for(var i in PublicConstants.FUND_RETURN) {
        //   snapshot['accumBasePremiums'][i] = 0;
        //   snapshot['accumBasePremiums'][i] = context.runningPolicyValues.accumPremiumPaid[i]; 
          snapshot['accumulateTotalPlannedPremiums'][i] = 0;
        }
    } else {
        snapshot['basePlanFaceAmount'] = _V( context.runningPolicyValues.faceAmount[ PublicConstants.FUND_RETURN.HIGH ], 0 );
    }

    // BAV fund allocations
    snapshot['BAVFundAllocations'] = {};
    for (var fundCode in context.runningPolicyValues['BAVFundAllocations']){
      var fundReturns = context.runningPolicyValues['BAVFundAllocations'][fundCode];
      snapshot['BAVFundAllocations'][fundCode] = {};
      for (var fundReturn in PublicConstants.FUND_RETURN) {
        snapshot['BAVFundAllocations'][fundCode][fundReturn] = fundReturns[fundReturn];
      }
    }
    // TAV fund allocations
    snapshot['TAVFundAllocations'] = {};
    for (var fundCode in context.runningPolicyValues['TAVFundAllocations']){
      var fundReturns = context.runningPolicyValues['TAVFundAllocations'][fundCode];
      snapshot['TAVFundAllocations'][fundCode] = {};
      for (var fundReturn in PublicConstants.FUND_RETURN) {
        snapshot['TAVFundAllocations'][fundCode][fundReturn] = fundReturns[fundReturn];
      }
    }

    this.self.state.fullLapse = fullLapse;
    
    if (context.proposal.enableDebug && snapshot.year >= context.proposal.startDebugYear && snapshot.year <= context.proposal.stopDebugYear) {
        _SS(snapshot, 5);
    }
    
    
    return snapshot;
}
});
var TradParCore_Events = CommonEvents.extend({
   events: function(args) {
    var proposal = args["proposal"];
    var events = [
        
       eventTradParPlanAvyInitialization.create(),                          // tested (common)
       eventCoreCalcPremiumByMethod.create(),                          // tested
       eventCoreCalcRiderPremiumByMethod.create(),
       eventCoreAccumulatePremiums.create(),                                // tested (common)
       eventCalcTradCoreAccumulateBasePremiums.create(),                    // event for colTradAccumulateBasePlanPremium
       eventCalcTradPlanCIBenefit_ENCXXX.create(),                          // tested
       eventCalcTradPlanCoupon_ENCXXX.create(),                             // tested
       eventTradCouponNotReceive.create(),
       eventCalcDeathBenefit.create(),
       eventCalcRidersDeathBenefit.create(),
       eventCalcTradPlanCashValue.create(),                                 // tested (common)
       eventCalcTradRidersCashValue.create(),
      
       eventCalcTradPlanAccumulateCoupons.create(),                         // tested (common)
       eventCalcTradPlanDividends.create(),                                 // tested (common)
       eventCalcTradPlanGratefulDiv_ENCXXX.create(),                        // tested
       eventCalculateTradPlanAccumulateDividends.create(),                  // tested (common)
       eventCalcTradPlanAccGratefulDiv_ENCXXX.create(),                     // tested
      
       eventCalcTradPlanAccumulateCouponsLOW.create(),                      // tested (common)
       eventCalcTradPlanDividendsLOW.create(),                              // tested (common)
       eventCalcTradPlanGratefulDivLOW_ENCXXX.create(),                     // tested
       eventCalcTradPlanAccumulateDivLOW.create(),                          // tested (common)
       eventCalcTradPlanAccGratefulDivLOW_ENCXXX.create(),                  // tested
      
       eventCalcTradPlanAccumulateCouponsHIGH.create(),                     // tested (common)
       eventCalcTradPlanDividendsHIGH.create(),                             // tested (common)
       eventCalcTradPlanGratefulDivHIGH_ENCXXX.create(),                    // tested
       eventCalcTradPlanAccumulateDivHIGH.create(),                         // tested (common)
       eventCalcTradPlanAccGratefulDivHIGH_ENCXXX.create()                  // tested
       
    ];
      
    return events;
},
   columns: function(args) {
    var proposal = args["proposal"];
    var columns = [
        columnYear.create(),
        columnAge.create(),
        
        colTradBasePlanPremiums.create(),                                       // tested (common)
        colTradModalBasicPremiums.create(),
        colTradRiderPremiums.create(),
        colTradTotalPremiums.create(),                                          // tested (common)
        colTradAccumulatePremiums.create(),                                     // testing (common)
        colTradAccumulateBasePlanPremium.create(),                              // for colTradAccumulateBasePlanPremium
        
        colTradBaseDeathBenefit.create(),                                       // tested (common)
        colTradNewBaseDeathBenefit.create(),
        colTradRidersDeathBenefit.create(),
        colTradCiBenefit.create(),                                              // tested (common)
        colTradCashValue.create(),
        colTradGuaranteedCashValueReceived.create(),
        colTradGuaranteedCashValueNotReceived.create(),
        colTradGenderCiBenefit.create(),
        colTradLateCiBenefit.create(),
        colTradEarlyAndMediateCiBenefit.create(),
        colTradTotalRiderCashValue.create(),
        colTradTotalCashValue.create(),
        colTradCoupon.create(),                                                 // tested (common)
        colTradCouponNotReceive.create(),
        colTradTotalGuaranteedCashValue.create(),
        colTradTotalDeathBenefitGuaranteed.create(),
        
        colTradAccumulateCouponsLOW.create(),                                   // tested (common)
        colTradAccumulateCoupons.create(),                                      // tested (common)
        colTradAccumulateCouponsHIGH.create(),                                  // tested (common)
        
        colTradDividendsLOW.create(),                                           // tested (common)
        colTradDividends.create(),                                              // tested (common)
        colTradDividendsHIGH.create(),                                          // tested (common)
        
        colTradAccumulateDividendsLOW.create(),                                 // tested (common)
        colTradAccumulateDividends.create(),                                    // tested (common)
        colTradAccumulateDividendsHIGH.create(),
        
        colTradGratefulDividendsLOW.create(),                                   // tested (common)
        colTradGratefulDividends.create(),                                      // tested (common)
        colTradGratefulDividendsHIGH.create(),                                  // tested (common)
        
        colTradAccuGratefulDividendsLOW.create(),                               // tested (common)
        colTradAccuGratefulDividends.create(),                                  // tested (common)
        colTradAccuGratefulDividendsHIGH.create(),                              // tested (common)
        
        colTradTotalDividendsLOW.create(),                                      // tested (common)
        colTradTotalDividends.create(),                                         // tested (common)
        colTradTotalDividendsHIGH.create(),                                     // tested (common)
        
        colTradTotalBaseSurrValueLOW.create(),                                  // tested (common)
        colTradTotalBaseSurrValue.create(),                                     // tested (common)
        colTradTotalBaseSurrValueHIGH.create(),                                 // tested (common)
        
        colTradTotalSurrValueLOW.create(),                                      // tested (common)
        colTradTotalSurrValue.create(),                                         // tested (common)
        colTradTotalSurrValueHIGH.create(),                                     // tested (common)
        
        colTradTotalDeathBenefitLOW.create(),                                   // tested (common)
        colTradTotalDeathBenefit.create(),                                      // tested (common)
        colTradTotalDeathBenefitHIGH.create(),                                  // tested (common)
    
        colTradTotalProtectionLOW.create(),                                   // tested (common)
        colTradTotalProtection.create(),                                      // tested (common)
        colTradTotalProtectionHIGH.create(),                                   // tested (common)
        
        colTradTotalBaseDeathBenefitLOW.create(),                                   
        colTradTotalBaseDeathBenefit.create(),                                      
        colTradTotalBaseDeathBenefitHIGH.create(),                                  
        
        colTradTotalBaseProtectionLOW.create(),
        colTradTotalBaseProtection.create(),                                      
        colTradTotalBaseProtectionHIGH.create(),
        
        colTradNonGuaranteedDeathbenefitLOW.create(),
        colTradNonGuaranteedDeathbenefit.create(),
        colTradNonGuaranteedDeathbenefitHIGH.create(),
        
        colTradBasePlanAndRiderSurrValue.create()

    ];
    
    if (!_V( proposal.hideRiderColumns, false )) {
        var riders = Utils.iterator(_V(proposal.riders.coverageInfo, []))
        var ridersTotalCol = {};
        for(var i in riders) {
            var rider = riders[i];
            columns.push( colRiderCoveragePremium.create( {riderIdx:i, coverage:rider} ) );
            columns.push( colRiderCoverageCashValue.create( {riderIdx:i, coverage:rider} ) );
            
            var riderProductId = rider.product.productKey.primaryProduct.productPK.productId;
            if (Utils.isNothing(ridersTotalCol[riderProductId])){
              columns.push( colRiderCoverageTotalCashValue.create( {riderIdx:i, coverage:rider, riders: riders} ) );
              ridersTotalCol[riderProductId] = true;
            }
    
        }
    }
    return columns;
},
   init: function(args) {
    this.self['name'] = 'TradParCore_Events';
    this.self['productId'] = null;
    this.self['productType'] = [CatalogConstants.PRODUCT_TYPE.PARTICIPATE];
    this.self['providerId'] = "TradParCore_Events";
},
   makeSnapshot: function(args) {
    var context = args['context'];
    var snapshot = {
        year: context.runningPolicyValues.year,
        month: (context.runningPolicyValues.months % 12),
        age: Number(context.insuredAge) + Number(context.runningPolicyValues.year),
      
        totalPremiums: context.runningPolicyValues.totalPremiums,
        accumulatePremiums: context.runningPolicyValues.accPremiums,
        accumulateBasePlanPremiums: context.runningPolicyValues.accBasePlanPremiums,  // colTradAccumulateBasePlanPremium
        basePlanPremiums: context.runningPolicyValues.basePlanPremiums,
        modalBasicPremium: context.runningPolicyValues.modalBasicPremium, // for colModalBasicPremium
        
        riderPremiums: context.runningPolicyValues.riderPremiums,
        ridersCashValue: context.runningPolicyValues.ridersCashValue,
        
        deathBenefit: context.runningPolicyValues.newBaseDeathBenefit,
        newBaseDeathBenefit: context.runningPolicyValues.newBaseDeathBenefit,
        ridersDeathBenefit: context.runningPolicyValues.ridersDeathBenefit,
        ciBenefit: context.runningPolicyValues.ciBenefit,
        cashValue: context.runningPolicyValues.cashValue,
        
        // standard scale
        coupon: context.runningPolicyValues.coupon,
        couponNotReceive: context.runningPolicyValues.couponNotReceive,
        dividends: context.runningPolicyValues.dividends,
        gratefulDividends: context.runningPolicyValues.gratefulDividends,
        accCoupons: context.runningPolicyValues.accCoupons,
        accDividends: context.runningPolicyValues.accDividends,
        accGratefulDividends: context.runningPolicyValues.accGratefulDividends,
        
        // lower dividend scale 80%
        lowerDividends: context.runningPolicyValues.lowerDividends,
        lowerGratefulDividends: context.runningPolicyValues.lowerGratefulDividends,
        accLowerCoupons: context.runningPolicyValues.accLowerCoupons,
        accLowerDividends: context.runningPolicyValues.accLowerDividends,
        accLowerGratefulDividends: context.runningPolicyValues.accLowerGratefulDividends,
        
        // higher dividend scale 120%
        higherDividends: context.runningPolicyValues.higherDividends,
        higherGratefulDividends: context.runningPolicyValues.higherGratefulDividends,
        accHigherCoupons: context.runningPolicyValues.accHigherCoupons,
        accHigherDividends: context.runningPolicyValues.accHigherDividends,
        accHigherGratefulDividends: context.runningPolicyValues.accHigherGratefulDividends,
        
        riderPremiumsList: context.runningPolicyValues.riderPremiumsList,
        ridersCashValueList: context.runningPolicyValues.ridersCashValueList,
        
        genderCiBenefit: context.runningPolicyValues.genderCiBenefit,
        lateCiBenefit: context.runningPolicyValues.lateCiBenefit,
        emCiBenefit: context.runningPolicyValues.emCiBenefit,
    };
    
    return snapshot;
}
});
var ULRP_EventsLocal = CommonEvents.extend({
   events: function(args) {
    var proposal = args["proposal"];
    var events = [
         eventAvyInitializationLocal.create(),
         eventSavePolicyLapseStatusAtYearBeginning.create(),
         eventUpdateGuaranteeReturnInFunds.create(),

         eventApplyPolicyChangeRegularPremiumUL007.create(),
         eventApplyPolicyChangePlannedPremium.create(),
         eventApplyPolicyChangeFaceAmount.create(),

         eventCoreCalcPremiumByMethod.create({updateTotalPremium:false}),                               // tested
         eventCoreCalcRiderPremiumByMethod.create({updateTotalPremium:false}),
         eventUpdateRegularPremiumUL007.create(),
       
         eventReceiveInitialPremiumLocal.create(),
         eventReceiveTopupPremiumLocal.create(),
         eventReceiveRegularPremiumLocal.create(),
         eventAccumulateUvlPremiumsLocal.create(),

         // comment out this event to replace by local
         //eventCalcNARLocal.create(),
         eventCalcNAR_UL007.create(),
         eventCalcPolicyFeeUL007.create(),

         eventCalcCOILocal.create(),
         eventCalcCOR_COR01Local.create(),
         eventCalcCOR_COR02Local.create(),
         eventCalcCOR_COR03Local.create(),
         eventAccumulateCOILocal.create(),

         eventDeductCOILocal.create(),

         eventDeductCOR.create(),
         eventDeductMonthlyPolicyFeeUL007.create(),
         
         eventTestLapsation.create(),
         eventRollInterest.create(),

         eventCalcSurrenderValuesBeforeWithdrawUL007.create(),
         eventCalcMaxWithdrawalUL007.create(),
         eventDeductWithdrawalUL007.create(),
         
         eventAccumulatePolicyValues.create(),
         eventCalcFundBonusUL007.create(),
         eventDumpinFundBonusUL007.create(),
         eventCalcSurrenderValuesUL007.create(),

         eventCalcDeathBenefit.create(),
         eventCalcRidersDeathBenefit.create(),
         // ATP-281 comment out this event to replace by local
         eventCalcTotalDeathBenefitLocal.create(),        

         showMonthlyResults.create(),
         
         eventCalcRiderProtectionByMethod.create(),
         eventCalcProtectionByMethod.create()
    ];
    return events;
},
   columns: function(args) {
    var proposal = args["proposal"];
    var columns = [
         columnYear.create(),
         columnAge.create(),
         
         colRegularPremiums.create(),
         colPremium.create(),
         colModalBasePremium.create(),
         colTotalModalBasePremium.create(),
         colTradRiderPremiums.create(),
	     colTopupPremium.create(),
         colTotalPremium.create(),
         // add Premium Load column
         colPremiumLoad.create(),
         colAllocatedPremiums.create(),
         // add Top-up Premium column
         colPolicyFee.create(),
         
         // LOW
         colAccumulatePremiumsLow.create(),
         colNarLow.create(),
         colCoiLow.create(),
         colLoyaltyBonusLow.create(),
         colAvBeforeBonusAndWithdrawalLow.create(),
         colAccountLow.create(),
         colSurValueLow.create(),
         colDbLow.create(),
         colTotalDbLow.create(),
         colTotalProtectionLow.create(),


         // MEDIUM
         colAccumulatePremiumsMedium.create(),
         colCoiMedium.create(),
         colNarMedium.create(),
         colLoyaltyBonusMedium.create(),
         colAvBeforeBonusAndWithdrawalMedium.create(),
         colAccountMedium.create(),
         colSurValueMedium.create(),
         colDbMedium.create(),
         colTotalDbMedium.create(),
         colTotalProtection.create(),

         // HIGH
         colAccumulatePremiumsHigh.create(),
         colNarHigh.create(),
         colCoiHigh.create(),
         colLoyaltyBonusHigh.create(),
         colAvBeforeBonusAndWithdrawalHigh.create(),
         colAccountHigh.create(),
         colSurValueHigh.create(),
         colDbHigh.create(),
         colTotalDbHigh.create(),
         colTotalProtectionHigh.create(),

         // add Total Withdrawl column
         colWithdrawalLocal.create(),
         colWithdrawalWithChargeLocal.create(),
         colWithdrawalNoChargeLocal.create(),
         colTradRidersDeathBenefit.create(),
         colPolicyLapseLow.create(),
         colPolicyLapseMedium.create(),
         colPolicyLapseHigh.create(),
         colSurValueLowBeforeWithdraw.create(),
         colSurValueMediumBeforeWithdraw.create(),
         colSurValueHighBeforeWithdraw.create(),
         colPremiumLoadAndOtherFees.create(),

         // Add column "Policy Fee" and "Premium Load & other fees"
         colBasePlanFaceAmount.create(),
         colRegularPayment.create(),
         
         // faceAmount per return rates
         colFaceAmountLow.create(),
         colFaceAmountMedium.create(),
         colFaceAmountHigh.create(),
         colMaxWithdrawalLow.create(),
         colMaxWithdrawalMedium.create(),
         colMaxWithdrawalHigh.create(),
         colErrorLow.create(),
         colErrorMedium.create(),
         colErrorHigh.create(),
         
         colBaseProtection.create(),
         colRiderProtection.create()
    ];
    
    if (!_V(proposal.hideRiderColumns, false)) {
        var riders = Utils.iterator(_V(proposal.riders.coverageInfo, []))
        var ridersTotalCol = {};
        for(var i in riders) {
            var rider = riders[i];
            columns.push( colRiderCoverageProtection.create( {riderIdx:i, coverage:rider} ) );
        }
    }
    return columns;
},
   init: function(args) {
    //this.self['state'] = {};
    //this.self.state.fullLapse = false;
    
    this.self['name'] = 'ULRP_EventsLocal';
    this.self['productId'] = null;
    this.self['providerId'] = "ULRP_EventsLocal";
    this.self['productType'] = [CatalogConstants.PRODUCT_TYPE.UVLIFE,CatalogConstants.PRODUCT_TYPE.REGULAR_SAVING];
},
   makeSnapshot: function(args) {
    var context = args['context'];
    
    _DBR('@@@@ ----------------------- ', '', '', context.runningPolicyValues.months);

    var snapshot = {
        year: context.runningPolicyValues.year,
        month: (context.runningPolicyValues.months % 12),
        age: Number(context.insuredAge) + Number(context.runningPolicyValues.year),
        accountValues: IFund.appliedTo(context.runningPolicyValues.fundPool).call("fundBalances", {}),
        avBeforeBonusAndWithdrawal: context.runningPolicyValues.avBeforeBonusAndWithdrawal,
        nars: context.runningPolicyValues.nars,
        cois: context.runningPolicyValues.annualCois,
        fundBonus: context.runningPolicyValues.fundBonus || { HIGH: 0, LOW: 0, MEDIUM: 0 },
        coiRate: context.runningPolicyValues.coiRate,
        withdrawal: context.runningPolicyValues.withdrawal,
        withdrawalNoCharge: context.runningPolicyValues.withdrawalNoCharge,
        // Add total withdrawal
        totalWithdrawal: context.runningPolicyValues.totalWithdrawal,
        initialDumpIn: context.runningPolicyValues.initialDumpIn,
        newPremium: context.runningPolicyValues.newPremium - _V( context.runningPolicyValues.topup, 0 ) - _V( context.runningPolicyValues.riderPremiums, 0 ), 
        netPremium: context.runningPolicyValues.netPremium - _V( context.runningPolicyValues.topup, 0 ) - _V( context.runningPolicyValues.riderPremiums, 0 ),
        // Add Top-up premium
        topup: context.runningPolicyValues.topup,
        totalPremiums: context.runningPolicyValues.totalPremiums,
        deathBenefits: context.runningPolicyValues.deathBenefits,
        ridersDeathBenefit: context.runningPolicyValues.ridersDeathBenefit,
        totalDeathBenefits: context.runningPolicyValues.totalDeathBenefits,
        cashOut: context.runningPolicyValues.cashOut,
        cashOutPayments: context.runningPolicyValues.accumulatedcashOutPayments,
        firstMonthCoi: context.runningPolicyValues.firstMonthCoi,
        cashoutAccount: IFund.appliedTo(context.runningPolicyValues.cashoutAccount).call("fundBalances", {}),
        surrenderValuesFromCashoutAccount: IFund.appliedTo(context.runningPolicyValues.cashoutAccount).call("surrenderValues", {}),
        surrenderValues: context.runningPolicyValues.surrenderValues,
        surrenderValueBeforeWithdrawal: context.runningPolicyValues.surrenderValueBeforeWithdrawal,
        maxWithdrawal: context.runningPolicyValues.maxWithdrawal,
        premiumLoad: context.runningPolicyValues.premiumLoad,
        policyFee: context.runningPolicyValues.policyFee,
        riderPremiums: context.runningPolicyValues.riderPremiums,
        totalProtections: context.runningPolicyValues.totalProtections,
        error: context.runningPolicyValues.error,
        protection: context.runningPolicyValues.protection,
        totalRiderProtection: context.runningPolicyValues.totalRiderProtection,
        riderProtections: context.runningPolicyValues.riderProtections,
        modalBasePremium: context.runningPolicyValues.modalBasePremium,
        totalModalBasePremium: context.runningPolicyValues.totalModalBasePremium
    };

    snapshot['faceAmount'] = {};
    snapshot['policyLapse'] = {};
    //snapshot['error'] = {};
    for(var i in PublicConstants.FUND_RETURN) {
        snapshot['faceAmount'][i] = context.runningPolicyValues.faceAmount[i];
        snapshot['policyLapse'][i] = context.runningPolicyValues.lapse[i];
        //snapshot['error'][i] = context.runningPolicyValues.error[i];
        
        if (context.runningPolicyValues.withdrawalOverMaximum[i]) {
                snapshot['accountValues'][i] = 0;
                snapshot['fundBonus'][i] = 0;
                snapshot['surrenderValues'][i] = 0;
                snapshot['deathBenefits'][i] = 0;
                snapshot['totalDeathBenefits'][i] = 0;
                snapshot['totalProtections'][i] = 0;
                snapshot['policyLapse'][i] = 'Y';
            }
        
    }

    for(var i in PublicConstants.FUND_RETURN) {
        if (context.runningPolicyValues.lapse[i] == 'Y') {
            snapshot['accountValues'][i] = 0;
            snapshot['cashoutAccount'][i] = 0;
            snapshot['surrenderValues'][i] = 0;
            snapshot['surrenderValuesFromCashoutAccount'][i] = 0;
        }
    }

    var accumPremiums = {};
    var fullLapseCount = 0;
    for(var i in PublicConstants.FUND_RETURN) {
        var isLapse = (snapshot.policyLapse[i] === 'Y');
        if (isLapse) {
            accumPremiums[ i ] = 0;
        } else {
            accumPremiums[ i ] = context.runningPolicyValues.accPremiums;
        }
        if (isLapse) fullLapseCount = fullLapseCount  + 1;

        _DBR("snapshot.policyLapse[i]", snapshot.policyLapse[i], "", context.runningPolicyValues.months);
        _DBR("snapshot.isLapse", isLapse, "", context.runningPolicyValues.months);
        _DBR("snapshot.fullLapseCount", fullLapseCount, "", context.runningPolicyValues.months);
    }
    
    snapshot['annualAccumulatedPremium'] = accumPremiums;
    var fullLapseTrigger = false;
    if (fullLapseCount == 3) fullLapseTrigger = true;
    
    _DBR('@@@@ fullLapseCount', fullLapseCount, 'ULRP_EventsLocal->', context.runningPolicyValues.months);
    _DBR('@@@@ fullLapseTrigger', fullLapseTrigger, 'ULRP_EventsLocal->', context.runningPolicyValues.months);
    _DBR('@@@@ context.runningPolicyValues.fullLapse', context.runningPolicyValues.fullLapse, 'ULRP_EventsLocal->', context.runningPolicyValues.months);
    
    if (context.runningPolicyValues.fullLapse) {
        snapshot['basePlanFaceAmount'] = 0;
        snapshot['regularPayment'] = 0;
        snapshot['topup'] = 0;
        snapshot['newPremium'] = 0;
        snapshot['netPremium'] = 0;
        snapshot['totalPremiums'] = 0;
        snapshot['riderPremiums'] = 0;
        
        snapshot.coiRate = 0;
        snapshot.totalPremiums = 0;
        
        snapshot['totalRiderProtection'] = 0;
        snapshot['basePlanProtection'] = 0;
        
        for(var i in snapshot['riderProtections']) {
            snapshot['riderProtections'][i]['protection'] = 0;
        }
        
        
        for(var i in PublicConstants.FUND_RETURN) {
            snapshot['protection'][i] = 0;
            snapshot['totalProtections'][i] = 0;
        }
        
    } else {
        //snapshot['basePlanFaceAmount'] = _V( context.proposal.coverageInfo.faceAmount, 0 );
        snapshot['basePlanFaceAmount'] = _V( context.runningPolicyValues.faceAmount[ PublicConstants.FUND_RETURN.HIGH ], 0 );
        snapshot['regularPayment'] = _V( context.proposal.coverageInfo.regularPayment, 0 );
        snapshot['basePlanProtection'] = _V( context.runningPolicyValues.protection[ PublicConstants.FUND_RETURN.HIGH ], 0 );
    }
    
    context.runningPolicyValues.fullLapse = fullLapseTrigger;

     // just accept account value > 0
     // Ben> should have no value with negative but actually it should be handled by FE or report as some of negative values can be meaningful
     // for (var returnTypeKey in PublicConstants.FUND_RETURN) {
     //    snapshot['accountValues'][returnTypeKey] = Math.max( snapshot['accountValues'][returnTypeKey], 0);
     // }

    //_DBR('context.insuredAge', context.insuredAge, 'ULRP_EventsLocal->', context.runningPolicyValues.months);
    //_DBR('context.runningPolicyValues.year', context.runningPolicyValues.year, 'ULRP_EventsLocal->', context.runningPolicyValues.months);
    //_DBR('snapshot.age', snapshot.age, 'ULRP_EventsLocal->', context.runningPolicyValues.months);
    
    if (context.proposal.enableDebug && snapshot.year >= context.proposal.startDebugYear && snapshot.year <= context.proposal.stopDebugYear) {
        _SS(snapshot, 5);
    }
    
    return snapshot;
}
});
var USxxxEvents = UVLife_Events.extend({
   init: function(args) {
    this.self['providerId'] = 'USxxxEvents';
}
});

var em = Repository.getManager(SystemComponents.MANAGER.EVENTS_MANAGER);
if (!em) {
   console.log(''); console.log('++++ Create new Event Manager for setting local event providers into engine. ++++');
   em = IEventsManager.implementBy(EventsManagerImpl.create());
   Repository.addManager(SystemComponents.MANAGER.EVENTS_MANAGER, em);
}
console.log(''); console.log('++++ Loading event providers now ... ++++');
em.call('addEventProvider', {provider : EDx_Events.create()});
em.call('addEventProvider', {provider : RUV_EventsLocal.create()});
em.call('addEventProvider', {provider : TradParCore_Events.create()});
em.call('addEventProvider', {provider : ULRP_EventsLocal.create()});
em.call('addEventProvider', {provider : USxxxEvents.create()});
console.log(''); console.log('++++ List event providers installed ++++');
em.call('showEventProviders', {});

var BackdateValidationRuleLocal = Class.define({
    ruleName: function(args) {
    return "BackdateValidationRuleLocal";
},
    shouldTest: function(args) {
    var proposal = args["proposal"];
    var basePlan = args["basePlan"];
    var rider = args["rider"];
    return true;
},
    scope: function(args) {
    var s = 0;
    s = s + PublicConstants.TARGET_SCOPE.PROPOSAL;
    //s = s + PublicConstants.TARGET_SCOPE.BASE_COVERAGE;
    //s = s + PublicConstants.TARGET_SCOPE.RIDER_COVERAGE;
    return s;
},
    validate: function(args) {
    var proposal = args["proposal"];
    //var basePlan = args["basePlan"];
    //var rider = args["rider"];
    //if error,
    //e.g. return { code: "ERR00010", arguments: variables };
    //e.g. variables[PublicConstants.MESSAGE_FIELD.CURRENCY] = coverage.currency.currencyPK.currencyId;
    //if no error, just return

    var effDate = proposal.policyYearDate;
    if ( Utils.isNothing(effDate) ) {
        return { code: "ERR04941", arguments: {} };
    }

    var effectiveDate = proposal.policyYearDate.date();
    //var sixMonthLater = new Date(effectiveDate.getFullYear(), effectiveDate.getMonth() + 6, effectiveDate.getDate());

    var today = new Date();
    today.setHours(0);
    today.setMinutes(0);
    today.setSeconds(0);

    //var sixMonthLaterString = sixMonthLater.formatString();
    //var todayString = today.formatString();

    _DB(">>>>> effectiveDate", effectiveDate);
    _DB(">>>>> today", today);
    //_DB(">>>>> sixMonthLater", sixMonthLaterString);
    var sixMonthAfter = new Date(today.getFullYear(), today.getMonth() - 6, today.getDate());
    var lastDayInSixMonthAfter = new Date(today.getFullYear(), today.getMonth() - 5, 0);
    if( sixMonthAfter > lastDayInSixMonthAfter){
        sixMonthAfter = lastDayInSixMonthAfter;
    }
    if (effectiveDate < sixMonthAfter) {
        return {
            code: "ERR00209",
            arguments: {}
        };
    }
}
});
var BasePlanAndRidersCombinationValidationRule = Class.define({
    ruleName: function(args) {
    return "BasePlanAndRidersCombinationValidationRule";
},
    shouldTest: function(args) {
    return true;
},
    scope: function(args) {
    return PublicConstants.TARGET_SCOPE.RIDER_COVERAGE;
},
    validate: function(args) {
    var coverage = args["coverage"];
    var proposal = coverage.proposal;
    var primaryProductId = _PV(proposal.coverageInfo, 'product.productKey.primaryProduct.productPK.productId');
    var catalogRecords = this.self.getCatalogRecords(args);
    //Check if rider and base must be a valid combination
    var valid = false;
    for (var idx in catalogRecords) {
        var catalogRecord = catalogRecords[idx];
        if (!Utils.isNothing(catalogRecord.ProductPK)) {
            var productIdRef = catalogRecord.ProductPK.ProductId.text;
            if (productIdRef == WILDCARD || productIdRef.equalsIgnoreCase(primaryProductId)) {
                valid = true;
                break;
            }
        }
    }
    if (!valid) {
        var variables = {
            "%P0%": coverage.parties.party.insuredId
        };
        return {
            code: "ERR04924",
            arguments: variables
        };
    }
},
    getCatalogRecords: function(args) {
    var riderCov = args["coverage"];
    var catalog = riderCov.catalog.call("getCatalog", null);
    var catalogRecords = catalog.ProductCatalog.ProductCatalogDetail.CatalogRecord;
    return catalogRecords;
}
});
var CurrentDateEffectiveDateValidationRuleLocal = Class.define({
    ruleName: function(args) {
    return "CurrentDateEffectiveDateValidationRuleLocal";
},
    shouldTest: function(args) {
    return true;
},
    scope: function(args) {
    return PublicConstants.TARGET_SCOPE.PROPOSAL;
},
    validate: function(args) {
    var proposal = args["proposal"];
    var effDate = proposal.policyYearDate;
    if (Utils.isNothing(effDate)) {
        return;
    }

    var effectiveDate = proposal.policyYearDate.date();
    effectiveDate.setHours(0);
    effectiveDate.setMinutes(0);
    effectiveDate.setSeconds(0);

    var today = new Date();
    today.setHours(0);
    today.setMinutes(0);
    today.setSeconds(0);

    if (effectiveDate > today) {
        return {
            code: "ERR04948",
            arguments: {}
        };
    }
}
});
var CvgClassCapValidationRuleRHCXOD = Class.define({
    ruleName: function(args) {
    return "CvgClassCapValidationRuleRHCXOD";
},
    shouldTest: function(args) {
    var proposal = args["proposal"];
    var coverage = args["coverage"];
    return true;
},
    scope: function(args) {
    var s = 0;
    //s = s + PublicConstants.TARGET_SCOPE.PROPOSAL;
    //s = s + PublicConstants.TARGET_SCOPE.BASE_COVERAGE;
    s = s + PublicConstants.TARGET_SCOPE.RIDER_COVERAGE;
    return s;
},
    validate: function(args) {
    var coverage = args["coverage"];
    var productId = _V( _PV( coverage, "product.productKey.primaryProduct.productPK.productId" ) );
    var catalog = coverage.catalog.call("getCatalog");
    var catalogAlias = _V( _PV( catalog, "ProductCatalog.Alias" ) );

    var insured = getPrimaryInsured({coverage: coverage});
    var proposal = coverage.proposal;
    var rhcicvg;
    for(var cvgIdx in proposal.riders.coverageInfo) {
        var riderRec = proposal.riders.coverageInfo[cvgIdx];
        var riderCatalog = riderRec.catalog.call("getCatalog");
        var riderProductId = _V( _PV( riderCatalog, "ProductCatalog.ProductPK.ProductId" ) );
        var riderAlias = _V( _PV( riderCatalog, "ProductCatalog.Alias" ) );
        if (riderAlias == this.self.getRHCIAlias(args)) {
            var riderInsured = getPrimaryInsured({coverage: riderRec});
            if (this.self.isEqualsParty( { party1:insured, party2:riderInsured } )) {
                rhcicvg = riderRec;
                break;
            }
        }
    }
    
    if (!Utils.isNothing(rhcicvg)) {
        var rhciCvgClass = _V( _PV( rhcicvg , "otherOptions.coverageClass" ) );
        var selfCvgClass = _V( _PV( coverage, "otherOptions.coverageClass" ) );
        if (selfCvgClass > rhciCvgClass) {
            var variables = {};
            variables["%PRODUCT_ID%"] = productId;
            variables["%INSURED%"] = insured;
            variables["%MAX_COVERAGE_CLASS%"] = rhciCvgClass;
            variables["%COVERAGE_CLASS%"] = selfCvgClass;
            variables["%P0%"] = insured.insuredId;

            //return {
            //    code: "ERR00220",
            //    arguments: variables
            //};

            _DB("Insured Id", insured.insuredId, "CvgClassCapValidationRuleRHCXOD");
            _DB("rhciCvgClass", rhciCvgClass, "CvgClassCapValidationRuleRHCXOD");
            _DB("selfCvgClass", selfCvgClass, "CvgClassCapValidationRuleRHCXOD");
            
            if (rhciCvgClass == SchemaConstants.COVERAGE_CLASS.CLASS_A) {
                if (this.self.getRHCDAlias(args) == catalogAlias) {
                    return  {
                        code: "ERR02007G", 
                        arguments: variables
                    }
                }
                if (this.self.getRHCOAlias(args) == catalogAlias) {
                    return  {
                        code: "ERR02007E", 
                        arguments: variables
                    }
                }
            }
            
            if (this.self.getRHCDAlias(args) == catalogAlias) {
                return  {
                    code: "ERR02007H", 
                    arguments: variables
                }
            }
            if (this.self.getRHCOAlias(args) == catalogAlias) {
                return  {
                    code: "ERR02007F", 
                    arguments: variables
                }
            }
        }
    }
    return;
},
    getRHCIAlias: function(args) {
    return "RHCI";
},
    isEqualsParty: function(args) {
    var party1 = args['party1'];
    var party2 = args['party2'];

    if (Utils.isNothing(party1) || Utils.isNothing(party2)) return false;
    var result = (party1.type == party2.type) &&
        (party1.smokingStatus == party2.smokingStatus) &&
        (party1.insuredSex == party2.insuredSex) &&
        (party1.insuredAge == party2.insuredAge) &&
        (party1.insuredId == party2.insuredId)
    return result;
},
    getRHCDAlias: function(args) {
    return "RHCD";
},
    getRHCOAlias: function(args) {
    return "RHCO";
}
});
var FaceAmountValidationRuleMCXXX = Class.define({
    ruleName: function(args) {
return 'FaceAmountValidationRuleMCXXX';
},
    shouldTest: function(args) {
return true;
},
    scope: function(args) {
return PublicConstants.TARGET_SCOPE.RIDER_COVERAGE;
},
    validate: function(args) {
    var rider = args["coverage"];
    if (_V(rider.faceAmount, 0) <= 0) {
        var variables = {};
        variables["%PRODUCT_ID%"] = _PV(rider, "product.productKey.primaryProduct.productPK.productId");
        return {
            code: "ERR45022",
            arguments: variables
        };
    }

    var applicableFA = [200, 300, 500, 1000, 2000, 3000];
    if (applicableFA.indexOf(rider.faceAmount) == -1) {
        return {
            code: 'ERR03060',
            arguments: {}
        }
    }
}
});
var FundAllocationValidationRuleLocal = Class.define({
    ruleName: function(args) {
    return "FundAllocationValidationRuleLocal";
},
    shouldTest: function(args) {
    return true;
},
    scope: function(args) {
    return PublicConstants.TARGET_SCOPE.PROPOSAL;
},
    validate: function(args) {
    var proposal = args["proposal"];
    var catalog = proposal.coverageInfo.catalog;
    if (!(catalog.call("isUVL"))) {
        return;
    }
    var catalogInfo = catalog.call('getCatalog');
    var records = Utils.iterator(_V(_PV(proposal, 'funds.fundRecord'), []));
    var catalogAlias = _V(_PV(catalogInfo, "ProductCatalog.Alias"));
    if (records.length > 0) {
        var totalFund = 0;

        for (var recordKey in records) {
            totalFund = totalFund + Number(records[recordKey].allocation);
            if (records[recordKey].allocation < 0) {
                return {
                    code: 'ERR11009',
                    arguments: { '%P0%': IFunction.appliedTo(FormatNumber.create()).call('execute', {n: records[recordKey].allocation}) }
                }
            }
            var minFundAllocation = this.self.getMinimumFundAllocation(args);
            if (records[recordKey].allocation < minFundAllocation) {
                return {
                    code: 'ERR03017',
                    arguments: {
                        '%MIN%': IFunction.appliedTo(FormatNumber.create()).call('execute', {n: minFundAllocation})
                    }
                }
            }
            if (catalogAlias == "RUV") {
                if (records[recordKey].allocation % 5 != 0) {
                    return {
                        code: 'ERR03017',
                        arguments: {
                            '%MIN%': IFunction.appliedTo(FormatNumber.create()).call('execute', {n: minFundAllocation}) 
                        }
                    }
                }
            }
        }
    }
},
    getMinimumFundAllocation: function(args) {
    return 10;
}
});
var HealthCareRiderValidationRuleRHCXX = Class.define({
    ruleName: function(args) {
    return 'HealthCareRiderValidationRuleRHCXX';
},
    shouldTest: function(args) {
    return true;
},
    scope: function(args) {
    return PublicConstants.TARGET_SCOPE.RIDER_COVERAGE;
},
    validate: function(args) {
    var coverage = args['coverage'];
    var isOwner = this.self.insuredIsOwner(args);

    var riderInsured = getPrimaryInsured({coverage: coverage});
    var coverageClass = _PV(coverage, 'otherOptions.coverageClass');
    var productId = _PV( coverage, 'product.productKey.primaryProduct.productPK.productId' );
    if (riderInsured.insuredAge < 18) {
        if (coverageClass == SchemaConstants.COVERAGE_CLASS.CLASS_D) {
          return {
            code: 'ERR02007D',
            arguments: []
          }
        }
    }

    //rhc2I => rch2D and rch2O
    //rhc1I => rch1D and rch1O
    //if is not owner, the coverage class cannot be better than owner
    //if no owner covearge, coverage class can be any

    var ownerRHCXI = this.self.ownerRHCXI(args);
    //_DB("ownerRHCXI", ownerRHCXI, "HealthCareRiderValidationRuleRHCXX->")
    
    if (!Utils.isNothing( ownerRHCXI )) {
        var riderCatalog = coverage.catalog.call('getCatalog');
        var riderAlias = _V( _PV(riderCatalog, "ProductCatalog.Alias"), "" );
        
        var ownerCoverageClass = _PV(ownerRHCXI, 'otherOptions.coverageClass');
        var riderCoverageClass = _PV(coverage, 'otherOptions.coverageClass');

        // test once for all other RCH riders
        if (riderAlias == "RHCI") {
            if (riderCoverageClass > ownerCoverageClass) {
                return {
                    code: 'ERR02007I',
                    arguments: {
                        '%PLAN_CODE%': productId,
                        '%INSURE_NAME%': riderInsured.insuredId
                    }
                };
            }
        }
    }
},
    insuredIsOwner: function(args) {
    var coverage = args['coverage'];
    var proposal = coverage.proposal;

    var insured = getPrimaryInsured({coverage: coverage});
    if (Utils.isNothing(proposal.owner)) {
        return false;
    }

    var owner = proposal.owner;
    var isSame = ( owner.ownerAge == insured.insuredAge && owner.ownerDOB == insured.birthDate &&
         owner.ownerId == insured.insuredId && owner.ownerSex == insured.insuredSex_original );
    return isSame;
},
    ownerRHCXI: function(args) {
    var proposal = args['coverage'].proposal;
    var ownerRhcRiderIdx = proposal.ownerRhcRiderIdx;
    if (Utils.isNothing(ownerRhcRiderIdx)) {
        ownerRhcRiderIdx = -1;
        //var reHCI = /RHC[0-9]*I/;
        // test once for all other RCH riders
        var riders = _V( _PV( proposal, 'riders.coverageInfo' ), [] );
        for(var riderIdx in riders) {
            var rider = riders[riderIdx];
            var riderCatalog = rider.catalog.call('getCatalog');
            var riderAlias = _V( _PV(riderCatalog, "ProductCatalog.Alias"), "" );
            var riderCode = _V( _PV(rider, 'product.productKey.primaryProduct.productPK.productId'), '' );
            if ( riderAlias == 'RHCI' )  {
                if (this.self.insuredIsOwner({coverage: rider})) {
                    ownerRhcRiderIdx = riderIdx;
                    break;
                }
            }
        }

        proposal['ownerRhcRiderIdx'] = ownerRhcRiderIdx;
    }
    if (ownerRhcRiderIdx >= 0) {
        return proposal.riders.coverageInfo[ownerRhcRiderIdx];
    } else {
        return;
    }
}
});
var lapseValidationRuleLocal = Class.define({
    ruleName: function(args) {
    return "lapseValidationRuleLocal";
},
    shouldTest: function(args) {
    var proposal = args["proposal"];
    var coverage = args["coverage"];
    return true;
},
    scope: function(args) {
    var s = 0;
    s = s + PublicConstants.TARGET_SCOPE.PROPOSAL;
    //s = s + PublicConstants.TARGET_SCOPE.BASE_COVERAGE;
    //s = s + PublicConstants.TARGET_SCOPE.RIDER_COVERAGE;
    return s;
},
    validate: function(args) {
    var proposal = args["proposal"];
    var coverage = args["coverage"];
    var context = args["context"];
    var projectionResult = args["projectionResult"];
    
    //_SS(projectionResult.columns[26], 3);
    //_SS(projectionResult.columns[27], 3);
    //_SS(projectionResult.columns[28], 3);
    //_SS(proposal, 4);

    //if error,
    //e.g. return { code: "ERR00010", arguments: variables };
    //e.g. variables[PublicConstants.MESSAGE_FIELD.CURRENCY] = coverage.currency.currencyPK.currencyId;
    //if no error, just return
    
    var returnRate = this.self.returnRate(args);
    var columns = projectionResult.columns;
    for (colIdx in columns) {
        var column = columns[colIdx];
        if (column.Name == this.self.lapseColumnName(args)) {
            for (valIdx in column.Values) {
                var val = column.Values[valIdx];

                var year = val.year;
                var age = val.age;

                var value = val.value;
                if (value == "Y") {
                    return this.self.errorMessage( { year: year, age: age, returnRate: returnRate } );
                }
            }
        }
    }

    return;
},
    lapseColumnName: function(args) {
    return "Lapse (MEDIUM)";
},
    errorMessage: function(args) {
    var year = args["year"];
    var age = args["age"];
    var returnRate = args["returnRate"];

    return { code: "ERR00214", arguments: { "%POLICY_YEAR%": year, "%ATTAIN_AGE%": age, "%RETURN_RATE%": IFunction.appliedTo(FormatNumber.create()).call('execute', {n: returnRate}) } };
},
    returnRate: function(args) {
    var fundRecord = args["proposal"].funds.fundRecord[0];
    return fundRecord.returnRateMedium;
}
});
var MaxFamilyMembersValidationRuleMCXXX = Class.define({
    ruleName: function(args) {
return "MaxFamilyMembersValidationRuleMCXXX";
},
    shouldTest: function(args) {
return true;
},
    scope: function(args) {
return PublicConstants.TARGET_SCOPE.PROPOSAL;
},
    validate: function(args) {
    var proposal = args["proposal"];
    var totNumberOfMember = 0;
    if (proposal.riders && proposal.riders.coverageInfo && proposal.riders.coverageInfo.length > 0) {
        for (var idx = 0; idx < proposal.riders.coverageInfo.length; idx++) {
            var coverageR = proposal.riders.coverageInfo[idx];
            var catalogR = coverageR.catalog.call("getCatalog", null);
            if (Utils.matchInList(CatalogConstants.PRODUCT_TYPE.HOSPITAL_BENEFIT, catalogR.ProductCatalog.ProductType.ProductTypeCode, false)) {
                //if (this.self.isInteger({
                //        value: coverageR.NoOfMember
                //    })) {
                //    totNumberOfMember += coverageR.NoOfMember;
                //}
                totNumberOfMember += 1;
            }
        }
    }    
    if (totNumberOfMember > 6) {
        return {
            code: "ERR03066",
            arguments: {}
        };
    }
}
});
var MissingDOBValidationRuleLocal = Class.define({
    ruleName: function(args) {
    return "MissingDOBValidationRuleLocal";
},
    shouldTest: function(args) {
    var proposal = args["proposal"];
    var coverage = args["coverage"];
    return true;
},
    scope: function(args) {
    var s = 0;
    //s = s + PublicConstants.TARGET_SCOPE.PROPOSAL;
    s = s + PublicConstants.TARGET_SCOPE.BASE_COVERAGE;
    s = s + PublicConstants.TARGET_SCOPE.RIDER_COVERAGE;
    return s;
},
    validate: function(args) {
    var coverage = args["coverage"];
    var insureds = Utils.iterator( _V( _PV( coverage, 'parties.party' ), [] ));
    var now = Utils.now();
    for (idx in insureds) {
        var insured = insureds[idx];
        var variables = {};
        variables["%INSURED_ID%"] = "" + insured.insuredId;
        if (Utils.isNothing(insured.birthDate)) {
            return {
                code: "ERR04940",
                arguments: variables
            };
        }
        if (insured.birthDate.substring(0, 8) > now.formatString().substring(0, 8)){
            return {
                code: "ERR11010",
                arguments: variables
            };
        }
    }
}
});
var MissingFAValidationRuleUL007 = Class.define({
    ruleName: function(args) {
    return "MissingFAValidationRuleUL007";
},
    shouldTest: function(args) {
    return true;
},
    scope: function(args) {
    return PublicConstants.TARGET_SCOPE.BASE_COVERAGE;
},
    validate: function(args) {
    var coverage = args["coverage"];
    var faceAmount = _V( coverage.faceAmount, 0 );

    //_SS( coverage, 10 );
    //_DB( "faceAmount", faceAmount );

    if (faceAmount <= 0) {
        return {
            code: "ERR03005",
            arguments: []
        };
    }
}
});
var MissingInsuredNameValidationRuleLocal = Class.define({
    ruleName: function(args) {
    return 'MissingInsuredNameValidationRuleLocal';
},
    shouldTest: function(args) {
    return true;
},
    scope: function(args) {
    return PublicConstants.TARGET_SCOPE.BASE_COVERAGE | PublicConstants.TARGET_SCOPE.RIDER_COVERAGE;
},
    validate: function(args) {
  var coverage = args["coverage"];
  var productId = _PV( coverage, "product.productKey.primaryProduct.productPK.productId" );
  var parties = Utils.iterator( _V(_PV(coverage, "parties.party"),[]) );
  for (i in parties) {
      var party = parties[i];
      if (Utils.isNothing(party.insuredId) || party.insuredId == "") {
          return {
            code: "ERR04939",
            arguments: { "%PRODUCT_ID%" : productId }
          };
      }
  }
}
});
var MissingRelationToInsuredValidationRuleLocal = Class.define({
    ruleName: function(args) {
  return 'MissingRelationToInsuredValidationRuleLocal';
},
    shouldTest: function(args) {
  return true;
},
    scope: function(args) {
  return PublicConstants.TARGET_SCOPE.BASE_COVERAGE | PublicConstants.TARGET_SCOPE.RIDER_COVERAGE;
},
    validate: function(args) {
  var coverage = args["coverage"];
  var productId = _PV( coverage, "product.productKey.primaryProduct.productPK.productId" );
  var parties = Utils.iterator( _V(_PV(coverage, "parties.party"),[]) );
  for (i in parties) {
      var party = parties[i];
      var insuredId = _V (party.insuredId, "");
      var type = _V (party.type, "");
  
      //_DB("party.insuredId", insuredId);
      //_DB("party.type", type);

      if ( type == "") {
          return {
            code: "ERR11003",
            arguments: { "%PRODUCT_ID%" : productId, "%INSURED_ID%" : insuredId }
          };
      }
  }
}
});
var OneMonthYearOldValidationRuleLocal = Class.define({
    ruleName: function(args) {
    return "OneMonthYearOldValidationRuleLocal";
},
    shouldTest: function(args) {
    var proposal = args["proposal"];
    var coverage = args["coverage"];
    return true;
},
    scope: function(args) {
    var s = 0;
    //s = s + PublicConstants.TARGET_SCOPE.PROPOSAL;
    s = s + PublicConstants.TARGET_SCOPE.BASE_COVERAGE;
    s = s + PublicConstants.TARGET_SCOPE.RIDER_COVERAGE;
    return s;
},
    validate: function(args) {
    var coverage = args["coverage"];
    var primary = getPrimaryInsured({
        coverage: coverage
    });
    var productId = _PV(coverage, "product.productKey.primaryProduct.productPK.productId");
    var catalog = coverage.catalog;
    var catalogObj = catalog.call('getCatalog');
    var isBasePlan = catalog.call("isBasePlan");
    var productName;
    if(isBasePlan){
        var productNames = _V( _PV( catalogObj, "ProductCatalog.ProductName.Name" ), "");
        var language = coverage.proposal.language;
        if(productNames.length){
            for(var idx in productNames){
                var productNameObj = productNames[idx];
                var productNameCode = _V( _PV( productNameObj, "code.text" ), "");
                if(productNameCode.toLowerCase() == language.toLowerCase()){
                    productName = productNameObj.text;
                    break;
                }
            }
        }
    }
    //_SS(primary, 10);

    var longInsuredDob = primary.birthDate;
    if (Utils.isNothing(longInsuredDob)) {
        _DB("OneMonthYearOldValidationRuleLocal: ", "SKIP due to missing DOB", "OneMonthYearOldValidationRuleLocal->");
        return;
    }

    var insuredDob = primary.birthDate.date();
    var oneMonthAfter = new Date(insuredDob.getFullYear(), insuredDob.getMonth() + 1, insuredDob.getDate());
    var lastDayInMonth = new Date(insuredDob.getFullYear(), insuredDob.getMonth() + 2, 0);
    if( oneMonthAfter > lastDayInMonth){
       oneMonthAfter = lastDayInMonth;
    }
    // var oneMonthAfterString = oneMonthAfter.formatString();

    //var today = new Date();
    //today.setHours(0);
    //today.setMinutes(0);
    //today.setSeconds(0);
    //var todayString = today.formatString();
    var policyYearDate = coverage.proposal.policyYearDate.date();
    policyYearDate.setHours(0);
    policyYearDate.setMinutes(0);
    policyYearDate.setSeconds(0);

   _DB("policyYearDate=", policyYearDate );
   _DB("oneMonthAfter=", oneMonthAfter );
    if (oneMonthAfter > policyYearDate) {
        variables = {};
        variables['%INSURE_NAME%'] = primary.insuredId;
        variables['%P1%'] = '1';
        variables['%PLAN_CODE%'] = productName || productId;
        return {
            code: 'ERR03100',
            arguments: variables
        }
    }
}
});
var PremReqByCvgClassValidationRuleRHCXI = Class.define({
    ruleName: function(args) {
    return "PremReqByCvgClassValidationRuleRHCXI";
},
    shouldTest: function(args) {
    var proposal = args["proposal"];
    var coverage = args["coverage"];
    return true;
},
    scope: function(args) {
    var s = 0;
    //s = s + PublicConstants.TARGET_SCOPE.PROPOSAL;
    //s = s + PublicConstants.TARGET_SCOPE.BASE_COVERAGE;
    s = s + PublicConstants.TARGET_SCOPE.RIDER_COVERAGE;
    return s;
},
    validate: function(args) {
    var coverage = args["coverage"];
    var productId = _PV( coverage, 'product.productKey.primaryProduct.productPK.productId' );
    var riderInsuredId = coverage.parties.party.insuredId;
    //e.g. return { code: "ERR00010", arguments: variables };
    //e.g. variables[PublicConstants.MESSAGE_FIELD.CURRENCY] = coverage.currency.currencyPK.currencyId;
    //if no error, just return
    
    var premium = this.self.getBasePremium(args);
    _DB("base premium: ", premium, "PremReqByCvgClassValidationRuleRHCXI");
    var coverageClass = _PV(coverage, 'otherOptions.coverageClass');
    
    if (premium < 10000 && coverageClass != SchemaConstants.COVERAGE_CLASS.CLASS_A) {
        return {
            code: "ERR02007K",
            arguments: {
                '%PLAN_CODE%': productId,
                '%INSURE_NAME%': riderInsuredId
            }
        }
    }

    if ((premium >= 10000 && premium < 20000) && coverageClass == SchemaConstants.COVERAGE_CLASS.CLASS_D) {
        return {
            code: "ERR02007L",
            arguments: {
                '%PLAN_CODE%': productId,
                '%INSURE_NAME%': riderInsuredId
            }
        };
    }    
    
    return;
},
    getBasePremium: function(args) {
    var rider = args["coverage"];
    var proposal = rider.proposal;
    var coverage = proposal.coverageInfo;  // base coverage
    var catalog = coverage.catalog;
    var isUVL = catalog.call("isUVL");
    
    var freq = 1;   
    if (coverage.options.paymentMode == SchemaConstants.PAYMENT_MODE.ANNUAL) {
        freq = 1;
    }
    if (coverage.options.paymentMode == SchemaConstants.PAYMENT_MODE.SEMIANNUAL) {
        freq = 2;
    }
    if (coverage.options.paymentMode == SchemaConstants.PAYMENT_MODE.QUARTERLY) {
        freq = 4;
    }
    if (coverage.options.paymentMode == SchemaConstants.PAYMENT_MODE.MONTHLY) {
        freq = 12;
    }

    var totalPremium = 0;
    if (isUVL) {
        totalPremium = _V( coverage.plannedPremium, 0 );
    } else {
        //_SS( coverage._premiums, 10 );
        for (var totalPremiumsKey in coverage._premiums.totalPremiums) {
            var totalPremiumsRec = coverage._premiums.totalPremiums[totalPremiumsKey];
            if (totalPremiumsRec.paymentMode == coverage.options.paymentMode) {
                totalPremium = totalPremiumsRec.totalPremium;
                break;
            }
        }
    }
    var premium = totalPremium * freq;
    return premium;
}
});
var PrimaryIssueAgeValidationRuleEDUXX = Class.define({
    ruleName: function(args) {
    return "PrimaryIssueAgeValidationRuleEDUXX";
},
    shouldTest: function(args) {
    var proposal = args["proposal"];
    var coverage = args["coverage"];
    return true;
},
    scope: function(args) {
    var s = 0;
    s = s + PublicConstants.TARGET_SCOPE.BASE_COVERAGE;
    return s;
},
    validate: function(args) {
    var coverage = args["coverage"];
    var primaryIssue = getPrimaryInsured({ coverage: coverage });
    var catalog = coverage.catalog;
    var catalogObj = catalog.call('getCatalog');
    if (!Utils.isNothing(primaryIssue)) {
        var insuredAge = _V(primaryIssue.insuredAge);
        var insuredId = _V(primaryIssue.insuredId);
        var tentativeDOB = _V(primaryIssue.tentativeDOB_c);

        if (!Utils.isNothing(insuredAge) && isNaN(parseFloat(insuredAge)) && !isFinite(insuredAge)) {
            return {
                code: "ERR03002"
            };
        }
        var schema = coverage.schema.call('getSchema');
        var productId = _V(_PV(coverage, "product.productKey.primaryProduct.productPK.productId"), "");
        var minIssueAge = _V(_PV(schema, "ProductSchema.BasicParticular.IssueAge.Min"));
        var maxIssueAge = _V(_PV(schema, "ProductSchema.BasicParticular.IssueAge.Max"));
        var isBasePlan = catalog.call("isBasePlan");
        var productName;
        var language = coverage.proposal.language;
        if (isBasePlan) {
            var productNames = _V(_PV(catalogObj, "ProductCatalog.ProductName.Name"), "");            
            if (productNames.length) {
                for (var idx in productNames) {
                    var productNameObj = productNames[idx];
                    var productNameCode = _V(_PV(productNameObj, "code.text"), "");
                    if (productNameCode.toLowerCase() == language.toLowerCase()) {
                        productName = productNameObj.text;
                        break;
                    }
                }
            }
        }
        var variables = {
            '%PLAN_CODE%': productName || productId,
            '%INSURE_NAME%': insuredId,
            '%INSURE_AGE%': insuredAge,
            '%MIN_ISSUE_AGE%': minIssueAge,
            '%MAX_ISSUE_AGE%': maxIssueAge
        };
        var isChild = this.self.checkPrimaryIsChild({ mainIssue: primaryIssue });
        if (isChild && minIssueAge == 0) {
            var issueAge = IFunction.appliedTo(CalculateAgeEnoughOneMonth.create()).call("execute", { dateOfBirth: _V(primaryIssue.birthDate), policyYearDate: _V(coverage.proposal.policyYearDate) });
            if (issueAge.ageByDays < 1 || insuredAge > maxIssueAge) {
                if(maxIssueAge < 1){
                    if(language.toLowerCase() === 'vn' || language.toLowerCase() === 'vi'){
                        variables['%MAX_ISSUE_AGE%'] = maxIssueAge + " tuổi";
                    }
                    if(language.toLowerCase() === 'en'){
                        variables['%MAX_ISSUE_AGE%'] = maxIssueAge + " year";
                    }
                }
                if(maxIssueAge > 1){
                    if(language.toLowerCase() === 'vn' || language.toLowerCase() === 'vi'){
                        variables['%MAX_ISSUE_AGE%'] = maxIssueAge + " tuổi";
                    }
                    if(language.toLowerCase() === 'en'){
                        variables['%MAX_ISSUE_AGE%'] = maxIssueAge + " years";
                    }
                }
                return {
                    code: "ERR03053EDA2X",
                    arguments: variables
                };
            }
        }

        if (insuredAge < minIssueAge || insuredAge > maxIssueAge) {
            return {
                code: "ERR03053",
                arguments: variables
            };
        }
        // 9016: Tentative DOB should be in between 18 weeks to 36 weeks
        if (!isChild && !Utils.isNothing(tentativeDOB)) {
            var minTentativeDOB = this.self.getMinTentativeDOBWeeks();
            var maxTentativeDOB = this.self.getMaxTentativeDOBWeeks();
            tentativeDOB = IFunction.appliedTo(CalculateAgeEnoughOneMonth.create()).call("execute", { dateOfBirth: _V(coverage.proposal.policyYearDate), policyYearDate: _V(tentativeDOB) });

            if (tentativeDOB.ageByWeeks < 0 || tentativeDOB.ageByWeeks > (maxTentativeDOB - minTentativeDOB)) {
                return {
                    code: "ERR09016",
                    arguments: {
                        "%PLAN_CODE%": productName || productId,
                        "%INSURE_NAME%": insuredId,
                        "%MIN_UNBORN_AGE%": minTentativeDOB,
                        "%MAX_UNBORN_AGE%": maxTentativeDOB
                    }
                };
            }
        }
    }
},
    checkPrimaryIsChild: function(args) {
    var insured = args["mainIssue"];
    var check = false;
    if (insured.insuredAge < 18) {
      check = true;
    }
    return check;
},
    getInsured: function(args) {
    var coverage = args['coverage'];
    var type = args['type'];
    var party;
    var parties = _PV(coverage, "parties");
    if (parties) {
      for (var prop in parties) {
        var partyRec = parties[prop];
        if (partyRec.type == type) {
          party = partyRec;
          break;
        }
      }
    }
    return party;
},
    getMinTentativeDOBWeeks: function(args) {
    return 18;
},
    getMaxTentativeDOBWeeks: function(args) {
    return 39;
}
});
var ProductEffectiveDateValidationRuleLocal = Class.define({
    ruleName: function(args) {
    return "ProductEffectiveDateValidationRuleLocal";
},
    shouldTest: function(args) {
    var proposal = args["proposal"];
    var coverage = args["coverage"];
    return true;
},
    scope: function(args) {
    var s = 0;
    // s = s + PublicConstants.TARGET_SCOPE.PROPOSAL;
    s = s + PublicConstants.TARGET_SCOPE.BASE_COVERAGE;
    s = s + PublicConstants.TARGET_SCOPE.RIDER_COVERAGE;
    return s;
},
    validate: function(args) {
    var coverage = args["coverage"];
    var proposal = coverage.proposal;
    var valueDate = _PV(coverage, 'proposal.policyYearDate');
    var effectiveFromDate = _PV(catalog, 'ProductCatalog.CreateDate');
    var productId = coverage.product.productKey.primaryProduct.productPK.productId;
    var catalog = coverage.catalog;
    var catalogObj = catalog.call('getCatalog');
    var isBasePlan = catalog.call("isBasePlan");
    var productName;
    if(isBasePlan){
        var productNames = _V( _PV( catalogObj, "ProductCatalog.ProductName.Name" ), "");
        var language = proposal.language;
        if(productNames.length){
            for(var idx in productNames){
                var productNameObj = productNames[idx];
                var productNameCode = _V( _PV( productNameObj, "code.text" ), "");
                if(productNameCode.toLowerCase() == language.toLowerCase()){
                    productName = productNameObj.text;
                    break;
                }
            }
        }
    }
    _DB("valueDate", valueDate);
    _DB("effectiveFromDate", effectiveFromDate);

    if (valueDate < effectiveFromDate) {
        return {
            code: "ERR03101",
            arguments: {
                '%PLAN_CODE%': productName || productId,
                '%P1%': effectiveFromDate
            }
        };
    }
}
});
var ProjErrorColsValidationRuleUVL = Class.define({
    ruleName: function(args) {
    /*
    The class is designed to generalize a pattern to read the error founds in projection, 
    mainly focus on errorLow/Medium/High
    */
    return "ProjErrorColsValidationRuleUVL";
},
    shouldTest: function(args) {
    //var proposal = args["proposal"];
    //var coverage = args["coverage"];
    return true;
},
    scope: function(args) {
    var s = 0;
    s = s + PublicConstants.TARGET_SCOPE.BASE_COVERAGE;
    return s;
},
    validate: function(args) {
    //var proposal = args["proposal"];
    var coverage = args["coverage"];
    var context  = args["context"]
    var projectionResult = args["projectionResult"];
    var columns = projectionResult.columns;    

    var ageColumn;
    var yearColumn;
    var errorColumns = {};
    for (var i in columns) {
        var column = columns[i];
        if (column.Name == "columnYear") {
            yearColumn = column;
        }
        if (column.Name == "columnAge") {
            ageColumn = column;
        }
        if (column.Name == "colErrorLow") {
            errorColumns[PublicConstants.FUND_RETURN.LOW] = column;
        }        
        if (column.Name == "colErrorMedium") {
            errorColumns[PublicConstants.FUND_RETURN.MEDIUM] = column;
        }        
        if (column.Name == "colErrorHigh") {
            errorColumns[PublicConstants.FUND_RETURN.HIGH] = column;
        }        
    }
    
    var result;
    for (var vi in yearColumn.Values) {
        var year = yearColumn.Values[vi].value;
        var age = ageColumn.Values[vi].value;
        var errors = {};
        for(var rt in PublicConstants.FUND_RETURN) {
            errors[rt] = errorColumns[rt].Values[vi].value;
        }
        
        result = this.self.handleError({
            coverage: coverage,
            errors: errors,
            year: year,
            age: age,
            index: vi,
            columns: columns
        });
        
        if (!Utils.isNothing(result)) break;
    }
    return result;
},
    handleError: function(args) {
    var coverage = args['coverage'];        // base plan
    var errors = args['errors'];            // errors.low, errors.medium, errors.high
    var year = args['year'];                // year 
    var age = args['age'];
    var index = args['index'];              // index of row 
    var columns = args['columns'];          // columns from projection table

    var orderReturns = [ PublicConstants.FUND_RETURN.HIGH, PublicConstants.FUND_RETURN.MEDIUM, PublicConstants.FUND_RETURN.LOW  ];
    for(var fundIdx in orderReturns) {
        var errorIdx = orderReturns[fundIdx];
        var errorCodes = errors[errorIdx];  // errors at individual return rate
        if (this.self.matchError( { errorCodes: errorCodes } )) {
            return this.self.createErrorMessage( { 
                year: year, 
                age: age,
                returnType: errorIdx, 
                errors: errors,
                errorCodes: errorCodes,
                coverage: coverage, 
                index: index, 
                columns: columns } 
            );
        }
    }
    return;
},
    matchError: function(args) {
    var errorCodes = args['errorCodes'];        // xxxx,xxxx
    return false;
},
    createErrorMessage: function(args) {
    var coverage = args['coverage'];        // base plan
    var errors = args['errors'];            // errors.low, errors.medium, errors.high
    var year = args['year'];                // year 
    var age = args['age'];
    var index = args['index'];              // index of row 
    var columns = args['columns'];          // columns from projection table
    var returnType = args['returnType'];

    //if error,
    //e.g. return { code: "ERR00010", arguments: variables };
    //e.g. variables[PublicConstants.MESSAGE_FIELD.CURRENCY] = coverage.currency.currencyPK.currencyId;
    //if no error, just return
    
    return;
}
});
var RegularPaymentValidationRuleUL007 = Class.define({
    ruleName: function(args) {
    return "RegularPaymentValidationRuleUL007";
},
    shouldTest: function(args) {
    var proposal = args["proposal"];
    var coverage = args["coverage"];
    return true;
},
    scope: function(args) {
    var s = 0;
    //s = s + PublicConstants.TARGET_SCOPE.PROPOSAL;
    s = s + PublicConstants.TARGET_SCOPE.BASE_COVERAGE;
    //s = s + PublicConstants.TARGET_SCOPE.RIDER_COVERAGE;
    return s;
},
    validate: function(args) {
    //var proposal = args["proposal"];
    var coverage = args["coverage"];
    var currencyId = _PV( coverage, "currency.currencyPK.currencyId" );
    var mpre = this.self.getTotalPremium( args );
    //_DB("coverage", coverage, "RegularPaymentValidationRuleUL007");
    _DB("mpre", mpre, "RegularPaymentValidationRuleUL007->");
    _DB("coverage.regularPayment", coverage.regularPayment, "RegularPaymentValidationRuleUL007->");
    if (coverage.regularPayment < mpre) {
        var variables = {};
        variables['%PRODUCT_ID%'] = _PV( coverage, "product.productKey.associateProduct.productPK.productId" );
        variables['%MPRE%'] = IFunction.appliedTo(FormatCurrency.create()).call('execute', {amount:mpre, cur:currencyId});
        return {
            code: "ERR04950",
            arguments: variables
        }
    }
    return;
},
    getTotalPremium: function(args) {
    var coverage = args["coverage"];
    var totalPremium = 0;
    for (var totalPremiumsKey in coverage._premiums.totalPremiums) {
        var totalPremiumsRec = coverage._premiums.totalPremiums[totalPremiumsKey];
        if (totalPremiumsRec.paymentMode == coverage.options.paymentMode) {
            totalPremium += totalPremiumsRec.totalPremium;
        }
    }
    var riders = _V(_PV(coverage.proposal, "riders.coverageInfo"), []);
    //_SS(riders, 10);
    for (var i in riders) {
        var rider = riders[i];
        for (var riderPremiumsKey in rider._premiums.totalPremiums) {
            var riderPremiumsRec = rider._premiums.totalPremiums[riderPremiumsKey];
            //_SS(riderPremiumsRec, 10);
            if (riderPremiumsRec.paymentMode == coverage.options.paymentMode) {
                totalPremium += riderPremiumsRec.totalPremium;
            }
        }
    }
    return totalPremium;
}
});
var RW_ExceptionValidationRuleLocal = Class.define({
    ruleName: function(args) {
return 'ExceptionValidationRuleLocal';
},
    shouldTest: function(args) {
return true;
},
    scope: function(args) {
return PublicConstants.TARGET_SCOPE.PROPOSAL;
},
    validate: function(args) {
    var proposal = args["proposal"];

    var distributionChannelCode = _PV(proposal, ['DistributionChannelCode']);
    if (!distributionChannelCode) {
      return;
    }

    if (distributionChannelCode == "24" || distributionChannelCode == "30" || distributionChannelCode == "39") {
      if (proposal.riders && proposal.riders.coverageInfo && proposal.riders.coverageInfo.length === 0) {
        return {
          code: "ERR03102",
          arguments: []
        };
      }
    }

    var prodCodeList = "";
    var premPrd = 0;

    var hasWaiverOfCharge = false;
    var hasSupportPrem = false;

    var hasOldWaiver = false;
    var hasWaiver = false;
    var hasHealthCareRider = false;

    if (proposal.riders && proposal.riders.coverageInfo && proposal.riders.coverageInfo.length > 0) {
      for (var idx = 0; idx < proposal.riders.coverageInfo.length; idx++) {
        var coverageR = proposal.riders.coverageInfo[idx];
        var schemaR = coverageR.catalog.call("getSchema", null);

        var productCode = _PV( schemaR, ['ProductSchema', 'ProductSchemaPK', 'ProductShortCode'] );

        if (!productCode) {
          return;
        }

        if (productCode == "PSI" || productCode == "PSP") {
          if (premPrd > 0) {
            var premProduct = _PV( schemaR, ['ProductSchema', 'BasicParticular', 'PremiumPaidPeriod', 'MinPremiumPaidPeriod'] );
            if (!premProduct) {
              return;
            }
            if (premPrd !== premProduct) {
              return {
                code: "ERR03104",
                arguments: { '%P0%': prodCodeList + "/" + productCode }
              };
            }

          } else {
            prodCodeList = productCode;
            premPrd = r.Value.Plan.PremPrd;
          }

        }

        if (productCode == "WOP" || productCode == "WOD") {
          hasOldWaiver = true;
        }

        if (productCode == "WP2" || productCode == "PW2") {
          hasWaiver = true;
        }

        if (productCode == "WOC" || productCode == "PW0") {
          hasWaiverOfCharge = true;
        }

        if (productCode == "PSI" || productCode == "PSP") {
          hasSupportPrem = true;
        }

        if (productCode == "HCR" || productCode == "HCU") {
          hasHealthCareRider = true;
        }
      }
    }

    if (hasWaiverOfCharge && hasSupportPrem) {
      return {
        code: "ERR03103",
        arguments: []
      };
    }

    if (hasWaiverOfCharge && hasHealthCareRider) {
      return {
        code: "ERR02007B",
        arguments: []
      };
    }

    if (hasOldWaiver && hasWaiver) {
      return {
        code: "ERR02007C",
        arguments: []
      };
    }
}
});
var RW_PlanPackageValidationRuleENXXX = Class.define({
    ruleName: function(args) {
    return "PlanPackageValidationRuleENXXX";
},
    shouldTest: function(args) {
    return true;
},
    scope: function(args) {
    return PublicConstants.TARGET_SCOPE.PROPOSAL;
},
    validate: function(args) {
    var proposal = args["proposal"];
    var coverage = proposal.coverageInfo;

    var product = coverage.schema.call("getSchema", null);
    var productShortCode = _PV(product, ['ProductSchema', 'ProductSchemaPK', 'ProductShortCode']);
    if (!productShortCode && productShortCode != 'EN3') {
        return;
    }

    var listRider = Utils.iterator( _V( _PV( proposal, 'riders.coverageInfo'), []) );
    var listApplicableRider = ['WP2', 'PW2', 'WOP', 'WOD'];
    var found = false;
    for (var i in listRider) {
        var riderSchema = listRider[i].schema.call('getSchema', null);
        var riderShortCode = _PV(riderSchema, ['ProductSchema', 'ProductSchemaPK', 'ProductShortCode' ]);
        if (listApplicableRider.indexOf(riderShortCode) < 0) {
            found = true;
            break;
        }
    }

    if (!found) {
        return {
            code: 'ERR02007A',
            arguments: []
        }
    }
}
});
var SameAsInsuredValidationRuleLocal = Class.define({
    ruleName: function(args) {
return "SameAsInsuredValidationRuleLocal";
},
    shouldTest: function(args) {
return true;
},
    scope: function(args) {
return PublicConstants.TARGET_SCOPE.BASE_COVERAGE;
},
    validate: function(args) {
    var coverage = args["coverage"];
    var partyTable = Utils.iterator( _V( _PV( coverage, 'parties.party' ), [] ) );
    var owner = coverage.proposal.owner;
    var insuredIsOwner = owner.insuredIsOwner;
    if (insuredIsOwner) {
        var partyRec = getPrimaryInsured({coverage: coverage});
        var matched = true;
 
        _DB("owner.ownerAge", owner.ownerAge);
        _DB("owner.ownerDOB", owner.ownerDOB);
        _DB("owner.ownerSex", owner.ownerSex);
        _DB("owner.ownerId", owner.ownerId);

        _DB("partyRec.insuredAge", partyRec.insuredAge);
        _DB("partyRec.birthDate", partyRec.birthDate);
        _DB("partyRec.insuredSex", partyRec.insuredSex);
        _DB("partyRec.insuredId", partyRec.insuredId);

        matched = matched && (owner.ownerAge == partyRec.insuredAge);
        matched = matched && (owner.ownerDOB == partyRec.birthDate);
        matched = matched && (partyRec.insuredSex.startsWith(owner.ownerSex));
        matched = matched && (owner.ownerId == partyRec.insuredId);
        if (!matched) {                
            return {
                code: "ERR11005",
                arguments: {}
            };
        }
    }
}
});
var SameAsSecondInsuredValidationRuleLocal = Class.define({
    ruleName: function(args) {
    return "SameAsSecondInsuredValidationRuleLocal";
},
    shouldTest: function(args) {
    var proposal = args["proposal"];
    var coverage = args["coverage"];
    return true;
},
    scope: function(args) {
    var s = 0;
    s = s + PublicConstants.TARGET_SCOPE.BASE_COVERAGE;
    return s;
},
    validate: function(args) {
    var coverage = args["coverage"];
    var owner = coverage.proposal.owner;
    var second = _V(_PV(coverage, 'parties.secondInsured'));

    if (!Utils.isNothing(second) && !Utils.isNothing(owner)) {
      var secondIsOwner = second.insuredIsOwner;
      if (secondIsOwner) {
        var matched = true;
        matched = matched && (owner.ownerAge == second.insuredAge);
        matched = matched && (owner.ownerDOB == second.birthDate);
        matched = matched && (second.insuredSex.startsWith(owner.ownerSex));
        matched = matched && (owner.ownerId == second.insuredId);
        if (!matched) {
          return {
            code: "ERR11006",
            arguments: {}
          };
        }
      }
    }
}
});
var TAKEOUT_MissingPayorAgeValidationRuleLocal = Class.define({
    ruleName: function(args) {
    return "MissingPayorAgeValidationRuleLocal";
},
    shouldTest: function(args) {
    return true;
},
    scope: function(args) {
    return PublicConstants.TARGET_SCOPE.BASE_COVERAGE | PublicConstants.TARGET_SCOPE.RIDER_COVERAGE;
},
    validate: function(args) {
   var coverage = args["coverage"];
    var catalog = coverage.catalog.call("getCatalog", null);
    if (Utils.matchInList(CatalogConstants.PRODUCT_TYPE.PAYORBENEFIT, catalog.ProductCatalog.ProductType.ProductTypeCode, false)) {
      if (!this.isNothingByPath(['parties', 'party'], coverage)) {
        var partyTable = Utils.iterator(coverage.parties.party);
        for (partyi in partyTable) {
          var partyRec = partyTable[partyi];
          if (this.isNullOrWhiteSpaceByPath(['insuredAge'], partyRec)) {
            return {
              code: "ERR11051",
              arguments: []
            };
          }
        }
      }
    }
}
});
var TAKEOUT_OwnerAgeValidationRuleLocal = Class.define({
    ruleName: function(args) {
    return "OwnerAgeValidationRuleLocal";
},
    shouldTest: function(args) {
    return true;
},
    scope: function(args) {
    return PublicConstants.TARGET_SCOPE.PROPOSAL;
},
    validate: function(args) {
    var proposal = args["proposal"];
    var coverage = proposal.coverageInfo;

    var catalog = coverage.catalog.call("getCatalog", null);
    var planCode = Utils.matchInList(
      CatalogConstants.PRODUCT_TYPE.BASEPLAN,
      catalog.ProductCatalog.ProductType.ProductTypeCode,
      false
    );

    if (planCode && (planCode == "EDS01" || planCode == "EDS02" || planCode == "BES01" || planCode == "BES02")) {
      var minAge = 18;
      var maxAge = 50;
      if (!proposal.owner) {
        return;
      }
      if (proposal.owner.insuredIsOwner) {
        var ownerAge = proposal.owner.ownerAge;
        if (ownerAge < minAge || ownerAge > maxAge) {
          return {
            code: "ERR03071",
            arguments: { '%P0%': planCode, '%P1%': minAge, '%P2%': maxAge }
          };
        }
      }

    }
}
});
var TestCustomFunction = Class.define({
    ruleName: function(args) {
    return "TestCustomFunction";
},
    shouldTest: function(args) {
    var proposal = args["proposal"];
    //var coverage = args["coverage"];
    return (proposal.reference === "PROP-000000248");
},
    scope: function(args) {
    var s = 0;
    s = s + PublicConstants.TARGET_SCOPE.PROPOSAL;
    //s = s + PublicConstants.TARGET_SCOPE.BASE_COVERAGE;
    //s = s + PublicConstants.TARGET_SCOPE.RIDER_COVERAGE;
    return s;
},
    validate: function(args) {
    var proposal = args["proposal"];
    //var coverage = args["coverage"];
    //if error,
    //e.g. return { code: "ERR00010", arguments: variables };
    //e.g. variables[PublicConstants.MESSAGE_FIELD.CURRENCY] = coverage.currency.currencyPK.currencyId;
    //if no error, just return
    
    // productId
    // channel
    // location
    // insuredAge
    // plannedPremium
    // paymentMode e.g. Annual, Semi-Annual, Quarterly, Monthly
    // extraRating e.g. { tempFlat: 0, flatExtra: 0 }
    
    //var plusFunction = IFunction.appliedTo(PlusFunction.create());
    //var c = plusFunction.call("execute", { a:1, b:2 });

    /* ------
    
    var farFunc = IFunction.appliedTo(CalculateFaceAmountRange.create());
    var params = {};
    params['productId'] = 'UL007';
    params['location'] = 'Vietnam';
    params['channel'] = 'Agency';
    params['insuredAge'] = 18;
    params['plannedPremium'] = 10000;
    params['paymentMode'] = 'Annual';
    params['extraRating'] = null;
    params['currencyId'] = 'VND';
    _DB("params", params, "TestCalculateFaceAmountRange->")
    var c = farFunc.call("execute", params);
    
    _DB("c (UL007)", c, "TestCustomFunction");

    params = {};
    params['productId'] = 'TRI07';
    params['associateProductId'] = 'UL007';
    params['location'] = 'Vietnam';
    params['channel'] = 'Agency';
    params['insuredAge'] = 18;
    params['paymentMode'] = 'Annual';
    params['currencyId'] = 'VND';
    params['bpFaceAmount'] = 1000000;
    _DB("params", params, "TestCalculateFaceAmountRange->")
    c = farFunc.call("execute", params);
    
    _DB("c (TRI07/UL007)", c, "TestCustomFunction");

    params = {};
    params['productId'] = 'TRI07';
    params['associateProductId'] = 'UL007';
    params['location'] = 'Vietnam';
    params['channel'] = 'Agency';
    params['insuredAge'] = 29;
    params['currencyId'] = 'VND';
    params['bpFaceAmount'] = 1000000;
    _DB("params", params, "TestCalculateFaceAmountRange->")
    c = farFunc.call("execute", params);
    
    _DB("c (TRI07/UL007) test2", c, "TestCustomFunction");

    //try {
    var pprFunc = IFunction.appliedTo(CalculatePlannedPremiumRangeUL007.create());

    ------ */


    /* -----
    var params = {};
    params['productId'] = 'UL007';
    params['location'] = 'Vietnam';
    params['channel'] = 'Agency';
    params['insuredAge'] = 18;
    params['faceAmount'] = c.value.minLimit;
    params['paymentMode'] = 'Annual';
    params['extraRating'] = null;
    params['currencyId'] = 'VND';
    _DB("params", params, "TestCalculatePlannedPremiumRangeUL007->")
    var d = pprFunc.call("execute", params);
    
    _DB("d min ", d, "TestCustomFunction");

    var params = {};
    params['productId'] = 'UL007';
    params['location'] = 'Vietnam';
    params['channel'] = 'Agency';
    params['insuredAge'] = 18;
    params['faceAmount'] = c.value.maxLimit;
    params['paymentMode'] = 'Annual';
    params['extraRating'] = null;
    params['currencyId'] = 'VND';
    _DB("params", params, "TestCalculatePlannedPremiumRangeUL007->")
    var d = pprFunc.call("execute", params);
    
    _DB("d max ", d, "TestCustomFunction");

    var params = {};
    params['productId'] = 'UL007';
    params['location'] = 'Vietnam';
    params['channel'] = 'Agency';
    params['insuredAge'] = 18;
    params['faceAmount'] = _R( ( c.value.maxLimit + c.value.minLimit) / 2 , 0);
    params['paymentMode'] = 'Annual';
    params['extraRating'] = null;
    params['currencyId'] = 'VND';
    _DB("params", params, "TestCalculatePlannedPremiumRangeUL007->")
    var d = pprFunc.call("execute", params);
    
    _DB("d middle ", d, "TestCustomFunction");
    ----- */



    
    /* ------

    params = {};
    params['productId'] = 'UL007';
    params['location'] = 'Vietnam';
    params['channel'] = 'Agency';
    params['insuredAge'] = 29;
    params['faceAmount'] = 1000000;
    params['paymentMode'] = 'Semi-Annual';
    params['extraRating'] = null;
    params['currencyId'] = 'VND';
    _DB("params", params, "TestCalculatePlannedPremiumRangeUL007->")
    var d = pprFunc.call("execute", params);
    
    _DB("***** EEE ", d, "TestCustomFunction");
    
    ------ */

    var search = {
        proposal: { channel: 'Agency', policyYearDate: "20180725000000" },
        product: {
            productKey: {
                location: "Vietnam",
                primaryProduct: {
                    productPK: {
                        productId: "RUV02"
                    }
                },
                associateProduct: {
                    productPK: {
                        productId: "--"
                    }
                },
                basicProduct: {
                    productPK: {
                        productId: "--"
                    }
                }
            },
        }
    }

    /* sample to call catalog
    var cm = Repository.getManager(SystemComponents.MANAGER.CATALOG_HELPER);
    var catalog = cm.call("lookup", {productCode: "RUV02"});
    var schemaInfo = catalog.call("lookupSchema", {coverage: search});
    _DB("schemaInfo", schemaInfo, "@@@Testing@@@");
    ----- */
    
    var sm = Repository.getManager(SystemComponents.MANAGER.SCHEMA_HELPER);
    var schema = sm.call("lookup", {coverage: search});
    var schemaObj = schema.call("getSchema");
    _DB("schema", schemaObj, "@@@Testing2@@@");

    //} catch (e) {
    //    _DB("ex", e, "TestCustomFunction - part 2")
    //}
    return;
}
});
var ExcessiveWithdrawValidationRuleRUVXX = ProjErrorColsValidationRuleUVL.extend({
    ruleName: function(args) {
    return "ExcessiveWithdrawValidationRuleRUVXX";
},
    matchError: function(args) {
    var errorCodes = args['errorCodes'];        // xxxx,xxxx
    return (errorCodes.indexOf("ERR09012") >= 0);
},
    createErrorMessage: function(args) {
    var coverage = args['coverage'];        // base plan
    var errors = args['errors'];            // errors.low, errors.medium, errors.high
    var year = args['year'];                // year 
    var index = args['index'];              // index of row 
    var columns = args['columns'];          // columns from projection table
    var returnType = args['returnType'];    // LOW, MEDIMUM, HIGH
    var errorCodes = args['errorCodes'];

    //if error,
    //e.g. return { code: "ERR00010", arguments: variables };
    //e.g. variables[PublicConstants.MESSAGE_FIELD.CURRENCY] = coverage.currency.currencyPK.currencyId;
    //if no error, just return
    
    var maxWD;
    var colName;
    if (returnType == PublicConstants.FUND_RETURN.LOW) {
        colName = "colMaxWithdrawalLow";
    }
    if (returnType == PublicConstants.FUND_RETURN.MEDIUM) {
        colName = "colMaxWithdrawalMedium";
    }
    if (returnType == PublicConstants.FUND_RETURN.HIGH) {
        colName = "colMaxWithdrawalHigh";
    }
    var column;
    for(var coli in columns) {
        var col = columns[coli];
        if (col.Name == colName) {
            column = col;
            break;
        }
    }
    var variables = {};
    if (column) {
        variables['%YEAR%'] = "" + column.Values[index].year;
        //variables['%AGE%'] = "" + column.Values[index].age;
        //variables['%MAX_WD%'] = ""  + coverage.currency.currencyPK.currencyId + column.Values[index].value;
        //variables['%RETURN_TYPE%'] = "" + returnType;
    }
    if (errorCodes.indexOf("ERR09012B") >= 0) {
        return { code: "ERR09012B", arguments: variables };
    }
    return { code: "ERR09012", arguments: variables };
}
});
var ExcessiveWithdrawValidationRuleUVL_UL007 = ProjErrorColsValidationRuleUVL.extend({
    ruleName: function(args) {
    /*
    The class is designed to generalize a pattern to read the error founds in projection, 
    mainly focus on errorLow/Medium/High
    */
    return "ExcessiveWithdrawValidationRuleUVL_UL007";
},
    matchError: function(args) {
    var errorCodes = args['errorCodes'];        // xxxx,xxxx
    return (errorCodes.indexOf("ERR09008") >= 0);
},
    createErrorMessage: function(args) {
    var coverage = args['coverage'];        // base plan
    var errors = args['errors'];            // errors.low, errors.medium, errors.high
    var year = args['year'];                // year 
    var index = args['index'];              // index of row 
    var columns = args['columns'];          // columns from projection table
    var returnType = args['returnType'];    // LOW, MEDIMUM, HIGH
    var errorCodes = args['errorCodes'];

    //if error,
    //e.g. return { code: "ERR00010", arguments: variables };
    //e.g. variables[PublicConstants.MESSAGE_FIELD.CURRENCY] = coverage.currency.currencyPK.currencyId;
    //if no error, just return
    
    var maxWD;
    var colName;
    if (returnType == PublicConstants.FUND_RETURN.LOW) {
        colName = "colMaxWithdrawalLow";
    }
    if (returnType == PublicConstants.FUND_RETURN.MEDIUM) {
        colName = "colMaxWithdrawalMedium";
    }
    if (returnType == PublicConstants.FUND_RETURN.HIGH) {
        colName = "colMaxWithdrawalHigh";
    }
    var column;
    for(var coli in columns) {
        var col = columns[coli];
        if (col.Name == colName) {
            column = col;
            break;
        }
    }
    var variables = {};
    if (column) {
        variables['%YEAR%'] = "" + column.Values[index].year;
        variables['%AGE%'] = "" + column.Values[index].age;
        variables['%MAX_WD%'] = IFunction.appliedTo(FormatCurrency.create()).call('execute', {amount:_R2(column.Values[index].value), cur:coverage.currency.currencyPK.currencyId});
        variables['%RETURN_TYPE%'] = "" + returnType;
        variables['%ERRORS%'] = errors;
    }
    if (errorCodes.indexOf("ERR09008B") >= 0) {
        return { code: "ERR09008B", arguments: variables };
    }
    if (errorCodes.indexOf("ERR09008") >= 0) {
        return { code: "ERR09008", arguments: variables };
    }
}
});
var FaceAmountChangeValidationRuleUVL_UL007 = ProjErrorColsValidationRuleUVL.extend({
    ruleName: function(args) {
    /*
    The class is designed to generalize a pattern to read the error founds in projection, 
    mainly focus on errorLow/Medium/High
    */
    return "FaceAmountChangeValidationRuleUVL_UL007";
},
    matchError: function(args) {
    var errorCodes = args['errorCodes'];        // xxxx,xxxx
    return (errorCodes.indexOf("ERRC0221") >= 0 || errorCodes.indexOf("ERR03032F") >= 0);
},
    createErrorMessage: function(args) {
    var coverage = args['coverage'];        // base plan
    var errors = args['errors'];            // errors.low, errors.medium, errors.high
    var age = args['age'];                // year 
    var year = args['year'];                // year 
    var index = args['index'];              // index of row 
    var columns = args['columns'];          // columns from projection table
    var returnType = args['returnType'];    // LOW, MEDIMUM, HIGH
    var schema = coverage.schema.call('getSchema');
    var catalog = coverage.catalog;
    var catalogObj = catalog.call('getCatalog');
    var productName;
    var productNames = _V( _PV( catalogObj, "ProductCatalog.ProductName.Name" ), "");
    var language = coverage.proposal.language;
    if(productNames.length){
        for(var idx in productNames){
            var productNameObj = productNames[idx];
            var productNameCode = _V( _PV( productNameObj, "code.text" ), "");
            if(productNameCode.toLowerCase() == language.toLowerCase()){
                productName = productNameObj.text;
                break;
            }
        }
    }
    var variables = {};
    //Error: Face amount of plan %P0% in year %P1% is lower than minimum face amount %P2%
    variables['%PLAN_CODE%'] = productName || coverage.product.productKey.primaryProduct.productPK.productId;
    variables['%POLICY_YEAR%'] = "" + year;
    
    if(errors[PublicConstants.FUND_RETURN.LOW].indexOf("ERRC0221") >= 0 || errors[PublicConstants.FUND_RETURN.MEDIUM].indexOf("ERRC0221") >= 0 || errors[PublicConstants.FUND_RETURN.HIGH].indexOf("ERRC0221") >= 0){
        var fundChangeRec = getFundChangeRecord({
            fundChange: SchemaConstants.FUND_CHANGE_TYPE.FACEAMOUNT,
            coverage: coverage,
            duration: 0,
            schema: schema
        });
        variables['%MIN_FA_CHANGE%'] = IFunction.appliedTo(FormatCurrency.create()).call('execute', {amount:Number(_V( fundChangeRec.MinIncrease, 0)), cur:coverage.currency.currencyPK.currencyId});
        return { code: "ERRC0221", arguments: variables };
    }
    if(errors[PublicConstants.FUND_RETURN.LOW].indexOf("ERR03032F") >= 0 || errors[PublicConstants.FUND_RETURN.MEDIUM].indexOf("ERR03032F") >= 0 || errors[PublicConstants.FUND_RETURN.HIGH].indexOf("ERR03032F") >= 0){
        var insured = getPrimaryInsured( {coverage: coverage} );
        var minFAColumn;
        for (var i in columns) {
            var column = columns[i];
            if (column.Name == "colMinFaceAmount") {
                minFAColumn = column;
            }
        }
        
        variables['%INSURE_NAME%'] = insured.insuredId;
        variables["%MINIMUM_LIMIT%"] = IFunction.appliedTo(FormatCurrency.create()).call('execute', { amount: minFAColumn.Values[index].value });
        return { code: "ERR03032F", arguments: variables };
    }
}
});
var FaceAmountValidationRuleLocal = FaceAmountValidationRule.extend({
    ruleName: function(args) {
      return "FaceAmountValidationRuleLocal";
},
    validate: function(args) {
    var coverage = args["coverage"];
    var catalog = coverage.catalog.call('getCatalog');
    var productTypes = _PV(catalog, 'ProductCatalog.ProductType.ProductTypeCode');
    var catalogAlias = _V( _PV( catalog, "ProductCatalog.Alias" ) );
    var isBenefit = false;
    for (var i in productTypes) {
        var pt = _V(productTypes[i]);
        if (pt == 'Benefit') {
            isBenefit = true;
            break;
        }
    }
    
    if (!isBenefit) {
        if (_V(coverage.faceAmount, 0) <= 0) {
            //Error: Sum insured is not yet inputted (%PRODUCT_ID%)
            var variables = {};
            variables["%PRODUCT_ID%"] = _PV(coverage, "product.productKey.primaryProduct.productPK.productId");
            return {
                code: "ERR03005",
                arguments: variables
            };
        }
    }
    this.parent.validate(args);
}
});
var FaceAmountValidationRuleUL007 = FaceAmountValidationRule.extend({
    ruleName: function(args) {
    return "FaceAmountValidationRuleUL007";
},
    shouldTest: function(args) {
    return true;
},
    validate: function(args) {
    var coverage = args['coverage'];
    var faceAmount = coverage.faceAmount;
    var factors = this.self.getMultiplier(args);
    if (factors.min == 0 && factors.max == 0) {
        _DB("", "Multiplier cannot be located. The limit of multiplier is skipped.", "");
    } else {
        var limitAmounts = this.self.getMultiplierLimits(args);
        var plannedPremium = _V(coverage.plannedPremium, 0);

        if (_V(coverage.faceAmount, 0) <= 0) {
            var variables = {};
            variables["%PRODUCT_ID%"] = _PV(coverage, "product.productKey.primaryProduct.productPK.productId");
            return {
                code: "ERR45022",
                arguments: variables
            };
        }

        if (plannedPremium > 0) {
            _DB("faceAmount", faceAmount, "FaceAmountValidationRuleUL007->");
            _DB("limitAmounts", limitAmounts, "FaceAmountValidationRuleUL007->");
            if (faceAmount < _R2(limitAmounts.minLimit) || faceAmount > _R2(limitAmounts.maxLimit)) {
                var variables = {};
                variables['%POLICY_YEAR%'] = "1";
                variables['%MIN_MULTIPIER%'] = IFunction.appliedTo(FormatNumber.create()).call('execute', {n:factors.min});
                variables['%MAX_MULTIPIER%'] = IFunction.appliedTo(FormatNumber.create()).call('execute', {n:factors.max});
                return {
                    code: 'ERR03081',
                    arguments: variables
                }
            }
        } else {
            _DB("", "planned premium is zero. multiplier check will be skipped", "");
        }
    }
    return this.parent.validate(args);
},
    getMultiplier: function(args) {
    var coverage = args['coverage'];
    var insured = getPrimaryInsured({ coverage: coverage });

    _DB("insured", insured);
    if (Utils.isNothing(insured)) {
        return { };
    }

    var insuredAge = insured.insuredAge;
    var schema = coverage.schema.call("getSchema", null);
    var multiplierTable = Utils.iterator(schema.ProductSchema.FaceAmountMultiplier.MultiplierRecord);

    //_SS(multiplierTable, 10);

    var result;
    for (var i in multiplierTable) {
        var multiplier = multiplierTable[i];
        if (!Utils.isNothing(multiplier)) {
            var minAge = _V(multiplier.MinIssueAge);
            var maxAge = _V(multiplier.MaxIssueAge);
            var minFAMultiplier = _V(multiplier.MinFAMultiplier, 0);
            var maxFAMultiplier = _V(multiplier.MaxFAMultiplier, 0);

            _DB("minAge[" + i + "]", minAge);
            _DB("maxAge[" + i + "]", maxAge);
            _DB("minFAMultiplier[" + i + "]", minFAMultiplier);
            _DB("maxFAMultiplier[" + i + "]", maxFAMultiplier);

            if (minAge <= insuredAge && insuredAge <= maxAge) {
                _DB("","Multiplier is matched");
               result = { min: minFAMultiplier, max: maxFAMultiplier};
                break;
            }
        }
    }
    if (Utils.isNothing(result)) {
        _DB("", "@@@@@ Multiplier cannot be found");
        return {min: 0, max: 0};
    }
    return result;
},
    getMultiplierLimits: function(args) {
  var coverage = args['coverage'];
  var insured = getPrimaryInsured({
    coverage: coverage
  });

  _DB("insured", insured);
  if (Utils.isNothing(insured)) {
    return {};
  }

  var plannedPremium = this.self.getTotalPremium(args);
  _DB("plannedPremium", plannedPremium);

  var multipliers = this.self.getMultiplier(args);
  var minFactor = (1000 / multipliers.max) + (coverage.extraRating.tempFlat + coverage.extraRating.flatExtra) / 0.4;
  var maxFactor = (1000 / multipliers.min) + (coverage.extraRating.tempFlat + coverage.extraRating.flatExtra) / 0.4;

  var minFA = plannedPremium / maxFactor * 1000;
  var maxFA = plannedPremium / minFactor * 1000;

  _DB("Min multiplier limit", minFA);
  _DB("Max multiplier limit", maxFA);
  
  return {
    minLimit: minFA,
    maxLimit: maxFA
  };
},
    getTotalPremium: function(args) {
    var coverage = args["coverage"];
    var pp = _V(coverage.plannedPremium, 0);
    var ppfreq = 1;
    if (!(Utils.isNothing(coverage.options)) && !(Utils.isNothing(coverage.options.paymentMode))) {
        if (coverage.options.paymentMode == SchemaConstants.PAYMENT_MODE.ANNUAL) {
            ppfreq = 1;
        } else if (coverage.options.paymentMode == SchemaConstants.PAYMENT_MODE.SEMIANNUAL) {
            ppfreq = 2;
        } else if (coverage.options.paymentMode == SchemaConstants.PAYMENT_MODE.QUARTERLY) {
            ppfreq = 4;
        } else if (coverage.options.paymentMode == SchemaConstants.PAYMENT_MODE.MONTHLY) {
            ppfreq = 12;
        }
    }
    return (ppfreq * pp);
}
});
var FundActivitiesValidationRuleRUVXX = FundActivityValidationRule.extend({
    ruleName: function(args) {
    return "FundActivitiesValidationRuleRUVXX";
},
    validate: function(args) {
  var coverage = args['coverage'];
  var proposal = coverage.proposal;
  var context = args["context"];
  var schema = coverage.schema.call("getSchema");
  var insured = getPrimaryInsured({
    coverage: coverage
  });
  var fundActivities = _V(_PV(proposal, 'fundActivities.fundActivity'), []);
  var basePlanId = _PV(coverage, 'product.productKey.primaryProduct.productPK.productId');
  var currencyId = _PV(coverage, "currency.currencyPK.currencyId");
  var dbLevel = _PV(coverage, ['options', 'dbLevel']);
  var debug = args['debug'];
  var catalog = coverage.catalog;
  var catalogObj = catalog.call('getCatalog');
  var productName;
  var productNames = _V( _PV( catalogObj, "ProductCatalog.ProductName.Name" ), "");
  var language = proposal.language;
  if(productNames.length){
    for(var idx in productNames){
      var productNameObj = productNames[idx];
      var productNameCode = _V( _PV( productNameObj, "code.text" ), "");
      if(productNameCode.toLowerCase() == language.toLowerCase()){
        productName = productNameObj.text;
        break;
      }
    }
  }
  if (Utils.isNothing(insured)) {
    console.log("No primary insured is setup. The rule is skipped.");
    return;
  }
  var insuredAge = Number(_V(insured.insuredAge, 0));

  _DB("basePlanId", basePlanId);
  _DB("insuredAge", insuredAge);
  var maxIssueAge = this.self.getMaxInsuredAgeCanIncreaseFA({
    proposal: proposal
  });
  var plannedPremium = this.self.getTotalPremium(args);
  var regularPayment = coverage.regularPayment;
  var faceAmount = Number(_V(coverage.faceAmount, 0), 0);
  var ppp = coverage.schema.call("calculatePremiumPayingPeriod", {
    coverage: coverage,
    issueAge: insured.issueAge
  });
  var paymentMode = coverage.options.paymentMode;
  var ppfreq = 1;
  if (!(Utils.isNothing(coverage.options)) && !(Utils.isNothing(coverage.options.paymentMode))) {
    if (paymentMode == SchemaConstants.PAYMENT_MODE.ANNUAL) {
      ppfreq = 1;
    } else if (paymentMode == SchemaConstants.PAYMENT_MODE.SEMIANNUAL) {
      ppfreq = 2;
    } else if (paymentMode == SchemaConstants.PAYMENT_MODE.QUARTERLY) {
      ppfreq = 4;
    } else if (paymentMode == SchemaConstants.PAYMENT_MODE.MONTHLY) {
      ppfreq = 12;
    }
  }

  // should be obtained from schema
  var result = this.parent.validate(args);
  if (!Utils.isNothing(result)) {
    _DB("result (parent)", result);
    if (result.code != "ERRC0137" && result.code != "ERRC0221" && result.code != "ERRC0146" && result.code != "ERRC0217") {
      //Format number
      var variables = result.arguments;
      variables["%PRODUCT_ID%"] = productName || variables["%PRODUCT_ID%"];
      variables["%MAXIMUM_LIMIT%"] = IFunction.appliedTo(FormatCurrency.create()).call('execute', { amount: variables["%MAXIMUM_LIMIT%"] });
      variables["%MINIMUM_LIMIT%"] = IFunction.appliedTo(FormatNumber.create()).call('execute', { n: variables["%MINIMUM_LIMIT%"] });
      //variables["%MINIMUM_LIMIT%"] = IFunction.appliedTo(FormatCurrency.create()).call('execute', { amount: variables["%MINIMUM_LIMIT%"] });
      variables["%MIN_FA_CHANGE%"] = IFunction.appliedTo(FormatCurrency.create()).call('execute', { amount: variables["%MIN_FA_CHANGE%"] });
      variables["%MAX_FA_CHANGE%"] = IFunction.appliedTo(FormatCurrency.create()).call('execute', { amount: variables["%MAX_FA_CHANGE%"] });
      return result;
    }
  }
  for (var idx in fundActivities) {
      var fundActivity = fundActivities[idx];
      if (Utils.isNothing(fundActivity.attainAge)) {
        //Error: The attain age is missing in fund activity.
        return {
          code: "ERR00217",
          arguments: {}
        };
      }
      //rule 03021: Top-up amount must be greate than the minimum top-up
      var policyYear = Number(fundActivity.attainAge) - insuredAge + 1;
      //Check if faceAmount equals 0
      var minFA = 0;
      var maxFA = 99999999999;
      var faLimits = this.self.getFaceAmountLimits({
        coverage: coverage
      });
      minFA = faLimits.minLimit;
      maxFA = faLimits.maxLimit;
      if(!Utils.isNothing(fundActivity.faceAmount)){
        var variables = {};
        variables["%POLICY_YEAR%"] = "" + policyYear;
        variables["%INSURE_NAME%"] = insured.insuredId;
        variables["%PLAN_CODE%"] = productName || basePlanId;
        if(fundActivity.faceAmount < minFA){
            variables["%MINIMUM_LIMIT%"] = IFunction.appliedTo(FormatCurrency.create()).call('execute', { amount: minFA });
            return {
                code: 'ERR03032F',
                arguments: variables
            };
        }
        if(fundActivity.faceAmount > maxFA){
            variables["%MAXIMUM_LIMIT%"] = IFunction.appliedTo(FormatCurrency.create()).call('execute', { amount: maxFA });
            return {
                code: 'ERR03033F',
                arguments: variables
            };
        }
      }
      var topUpAmount = 0;
      if (!Utils.isNothing(fundActivity.topupPremium)) {
          topUpAmount = fundActivity.topupPremium;
      }
      if (!Utils.isNothing(coverage.banding)) {
          if (!Utils.isNothing(coverage.banding.MinTopup)) {
              var minTopUp = parseInt(coverage.banding.MinTopup.text);
              var variables = {};
              variables["%MIN_TOPUP%"] = IFunction.appliedTo(FormatCurrency.create()).call('execute', {amount:minTopUp, cur:currencyId});
              variables["%POLICY_YEAR%"] = "" + policyYear;
              if (topUpAmount > 0 && topUpAmount < minTopUp) {
                  return {
                      code: 'ERR03021',
                      arguments: variables
                  };
              }
          }
      }

      var totalPremium = plannedPremium * ppfreq;
      var maxTopUp = _R(totalPremium * 10, 0);
      if (!Utils.isNothing(topUpAmount) && topUpAmount > maxTopUp) {
          var variables = {};
          variables["%TOTAL_PREMIUM%"] = IFunction.appliedTo(FormatCurrency.create()).call('execute', {amount:_R(totalPremium, 0), cur:currencyId});
          variables["%POLICY_YEAR%"] = "" + policyYear;
          return {
              code: 'ERR03065',
              arguments: variables
          };
      }
      
      if(fundActivity.topupWithdrawal) {
        var duration = (fundActivity.attainAge) - insuredAge;
        var limits = this.parent.getWithdrawalLimits({
            coverage: coverage,
            duration: duration
        });
        var minWd = limits.minLimit;
        var topupWithdrawal = fundActivity.topupWithdrawal;
        if(minWd > topupWithdrawal) {
            var variables = { "%INSURED%": insured, "%PRODUCT_ID%": basePlanId };
            variables[PublicConstants.MESSAGE_FIELD.AGE] = fundActivity.attainAge;
            variables["%MINIMUM_LIMIT%"] = IFunction.appliedTo(FormatNumber.create()).call('execute', {n:minWd});
            variables["%POLICY_YEAR%"] = "" + (fundActivity.attainAge - insuredAge + 1);
            return {
                code: "ERRC0150",
                arguments: variables
            };
        }
    }
  }
  //var currentRegularPayment = coverage.regularPayment;
  //var currentAnnualPlannedPremium = annualPlannedPremium;
  var runningFaceAmount = _V(coverage.faceAmount, 0);
  var faceAmountChangedTime = 0;
  var multiplier = 0;
  var holidayPoint;
  var runningPlannedPremium = plannedPremium;
  for (var pyr = 1; pyr <= ppp; pyr++) {
    for (var idx in fundActivities) {
      var fundActivity = fundActivities[idx];
      //new rule for policyYear = attainAge - insuredAge + 1; in order to avoid "E03080 - Error: Can not witdrawal in year 0"
      var policyYear = Number(fundActivity.attainAge) - insuredAge + 1;

      if (policyYear == pyr) {
        var withdrawal = _V(fundActivity.withdrawal);
        regularPayment = _V(fundActivity.regularPayment, regularPayment);
        faceAmount = _V(fundActivity.faceAmount, faceAmount);
        runningPlannedPremium = _V(fundActivity.plannedPremium, runningPlannedPremium);
        _DB("fundActivity[" + policyYear + "].plannedPremium", plannedPremium);
        _DB("fundActivity[" + policyYear + "].regularPayment", regularPayment);
        _DB("fundActivity[" + policyYear + "].withdrawal", withdrawal);
        _DB("fundActivity[" + policyYear + "].faceAmount", faceAmount);
        if(runningPlannedPremium == 0){
            holidayPoint = pyr;
            if (!Utils.isNothing(fundActivity.topupPremium)) {
                if(fundActivity.topupPremium > 0){
                    return {
                        code: 'ERR09013',
                        arguments: {
                            '%POLICY_YEAR%': "" + policyYear
                        }
                    };
                }
            }
            if (!Utils.isNothing(fundActivity.faceAmount)) {
                if(fundActivity.faceAmount != runningFaceAmount){
                    return {
                        code: 'ERR09014',
                        arguments: {
                            '%POLICY_YEAR%': "" + policyYear
                        }
                    }
                }
            }
        }
        if(!Utils.isNothing(fundActivity.plannedPremium)){
            if(fundActivity.plannedPremium > 0){
                if(!Utils.isNothing(holidayPoint)){
                    if (!Utils.isNothing(fundActivity.topupPremium)) {
                        if(fundActivity.topupPremium > 0){
                            return {
                                code: 'ERR09013',
                                arguments: {
                                    '%POLICY_YEAR%': "" + policyYear
                                }
                            }
                        }
                    }
                    if (!Utils.isNothing(fundActivity.faceAmount)) {
                        if(fundActivity.faceAmount != runningFaceAmount){
                            return {
                                code: 'ERR09014',
                                arguments: {
                                    '%POLICY_YEAR%': "" + policyYear
                                }
                            }
                        }
                    }
                    holidayPoint = null;
                }
            }
        }
        if (!Utils.isNothing(fundActivity.withdrawal)) {
          if (withdrawal > 0 && policyYear == 1) {
            //Error: Can not witdrawal in year %P0%
            return {
              code: 'ERR03080',
              arguments: {
                '%P0%': "" + policyYear
              }
            };
          }
          if (withdrawal < 0) {
            //Error: Withdrwal in year %P0% cannot be less than zero.
            return {
              code: 'ERR00219',
              arguments: {
                '%P0%': "" + policyYear
              }
            };
          }
        }
        if (!Utils.isNothing(fundActivity.faceAmount)) {
          if (fundActivity.attainAge > maxIssueAge && fundActivity.faceAmount > runningFaceAmount) {
            var variables = {};
            variables["%PRODUCT_ID%"] = basePlanId;
            variables['%MAX_ISSUE_AGE%'] = "" + maxIssueAge;
            variables['%POLICY_YEAR%'] = "" + policyYear;
            return {
              code: "ERR09007",
              arguments: variables
            };
          }
          if (fundActivity.faceAmount != runningFaceAmount){
              faceAmountChangedTime += 1;
              if(faceAmountChangedTime > 1){
                  return {
                      code: "ERR09010",
                      arguments: {
                          "%POLICY_YEAR%": "" + policyYear
                      }
                  }; 
              }
          }
          runningFaceAmount = fundActivity.faceAmount;
        }
      }
    }
  }
},
    getTotalPremium: function(args) {
    var coverage = args['coverage'];
    var totalPremium = 0;
    for (var totalPremiumsKey in coverage._premiums.totalPremiums) {
        var totalPremiumsRec = coverage._premiums.totalPremiums[totalPremiumsKey];
        if (totalPremiumsRec.paymentMode == coverage.options.paymentMode) {
            totalPremium = totalPremiumsRec.totalPremium;
        }
    }
    return totalPremium;
},
    getMaxInsuredAgeCanIncreaseFA: function(args) {
    var productId = args['productId'] || "RUV02";
    var proposal = args['proposal'];
    var search = { 
        proposal: { 
            channel: proposal.channel, 
            policyYearDate: proposal.policyYearDate 
        }, 
        product: { 
            productKey: { 
                location: proposal.coverageInfo.product.productKey.location, 
                primaryProduct: { 
                    productPK: { 
                        productId: productId
                    } 
                }, 
                associateProduct: { 
                    productPK: { 
                        productId: proposal.coverageInfo.product.productKey.associateProduct.productPK.productId
                    } 
                }, 
                basicProduct: { 
                    productPK: { 
                        productId: proposal.coverageInfo.product.productKey.basicProduct.productPK.productId
                    } 
                } 
            }, 
        } 
    }; 
    var sm = Repository.getManager(SystemComponents.MANAGER.SCHEMA_HELPER); 
    var schema = sm.call("lookup", {coverage: search}); 
    var schemaObj = schema.call("getSchema"); 
    var maxIssueAge = Number(_V(_PV(schemaObj, "ProductSchema.BasicParticular.IssueAge.Max"), 100));
    return maxIssueAge;
}
});
var FundActivitiesValidationRuleUL007 = FundActivityValidationRule.extend({
    ruleName: function(args) {
    return "FundActivitiesValidationRuleUL007";
},
    validate: function(args) {
    var coverage = args['coverage'];
    var proposal = coverage.proposal;
    var context = args["context"];
    var schema = coverage.schema.call("getSchema");
    var insured = getPrimaryInsured({
        coverage: coverage
    });
    var fundActivities = _V(_PV(proposal, 'fundActivities.fundActivity'), []);
    var basePlanId = _PV(coverage, 'product.productKey.primaryProduct.productPK.productId');
    var catalog = coverage.catalog;
    var catalogObj = catalog.call('getCatalog');
    var productName;
    var productNames = _V( _PV( catalogObj, "ProductCatalog.ProductName.Name" ), "");
    var language = proposal.language;
    if(productNames.length){
        for(var idx in productNames){
            var productNameObj = productNames[idx];
            var productNameCode = _V( _PV( productNameObj, "code.text" ), "");
            if(productNameCode.toLowerCase() == language.toLowerCase()){
                productName = productNameObj.text;
                break;
            }
        }
    }
    var currencyId = _PV(coverage, "currency.currencyPK.currencyId");
    var dbLevel = _PV(coverage, ['options', 'dbLevel']);
    var debug = args['debug'];

    if (Utils.isNothing(insured)) {
        console.log("No primary insured is setup. The rule is skipped.");
        return;
    }
    var insuredAge = Number(_V(insured.insuredAge, 0));

    _DB("basePlanId", basePlanId);
    _DB("insuredAge", insuredAge);

    var maxIssueAge = Number(_V(_PV(schema, "ProductSchema.BasicParticular.IssueAge.Max"), 100));
    var multiplier = this.self.getMultiplier(args);
    var plannedPremium = coverage.plannedPremium;
    var regularPayment = coverage.regularPayment;
    var faceAmount = Number(_V(coverage.faceAmount, 0), 0);
    var accum3YearsPremium = 0;
    var total3YearsMpre = Number(this.self.getMPRE(args)) * 3;
    var ppp = coverage.schema.call("calculatePremiumPayingPeriod", {
        coverage: coverage,
        issueAge: insured.issueAge
    });
    var ppfreq = 1;
    if (!(Utils.isNothing(coverage.options)) && !(Utils.isNothing(coverage.options.paymentMode))) {
        if (coverage.options.paymentMode == SchemaConstants.PAYMENT_MODE.ANNUAL) {
            ppfreq = 1;
        } else if (coverage.options.paymentMode == SchemaConstants.PAYMENT_MODE.SEMIANNUAL) {
            ppfreq = 2;
        } else if (coverage.options.paymentMode == SchemaConstants.PAYMENT_MODE.QUARTERLY) {
            ppfreq = 4;
        } else if (coverage.options.paymentMode == SchemaConstants.PAYMENT_MODE.MONTHLY) {
            ppfreq = 12;
        }
    }

    var riders = Utils.iterator(proposal.riders.coverageInfo);
    var initialPremiums = Utils.iterator(coverage._premiums.premiums);

    var modalRegularPremium = 0;
    var annualRegularPremium = 0;
    var annualPlannedPremium = 0;
    for (var i in initialPremiums) {
        var prem = initialPremiums[i];

        if (prem.paymentMode === coverage.options.paymentMode) {
            modalRegularPremium += prem.premium;
        }
    }

    annualPlannedPremium = modalRegularPremium * ppfreq;

    for (var i in riders) {
        var rider = riders[i];
        var list_premiums = Utils.iterator(rider._premiums.premiums);

        for (var j in list_premiums) {
            var prem = list_premiums[j];

            if (prem.paymentMode === coverage.options.paymentMode) {
                modalRegularPremium += prem.premium;
            }
        }
    }

    annualRegularPremium = modalRegularPremium * ppfreq;

    _DB("", "", "");
    _DB("Factor @ Year 0", "", "@@@@@");
    var oldFaceAmount = faceAmount;
    var oldMultiplierPpLimits = this.self.getMultiplierPPLimits({
        args: args
    });
    var totalPremiumLimits = oldMultiplierPpLimits;
    var oldPlannedPremiumAnnual = plannedPremium * ppfreq;

    //Error: Multiplier year %POLICY_YEAR% out of range %MIN_MULTIPIER% and %MAX_MULTIPIER%
    if (oldPlannedPremiumAnnual < _R2(oldMultiplierPpLimits.minLimit) || _R2(oldMultiplierPpLimits.maxLimit) < oldPlannedPremiumAnnual) {
        var variables = {};
        variables["%PRODUCT_ID%"] = basePlanId;
        variables['%MIN_MULTIPIER%'] = IFunction.appliedTo(FormatNumber.create()).call('execute', { n: multiplier.min });
        variables['%MAX_MULTIPIER%'] = IFunction.appliedTo(FormatNumber.create()).call('execute', { n: multiplier.max });
        variables['%POLICY_YEAR%'] = IFunction.appliedTo(FormatNumber.create()).call('execute', { n: 1 });
        return {
            code: 'ERR03081',
            arguments: variables
        };
    }

    // should be obtained from schema
    _DB("", "", "");
    _DB("Basic Limit (Base Plan)", "", "@@@@@");
    var faceAmountLimits = this.self.getFaceAmountLimits({
        coverage: coverage
    });
    _DB("minFA", faceAmountLimits.minLimit, "FundActivitiesValidationRuleUL007->");
    _DB("maxFA", faceAmountLimits.maxLimit, "FundActivitiesValidationRuleUL007->");

    var lowerFALimit = faceAmountLimits.minLimit;
    var result = this.parent.validate(args);
    if (!Utils.isNothing(result)) {
        _DB("result (parent)", result);
        if (result.code == "ERRC0146") {
            var age = result.arguments["%AGE%"];
            var policyYear = Number(age) - insuredAge + 1;
            //Error: Face amount of plan %P0% in year %P1% is lower than minimum face amount %P2%
            result = {
                code: 'ERR03074',
                arguments: {
                    '%PLAN_CODE%': productName || basePlanId,
                    '%POLICY_YEAR%': "" + policyYear,
                    '%P2%': IFunction.appliedTo(FormatNumber.create()).call('execute', { n: lowerFALimit })
                }
            };
            _DB("result (override)", result);
        }
        if (result.code != "ERRC0137" && result.code != "ERRC0221") {
            //Format number
            var variables = result.arguments;
            variables["%PRODUCT_ID%"] = productName || variables["%PRODUCT_ID%"];
            variables["%MAXIMUM_LIMIT%"] = IFunction.appliedTo(FormatNumber.create()).call('execute', {n:variables["%MAXIMUM_LIMIT%"]});
            variables["%MINIMUM_LIMIT%"] = IFunction.appliedTo(FormatNumber.create()).call('execute', {n:variables["%MINIMUM_LIMIT%"]});
            variables["%MIN_FA_CHANGE%"] = IFunction.appliedTo(FormatNumber.create()).call('execute', {n:variables["%MIN_FA_CHANGE%"]});
            variables["%MAX_FA_CHANGE%"] = IFunction.appliedTo(FormatNumber.create()).call('execute', {n:variables["%MAX_FA_CHANGE%"]});
            return result;
        }
    }

    var faceAmountLimits = this.self.getFaceAmountLimits({
        coverage: proposal.coverageInfo,
        duration: 0
    });
    for (var idx in fundActivities) {
        var fundActivity = fundActivities[idx];
        if (Utils.isNothing(fundActivity.attainAge)) {
            //Error: The attain age is missing in fund activity.
            return {
                code: "ERR00217",
                arguments: {}
            };
        }
        //rule 03021: Top-up amount must be greate than the minimum top-up
        var topUpAmount = 0;
        var policyYear = Number(fundActivity.attainAge) - insuredAge + 1;
        if (!Utils.isNothing(fundActivity.topupPremium)) {
            topUpAmount = fundActivity.topupPremium;
        }
        if (!Utils.isNothing(coverage.banding)) {
            if (!Utils.isNothing(coverage.banding.MinTopup)) {
                var minTopUp = parseInt(coverage.banding.MinTopup.text);
                var variables = {};
                variables["%MIN_TOPUP%"] = IFunction.appliedTo(FormatCurrency.create()).call('execute', { amount: minTopUp, cur: currencyId });
                variables["%POLICY_YEAR%"] = "" + policyYear;
                if (topUpAmount > 0 && topUpAmount < minTopUp) {
                    return {
                        code: 'ERR03021',
                        arguments: variables
                    };
                }
            }
        }
    }
    //var flexiblePremiumDuration = _V(coverage.flexiblePremiumDuration, 0);
    var premDur = coverage.schema.call("calculatePremiumPayingPeriod", {
        coverage: coverage,
        issueAge: insuredAge
    });

    var premiumCalculator = Repository.getManager(SystemComponents.MANAGER.PREMIUM_CALCULATOR);
    var currentRegularPayment = coverage.regularPayment;
    var currentAnnualPlannedPremium = annualPlannedPremium;
    var runningFaceAmount = _V(coverage.faceAmount, 0);
    for (var pyr = 0; pyr < ppp; pyr++) {
        var riderPremiums = 0;
        var riderAnnualPremium = 0;
        for (var riderIdx in riders) {
            var covPremCalcHelper = IFunction.appliedTo(CalculateCoveragePremium.create());

            var riderPremium = covPremCalcHelper.call("execute", { coverage: riders[riderIdx], year: pyr, months: '', paymentMode: coverage.options.paymentMode, debug: false, context: riders[riderIdx] });
            riderPremiums += riderPremium.value;
        }

        riderAnnualPremium = riderPremiums * ppfreq;

        for (var idx in fundActivities) {
            var fundActivity = fundActivities[idx];
            //new rule for policyYear = attainAge - insuredAge + 1; in order to avoid "E03080 - Error: Can not witdrawal in year 0"
            var policyYear = Number(fundActivity.attainAge) - insuredAge + 1;
            if (policyYear == pyr) {
                var withdrawal = _V(fundActivity.withdrawal);
                regularPayment = _V(fundActivity.regularPayment, regularPayment);
                plannedPremium = _V(fundActivity.plannedPremium, plannedPremium);
                faceAmount = _V(fundActivity.faceAmount, faceAmount);
                var plannedPremiumAnnual = plannedPremium * ppfreq;

                // var multiplierFaLimits = this.self.getMultiplierFALimits({
                //     args: args,
                //     plannedPremium: plannedPremiumAnnual
                // });
                //var multiplierPpLimits = this.self.getMultiplierPPLimits({
                //    args: args,
                //    faceAmount: faceAmount
                //});

                _DB("fundActivity[" + policyYear + "].plannedPremium", plannedPremium);
                _DB("fundActivity[" + policyYear + "].regularPayment", regularPayment);
                _DB("fundActivity[" + policyYear + "].withdrawal", withdrawal);
                _DB("fundActivity[" + policyYear + "].faceAmount", faceAmount);
                // Checking Topup in holiday
                // ERR03070 - Error:
                var topupPremium = regularPayment - plannedPremium - riderPremiums;

                if (!Utils.isNothing(fundActivity.plannedPremium)) {
                    if (plannedPremium <= 0) {
                        //Error: Planned premium in year %P0% is less than zero.
                        return {
                            code: "ERR00218",
                            arguments: {
                                "%P0%": "" + policyYear,
                                "%MIN%": "" + 0
                            }
                        };
                    }
                    if (policyYear <= 3) {
                        var basePremium = _V(coverage.plannedPremium);
                        if (plannedPremium != basePremium) {
                            //ERR09003 - Error: Modal premium cannot be changed in the first 3 years
                            return {
                                code: "ERR09003",
                                arguments: {
                                    '%POLICY_YEAR%': policyYear
                                }
                            };
                        }
                    }
                }

                if (!Utils.isNothing(fundActivity.regularPayment)) {
                    if (policyYear <= 3) {
                        if (regularPayment <= 0) {
                            return {
                                code: "ERR03079",
                                arguments: {
                                    "%POLICY_YEAR%": "" + policyYear,
                                    "%MIN_PREMIUM%": IFunction.appliedTo(FormatNumber.create()).call('execute', { n: (plannedPremium + riderPremiums) }),
                                    "%PLANNED_PREMIUM%": IFunction.appliedTo(FormatNumber.create()).call('execute', { n: plannedPremium }),
                                    "%RIDER_PREMIUMS%": IFunction.appliedTo(FormatNumber.create()).call('execute', { n: riderPremiums })
                                }
                            }
                        }
                        if (regularPayment < (plannedPremium + riderPremiums)) {
                            //ERR03084 - Error: Plan premium year %P0% must be from %P1%
                            return {
                                code: "ERR09004",
                                arguments: {
                                    "%POLICY_YEAR%": "" + policyYear,
                                    "%MIN_PREMIUM%": IFunction.appliedTo(FormatNumber.create()).call('execute', { n: (plannedPremium + riderPremiums) }),
                                    "%PLANNED_PREMIUM%": IFunction.appliedTo(FormatNumber.create()).call('execute', { n: plannedPremium }),
                                    "%RIDER_PREMIUMS%": IFunction.appliedTo(FormatNumber.create()).call('execute', { n: riderPremiums })
                                }
                            };
                        }

                        if (policyYear == 1 && regularPayment < modalRegularPremium) {
                            //ERR03084 - Error: Plan premium year {0} must be from {1}
                            return {
                                code: "ERR03084",
                                arguments: {
                                    "%POLICY_YEAR%": "" + policyYear,
                                    "%P1%": IFunction.appliedTo(FormatNumber.create()).call('execute', { n: modalRegularPremium })
                                }
                            }
                        }
                    }
                    if (regularPayment > 0 && regularPayment < 300) {
                        //ERR03084 - Error: Plan premium year %P0% must be from %P1%
                        return {
                            code: "ERR03084",
                            arguments: {
                                "%POLICY_YEAR%": policyYear,
                                "%P1%": IFunction.appliedTo(FormatNumber.create()).call('execute', { n: 300 })
                            }
                        };
                    }
                }

                if (!Utils.isNothing(fundActivity.withdrawal)) {
                    if (withdrawal > 0 && policyYear == 1) {
                        //Error: Can not witdrawal in year %P0%
                        return {
                            code: 'ERR03080',
                            arguments: {
                                '%P0%': IFunction.appliedTo(FormatNumber.create()).call('execute', { n: policyYear })
                            }
                        };
                    }
                    if (withdrawal < 0) {
                        //Error: Withdrwal in year %P0% cannot be less than zero.
                        return {
                            code: 'ERR00219',
                            arguments: {
                                '%P0%': IFunction.appliedTo(FormatNumber.create()).call('execute', { n: policyYear })
                            }
                        };
                    } 
                }

                if (!Utils.isNothing(faceAmount)) {
                    //ERR03081 - Error: Multiplier year %POLICY_YEAR% out of range %MIN_MULTIPIER% and %MAX_MULTIPIER%
                    if (oldFaceAmount == faceAmount && plannedPremiumAnnual > 0) {
                        var faMultipler = faceAmount / plannedPremiumAnnual;
                        if (faMultipler < multiplier.min || faMultipler > multiplier.max) {
                            var variables = {};
                            variables["%PRODUCT_ID%"] = basePlanId;
                            variables['%MIN_MULTIPIER%'] = IFunction.appliedTo(FormatNumber.create()).call('execute', { n: multiplier.min });
                            variables['%MAX_MULTIPIER%'] = IFunction.appliedTo(FormatNumber.create()).call('execute', { n: multiplier.max });
                            variables['%POLICY_YEAR%'] = IFunction.appliedTo(FormatNumber.create()).call('execute', { n: pyr });
                            return {
                                code: 'ERR03081',
                                arguments: variables
                            }
                        }
                    }


                }

                if (!Utils.isNothing(fundActivity.faceAmount)) {
                    if (fundActivity.attainAge > maxIssueAge && fundActivity.faceAmount > runningFaceAmount) {
                        var variables = {};
                        variables["%PRODUCT_ID%"] = basePlanId;
                        variables['%POLICY_YEAR%'] = "" + policyYear;
                        variables['%MAX_ISSUE_AGE%'] = IFunction.appliedTo(FormatNumber.create()).call('execute', { n: maxIssueAge });
                        return {
                            code: "ERR09007",
                            arguments: variables
                        };
                    }

                    //ERR03082 - Error: Premium in year %PRODUCT_ID% must be from %MIN%-%MAX%
                    // var newMultiplier = this.self.getMultiplier({
                    //     args: args,
                    //     attainAge: fundActivity.attainAge
                    // });
                    // if (oldFaceAmount < faceAmount && plannedPremiumAnnual > 0) {
                    //     totalPremiumLimits.minLimit = _R(totalPremiumLimits.minLimit, 0);
                    //     totalPremiumLimits.maxLimit = _R(totalPremiumLimits.maxLimit, 0);
                    //     totalPremiumLimits.minLimit += _R((faceAmount - oldFaceAmount) / newMultiplier.max, 0);
                    //     totalPremiumLimits.maxLimit += _R((faceAmount - oldFaceAmount) / newMultiplier.min, 0);
                    //     var variables = {};
                    //     variables["%PRODUCT_ID%"] = basePlanId;
                    //     variables['%MIN%'] = "" + totalPremiumLimits.minLimit;
                    //     variables['%MAX%'] = "" + totalPremiumLimits.maxLimit;
                    //     variables['%POLICY_YEAR%'] = "" + pyr;
                    //     if (plannedPremiumAnnual < totalPremiumLimits.minLimit || plannedPremiumAnnual > totalPremiumLimits.maxLimit) {
                    //         return {
                    //             code: "ERR03082",
                    //             arguments: variables
                    //         };
                    //     }
                    // }

                    if (faceAmount > coverage.faceAmount) {
                        var deltaIncrease = faceAmount - coverage.faceAmount;
                        var args2 = Utils.extend(args, { insuredAge: Number(fundActivity.attainAge) });
                        var multiplierPpLimits = this.self.getMultiplierPPLimits({
                            args: args2,
                            faceAmount: deltaIncrease
                        });
                        args2['insuredAge'] = undefined;

                        var minPP = _R2(oldMultiplierPpLimits.minLimit + multiplierPpLimits.minLimit);
                        var maxPP = _R2(oldMultiplierPpLimits.maxLimit + multiplierPpLimits.maxLimit);

                        _DB("", "", "");
                        _DB("Planned premium limit @ Year " + pyr, "", "@@@@@");
                        _DB('minPP0', oldMultiplierPpLimits.minLimit, 'faceAmount increase->');
                        _DB('maxPP0', oldMultiplierPpLimits.maxLimit, 'faceAmount increase->');
                        _DB('minPPn', multiplierPpLimits.minLimit, 'faceAmount increase->');
                        _DB('maxPPn', multiplierPpLimits.maxLimit, 'faceAmount increase->');
                        _DB('minPP', minPP, 'faceAmount increase->');
                        _DB('maxPP', maxPP, 'faceAmount increase->');
                        _DB('plannedPremiumAnnual', plannedPremiumAnnual, 'faceAmount increase->');

                        if (plannedPremiumAnnual < minPP ||
                            plannedPremiumAnnual > maxPP) {

                            var variables = {};
                            variables["%PRODUCT_ID%"] = basePlanId;
                            variables['%MIN%'] = IFunction.appliedTo(FormatNumber.create()).call('execute', { n: minPP });
                            variables['%MAX%'] = IFunction.appliedTo(FormatNumber.create()).call('execute', { n: maxPP });
                            variables['%POLICY_YEAR%'] = IFunction.appliedTo(FormatNumber.create()).call('execute', { n: pyr });
                            return {
                                code: 'ERR03082',
                                arguments: variables
                            }
                        }
                    }

                    //ERR03083 - Error: Fa in year %POLICY_YEAR% must be from %MIN%-%MAX%
                    if (oldFaceAmount > faceAmount && plannedPremiumAnnual > 0) {
                        var multiplierFaLimits = this.self.getMultiplierFALimits({
                            args: args,
                            plannedPremium: plannedPremiumAnnual
                        });

                        _DB("", "", "");
                        _DB("Face amount limit @ Year " + pyr, "", "@@@@@");
                        _DB('minFA', multiplierFaLimits.minLimit, 'faceAmount decrease->');
                        _DB('maxFA', multiplierFaLimits.maxLimit, 'faceAmount decrease->');
                        _DB('faceAmount', faceAmount, 'faceAmount decrease->');
                        
                        if (faceAmount < _R2(multiplierFaLimits.minLimit) || faceAmount > _R2(multiplierFaLimits.maxLimit)) {
                            var variables = {};
                            variables["%PRODUCT_ID%"] = basePlanId;
                            variables['%MIN%'] = IFunction.appliedTo(FormatCurrency.create()).call('execute', { amount: Math.ceil(multiplierFaLimits.minLimit), cur: currencyId });
                            variables['%MAX%'] = IFunction.appliedTo(FormatCurrency.create()).call('execute', { amount: Math.floor(multiplierFaLimits.maxLimit), cur: currencyId });
                            variables['%POLICY_YEAR%'] = IFunction.appliedTo(FormatNumber.create()).call('execute', { n: pyr });
                            return {
                                code: 'ERR03083',
                                arguments: variables
                            }
                        }
                    }

                    // Plan premium year {0} must be from {1}
                    //if (faceAmount > coverage.faceAmount && regularPayment > 0) {
                    //    if (regularPayment < multiplierPpLimits.minLimit || regularPayment > multiplierPpLimits.maxLimit) {
                    //        var variables = {};
                    //        variables["%P0%"] = "" + pyr;
                    //        variables["%P1%"] = "" + currencyId + "" + Math.ceil(multiplierPpLimits.minLimit) + "-" + currencyId + "" + multiplierPpLimits.maxLimit;
                    //        return {
                    //            code: 'ERR03084',
                    //            arguments: variables
                    //        }
                    //    }
                    //}
                    
                    runningFaceAmount = fundActivity.faceAmount;
                }

                if (!Utils.isNothing(fundActivity.regularPayment)) {
                    currentRegularPayment = fundActivity.regularPayment * ppfreq;
                }

                if (!Utils.isNothing(fundActivity.plannedPremium)) {
                    currentAnnualPlannedPremium = fundActivity.plannedPremium * ppfreq;
                }
            }

            if (pyr < 3) {
                accum3YearsPremium = accum3YearsPremium + regularPayment;
                //ERR04949 - Error: Sum of payment for first 3 years cannot be less than the total premiums of base plan and riders of first 3 years.
                if (pyr == 2) {
                    if (accum3YearsPremium < total3YearsMpre) {
                        var variables = {};
                        variables['%PRODUCT_ID%'] = basePlanId;
                        variables["%MPRE_3YRS%"] = IFunction.appliedTo(FormatCurrency.create()).call('execute', { amount: total3YearsMpre, cur: currencyId });
                        variables["%ACCUM_PREM%"] = IFunction.appliedTo(FormatCurrency.create()).call('execute', { amount: accum3YearsPremium, cur: currencyId });
                        variables["%MIN_3YR_PREM%"] = IFunction.appliedTo(FormatCurrency.create()).call('execute', { amount: total3YearsMpre, cur: currencyId });
                        return {
                            code: "ERR04949",
                            arguments: variables
                        }
                    }
                }
            }
        }

        var condition = (annualRegularPremium * 5);
        var additionalPrem = currentRegularPayment - (currentAnnualPlannedPremium + riderAnnualPremium);

        if (additionalPrem > condition) {
            return {
                code: 'ERR09002', arguments: {
                    '%POLICY_YEAR%': '' + (pyr + 1),
                    '%P0%': IFunction.appliedTo(FormatNumber.create()).call('execute', { n: additionalPrem }),
                    '%P1%': IFunction.appliedTo(FormatNumber.create()).call('execute', { n: annualRegularPremium })
                }
            }
        }
    }
},
    getMultiplier: function(args) {
    var coverage = args['coverage'];
    var latestInsuredAge = args['insuredAge'];
    var insured = getPrimaryInsured({
        coverage: coverage
    });

    _DB("insured", insured);
    if (Utils.isNothing(insured)) {
        return {};
    }

    var insuredAge = insured.insuredAge;
    if (latestInsuredAge) {
        insuredAge = latestInsuredAge;
    }
    var schema = coverage.schema.call("getSchema", null);
    var multiplierTable = Utils.iterator(schema.ProductSchema.FaceAmountMultiplier.MultiplierRecord);

    //_SS(multiplierTable, 10);

    var result;
    for (var i in multiplierTable) {
        var multiplier = multiplierTable[i];
        if (!Utils.isNothing(multiplier)) {
            var minAge = _V(multiplier.MinIssueAge);
            var maxAge = _V(multiplier.MaxIssueAge);
            var minFAMultiplier = _V(multiplier.MinFAMultiplier, 0);
            var maxFAMultiplier = _V(multiplier.MaxFAMultiplier, 0);

            _DB("minAge[" + i + "]", minAge);
            _DB("maxAge[" + i + "]", maxAge);
            _DB("minFAMultiplier[" + i + "]", minFAMultiplier);
            _DB("maxFAMultiplier[" + i + "]", maxFAMultiplier);

            if (minAge <= insuredAge && insuredAge <= maxAge) {
                _DB("", "Multiplier is matched");
                result = {
                    min: minFAMultiplier,
                    max: maxFAMultiplier
                };
                break;
            }
        }
    }
    if (Utils.isNothing(result)) {
        _DB("", "@@@@@ Multiplier cannot be found");
        return {
            min: 0,
            max: 0
        };
    }
    return result;
},
    getMultiplierFALimits: function(args) {
  var vargs = args['args'];
  var latestPlannedPremium = args['plannedPremium'];
  
  var coverage = vargs['coverage'];
  var insured = getPrimaryInsured({
    coverage: coverage
  });

  _DB("insured", insured);
  if (Utils.isNothing(insured)) {
    return {};
  }

  var plannedPremium = _V(coverage.plannedPremium, 0);
  if (latestPlannedPremium) {
      plannedPremium = Number( latestPlannedPremium );
  }
  _DB("plannedPremium", plannedPremium);

  var multipliers = this.self.getMultiplier(vargs);
  if (multipliers.max == 0 && multipliers.min == 0) return { minLimit: 0, maxLimit: 9999999999 };

  var minFactor = (1000 / multipliers.max) + (coverage.extraRating.tempFlat + coverage.extraRating.flatExtra) / 0.4;
  var maxFactor = (1000 / multipliers.min) + (coverage.extraRating.tempFlat + coverage.extraRating.flatExtra) / 0.4;

  var minFA = plannedPremium / maxFactor * 1000;
  var maxFA = plannedPremium / minFactor * 1000;

  _DB("Min multiplier limit", minFA);
  _DB("Max multiplier limit", maxFA);
  
  return {
    minLimit: minFA,
    maxLimit: maxFA
  };
},
    getMultiplierPPLimits: function(args) {
  var vargs = args['args'];
  var latestFaceAmount = args['faceAmount'];
  
  var coverage = vargs['coverage'];
  var insured = getPrimaryInsured({
    coverage: coverage
  });

  _DB("insured", insured);
  if (Utils.isNothing(insured)) {
    return {};
  }

  var faceAmount = _V(coverage.faceAmount, 0);
  if (latestFaceAmount) {
      faceAmount = Number( latestFaceAmount );
  }
  _DB("faceAmount", faceAmount);

  var multipliers = this.self.getMultiplier(vargs);
  if (multipliers.max == 0 && multipliers.min == 0) return { minLimit: 0, maxLimit: 9999999999 };

  var minFactor = (1000 / multipliers.max) + (coverage.extraRating.tempFlat + coverage.extraRating.flatExtra) / 0.4;
  var maxFactor = (1000 / multipliers.min) + (coverage.extraRating.tempFlat + coverage.extraRating.flatExtra) / 0.4;

  var maxPP = faceAmount / 1000 * maxFactor;
  var minPP = faceAmount / 1000 * minFactor;

  _DB("Min multiplier PP", minPP);
  _DB("Max multiplier PP", maxPP);
  
  return {
    minLimit: minPP,
    maxLimit: maxPP
  };
},
    getMPRE: function(args) {
    var coverage = args["coverage"];
    var totalPremium = 0;
    for (var totalPremiumsKey in coverage._premiums.totalPremiums) {
        var totalPremiumsRec = coverage._premiums.totalPremiums[totalPremiumsKey];
        if (totalPremiumsRec.paymentMode == coverage.options.paymentMode) {
            totalPremium = totalPremiumsRec.totalPremium;
        }
    }
    return totalPremium;
}
});
var InsuredSexValidationRuleLocal = InsuredSexValidationRule.extend({
    ruleName: function(args) {

    return "InsuredSexValidationRuleLocal";
},
    validate: function(args) {
    var coverage = args["coverage"];
    var parties = Utils.iterator( _V( _PV(coverage, 'parties.party'), []) )    
    for (var partyi in parties) {
        var partyRec = parties[partyi];
        if (Utils.isNothing(partyRec.insuredSex) || partyRec.insuredSex == "") {
            return {
                code: "ERR00210",
                arguments: []
            };
        }
    }
    return this.parent.validate(args);
}
});
var InsuredSmokingStatusValidationRuleLocal = InsuredSmokingStatusValidationRule.extend({
    ruleName: function(args) {
return "InsuredSmokingStatusValidationRuleLocal";
},
    shouldTest: function(args) {
return this.parent.shouldTest(args);
},
    scope: function(args) {
return this.parent.scope(args);
},
    validate: function(args) {

var coverage = args["coverage"];
if (!(Utils.isNothing(coverage)) && !(Utils.isNothing(coverage.parties)) && !(Utils.isNothing(coverage.parties.party)) && !(Utils.isNothing(coverage.parties.party.smokingStatus))) {
    _DB(">>>>> coverge party information is inputted as usual.", "");
    return this.parent.validate(args);
} else {
    _DB(">>>>> information is missing.", "");
    return { code: "ERR00211", arguments: [] };
}
}
});
var IssueAgeValidationRuleLocal = IssueAgeValidationRule.extend({
    ruleName: function(args) {
return "IssueAgeValidationRuleLocal";
},
    shouldTest: function(args) {
return this.parent.shouldTest(args);
},
    scope: function(args) {
return this.parent.scope(args);
},
    validate: function(args) {
    var coverage = args["coverage"];
    var result = this.parent.validate(args);
    var schema = coverage.schema.call('getSchema');
    var catalog = coverage.catalog;
    var catalogObj = catalog.call('getCatalog');
    var productId = _V( _PV( coverage, "product.productKey.primaryProduct.productPK.productId" ), "");
    var isBasePlan = catalog.call("isBasePlan");
    var productName;
    if(isBasePlan){
        var productNames = _V( _PV( catalogObj, "ProductCatalog.ProductName.Name" ), "");
        var language = coverage.proposal.language;
        if(productNames.length){
            for(var idx in productNames){
                var productNameObj = productNames[idx];
                var productNameCode = _V( _PV( productNameObj, "code.text" ), "");
                if(productNameCode.toLowerCase() == language.toLowerCase()){
                    productName = productNameObj.text;
                    break;
                }
            }
        }
    }
    _DB("result", result, "IssueAgeValidationRuleLocal->");
    if (!Utils.isNothing(result)) {
        var minIssueAge = _V( _PV( schema, "ProductSchema.BasicParticular.IssueAge.Min" ) );
        var maxIssueAge = _V( _PV( schema, "ProductSchema.BasicParticular.IssueAge.Max" ) );
        result.arguments['%PRODUCT_ID%'] = productId;
        result.arguments['%MAX_ISSUE_AGE%'] = "" + maxIssueAge;
        result.arguments['%MIN_ISSUE_AGE%'] = "" + minIssueAge;
    }

    //var isNumber = function(n) {
    //    return !isNaN(parseFloat(n)) && isFinite(n)
    //}

    _DB("+++++", "Local checking is being performed", "IssueAgeValidationRuleLocal->");
    var parties = Utils.iterator( _V( _PV( coverage, 'parties.party' ), [] ) );
    _DB("parties", parties, "IssueAgeValidationRuleLocal->");
    var owner = coverage.proposal.owner;
    for(var i in parties ) {
        var party = parties[i];
        var insuredAge = _V(party.insuredAge);
        var insuredId = _V(party.insuredId, "");

        _DB("party", party, "IssueAgeValidationRuleLocal.parties(looping)->");
        
        var variables = {};
        variables["%INSURED_ID%"] = insuredId;
        if (Utils.isNothing(insuredAge)) {
            return {
                code: "ERR00212",
                arguments: variables
            }
        }
        
        /*
        var isNumber1 =  !isNaN(parseFloat(insuredAge));
        var isNumber2 =  isFinite(insuredAge);
        var isNumber3 = Number( "" + insuredAge ).valueOf();
        var isNumber4 = (isNumber3 == insuredAge);
 
        _DB("isNumber1", isNumber1);
        _DB("isNumber2", isNumber2);
        _DB("isNumber3", isNumber3);
        _DB("isNumber4", isNumber4);
        */

        if (!Utils.isNothing(insuredAge) && isNaN(parseFloat(insuredAge)) && !isFinite(insuredAge)) {
            return {
                code: "ERR03002",
                arguments: variables
            }
        }
        
        var minIssueAge = _V( _PV( schema, "ProductSchema.BasicParticular.IssueAge.Min" ) );
        var maxIssueAge = _V( _PV( schema, "ProductSchema.BasicParticular.IssueAge.Max" ) );

        if(insuredAge < minIssueAge || insuredAge > maxIssueAge){
            //Check if party is owner
            var isOwner = this.self.checkIfPartyIsOwner({
                party: party,
                owner: owner
            });
            if(!isOwner && minIssueAge == 0){
                minIssueAge = "1";
                return {
                    code: 'ERR03053CR',
                    arguments: {
                        '%PLAN_CODE%': productName || productId,
                        '%INSURE_NAME%': insuredId,
                        '%MIN_ISSUE_AGE%': minIssueAge,
                        '%MAX_ISSUE_AGE%': maxIssueAge
                    }
                }
            }
            return {
                code: 'ERR03053',
                arguments: {
                    '%PLAN_CODE%': productName || productId,
                    '%INSURE_NAME%': insuredId,
                    '%MIN_ISSUE_AGE%': minIssueAge,
                    '%MAX_ISSUE_AGE%': maxIssueAge
                }
            }
        }
    }
    return result;
},
    checkIfPartyIsOwner: function(args) {
    var party = args["party"];
    var owner = args["owner"];
    var matched = true;
    
    _DB("owner.ownerAge", owner.ownerAge);
    _DB("owner.ownerDOB", owner.ownerDOB);
    _DB("owner.ownerSex", owner.ownerSex);
    _DB("owner.ownerId", owner.ownerId);
    
    _DB("party.insuredAge", party.insuredAge);
    _DB("party.birthDate", party.birthDate);
    _DB("party.insuredSex", party.insuredSex);
    _DB("party.insuredId", party.insuredId);
    
    matched = matched && (owner.ownerAge == party.insuredAge);
    matched = matched && (owner.ownerDOB == party.birthDate);
    matched = matched && (party.insuredSex.startsWith(owner.ownerSex));
    matched = matched && (owner.ownerId == party.insuredId);
    return matched;
}
});
var IssueSecondAgeValidationRuleEDUXX = PrimaryIssueAgeValidationRuleEDUXX.extend({
    ruleName: function(args) {
    return "IssueSecondAgeValidationRuleEDUXX";
},
    shouldTest: function(args) {
    return this.parent.shouldTest(args);
},
    scope: function(args) {
    return this.parent.scope(args);
},
    validate: function(args) {
    var coverage = args["coverage"];
    var secondIssue = this.self.getSecondInsured({ coverage: coverage });
    var schema = coverage.schema.call("getSchema");
    var catalog = coverage.catalog;
    var catalogObj = catalog.call('getCatalog');
    if (!Utils.isNothing(secondIssue)) {
        var insuredAge = _V(secondIssue.insuredAge);
        var insuredId = _V(secondIssue.insuredId, "");
        var productId = _V(_PV(coverage, "product.productKey.primaryProduct.productPK.productId"), "");
        var isBasePlan = catalog.call("isBasePlan");
        var productName;
        if (isBasePlan) {
            var productNames = _V(_PV(catalogObj, "ProductCatalog.ProductName.Name"), "");
            var language = coverage.proposal.language;
            if (productNames.length) {
                for (var idx in productNames) {
                    var productNameObj = productNames[idx];
                    var productNameCode = _V(_PV(productNameObj, "code.text"), "");
                    if (productNameCode.toLowerCase() == language.toLowerCase()) {
                        productName = productNameObj.text;
                        break;
                    }
                }
            }
        }
        if (!Utils.isNothing(insuredAge) && isNaN(parseFloat(insuredAge)) && !isFinite(insuredAge)) {
            return {
                code: "ERR03002"
            };
        }
        var minSecondAge = this.self.getMinSecondInsuredAge({ secondInsured: secondIssue });
        var maxSecondAge = this.self.getMaxSecondInsuredAge({ coverage: coverage, schema: schema });

        var variables = {
            '%PLAN_CODE%': productName || productId,
            '%INSURE_NAME%': insuredId,
            '%INSURE_AGE%': insuredAge,
            '%MIN_ISSUE_AGE%': minSecondAge,
            '%MAX_ISSUE_AGE%': maxSecondAge
        };
        //9015: Second insured age + Policy term <= 70
        var policyTerm = Number(_V(schema.ProductSchema.BasicParticular.BenefitPeriod.MinBenefitPeriod.text));
        var sumTerm = _V(insuredAge + policyTerm);
        if (sumTerm > 70) {
            return {
                code: "ERR09015",
                arguments: variables
            };
        }
        // 3053
        if (insuredAge < minSecondAge || insuredAge > maxSecondAge) {
            
            return {
                code: "ERR03053",
                arguments: variables
            };
        }
    }
},
    getMinSecondInsuredAge: function(args) {
    var secondInsured = args["secondInsured"];
    if (secondInsured.insuredSex.indexOf("F") >= 0) {
      return 18;
    }
    return 20;
},
    getMaxSecondInsuredAge: function(args) {
    var coverage = args["coverage"];
    var schema = args["schema"];
    var maxSecondAge = args["maxSecondAge"] || 55;
    var policyTerm = Number(_V(_PV(schema, "ProductSchema.BasicParticular.BenefitPeriod.MinBenefitPeriod.text")));
    var maxAge = _V(Math.min(maxSecondAge, 70 - policyTerm));
    return maxAge;
},
    getSecondInsured: function(args) {
    var coverage = args['coverage'];
    var party = this.self.getInsured({ coverage: coverage, type: 'SECOND' });
    if (Utils.isNothing(party)) {
        var parties = _PV(coverage, "parties");
        if (parties) {
            for (var prop in parties) {
                if (prop == "secondInsured") {
                    var partyRec = parties[prop];
                    party = partyRec;
                    break;
                }
            }
        }
    }
    return party;
},
    getPolicyTermRange: function(args) {
    var child = args["mainIssueAge"];
    var minPT = _V(Math.max(10, 22 - child.insuredAge));
    var maxPT = _V(27 - child.insuredAge);
    var result = {
      minPT: minPT,
      maxPT: maxPT
    };
    return result;
}
});
var JuvenileRiderTypeValidationRuleLocal = JuvenileRiderTypeValidationRule.extend({
    ruleName: function(args) {
      return "JuvenileRiderTypeValidationRuleLocal";
},
    validate: function(args) {
    var result = this.parent.validate(args);
    if (result) {
        if (result.code == "ERRC0196") {
            result = undefined;
        }
    }
    return result;
}
});
var lapseValidationRuleHighLocal = lapseValidationRuleLocal.extend({
    ruleName: function(args) {
    return "lapseValidationRuleHighLocal";
},
    lapseColumnName: function(args) {
    return "Lapse (HIGH)";
},
    returnRate: function(args) {
    var fundRecord = args["proposal"].funds.fundRecord[0];
    return fundRecord.returnRateHigh;
}
});
var lapseValidationRuleLowLocal = lapseValidationRuleLocal.extend({
    ruleName: function(args) {
    return "lapseValidationRuleLowLocal";
},
    lapseColumnName: function(args) {
    return "Lapse (LOW)";
},
    returnRate: function(args) {
    var fundRecord = args["proposal"].funds.fundRecord[0];
    return fundRecord.returnRate;
}
});
var OccupationClassValidationRuleLocal = OccupationClassValidationRule.extend({
    ruleName: function(args) {
    return "OccupationClassValidationRuleLocal";
},
    validate: function(args) {
    var result = this.parent.validate(args);
    if (!Utils.isNothing(result)) {
        return result;
    }

    var coverage = args["coverage"];
    var productId = _PV(coverage, 'product.productKey.primaryProduct.productPK.productId');
    var insured = getPrimaryInsured( {coverage: coverage} );
    var insuredId = _V(insured.insuredId, "");
    var insuredAge = _V( insured.insuredAge, 0);
    var catalog = coverage.catalog;
    var catalogObj = catalog.call('getCatalog');
    var isBasePlan = catalog.call("isBasePlan");
    var productName;
    if(isBasePlan){
        var productNames = _V( _PV( catalogObj, "ProductCatalog.ProductName.Name" ), "");
        var language = coverage.proposal.language;
        if(productNames.length){
            for(var idx in productNames){
                var productNameObj = productNames[idx];
                var productNameCode = _V( _PV( productNameObj, "code.text" ), "");
                if(productNameCode.toLowerCase() == language.toLowerCase()){
                    productName = productNameObj.text;
                    break;
                }
            }
        }
    }
    if (!Utils.isNothing(coverage.occupation)) {
        if ((insuredAge < 18) && (coverage.occupation != SchemaConstants.OCCUPATION_CLASS.CLASS_2)) {
            var variables = {};
            variables['%INSURE_NAME%'] = insuredId;
            variables['%PLAN_CODE%'] = productName || productId;
            return {
                code: "ERR03064",
                arguments: variables
            }
        }
    }
}
});
var OneMonthYearOldValidationRuleEDUXXLocal = OneMonthYearOldValidationRuleLocal.extend({
    ruleName: function(args) {
    return "OneMonthYearOldValidationRuleEDUXXLocal";
},
    shouldTest: function(args) {
    return this.parent.shouldTest(args);
},
    scope: function(args) {
    var s = 0;
    s = s + PublicConstants.TARGET_SCOPE.RIDER_COVERAGE;
    return s;
},
    validate: function(args) {
    var result = this.parent.validate(args);
    if (!Utils.isNothing(result)) {
      return result;
    }
}
});
var OwnerIssueAgeValidationRuleEDUXX = IssueSecondAgeValidationRuleEDUXX.extend({
    ruleName: function(args) {
    return "OwnerIssueAgeValidationRuleEDUXX";
},
    shouldTest: function(args) {
    return this.parent.shouldTest(args);
},
    scope: function(args) {
    return this.parent.scope(args);
},
    validate: function(args) {
    var coverage = args["coverage"];
    var ownerIssue = _V(coverage.proposal.owner);
    var mainIssue = getPrimaryInsured({ coverage: coverage });
    var secondIssue = this.self.getSecondInsured({ coverage: coverage });
    var productId = _V(_PV(coverage, "product.productKey.primaryProduct.productPK.productId"));
    var catalog = coverage.catalog;
    var catalogObj = catalog.call('getCatalog');
    if (!Utils.isNothing(ownerIssue)) {
        var ownerAge = _V(ownerIssue.ownerAge);
        var ownerId = _V(ownerIssue.ownerId);
        var minOwnerAge = this.self.getMinOwnerAge();
        var maxOwnerAge = this.self.getMaxOwnerAge();
        var isOwnerIssue = this.self.checkIfPartyIsOwner({ party: mainIssue, owner: ownerIssue });
        var secondIsOwner = secondIssue ? this.self.checkIFSecondIsOwner({ owner: ownerIssue, second: secondIssue }) : false;

        if (!Utils.isNothing(ownerAge) && isNaN(parseFloat(ownerAge)) && !isFinite(ownerAge)) {
            return {
                code: "ERR03002"
            };
        }
        var isBasePlan = catalog.call("isBasePlan");
        var productName;
        if(isBasePlan){
            var productNames = _V( _PV( catalogObj, "ProductCatalog.ProductName.Name" ), "");
            var language = coverage.proposal.language;
            if(productNames.length){
                for(var idx in productNames){
                    var productNameObj = productNames[idx];
                    var productNameCode = _V( _PV( productNameObj, "code.text" ), "");
                    if(productNameCode.toLowerCase() == language.toLowerCase()){
                        productName = productNameObj.text;
                        break;
                    }
                }
            }
        }
        if (!secondIsOwner && !isOwnerIssue) {
            if (ownerAge < minOwnerAge || ownerAge > maxOwnerAge) {
                return {
                    code: "ERR03053",
                    arguments: {
                        '%PLAN_CODE%': productName || productId,
                        '%INSURE_NAME%': ownerId,
                        '%MIN_ISSUE_AGE%': minOwnerAge,
                        '%MAX_ISSUE_AGE%': maxOwnerAge
                    }
                };
            }
        }
    }
},
    checkIfPartyIsOwner: function(args) {
    var party = args["party"];
    var owner = args["owner"];
    var matched = true;

    matched = matched && (owner.ownerAge == party.insuredAge);
    matched = matched && (owner.ownerDOB == party.birthDate);
    matched = matched && (party.insuredSex.startsWith(owner.ownerSex));
    matched = matched && (owner.ownerId == party.insuredId);
    return matched;
},
    checkIFSecondIsOwner: function(args) {
    var owner = args["owner"];
    var second = args["second"];
    var matched = true;

    matched = matched && (owner.ownerAge == second.insuredAge);
    matched = matched && (owner.ownerDOB == second.birthDate);
    matched = matched && (second.insuredSex.startsWith(owner.ownerSex));
    matched = matched && (owner.ownerId == second.insuredId);
    return matched;
},
    getMinOwnerAge: function(args) {
    return 18;
},
    getMaxOwnerAge: function(args) {
    return 70;
}
});
var PaymentModeValidationRuleLocal = PaymentModeValidationRule.extend({
    ruleName: function(args) {
    return "PaymentModeValidationRuleLocal";
},
    validate: function(args) {
    var coverage = args['coverage'];
    if (!Utils.isNothing( _PV( coverage, 'options.paymentMode'))) {
        return this.parent.validate(args);
    } else {
        return {
            code: 'ERR00216',
            arguments: []
        };
    }
}
});
var PlanAvailabilityValidationRuleLocal = PlanAvailabilityValidationRule.extend({
    ruleName: function(args) {
    return "PlanAvailabilityValidationRuleLocal";
},
    validate: function(args) {
    var coverage = args['coverage'];
    var productId = _PV(coverage, "product.productKey.primaryProduct.productPK.productId");

    var result = this.parent.validate(args);
    if (result && result.code != "ERRC9002") {
        return result;
    }
    var catalog = coverage.catalog;
    var catalogObj = catalog.call('getCatalog');
    var isBasePlan = catalog.call("isBasePlan");
    var productName;
    if(isBasePlan){
        var productNames = _V( _PV( catalogObj, "ProductCatalog.ProductName.Name" ), "");
        var language = coverage.proposal.language;
        if(productNames.length){
            for(var idx in productNames){
                var productNameObj = productNames[idx];
                var productNameCode = _V( _PV( productNameObj, "code.text" ), "");
                if(productNameCode.toLowerCase() == language.toLowerCase()){
                    productName = productNameObj.text;
                    break;
                }
            }
        }
    }
    var insured = getPrimaryInsured({ coverage: coverage });
    var faFunc = IFunction.implementBy(CalculateFaceAmountRange.create());
    var range = faFunc.call("execute", {
        "productId": productId,
        "location": coverage.product.productKey.location,
        "channel": coverage.proposal.channel,
        "insuredAge": insured.insuredAge,
        "plannedPremium": _V(coverage.plannedPremium, 0),
        "paymentMode": coverage.options.paymentMode,
        "currencyId": coverage.currency.currencyPK.currencyId,
        "associateProductId": coverage.product.productKey.associateProduct.productPK.productId,
        "faceAmount": coverage.proposal.coverageInfo.faceAmount
    });

    _SS(range, 10);

    if (coverage.faceAmount < range.value.minLimit) {
        return {
            code: "ERR03032",
            arguments: {
                "%PLAN_CODE%": productName || productId,
                "%INSURE_NAME%": insured.insuredId,
                "%MINIMUM_FACE_AMOUNT%": IFunction.appliedTo(FormatCurrency.create()).call('execute', {amount: range.value.minLimit, cur: coverage.currency.currencyPK.currencyId})
            }
        };
    }
    if (coverage.faceAmount > range.value.maxLimit) {
        return {
            code: "ERR03033",
            arguments: {
                "%PLAN_CODE%": productName || productId,
                "%INSURE_NAME%": insured.insuredId,
                "%MAXIMUM_FACE_AMOUNT%": IFunction.appliedTo(FormatCurrency.create()).call('execute', {amount: range.value.maxLimit, cur: coverage.currency.currencyPK.currencyId})
            }
        };
    }
    // other errors
    return result;
}
});
var PremReqByCvgClassValidationRuleRHCXI2 = PremReqByCvgClassValidationRuleRHCXI.extend({
    ruleName: function(args) {
    return "PremReqByCvgClassValidationRuleRHCXI2";
},
    getBasePremium: function(args) {
    var rider = args["coverage"];
    var proposal = rider.proposal;
    var coverage = proposal.coverageInfo;  // base coverage
    var catalog = coverage.catalog;
    var catalogObj = catalog.call('getCatalog');
    if (_V( _PV( catalogObj, "ProductCatalog.Alias" ), '' ) != 'RUV' ) {
        return this.parent.getBasePremium(args);
    }

    var freq = 1;
    if (coverage.options.paymentMode == SchemaConstants.PAYMENT_MODE.ANNUAL) {
        freq = 1;
    }
    if (coverage.options.paymentMode == SchemaConstants.PAYMENT_MODE.SEMIANNUAL) {
        freq = 2;
    }
    if (coverage.options.paymentMode == SchemaConstants.PAYMENT_MODE.QUARTERLY) {
        freq = 4;
    }
    if (coverage.options.paymentMode == SchemaConstants.PAYMENT_MODE.MONTHLY) {
        freq = 12;
    }

    for (var totalPremiumsKey in coverage._premiums.totalPremiums) {
        var totalPremiumsRec = coverage._premiums.totalPremiums[totalPremiumsKey];
        if (totalPremiumsRec.paymentMode == coverage.options.paymentMode) {
            totalPremium = totalPremiumsRec.totalPremium;
            break;
        }
    }

    var premium = totalPremium * freq;
    return premium;
}
});
var TotalPremiumValidationRuleRUVXX = TotalPremiumValidationRule.extend({
    ruleName: function(args) {
    return "TotalPremiumValidationRuleRUVXX";
},
    validate: function(args) {
    var proposal = args["proposal"];
    var coverage = proposal.coverageInfo;
    var productId = _PV(coverage, 'product.productKey.primaryProduct.productPK.productId');
    var schema = coverage.schema.call("getSchema", null);
    var catalog = coverage.catalog.call("getCatalog", null);

    var constantPaymentMode = "";
    var minError = "";
    var maxError = "";
    var issueAge = 0;
    var maxPP = 0;
    var minPP = 0;
    var totalPremium = this.self.getTotalPremium(args);
    //Fix bug when front end's rounding  
    totalPremium = _R(totalPremium, 0);
    _DB("totalPremium", totalPremium, "TotalPremiumValidationRule->");

    var variables = {"%PRODUCT_ID%" : productId};
    variables[PublicConstants.MESSAGE_FIELD.TOTAL_AMOUNT] = IFunction.appliedTo(FormatCurrency.create()).call('execute', {amount:totalPremium, cur:coverage.currency.currencyPK.currencyId});

    if (!(Utils.isNothing(coverage.options)) && !(Utils.isNothing(coverage.options.paymentMode))) {
       if (coverage.options.paymentMode == SchemaConstants.PAYMENT_MODE.ANNUAL) {
          minError = "ERRC0158";
          maxError = "ERRC0159";
       } else if (coverage.options.paymentMode == SchemaConstants.PAYMENT_MODE.SEMIANNUAL) {
          minError = "ERRC0160";
          maxError = "ERRC0161";
       } else if (coverage.options.paymentMode == SchemaConstants.PAYMENT_MODE.QUARTERLY) {
          minError = "ERRC0162";
          maxError = "ERRC0163";
       } else if (coverage.options.paymentMode == SchemaConstants.PAYMENT_MODE.MONTHLY) {
          minError = "ERRC0164";
          maxError = "ERRC0165";
       }
    }

    var range = this.self.getPremiumRange({proposal: proposal});
    if (!Utils.isNothing(range)) {
        minPP = range.minLimit;
        maxPP = range.maxLimit;
    }
    _DB("minPP", minPP, "TotalPremiumValidationRule->");
    _DB("maxPP", maxPP, "TotalPremiumValidationRule->");


    if (totalPremium < minPP) {
       variables[PublicConstants.MESSAGE_FIELD.AMOUNT] = IFunction.appliedTo(FormatCurrency.create()).call('execute', {amount:minPP, cur:coverage.currency.currencyPK.currencyId});
       if (minError != "") {
          return {
             code: minError,
             arguments: variables
          };
       }
    }
    if (totalPremium > maxPP) {
       variables[PublicConstants.MESSAGE_FIELD.AMOUNT] = IFunction.appliedTo(FormatCurrency.create()).call('execute', {amount:maxPP, cur:coverage.currency.currencyPK.currencyId});
       if (maxError != "") {
          return {
             code: maxError,
             arguments: variables
          };
       }
    }
}
});
var TotalPremiumValidationRuleUL007 = TotalPremiumValidationRule.extend({
    ruleName: function(args) {
    return "TotalPremiumValidationRuleUL007";
},
    shouldTest: function(args) {
    return true;
},
    scope: function(args) {
    return PublicConstants.TARGET_SCOPE.PROPOSAL;
},
    validate: function(args) {
    var proposal = args["proposal"];
    var coverage = proposal.coverageInfo;
    var productId = _PV(coverage, 'product.productKey.primaryProduct.productPK.productId');
    var schema = coverage.schema.call("getSchema", null);
    var catalog = coverage.catalog.call("getCatalog", null);
    var faceAmount = _V(coverage.faceAmount, 0);

    var constantPaymentMode = "";
    var minError = "";
    var maxError = "";
    var issueAge = 0;
    var maxPP = 0;
    var minPP = 0;

    // UL007 base plan only
    var totalPremium = this.self.getTotalPremium(args);
    _DB("basePlan Premium", totalPremium, "TotalPremiumValidationRuleUL007->");

    var variables = {
        "%PRODUCT_ID%": productId
    };
    variables[PublicConstants.MESSAGE_FIELD.TOTAL_AMOUNT] = IFunction.appliedTo(FormatCurrency.create()).call('execute', {amount:totalPremium,cur:coverage.currency.currencyPK.currencyId});

    if (totalPremium <= 0) {
        return {
            // code: "ERR45104",
            code: "ERR04917",
            arguments: variables
        }
    }

    var factors = this.self.getMultiplier(args);
    if (factors.min == 0 && factors.max == 0) {
        _DB("", "Multiplier cannot be located. So, the checking on multiplier limits is skipped.", "");
    } else {
        if (faceAmount > 0) {
            var ppRange = this.self.getMultiplierLimits(args);
            _DB("ppRange", ppRange, "TotalPremiumValidationRuleUL007->");

            if (totalPremium < _R2(ppRange.minLimit) || totalPremium > _R2(ppRange.maxLimit)) {
                var variables = {};
                variables['%POLICY_YEAR%'] = "1";
                variables['%MIN_MULTIPIER%'] = IFunction.appliedTo(FormatNumber.create()).call('execute', {n:factors.min});
                variables['%MAX_MULTIPIER%'] = IFunction.appliedTo(FormatNumber.create()).call('execute', {n:factors.max});
                return {
                    code: 'ERR03081',
                    arguments: variables
                }
            }
        } else {
            _DB("", "face amount is zero. multiplier check will be skipped", "");
        }
    }

    return this.parent.validate(args);
},
    getMultiplier: function(args) {
    var proposal = args['proposal'];
    var coverage = proposal.coverageInfo;
    var insured = getPrimaryInsured({ coverage: coverage });

    _DB("insured", insured);
    if (Utils.isNothing(insured)) {
        return { };
    }

    var insuredAge = insured.insuredAge;
    var schema = coverage.schema.call("getSchema", null);
    var multiplierTable = Utils.iterator(schema.ProductSchema.FaceAmountMultiplier.MultiplierRecord);

    //_SS(multiplierTable, 10);

    var result;
    for (var i in multiplierTable) {
        var multiplier = multiplierTable[i];
        if (!Utils.isNothing(multiplier)) {
            var minAge = _V(multiplier.MinIssueAge);
            var maxAge = _V(multiplier.MaxIssueAge);
            var minFAMultiplier = _V(multiplier.MinFAMultiplier, 0);
            var maxFAMultiplier = _V(multiplier.MaxFAMultiplier, 0);

            _DB("minAge[" + i + "]", minAge);
            _DB("maxAge[" + i + "]", maxAge);
            _DB("minFAMultiplier[" + i + "]", minFAMultiplier);
            _DB("maxFAMultiplier[" + i + "]", maxFAMultiplier);

            if (minAge <= insuredAge && insuredAge <= maxAge) {
                _DB("","Multiplier is matched");
               result = { min: minFAMultiplier, max: maxFAMultiplier};
                break;
            }
        }
    }
    if (Utils.isNothing(result)) {
        _DB("", "@@@@@ Multiplier cannot be found");
        return {min: 0, max: 0};
    }
    return result;
},
    getMultiplierLimits: function(args) {
  var proposal = args['proposal'];
  var coverage = proposal.coverageInfo;
  var insured = getPrimaryInsured({
    coverage: coverage
  });

  _DB("insured", insured);
  if (Utils.isNothing(insured)) {
    return {};
  }

  var faceAmount = _V(coverage.faceAmount, 0);
  _DB("faceAmount", faceAmount);

  var multipliers = this.self.getMultiplier(args);
  var minFactor = (1000 / multipliers.max) + (coverage.extraRating.tempFlat + coverage.extraRating.flatExtra) / 0.4;
  var maxFactor = (1000 / multipliers.min) + (coverage.extraRating.tempFlat + coverage.extraRating.flatExtra) / 0.4;

  var maxPP = faceAmount / 1000 * maxFactor;
  var minPP = faceAmount / 1000 * minFactor;

  _DB("Min multiplier PP", minPP);
  _DB("Max multiplier PP", maxPP);
  
  return {
    minLimit: minPP,
    maxLimit: maxPP
  };
},
    getTotalPremium: function(args) {
    var proposal = args["proposal"];
    var coverage = proposal.coverageInfo;
    var pp = _V(coverage.plannedPremium, 0);
    var ppfreq = 1;
    if (!(Utils.isNothing(coverage.options)) && !(Utils.isNothing(coverage.options.paymentMode))) {
        if (coverage.options.paymentMode == SchemaConstants.PAYMENT_MODE.ANNUAL) {
            ppfreq = 1;
        } else if (coverage.options.paymentMode == SchemaConstants.PAYMENT_MODE.SEMIANNUAL) {
            ppfreq = 2;
        } else if (coverage.options.paymentMode == SchemaConstants.PAYMENT_MODE.QUARTERLY) {
            ppfreq = 4;
        } else if (coverage.options.paymentMode == SchemaConstants.PAYMENT_MODE.MONTHLY) {
            ppfreq = 12;
        }
    }
    return (ppfreq * pp);
}
});

var vr = Repository.getManager(SystemComponents.MANAGER.VALIDATOR);
if (!vr) {
   console.log(''); console.log('++++ Create new Validator for setting local rules into engine. ++++');
   vr = IValidator.implementBy(ValidatorImpl.create({productValidationMapping: mapping}));
   Repository.addManager(SystemComponents.MANAGER.VALIDATOR, vr);
}
console.log(''); console.log('++++ Loading validation rules now ... ++++');
vr.call('addValidationRule', {rule: BackdateValidationRuleLocal.create()});
vr.call('addValidationRule', {rule: BasePlanAndRidersCombinationValidationRule.create()});
vr.call('addValidationRule', {rule: CurrentDateEffectiveDateValidationRuleLocal.create()});
vr.call('addValidationRule', {rule: CvgClassCapValidationRuleRHCXOD.create()});
vr.call('addValidationRule', {rule: FaceAmountValidationRuleMCXXX.create()});
vr.call('addValidationRule', {rule: FundAllocationValidationRuleLocal.create()});
vr.call('addValidationRule', {rule: HealthCareRiderValidationRuleRHCXX.create()});
vr.call('addValidationRule', {rule: lapseValidationRuleLocal.create()});
vr.call('addValidationRule', {rule: MaxFamilyMembersValidationRuleMCXXX.create()});
vr.call('addValidationRule', {rule: MissingDOBValidationRuleLocal.create()});
vr.call('addValidationRule', {rule: MissingFAValidationRuleUL007.create()});
vr.call('addValidationRule', {rule: MissingInsuredNameValidationRuleLocal.create()});
vr.call('addValidationRule', {rule: MissingRelationToInsuredValidationRuleLocal.create()});
vr.call('addValidationRule', {rule: OneMonthYearOldValidationRuleLocal.create()});
vr.call('addValidationRule', {rule: PremReqByCvgClassValidationRuleRHCXI.create()});
vr.call('addValidationRule', {rule: PrimaryIssueAgeValidationRuleEDUXX.create()});
vr.call('addValidationRule', {rule: ProductEffectiveDateValidationRuleLocal.create()});
vr.call('addValidationRule', {rule: ProjErrorColsValidationRuleUVL.create()});
vr.call('addValidationRule', {rule: RegularPaymentValidationRuleUL007.create()});
vr.call('addValidationRule', {rule: RW_ExceptionValidationRuleLocal.create()});
vr.call('addValidationRule', {rule: RW_PlanPackageValidationRuleENXXX.create()});
vr.call('addValidationRule', {rule: SameAsInsuredValidationRuleLocal.create()});
vr.call('addValidationRule', {rule: SameAsSecondInsuredValidationRuleLocal.create()});
vr.call('addValidationRule', {rule: TAKEOUT_MissingPayorAgeValidationRuleLocal.create()});
vr.call('addValidationRule', {rule: TAKEOUT_OwnerAgeValidationRuleLocal.create()});
vr.call('addValidationRule', {rule: TestCustomFunction.create()});
vr.call('addValidationRule', {rule: ExcessiveWithdrawValidationRuleRUVXX.create()});
vr.call('addValidationRule', {rule: ExcessiveWithdrawValidationRuleUVL_UL007.create()});
vr.call('addValidationRule', {rule: FaceAmountChangeValidationRuleUVL_UL007.create()});
vr.call('addValidationRule', {rule: FaceAmountValidationRuleLocal.create()});
vr.call('addValidationRule', {rule: FaceAmountValidationRuleUL007.create()});
vr.call('addValidationRule', {rule: FundActivitiesValidationRuleRUVXX.create()});
vr.call('addValidationRule', {rule: FundActivitiesValidationRuleUL007.create()});
vr.call('addValidationRule', {rule: InsuredSexValidationRuleLocal.create()});
vr.call('addValidationRule', {rule: InsuredSmokingStatusValidationRuleLocal.create()});
vr.call('addValidationRule', {rule: IssueAgeValidationRuleLocal.create()});
vr.call('addValidationRule', {rule: IssueSecondAgeValidationRuleEDUXX.create()});
vr.call('addValidationRule', {rule: JuvenileRiderTypeValidationRuleLocal.create()});
vr.call('addValidationRule', {rule: lapseValidationRuleHighLocal.create()});
vr.call('addValidationRule', {rule: lapseValidationRuleLowLocal.create()});
vr.call('addValidationRule', {rule: OccupationClassValidationRuleLocal.create()});
vr.call('addValidationRule', {rule: OneMonthYearOldValidationRuleEDUXXLocal.create()});
vr.call('addValidationRule', {rule: OwnerIssueAgeValidationRuleEDUXX.create()});
vr.call('addValidationRule', {rule: PaymentModeValidationRuleLocal.create()});
vr.call('addValidationRule', {rule: PlanAvailabilityValidationRuleLocal.create()});
vr.call('addValidationRule', {rule: PremReqByCvgClassValidationRuleRHCXI2.create()});
vr.call('addValidationRule', {rule: TotalPremiumValidationRuleRUVXX.create()});
vr.call('addValidationRule', {rule: TotalPremiumValidationRuleUL007.create()});
console.log(''); console.log('++++ List rules installed ++++');
vr.call('showRuleNames', {});

    var BPM31 = Class.define({
            formulaName: function(args) {
    return "BPM31";
},
            productId: function(args) {
    var coverage = args["coverage"];
    //e.g. return "RE100";
    return null;
},
            methodId: function(args) {
    var coverage = args["coverage"];
    //e.g. return "BPM1";
    return "BPM31";
},
            productTypes: function(args) {
    var coverage = args["coverage"];
    //e.g. return [CatalogConstants.PRODUCT_TYPE.UVLIFE, CatalogConstants.PRODUCT_TYPE.SINGLE_PREMIUM];
    return null;
},
            rateList: function(args) {
    var coverage = args["coverage"];
    var ipo = args["ipo"];
    return [
        {rateName: "premiumRate", rateType: RateConstants.RATETYPE.BASICPREMIUM, unit: true, hasRate: true},
    ];
},
            modalRateList: function(args) {
    var coverage = args["coverage"];
    var ipo = args["ipo"];
    return [
        {rateName: "modalFactor", rateType: RateConstants.RATETYPE.MODALFACTOR, unit: false, hasRate: true}
    ];
},
            calculate: function(args) {
    var coverage = args["coverage"];
    var rates = args["rates"];
    var rounding = args["rounding"];
    var paymentMode = args["paymentMode"];

    var rateUnit = rates.rateUnit;
    var rate = rates.premiumRate;
    //var modalFactor = rates.modalFactor;

    var premium;    
    if (!(Utils.isNothing(coverage.options)) && !(Utils.isNothing(coverage.options.paymentMode))) {
        if (coverage.options.paymentMode == SchemaConstants.PAYMENT_MODE.ANNUAL) {
            if (paymentMode == SchemaConstants.PAYMENT_MODE.ANNUAL) {
                premium = coverage.plannedPremium;
            } else
            if (paymentMode == SchemaConstants.PAYMENT_MODE.SEMIANNUAL) {
                premium = coverage.plannedPremium / 2;
            } else
            if (paymentMode == SchemaConstants.PAYMENT_MODE.QUARTERLY) {
                premium = coverage.plannedPremium / 4;
            } else
            if (paymentMode == SchemaConstants.PAYMENT_MODE.MONTHLY) {
                premium = coverage.plannedPremium / 12;
            }
        } else if (coverage.options.paymentMode == SchemaConstants.PAYMENT_MODE.SEMIANNUAL) {
            if (paymentMode == SchemaConstants.PAYMENT_MODE.ANNUAL) {
                premium = coverage.plannedPremium * 2;
            } else
            if (paymentMode == SchemaConstants.PAYMENT_MODE.SEMIANNUAL) {
                premium = coverage.plannedPremium;
            } else
            if (paymentMode == SchemaConstants.PAYMENT_MODE.QUARTERLY) {
                premium = coverage.plannedPremium / 2;
            } else
            if (paymentMode == SchemaConstants.PAYMENT_MODE.MONTHLY) {
                premium = coverage.plannedPremium / 6;
            }
        } else if (coverage.options.paymentMode == SchemaConstants.PAYMENT_MODE.QUARTERLY) {
            if (paymentMode == SchemaConstants.PAYMENT_MODE.ANNUAL) {
                premium = coverage.plannedPremium * 4;
            } else
            if (paymentMode == SchemaConstants.PAYMENT_MODE.SEMIANNUAL) {
                premium = coverage.plannedPremium * 2;
            } else
            if (paymentMode == SchemaConstants.PAYMENT_MODE.QUARTERLY) {
                premium = coverage.plannedPremium;
            } else
            if (paymentMode == SchemaConstants.PAYMENT_MODE.MONTHLY) {
                premium = coverage.plannedPremium / 3;
            }
        } else if (coverage.options.paymentMode == SchemaConstants.PAYMENT_MODE.MONTHLY) {
            if (paymentMode == SchemaConstants.PAYMENT_MODE.ANNUAL) {
                premium = coverage.plannedPremium * 12;
            } else
            if (paymentMode == SchemaConstants.PAYMENT_MODE.SEMIANNUAL) {
                premium = coverage.plannedPremium * 6;
            } else
            if (paymentMode == SchemaConstants.PAYMENT_MODE.QUARTERLY) {
                premium = coverage.plannedPremium * 3;
            } else
            if (paymentMode == SchemaConstants.PAYMENT_MODE.MONTHLY) {
                premium = coverage.plannedPremium;
            }
        }
    }

    //_DB("calculate.paymentMode", paymentMode, "BPM31->");
    //_SS(rates, 10);    

    return premium;
},
            calculateExtraPremium: function(args) {
    var coverage = args["coverage"];
    var rates = args["rates"];
    var rounding = args["rounding"];
    var paymentMode = args["paymentMode"];

    return 0.0;
},
            calculateCompletePremiumRecords: function(args) {
    var coverage = args["coverage"];
    var paymentMode = args["paymentMode"];
    var premium = this.self.calculate(args);
    var regularPremium;
    if (!(Utils.isNothing(coverage.options)) && !(Utils.isNothing(coverage.options.paymentMode))) {
      if (coverage.options.paymentMode == SchemaConstants.PAYMENT_MODE.ANNUAL) {
        if (paymentMode == SchemaConstants.PAYMENT_MODE.ANNUAL) {
          regularPremium = coverage.regularPayment;
        } else
          if (paymentMode == SchemaConstants.PAYMENT_MODE.SEMIANNUAL) {
            regularPremium = coverage.regularPayment / 2;
          } else
            if (paymentMode == SchemaConstants.PAYMENT_MODE.QUARTERLY) {
              regularPremium = coverage.regularPayment / 4;
            } else
              if (paymentMode == SchemaConstants.PAYMENT_MODE.MONTHLY) {
                regularPremium = coverage.regularPayment / 12;
              }
      } else if (coverage.options.paymentMode == SchemaConstants.PAYMENT_MODE.SEMIANNUAL) {
        if (paymentMode == SchemaConstants.PAYMENT_MODE.ANNUAL) {
          regularPremium = coverage.regularPayment * 2;
        } else
          if (paymentMode == SchemaConstants.PAYMENT_MODE.SEMIANNUAL) {
            regularPremium = coverage.regularPayment;
          } else
            if (paymentMode == SchemaConstants.PAYMENT_MODE.QUARTERLY) {
              regularPremium = coverage.regularPayment / 2;
            } else
              if (paymentMode == SchemaConstants.PAYMENT_MODE.MONTHLY) {
                regularPremium = coverage.regularPayment / 6;
              }
      } else if (coverage.options.paymentMode == SchemaConstants.PAYMENT_MODE.QUARTERLY) {
        if (paymentMode == SchemaConstants.PAYMENT_MODE.ANNUAL) {
          regularPremium = coverage.regularPayment * 4;
        } else
          if (paymentMode == SchemaConstants.PAYMENT_MODE.SEMIANNUAL) {
            regularPremium = coverage.regularPayment * 2;
          } else
            if (paymentMode == SchemaConstants.PAYMENT_MODE.QUARTERLY) {
              regularPremium = coverage.regularPayment;
            } else
              if (paymentMode == SchemaConstants.PAYMENT_MODE.MONTHLY) {
                regularPremium = coverage.regularPayment / 3;
              }
      } else if (coverage.options.paymentMode == SchemaConstants.PAYMENT_MODE.MONTHLY) {
        if (paymentMode == SchemaConstants.PAYMENT_MODE.ANNUAL) {
          regularPremium = coverage.regularPayment * 12;
        } else
          if (paymentMode == SchemaConstants.PAYMENT_MODE.SEMIANNUAL) {
            regularPremium = coverage.regularPayment * 6;
          } else
            if (paymentMode == SchemaConstants.PAYMENT_MODE.QUARTERLY) {
              regularPremium = coverage.regularPayment * 3;
            } else
              if (paymentMode == SchemaConstants.PAYMENT_MODE.MONTHLY) {
                regularPremium = coverage.regularPayment;
              }
      }
    }

    var additionalPremium = regularPremium - premium;
    var extraPremium = this.self.calculateExtraPremium(args);
    var totalPremium = (premium + extraPremium);
    return { premium: premium, additionalPremium: additionalPremium, extraPremium: extraPremium, totalPremium: totalPremium };
}
    });
    var BPM32 = Class.define({
            formulaName: function(args) {
    return "BPM32";
},
            productId: function(args) {
    return null;
},
            methodId: function(args) {
    return "BPM32";
},
            productTypes: function(args) {
    //e.g. return [CatalogConstants.PRODUCT_TYPE.UVLIFE, CatalogConstants.PRODUCT_TYPE.SINGLE_PREMIUM];
    return null;
},
            rateList: function(args) {
    return [
        { rateName: "premiumRate", rateType: RateConstants.RATETYPE.BASICPREMIUM, unit: true, hasRate: true },
        { rateName: "premiumAllocation", rateType: RateConstants.RATETYPE.PREMIUM_ALLOCATION, unit: false, hasRate: true }
    ];
},
            modalRateList: function(args) {
    return [
        { rateName: "modalFactor", rateType: RateConstants.RATETYPE.MODALFACTOR, unit: false, hasRate: true }
    ];
},
            calculate: function(args) {
    var coverage = args["coverage"];
    var rates = args["rates"];
    var rounding = args["rounding"];
    var paymentMode = args["paymentMode"];
    
    // With version 06-Sep, we just need to round 0
    // var premium = _R2(coverage.faceAmount * rates.premiumRate / 1000 * rates.modalFactor);
    // if (!Utils.isNothing(coverage.isFAChange)) {
        premium = _R(coverage.faceAmount * rates.premiumRate / 1000 * rates.modalFactor, 0);
    // }
    
    return premium;
},
            calculateExtraPremium: function(args) {
    return 0.0;
}
    });
    var BPM41 = Class.define({
            formulaName: function(args) {
    // designed for rider premium of UL007 or other regular saving plans
    return "BPM41";
},
            productId: function(args) {
    var coverage = args["coverage"];
    //e.g. return "RE100";
    return null;
},
            methodId: function(args) {
    var coverage = args["coverage"];
    //e.g. return "BPM1";
    return "BPM41";
},
            productTypes: function(args) {
    var coverage = args["coverage"];
    //e.g. return [CatalogConstants.PRODUCT_TYPE.UVLIFE, CatalogConstants.PRODUCT_TYPE.SINGLE_PREMIUM];
    return null;
},
            rateList: function(args) {
    var coverage = args["coverage"];
    var ipo = args["ipo"];
    return [
       {rateName: "premiumRate", rateType: RateConstants.RATETYPE.BASICPREMIUM, unit: true, hasRate: true}
    ];
},
            modalRateList: function(args) {
    var coverage = args["coverage"];
    var ipo = args["ipo"];
    return [
       {rateName: "modalFactor", rateType: RateConstants.RATETYPE.MODALFACTOR, unit: false, hasRate: true}
    ];
},
            calculate: function(args) {
    var coverage = args["coverage"];
    var rates = args["rates"];
    var rounding = args["rounding"];
    var paymentMode = args["paymentMode"];

    //_SS(coverage, 10);
    //_SS(rates, 10)

    var premiumRate = rates.premiumRate;
    var modalFactor = rates.modalFactor;

    var modalRate = _R2(premiumRate * modalFactor);
    var premium = _R( coverage.faceAmount / 1000 * modalRate , 0);
    return premium;
},
            calculateExtraPremium: function(args) {
    var coverage = args["coverage"];
    var rates = args["rates"];
    var rounding = args["rounding"];
    var paymentMode = args["paymentMode"];

    var premiumRate = rates.premiumRate;
    var modalFactor = rates.modalFactor;
    var modalRate = _R13(premiumRate * modalFactor);

    var premium = 0;
    if (!Utils.isNothing(_PV( coverage, 'extraRating.percentageExtra' ))) {
         var ep = _R( coverage.faceAmount / 1000 * _R13( modalRate * (Number(coverage.extraRating.percentageExtra) - 1) ) , 0);
         _DB("percentage extra premium", ep, "BPM41");
         premium = premium + ep;
    }
    if (!Utils.isNothing(_PV( coverage, 'extraRating.flatExtra' ))) {
         var ep = _R( coverage.faceAmount / 1000 * Number(_PV( coverage, 'extraRating.flatExtra' ) ) , 0);
         _DB("flat extra premium", ep, "BPM41");
         premium = premium + ep;
    }
    if (!Utils.isNothing(_PV( coverage, 'extraRating.tempFlat' ))) {
         var ep = _R( coverage.faceAmount / 1000 * Number(_PV( coverage, 'extraRating.tempFlat' ) ) ,0);
         _DB("temp flat extra premium", ep, "BPM41");
          premium = premium + ep;
   }
   return premium;
}
    });
    var BPM42 = Class.define({
            formulaName: function(args) {
    // designed for rider premium of WOCXX (UL007) 
    return "BPM42";
},
            productId: function(args) {
    var coverage = args["coverage"];
    //e.g. return "RE100";
    return null;
},
            methodId: function(args) {
    var coverage = args["coverage"];
    return "BPM42";
},
            productTypes: function(args) {
    var coverage = args["coverage"];
    //e.g. return [CatalogConstants.PRODUCT_TYPE.UVLIFE, CatalogConstants.PRODUCT_TYPE.SINGLE_PREMIUM];
    return null;
},
            rateList: function(args) {
    var coverage = args["coverage"];
    var ipo = args["ipo"];
    return [
       {rateName: "premiumRate", rateType: RateConstants.RATETYPE.BASICPREMIUM, unit: true, hasRate: true},
       {rateName: "coiRate", rateType: RateConstants.RATETYPE.COI, unit: false, hasRate: true},
       {rateName: "wocFactorRate", rateType: RateConstants.RATETYPE.MINIMUMPREMIUM, unit: false, hasRate: true},
       {rateName: "wocPolicyFeeFactorRate", rateType: RateConstants.RATETYPE.MIN_PLANNED_PREMIUM, unit: false, hasRate: true}
    ];
},
            modalRateList: function(args) {
    var coverage = args["coverage"];
    var ipo = args["ipo"];
    return [
        {rateName: "modalFactor", rateType: RateConstants.RATETYPE.MODALFACTOR, unit: false, hasRate: true}
    ];
},
            calculate: function(args) {
    var coverage = args["coverage"];
    var proposal = coverage.proposal;
    var basePlan = proposal.coverageInfo;
    var extraRating = coverage.extraRating;
    var rates = args["rates"];
    var rounding = args["rounding"];
    var paymentMode = args["paymentMode"];
    var currentCors = 0;

    var targetPremiumRate = rates.premiumRate;
    var wocFactor = rates.wocFactorRate;
    var wocPolicyFeeFactor = rates.wocPolicyFeeFactorRate;
    var modalFactorForCoi = rates.modalFactor;

    var waiverTrendingFactor = -3.6/100;
    var policyFee = this.self.calculatePolicyFee({proposal: coverage.proposal});
    var yearOfPolicyFee = Math.max(Math.min(2033, proposal.policyYearDate.date().getFullYear()) - 2015, 0);
    var trendingFactor = Math.pow(1 + waiverTrendingFactor, yearOfPolicyFee);
    var wocPolicyFee = _R(_R(wocPolicyFeeFactor * trendingFactor, 1) * policyFee * 12, 3);

    var wocNaarBase = _R(wocFactor * Number(basePlan.faceAmount) / 1000,3);
    // 3. Premium for WOC (total premiums includes base premium excluding rider * 3)
    wocPremiums = (currentCors + Number(basePlan.plannedPremium)) * 3;
    totalWocFA = _R(wocNaarBase + wocPolicyFee + wocPremiums, 0);

    //_DB("yearOfPolicyFee", yearOfPolicyFee, "BPM42.");
    //_DB("targetPremiumRate", targetPremiumRate, "BPM42.");
    //_DB("wocFactor", wocFactor, "BPM42.");
    //_DB("wocPolicyFeeFactor", wocPolicyFeeFactor, "BPM42.");
    //_DB("extraRating", extraRating, "BPM42.");
    //_DB("currentCors", currentCors, "BPM42.");    
    //_DB("trendingFactor", trendingFactor, "BPM42.");
    //_DB("wocNaarBase", wocNaarBase, "BPM42.");
    //_DB("wocPolicyFee", wocPolicyFee, "BPM42.");
    //_DB("wocPremiums", wocPremiums, "BPM42.");
    //_DB("totalWocFA", totalWocFA, "BPM42.");

    targetPremium = this.self.calculateTargetPremium({targetPremiumRate: targetPremiumRate, modalFactorForCoi: modalFactorForCoi, totalWocFA: totalWocFA, percentRating: 1});
    //_DB("targetPremium", targetPremium, "BPM42.");    

    return targetPremium;
},
            calculateExtraPremium: function(args) {
    var coverage = args["coverage"];
    var proposal = coverage.proposal;
    var basePlan = proposal.coverageInfo;
    var extraRating = coverage.extraRating;
    var rates = args["rates"];
    var rounding = args["rounding"];
    var paymentMode = args["paymentMode"];
    var currentCors = 0;

    var targetPremiumRate = rates.premiumRate;
    var coiRate = rates.coiRate;
    var wocFactor = rates.wocFactorRate;
    var wocPolicyFeeFactor = rates.wocPolicyFeeFactorRate;
    var modalFactorForCoi = rates.modalFactor;

    var waiverTrendingFactor = -3.6/100;
    var policyFee = this.self.calculatePolicyFee({proposal: coverage.proposal});
    var yearOfPolicyFee = Math.max(Math.min(2033, proposal.policyYearDate.date().getFullYear()) - 2015, 0);
    var trendingFactor = Math.pow(1 + waiverTrendingFactor, yearOfPolicyFee);
    var wocPolicyFee = _R(_R(wocPolicyFeeFactor * trendingFactor, 1) * policyFee * 12, 3);

    var wocNaarBase = _R((wocFactor * (Number(extraRating.percentageExtra) - 1) + Number( _V( extraRating.flatExtra, 0) ) / 1000) * Number(basePlan.faceAmount) / 1000,3);
    // 3. Premium for WOC (total premiums includes base premium excluding rider * 3)
    wocPremiums = (currentCors + Number(basePlan.plannedPremium)) * 3;
    totalWocFA = _R(wocNaarBase + wocPolicyFee + wocPremiums, 0);

    targetPremium = this.self.calculateTargetPremium({targetPremiumRate: targetPremiumRate, modalFactorForCoi: modalFactorForCoi, totalWocFA: totalWocFA, percentRating: (Number(extraRating.percentageExtra)-1) });
    //_DB("extraPremium", targetPremium, "BPM42.");    

    return targetPremium;
},
            calculateTargetPremium: function(args) {
    var totalWocFA = args['totalWocFA'];
    var percentRating = args['percentRating'];
    var targetPremiumRate = args['targetPremiumRate'];
    var modalFactorForCoi = args['modalFactorForCoi'];

    var modalTargetPremiumRate = _R13(_R13( targetPremiumRate * modalFactorForCoi) * percentRating );
    //_DB("modalTargetPremiumRate", modalTargetPremiumRate, "BPM42.");

    var targetPremium = _R(totalWocFA * modalTargetPremiumRate / 1000, 0);
    return targetPremium;
},
            calculatePolicyFee: function(args) {
    var proposal = args['proposal'];
    var basePlan = proposal.coverageInfo;
    var year = 0;
    var months = 0;

    var issueDate = proposal.policyYearDate.date();

    var orgYear = 2016;
    var policyFee = 27;
    var currDate = issueDate;
    currDate.setMonth(issueDate.getMonth() + months);
    var currYear  = currDate.getFullYear();

    // since the rate is from 20160101 and the rate should be increased by $2 for each year after 2016 and cap at $60
    var fee = Math.min(60, policyFee + (currYear - orgYear) * 2);
    //_D("Policy Fee = Math.min(60, policyFee (" + policyFee +  ") + (currYear (" + currYear + ") - orgYear (" + orgYear + ")) * 2)", fee, "BPM42.");

    return fee;
}
    });
    var BPM43 = Class.define({
            formulaName: function(args) {
    return "BPM43";
},
            productId: function(args) {
    var coverage = args["coverage"];
    //e.g. return "RE100";
    return null;
},
            methodId: function(args) {
    var coverage = args["coverage"];
    //e.g. return "BPM1";
    return "BPM43";
},
            productTypes: function(args) {
    var coverage = args["coverage"];
    //e.g. return [CatalogConstants.PRODUCT_TYPE.UVLIFE, CatalogConstants.PRODUCT_TYPE.SINGLE_PREMIUM];
    return null;
},
            rateList: function(args) {
    var coverage = args["coverage"];
    var ipo = args["ipo"];
    return [
       {rateName: "premiumRate", rateType: RateConstants.RATETYPE.BASICPREMIUM, unit: true, hasRate: true}
    ];
},
            modalRateList: function(args) {
    var coverage = args["coverage"];
    var ipo = args["ipo"];
    return [
       {rateName: "modalFactor", rateType: RateConstants.RATETYPE.MODALFACTOR, unit: false, hasRate: true}
    ];
},
            calculate: function(args) {
    var coverage = args["coverage"];
    var rates = args["rates"];
    var rounding = args["rounding"];
    var paymentMode = args["paymentMode"];

    var premiumRate = rates.premiumRate;
    var modalFactor = rates.modalFactor;

    //_SS(rates, 10);
    
    var basePlan = coverage.proposal.coverageInfo;
    var catalogBasePlan = basePlan.catalog.implementation;
          
    if (!catalogBasePlan.isParticipate() ){
        var premium = _R( premiumRate * modalFactor , 2);
    }else{
        var premium = _R( premiumRate * modalFactor , 0);
    }
    
    return premium;
},
            calculateExtraPremium: function(args) {
    var coverage = args["coverage"];
    var rates = args["rates"];
    var rounding = args["rounding"];
    var paymentMode = args["paymentMode"];

    var premiumRate = rates.premiumRate;
    var modalFactor = rates.modalFactor;
    var modalRate = _R13(premiumRate * modalFactor);

    var premium = 0;
    if (!Utils.isNothing(_PV( coverage, 'extraRating.percentageExtra' ))) {
         var ep = _R( _R13( modalRate * (Number(coverage.extraRating.percentageExtra) - 1) ) , 0);
         premium = premium + ep;
    }
    if (!Utils.isNothing(_PV( coverage, 'extraRating.flatExtra' ))) {
         var ep = _R( Number(_PV( coverage, 'extraRating.flatExtra' ) ) , 0);
         premium = premium + ep;
    }
    if (!Utils.isNothing(_PV( coverage, 'extraRating.tempFlat' ))) {
         var ep = _R( Number(_PV( coverage, 'extraRating.tempFlat' ) ) ,0);
          premium = premium + ep;
   }
   return premium;
}
    });
    var BPM44 = Class.define({
            formulaName: function(args) {
    //formular name
    return "BPM44";
},
            productId: function(args) {
    //productid
    var coverage = args["coverage"];
    return null;
},
            methodId: function(args) {
    var coverage = args["coverage"];
    return this.self.formulaName(args);
},
            productTypes: function(args) {
    var coverage = args["coverage"];
    //e.g. return [CatalogConstants.PRODUCT_TYPE.UVLIFE, CatalogConstants.PRODUCT_TYPE.SINGLE_PREMIUM];
    return null;
},
            rateList: function(args) {
    var coverage = args["coverage"];
    var ipo = args["ipo"];
    return [
        {rateName: "premiumRate", rateType: RateConstants.RATETYPE.BASICPREMIUM, unit: true, hasRate: true},
    ];
},
            modalRateList: function(args) {
    var coverage = args["coverage"];
    var ipo = args["ipo"];
    return [
        {rateName: "modalFactor", rateType: RateConstants.RATETYPE.MODALFACTOR, unit: false, hasRate: true}
    ];
},
            calculate: function(args) {
    //can create a method calculateCompletePremiumRecords to return a record with all premium fields such as {premium:a, extraPremium:b, totalPremium:(a+b)}
    var coverage = args["coverage"];
    var proposal = coverage.proposal;
    var rates = args["rates"];
    var rounding = args["rounding"];
    var paymentMode = args["paymentMode"];

    //if (proposal.enableDebug) {
    //    _SS(proposal, 10);
    //}

    var premiumRate = this.self.getNetPremiumRate(args);
    var modalFactor = rates.modalFactor;

    var modalRate = _R2(premiumRate * modalFactor);
    var premium = _R( modalRate/1000 * coverage.faceAmount, 0);
    return premium;
},
            calculateExtraPremium: function(args) {
    var coverage = args["coverage"];
    var rates = args["rates"];
    var rounding = args["rounding"];
    var paymentMode = args["paymentMode"];
    var methodId = this.self.formulaName(args);

    var premiumRate = this.self.getNetPremiumRate(args);
    var modalFactor = rates.modalFactor;
    var modalRate = _R13(premiumRate * modalFactor);

    var premium = 0;
    if (!Utils.isNothing(_PV( coverage, 'extraRating.percentageExtra' ))) {
         var ep = _R( coverage.faceAmount / 1000 * _R13( modalRate * (Number(coverage.extraRating.percentageExtra) - 1) ) , 0);
         _DB("percentage extra premium", ep, methodId + "-->");
         premium = premium + ep;
    }
    if (!Utils.isNothing(_PV( coverage, 'extraRating.flatExtra' ))) {
         var ep = _R( coverage.faceAmount / 1000 * Number(_PV( coverage, 'extraRating.flatExtra' ) ) , 0);
         _DB("flat extra premium", ep, methodId + "-->");
         premium = premium + ep;
    }
    if (!Utils.isNothing(_PV( coverage, 'extraRating.tempFlat' ))) {
         var ep = _R( coverage.faceAmount / 1000 * Number(_PV( coverage, 'extraRating.tempFlat' ) ) ,0);
         _DB("temp flat extra premium", ep, methodId + "-->");
          premium = premium + ep;
   }
   return premium;
},
            getNetPremiumRate: function(args) {
    var coverage = args["coverage"];
    var proposal = coverage.proposal;
    var rates = args["rates"];
    
    var netRate = rates.premiumRate;
    var discountRate = 0;
    if (proposal.band == 3) {
        discountRate = 0.06;
    } else 
    if (proposal.band == 2) {
        discountRate = 0.03;
    }
    netRate = _R2(netRate * (1 - discountRate));
    return netRate;
},
            calculateCompletePremiumRecords: function(args) {
     _DB("@@@@@", "The method [calculateCompletePremiumRecords] is being called.", "BPM44->");
     var standardPremium = this.self.calculateStandardPremium(args);
     var premium = this.self.calculate(args);
     var extraPremium = this.self.calculateExtraPremium(args);
     var totalPremium = (premium + extraPremium);
     return { premium: premium, discount: (standardPremium - premium), extraPremium: extraPremium, totalPremium: totalPremium };
},
            calculateStandardPremium: function(args) {
    var coverage = args["coverage"];
    var proposal = coverage.proposal;
    var rounding = args["rounding"];
    var paymentMode = args["paymentMode"];

    var discountRate = this.self.getDiscountRate(args);
    var premiumAfterDiscount = this.self.calculate(args);

    var premium = _R( premiumAfterDiscount / discountRate, 0);

    return premium
},
            getDiscountRate: function(args) {
    var coverage = args["coverage"];
    var proposal = coverage.proposal;

    var discountRate = 1;
    if (proposal.band == 3) {
        discountRate = 1 - 0.06;
    } else
    if (proposal.band == 2) {
        discountRate = 1 - 0.03;
    }

    return discountRate;
}
    });
    var BPM45 = Class.define({
            formulaName: function(args) {
    return "BPM45";
},
            productId: function(args) {
    var coverage = args["coverage"];
    //e.g. return "RE100";
    return null;
},
            methodId: function(args) {
    var coverage = args["coverage"];
    //e.g. return "BPM1";
    return "BPM45";
},
            productTypes: function(args) {
    var coverage = args["coverage"];
    //e.g. return [CatalogConstants.PRODUCT_TYPE.UVLIFE, CatalogConstants.PRODUCT_TYPE.SINGLE_PREMIUM];
    return null;
},
            rateList: function(args) {
    var coverage = args["coverage"];
    var ipo = args["ipo"];
    return [
      {rateName: "premiumRate", rateType: RateConstants.RATETYPE.BASICPREMIUM, unit: true, hasRate: true}
    ];
},
            modalRateList: function(args) {
    var coverage = args["coverage"];
    var ipo = args["ipo"];
    return [
      {rateName: "modalFactor", rateType: RateConstants.RATETYPE.MODALFACTOR, unit: false, hasRate: true}
    ];
},
            calculate: function(args) {
    var coverage = args["coverage"];
    var rates = args["rates"];
    var rounding = args["rounding"];
    var paymentMode = args["paymentMode"];

    var premiumRate = rates.premiumRate;
    var modalFactor = rates.modalFactor;

    premium = _R13((premiumRate * modalFactor) / 1000 * coverage.faceAmount);

    return premium;
},
            calculateExtraPremium: function(args) {
    var coverage = args["coverage"];
    var rates = args["rates"];
    var rounding = args["rounding"];
    var paymentMode = args["paymentMode"];
    //var rateUnit = rates.rateUnit;
    //var rate = rates.premiumRate;
    //var modalFactor = rates.modalFactor;
    //e.g. return Number(coverage.initialDumpIn).toFixed(rounding);
    return 0.0;
}
    });
    var BPM46 = Class.define({
            formulaName: function(args) {
    return "BPM46";
},
            productId: function(args) {
    var coverage = args["coverage"];
    //e.g. return "RE100";
    return null;
},
            methodId: function(args) {
    var coverage = args["coverage"];
    //e.g. return "BPM1";
    return "BPM46";
},
            productTypes: function(args) {
    var coverage = args["coverage"];
    //e.g. return [CatalogConstants.PRODUCT_TYPE.UVLIFE, CatalogConstants.PRODUCT_TYPE.SINGLE_PREMIUM];
    return null;
},
            rateList: function(args) {
    var coverage = args["coverage"];
    var ipo = args["ipo"];
    return [
        {rateName: "premiumRate", rateType: RateConstants.RATETYPE.BASICPREMIUM, unit: true, hasRate: true}
    ];
},
            modalRateList: function(args) {
    var coverage = args["coverage"];
    var ipo = args["ipo"];
    return [
        {rateName: "modalFactor", rateType: RateConstants.RATETYPE.MODALFACTOR, unit: false, hasRate: true}
    ];
},
            calculate: function(args) {
    var coverage = args["coverage"];
    var rates = args["rates"];
    var rounding = args["rounding"];
    var paymentMode = args["paymentMode"];

    //_SS(coverage, 10);
    //_SS(rates, 10)

    var premiumRate = rates.premiumRate;
    var modalFactor = rates.modalFactor;

    var modalRate = _R13(premiumRate * modalFactor);
    var premium = _R( coverage.faceAmount / 1000 * modalRate , 0);
    return premium;
},
            calculateExtraPremium: function(args) {
    var coverage = args["coverage"];
    var rates = args["rates"];
    var rounding = args["rounding"];
    var paymentMode = args["paymentMode"];

    var premiumRate = rates.premiumRate;
    var modalFactor = rates.modalFactor;
    var modalRate = _R13(premiumRate * modalFactor);

    var premium = 0;
    if (!Utils.isNothing(_PV( coverage, 'extraRating.percentageExtra' ))) {
    var ep = _R( coverage.faceAmount / 1000 * _R13( modalRate * (Number(coverage.extraRating.percentageExtra) - 1) ) , 0);
    _DB("percentage extra premium", ep, "BPM46");
    premium = premium + ep;
    }
    if (!Utils.isNothing(_PV( coverage, 'extraRating.flatExtra' ))) {
        var ep = _R( coverage.faceAmount / 1000 * Number(_PV( coverage, 'extraRating.flatExtra' ) ) , 0);
        _DB("flat extra premium", ep, "BPM46");
        premium = premium + ep;
    }
    if (!Utils.isNothing(_PV( coverage, 'extraRating.tempFlat' ))) {
        var ep = _R( coverage.faceAmount / 1000 * Number(_PV( coverage, 'extraRating.tempFlat' ) ) ,0);
        _DB("temp flat extra premium", ep, "BPM46");
        premium = premium + ep;
    }
    return premium;
}
    });
    var BPM47 = Class.define({
            formulaName: function(args) {
    return "BPM47";
},
            productId: function(args) {
    var coverage = args["coverage"];
    //e.g. return "RE100";
    return null;
},
            methodId: function(args) {
     var coverage = args["coverage"];
     return this.self.formulaName(args);
},
            productTypes: function(args) {
    var coverage = args["coverage"];
    //e.g. return [CatalogConstants.PRODUCT_TYPE.UVLIFE, CatalogConstants.PRODUCT_TYPE.SINGLE_PREMIUM];
    return null;
},
            rateList: function(args) {
    var coverage = args["coverage"];
    var ipo = args["ipo"];
     return [
         {rateName: "premiumRate", rateType: RateConstants.RATETYPE.BASICPREMIUM, unit: true, hasRate: true},
     ];
},
            modalRateList: function(args) {
    var coverage = args["coverage"];
    return [
       {rateName: "modalFactor", rateType: RateConstants.RATETYPE.MODALFACTOR, unit: false, hasRate: true}
    ];
},
            calculate: function(args) {
    var coverage = args["coverage"];
    var rates = args["rates"];
    var rounding = args["rounding"];
    var paymentMode = args["paymentMode"];
    var modalFactor = rates.modalFactor;
    var secondInsuredRate = args["secondInsuredRate"];

    // Premium rate after discount
    var premiumRateAfDiscount = this.self.getPremiumRateAfDiscount({coverage: coverage, rates: secondInsuredRate});

    return premiumRateAfDiscount * modalFactor * coverage.faceAmount / 1000;
},
            calculateExtraPremium: function(args) {
    var coverage = args["coverage"];
    var rates = args["rates"];
    var rounding = args["rounding"];
    var paymentMode = args["paymentMode"];
    //var rateUnit = rates.rateUnit;
    //var rate = rates.premiumRate;
    //var modalFactor = rates.modalFactor;
    //e.g. return Number(coverage.initialDumpIn).toFixed(rounding);
    return 0.0;
},
            calculateCompletePremiumRecords: function(args) {
    var coverage = args["coverage"];

    // get second insured rates
    var funcManager = Repository.getManager(SystemComponents.MANAGER.FUNCTION_MANAGER);
    var secondInsuredRate = funcManager.call('execute', {
       function: 'GetSecondInsuredRates',
       args: {
          coverage: coverage,
          rateType: RateConstants.RATETYPE.BASICPREMIUM
       }
    });

    var rates = {};
    if (secondInsuredRate.rates)
      rates = secondInsuredRate.rates;
    args["secondInsuredRate"] = rates;

    var standardPremium = this.self.calculateStandardPremium(args);
    var premium = this.self.calculate(args);
    var extraPremium = this.self.calculateExtraPremium(args);
    var totalPremium = (premium + extraPremium);

    return { premium: premium, discount: (standardPremium - premium), extraPremium: extraPremium, totalPremium: totalPremium };
},
            calculateStandardPremium: function(args) {
  var coverage = args["coverage"];
  var rates = args["rates"];
  var rounding = args["rounding"];
  var paymentMode = args["paymentMode"];
  var modalFactor = rates.modalFactor;
  var secondInsuredRate = args["secondInsuredRate"];

  // Premium rate before discount
  var premiumRateBfDiscount = secondInsuredRate[0];

  return premiumRateBfDiscount * modalFactor * coverage.faceAmount / 1000;
},
            getPremiumRateAfDiscount: function(args) {
  var rates = args["rates"];
  var discount = this.self.getDiscountPercentage(args);
  return rates[0] * (1 - discount);
},
            getDiscountPercentage: function(args) {
    var coverage = args["coverage"];
    var proposal = coverage.proposal;

    var discountRate = 0;
    if (proposal.band == 4) {
        discountRate = 0.08;
    }
    else if (proposal.band == 3) {
        discountRate = 0.06;
    } else
    if (proposal.band == 2) {
        discountRate = 0.04;
    }
    return discountRate;
}
    });

var pc = Repository.getManager(SystemComponents.MANAGER.PREMIUM_CALCULATOR);
if (!pc) {
   console.log(''); console.log('++++ Create new Premium Calculator for setting local premium formula into engine. ++++');
   pc = IPremiumCalculator.implementBy(PremiumCalculatorImpl.create());
   Repository.addManager(SystemComponents.MANAGER.PREMIUM_CALCULATOR, pc);
}
console.log(''); console.log('++++ Loading premium formula now ... ++++');
pc.call('addMethod', {method : CommonBpm.create({formula: BPM31.create()})});
pc.call('addMethod', {method : CommonBpm.create({formula: BPM32.create()})});
pc.call('addMethod', {method : CommonBpm.create({formula: BPM41.create()})});
pc.call('addMethod', {method : CommonBpm.create({formula: BPM42.create()})});
pc.call('addMethod', {method : CommonBpm.create({formula: BPM43.create()})});
pc.call('addMethod', {method : CommonBpm.create({formula: BPM44.create()})});
pc.call('addMethod', {method : CommonBpm.create({formula: BPM45.create()})});
pc.call('addMethod', {method : CommonBpm.create({formula: BPM46.create()})});
pc.call('addMethod', {method : CommonBpm.create({formula: BPM47.create()})});
console.log(''); console.log('++++ List premium formula installed ++++');
pc.call('showFormulas', {});
var managers = {};

var messageManager = IMessageManager.implementBy(MessageManagerImpl.create({
   messages: messages
}));

//var validator = IValidator.implementBy(ValidatorImpl.create({
//   productValidationMapping: mapping
//}));

//var engine = new PE(IProductEngine.implementBy(ProductEngineImpl.create({
//   managers: {
//      MESSAGE_MANAGER: messageManager,
//      VALIDATOR: validator
//   }
//})));

console.log("");
console.log("++++ Preparing engine now ... ++++");
var validator = Repository.getManager(SystemComponents.MANAGER.VALIDATOR);
if (validator) {
    console.log("");
    console.log("++++ Validator is found! ++++");
} else {
    console.log("");
    console.log("++++ Validator is created with mapping! ++++");
    validator = IValidator.implementBy(ValidatorImpl.create({
        productValidationMapping: mapping
    }));
}
managers[SystemComponents.MANAGER.VALIDATOR] = validator;
managers[SystemComponents.MANAGER.MESSAGE_MANAGER] = messageManager;

var eventManager = Repository.getManager(SystemComponents.MANAGER.EVENTS_MANAGER);
if (eventManager) {
    console.log("");
    console.log("++++ EventManager is found! ++++");
    managers[SystemComponents.MANAGER.EVENTS_MANAGER] = eventManager;
}

var premiumCalculator = Repository.getManager(SystemComponents.MANAGER.PREMIUM_CALCULATOR);
if (premiumCalculator) {
    console.log("");
    console.log("++++ PremiumCalculator is found! ++++");
    managers[SystemComponents.MANAGER.PREMIUM_CALCULATOR] = premiumCalculator;
}

var functionManager = Repository.getManager(SystemComponents.MANAGER.FUNCTION_MANAGER);
if (functionManager) {
    console.log("");
    console.log("++++ FunctionManager is found! ++++");
    managers[SystemComponents.MANAGER.FUNCTION_MANAGER] = functionManager;
}

console.log("++++ Engine is being started ... ++++");

var engine = new PE(IProductEngine.implementBy(ProductEngineImpl.create({
   managers: managers
})));

//console.log("++++ Global logger is being created ... ++++");
//
//var LoggerHelper = new LoggerFactory( engine );

console.log("");
console.log("++++ Engine is ready for use now ... ++++");
console.log("");
console.log("");

